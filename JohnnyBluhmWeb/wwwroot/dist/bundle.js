(()=>{"use strict";var t=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))},e=function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(u){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}},n=function(){function n(){}return n.prototype.getPowerData=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllPowerStreams")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},n.prototype.getHeartRateData=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllHrStreams")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},n.prototype.getActivities=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllActivities")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},n.prototype.getDetailedActivities=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllDetailedActivities")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},n}();function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function o(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function i(t){o(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===r(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function a(t,e){o(2,arguments);var n=i(t),r=i(e);return n.getTime()>r.getTime()}function s(t,e){o(2,arguments);var n=i(t),r=i(e);return n.getTime()<r.getTime()}var u=function(){function t(){}return t.prototype.getTimeInZoneList=function(t){for(var e={1:0,2:0,3:0,4:0,5:0,6:0,7:0},n=0,r=t;n<r.length;n++){var o=r[n];for(var i in o.powerStream){var a=o.powerStream[i];e[this.getZone(i).toString()]+=Number.parseInt(a)}}return Object.values(e)},t.prototype.getZone=function(t){var e=Number.parseInt(t);return e<=132?1:e>132&&e<=180?2:e>180&&e<=216?3:e>216&&e<=252?4:e>252&&e<=288?5:e>288&&e<=360?6:e>=360?7:1},t.prototype.setPowerZones=function(t){this.powerZones[0]=.55*t,this.powerZones[1]=.75*t,this.powerZones[2]=.87*t,this.powerZones[3]=1.05*t,this.powerZones[4]=1.2*t,this.powerZones[5]=1.5*t,this.powerZones[6]=2*t},t}(),c=function(){function t(){}return t.prototype.getTimeInZoneList=function(t){for(var e={1:0,2:0,3:0,4:0,5:0},n=0,r=t;n<r.length;n++){var o=r[n];for(var i in o.hrStream){var a=o.hrStream[i];e[this.getZone(i).toString()]+=Number.parseInt(a)}}return Object.values(e)},t.prototype.getZone=function(t){var e=Number.parseInt(t);return e<=118?1:e>118&&e<=156?2:e>156&&e<=175?3:e>175&&e<=194?4:e>194?5:1},t.prototype.setHrZones=function(t){this.hrZones[0]=.5*t,this.hrZones[1]=.6*t,this.hrZones[2]=.7*t,this.hrZones[3]=.8*t,this.hrZones[4]=.9*t},t}(),l=function(){function t(t){this.allActivities=t,this.filteredActivities=t}return t.prototype.filterByDate=function(t,e){this.filteredActivities=[];for(var n=0,r=this.allActivities;n<r.length;n++){var o=r[n],i=Date.parse(o.start_date_local);a(i,t)&&s(i,e)&&this.filteredActivities.push(o)}this.setTimeInZoneLists()},t.prototype.setTimeInZoneLists=function(){this.powerTimeInZone=(new u).getTimeInZoneList(this.filteredActivities),this.hrTimeInZone=(new c).getTimeInZoneList(this.filteredActivities)},t}();function f(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function h(t,e){return o(2,arguments),function(t,e){o(2,arguments);var n=i(t),r=f(e);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}(t,-f(e))}function p(t,e){return o(2,arguments),function(t,e){return o(2,arguments),function(t,e){o(2,arguments);var n=i(t),r=f(e);if(isNaN(r))return new Date(NaN);if(!r)return n;var a=n.getDate(),s=new Date(n.getTime());return s.setMonth(n.getMonth()+r+1,0),a>=s.getDate()?s:(n.setFullYear(s.getFullYear(),s.getMonth(),a),n)}(t,12*f(e))}(t,-f(e))}var v=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))},g=function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(u){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}};function y(){return v(this,void 0,void 0,(function(){var t,e,r,o,i,a,s,u,c,f;return g(this,(function(v){switch(v.label){case 0:return document.getElementById("convertPower"),document.getElementById("convertHr"),[4,(t=new n).getPowerData()];case 1:return e=v.sent(),[4,t.getHeartRateData()];case 2:return r=v.sent(),[4,t.getActivities()];case 3:return o=v.sent(),[4,t.getDetailedActivities()];case 4:return i=v.sent(),console.log(o),console.log(i),console.log(r),console.log(e),function(t,e,n){for(var r=function(n){var r=e.find((function(t){return t.id==n.id})),o=t.find((function(t){return t.id==n.id}));n.powerStream=null==o?void 0:o.powerDict,n.hrStream=null==r?void 0:r.heartRateDict},o=0,i=n;o<i.length;o++)r(i[o])}(e,r,o),function(t,e){for(var n=function(t){var n=e.find((function(e){return e.id==t.id}));t.details=n},r=0,o=t;r<o.length;r++)n(o[r])}(o,i),console.log(o),(a=new l(o)).setTimeInZoneLists(),a.filterByDate(h(new Date,30),new Date),s=a.hrTimeInZone,console.log("After 30 days filter"),console.log(s),a.filterByDate(h(new Date,90),new Date),u=a.hrTimeInZone,console.log("After 90 days filter"),console.log(u),a.filterByDate(p(new Date,1),new Date),c=a.hrTimeInZone,console.log("After 1 year filter"),console.log(c),a.filterByDate(p(new Date,5),new Date),f=a.hrTimeInZone,console.log("All time"),console.log(f),[2]}}))}))}v(void 0,void 0,void 0,(function(){var t;return g(this,(function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,y()];case 1:return e.sent(),[3,3];case 2:return t=e.sent(),console.error(t),[3,3];case 3:return[2]}}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,