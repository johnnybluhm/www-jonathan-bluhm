/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t=function(t,e,i,s){return new(i||(i=Promise))((function(n,o){function a(t){try{l(s.next(t))}catch(t){o(t)}}function r(t){try{l(s.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,r)}l((s=s.apply(t,e||[])).next())}))},e=function(t,e){var i,s,n,o,a={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function r(r){return function(l){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,r[0]&&(a=0)),a;)try{if(i=1,s&&(n=2&r[0]?s.return:r[0]?s.throw||((n=s.return)&&n.call(s),0):s.next)&&!(n=n.call(s,r[1])).done)return n;switch(s=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,s=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((n=(n=a.trys).length>0&&n[n.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){a.label=r[1];break}if(6===r[0]&&a.label<n[1]){a.label=n[1],n=r;break}if(n&&a.label<n[2]){a.label=n[2],a.ops.push(r);break}n[2]&&a.ops.pop(),a.trys.pop();continue}r=e.call(t,a)}catch(t){r=[6,t],s=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,l])}}},i=function(){function i(){}return i.prototype.getPowerData=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllPowerStreams")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},i.prototype.getHeartRateData=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllHrStreams")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},i.prototype.getActivities=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllActivities")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},i.prototype.getDetailedActivities=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllDetailedActivities")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},i}();function s(t){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s(t)}function n(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function o(t){n(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===s(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function a(t,e){n(2,arguments);var i=o(t),s=o(e);return i.getTime()>s.getTime()}function r(t,e){n(2,arguments);var i=o(t),s=o(e);return i.getTime()<s.getTime()}var l=function(){function t(){}return t.prototype.getTimeInZoneList=function(t){for(var e={1:0,2:0,3:0,4:0,5:0,6:0,7:0},i=0,s=t;i<s.length;i++){var n=s[i];for(var o in n.powerStream){var a=n.powerStream[o];e[this.getZone(o).toString()]+=Number.parseInt(a)}}return Object.values(e)},t.prototype.getZone=function(t){var e=Number.parseInt(t);return e<=132?1:e>132&&e<=180?2:e>180&&e<=216?3:e>216&&e<=252?4:e>252&&e<=288?5:e>288&&e<=360?6:e>=360?7:1},t.prototype.setPowerZones=function(t){this.powerZones[0]=.55*t,this.powerZones[1]=.75*t,this.powerZones[2]=.87*t,this.powerZones[3]=1.05*t,this.powerZones[4]=1.2*t,this.powerZones[5]=1.5*t,this.powerZones[6]=2*t},t}(),h=function(){function t(){}return t.prototype.getTimeInZoneList=function(t){for(var e={1:0,2:0,3:0,4:0,5:0},i=0,s=t;i<s.length;i++){var n=s[i];for(var o in n.hrStream){var a=n.hrStream[o];e[this.getZone(o).toString()]+=Number.parseInt(a)}}return Object.values(e)},t.prototype.getZone=function(t){var e=Number.parseInt(t);return e<=118?1:e>118&&e<=156?2:e>156&&e<=175?3:e>175&&e<=194?4:e>194?5:1},t.prototype.setHrZones=function(t){this.hrZones[0]=.5*t,this.hrZones[1]=.6*t,this.hrZones[2]=.7*t,this.hrZones[3]=.8*t,this.hrZones[4]=.9*t},t}(),c=function(){function t(t){this.allActivities=t,this.filteredActivities=t}return t.prototype.filterByDate=function(t,e){this.filteredActivities=[];for(var i=0,s=this.allActivities;i<s.length;i++){var n=s[i],o=Date.parse(n.start_date_local);a(o,t)&&r(o,e)&&this.filteredActivities.push(n)}},t.prototype.setTimeInZoneLists=function(){this.powerTimeInZone=(new l).getTimeInZoneList(this.filteredActivities),this.hrTimeInZone=(new h).getTimeInZoneList(this.filteredActivities)},t.prototype.setCaloriesBurned=function(){this.caloriesBurnedInTimePeriod=0;for(var t=0,e=this.filteredActivities;t<e.length;t++){var i=e[t];this.caloriesBurnedInTimePeriod+=i.details.calories}},t}();function d(t){return t+.5|0}const u=(t,e,i)=>Math.max(Math.min(t,i),e);function f(t){return u(d(2.55*t),0,255)}function g(t){return u(d(255*t),0,255)}function p(t){return u(d(t/2.55)/100,0,1)}function m(t){return u(d(100*t),0,100)}const b={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},x=[..."0123456789ABCDEF"],_=t=>x[15&t],y=t=>x[(240&t)>>4]+x[15&t],v=t=>(240&t)>>4==(15&t);const w=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function M(t,e,i){const s=e*Math.min(i,1-i),n=(e,n=(e+t/30)%12)=>i-s*Math.max(Math.min(n-3,9-n,1),-1);return[n(0),n(8),n(4)]}function k(t,e,i){const s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}function S(t,e,i){const s=M(t,1,.5);let n;for(e+i>1&&(n=1/(e+i),e*=n,i*=n),n=0;n<3;n++)s[n]*=1-e-i,s[n]+=e;return s}function P(t){const e=t.r/255,i=t.g/255,s=t.b/255,n=Math.max(e,i,s),o=Math.min(e,i,s),a=(n+o)/2;let r,l,h;return n!==o&&(h=n-o,l=a>.5?h/(2-n-o):h/(n+o),r=function(t,e,i,s,n){return t===n?(e-i)/s+(e<i?6:0):e===n?(i-t)/s+2:(t-e)/s+4}(e,i,s,h,n),r=60*r+.5),[0|r,l||0,a]}function D(t,e,i,s){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,s)).map(g)}function O(t,e,i){return D(M,t,e,i)}function C(t){return(t%360+360)%360}const A={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},T={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let L;const E=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,I=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,R=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function z(t,e,i){if(t){let s=P(t);s[e]=Math.max(0,Math.min(s[e]+s[e]*i,0===e?360:1)),s=O(s),t.r=s[0],t.g=s[1],t.b=s[2]}}function F(t,e){return t?Object.assign(e||{},t):t}function V(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=g(t[3]))):(e=F(t,{r:0,g:0,b:0,a:1})).a=g(e.a),e}function B(t){return"r"===t.charAt(0)?function(t){const e=E.exec(t);let i,s,n,o=255;if(e){if(e[7]!==i){const t=+e[7];o=e[8]?f(t):u(255*t,0,255)}return i=+e[1],s=+e[3],n=+e[5],i=255&(e[2]?f(i):u(i,0,255)),s=255&(e[4]?f(s):u(s,0,255)),n=255&(e[6]?f(n):u(n,0,255)),{r:i,g:s,b:n,a:o}}}(t):function(t){const e=w.exec(t);let i,s=255;if(!e)return;e[5]!==i&&(s=e[6]?f(+e[5]):g(+e[5]));const n=C(+e[2]),o=+e[3]/100,a=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return D(S,t,e,i)}(n,o,a):"hsv"===e[1]?function(t,e,i){return D(k,t,e,i)}(n,o,a):O(n,o,a),{r:i[0],g:i[1],b:i[2],a:s}}(t)}class N{constructor(t){if(t instanceof N)return t;const e=typeof t;let i;var s,n,o;"object"===e?i=V(t):"string"===e&&(o=(s=t).length,"#"===s[0]&&(4===o||5===o?n={r:255&17*b[s[1]],g:255&17*b[s[2]],b:255&17*b[s[3]],a:5===o?17*b[s[4]]:255}:7!==o&&9!==o||(n={r:b[s[1]]<<4|b[s[2]],g:b[s[3]]<<4|b[s[4]],b:b[s[5]]<<4|b[s[6]],a:9===o?b[s[7]]<<4|b[s[8]]:255})),i=n||function(t){L||(L=function(){const t={},e=Object.keys(T),i=Object.keys(A);let s,n,o,a,r;for(s=0;s<e.length;s++){for(a=r=e[s],n=0;n<i.length;n++)o=i[n],r=r.replace(o,A[o]);o=parseInt(T[a],16),t[r]=[o>>16&255,o>>8&255,255&o]}return t}(),L.transparent=[0,0,0,0]);const e=L[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||B(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=F(this._rgb);return t&&(t.a=p(t.a)),t}set rgb(t){this._rgb=V(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${p(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>v(t.r)&&v(t.g)&&v(t.b)&&v(t.a))(t)?_:y,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=P(t),i=e[0],s=m(e[1]),n=m(e[2]);return t.a<255?`hsla(${i}, ${s}%, ${n}%, ${p(t.a)})`:`hsl(${i}, ${s}%, ${n}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,s=t.rgb;let n;const o=e===n?.5:e,a=2*o-1,r=i.a-s.a,l=((a*r==-1?a:(a+r)/(1+a*r))+1)/2;n=1-l,i.r=255&l*i.r+n*s.r+.5,i.g=255&l*i.g+n*s.g+.5,i.b=255&l*i.b+n*s.b+.5,i.a=o*i.a+(1-o)*s.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const s=R(p(t.r)),n=R(p(t.g)),o=R(p(t.b));return{r:g(I(s+i*(R(p(e.r))-s))),g:g(I(n+i*(R(p(e.g))-n))),b:g(I(o+i*(R(p(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new N(this.rgb)}alpha(t){return this._rgb.a=g(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=d(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return z(this._rgb,2,t),this}darken(t){return z(this._rgb,2,-t),this}saturate(t){return z(this._rgb,1,t),this}desaturate(t){return z(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=P(t);i[0]=C(i[0]+e),i=O(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function W(){}const H=(()=>{let t=0;return()=>t++})();function j(t){return null==t}function $(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function Y(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function U(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function Z(t,e){return U(t)?t:e}function X(t,e){return void 0===t?e:t}const q=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function K(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function G(t,e,i,s){let n,o,a;if($(t))if(o=t.length,s)for(n=o-1;n>=0;n--)e.call(i,t[n],n);else for(n=0;n<o;n++)e.call(i,t[n],n);else if(Y(t))for(a=Object.keys(t),o=a.length,n=0;n<o;n++)e.call(i,t[a[n]],a[n])}function J(t,e){let i,s,n,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,s=t.length;i<s;++i)if(n=t[i],o=e[i],n.datasetIndex!==o.datasetIndex||n.index!==o.index)return!1;return!0}function Q(t){if($(t))return t.map(Q);if(Y(t)){const e=Object.create(null),i=Object.keys(t),s=i.length;let n=0;for(;n<s;++n)e[i[n]]=Q(t[i[n]]);return e}return t}function tt(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function et(t,e,i,s){if(!tt(t))return;const n=e[t],o=i[t];Y(n)&&Y(o)?it(n,o,s):e[t]=Q(o)}function it(t,e,i){const s=$(e)?e:[e],n=s.length;if(!Y(t))return t;const o=(i=i||{}).merger||et;let a;for(let e=0;e<n;++e){if(a=s[e],!Y(a))continue;const n=Object.keys(a);for(let e=0,s=n.length;e<s;++e)o(n[e],t,a,i)}return t}function st(t,e){return it(t,e,{merger:nt})}function nt(t,e,i){if(!tt(t))return;const s=e[t],n=i[t];Y(s)&&Y(n)?st(s,n):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=Q(n))}const ot={"":t=>t,x:t=>t.x,y:t=>t.y};function at(t,e){const i=ot[e]||(ot[e]=function(t){const e=function(t){const e=t.split("."),i=[];let s="";for(const t of e)s+=t,s.endsWith("\\")?s=s.slice(0,-1)+".":(i.push(s),s="");return i}(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function rt(t){return t.charAt(0).toUpperCase()+t.slice(1)}const lt=t=>void 0!==t,ht=t=>"function"==typeof t,ct=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},dt=Math.PI,ut=2*dt,ft=ut+dt,gt=Number.POSITIVE_INFINITY,pt=dt/180,mt=dt/2,bt=dt/4,xt=2*dt/3,_t=Math.log10,yt=Math.sign;function vt(t,e,i){return Math.abs(t-e)<i}function wt(t){const e=Math.round(t);t=vt(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(_t(t))),s=t/i;return(s<=1?1:s<=2?2:s<=5?5:10)*i}function Mt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function kt(t,e,i){let s,n,o;for(s=0,n=t.length;s<n;s++)o=t[s][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function St(t){return t*(dt/180)}function Pt(t){return t*(180/dt)}function Dt(t){if(!U(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function Ot(t,e){const i=e.x-t.x,s=e.y-t.y,n=Math.sqrt(i*i+s*s);let o=Math.atan2(s,i);return o<-.5*dt&&(o+=ut),{angle:o,distance:n}}function Ct(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function At(t,e){return(t-e+ft)%ut-dt}function Tt(t){return(t%ut+ut)%ut}function Lt(t,e,i,s){const n=Tt(t),o=Tt(e),a=Tt(i),r=Tt(o-n),l=Tt(a-n),h=Tt(n-o),c=Tt(n-a);return n===o||n===a||s&&o===a||r>l&&h<c}function Et(t,e,i){return Math.max(e,Math.min(i,t))}function It(t,e,i,s=1e-6){return t>=Math.min(e,i)-s&&t<=Math.max(e,i)+s}function Rt(t,e,i){i=i||(i=>t[i]<e);let s,n=t.length-1,o=0;for(;n-o>1;)s=o+n>>1,i(s)?o=s:n=s;return{lo:o,hi:n}}const zt=(t,e,i,s)=>Rt(t,i,s?s=>{const n=t[s][e];return n<i||n===i&&t[s+1][e]===i}:s=>t[s][e]<i),Ft=(t,e,i)=>Rt(t,i,(s=>t[s][e]>=i)),Vt=["push","pop","shift","splice","unshift"];function Bt(t,e){const i=t._chartjs;if(!i)return;const s=i.listeners,n=s.indexOf(e);-1!==n&&s.splice(n,1),s.length>0||(Vt.forEach((e=>{delete t[e]})),delete t._chartjs)}function Nt(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}const Wt="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function Ht(t,e){let i=[],s=!1;return function(...n){i=n,s||(s=!0,Wt.call(window,(()=>{s=!1,t.apply(e,i)})))}}const jt=t=>"start"===t?"left":"end"===t?"right":"center",$t=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function Yt(t,e,i){const s=e.length;let n=0,o=s;if(t._sorted){const{iScale:a,_parsed:r}=t,l=a.axis,{min:h,max:c,minDefined:d,maxDefined:u}=a.getUserBounds();d&&(n=Et(Math.min(zt(r,a.axis,h).lo,i?s:zt(e,l,a.getPixelForValue(h)).lo),0,s-1)),o=u?Et(Math.max(zt(r,a.axis,c,!0).hi+1,i?0:zt(e,l,a.getPixelForValue(c),!0).hi+1),n,s)-n:s-n}return{start:n,count:o}}function Ut(t){const{xScale:e,yScale:i,_scaleRanges:s}=t,n={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!s)return t._scaleRanges=n,!0;const o=s.xmin!==e.min||s.xmax!==e.max||s.ymin!==i.min||s.ymax!==i.max;return Object.assign(s,n),o}const Zt=t=>0===t||1===t,Xt=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*ut/i),qt=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*ut/i)+1,Kt={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*mt),easeOutSine:t=>Math.sin(t*mt),easeInOutSine:t=>-.5*(Math.cos(dt*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>Zt(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>Zt(t)?t:Xt(t,.075,.3),easeOutElastic:t=>Zt(t)?t:qt(t,.075,.3),easeInOutElastic(t){const e=.1125;return Zt(t)?t:t<.5?.5*Xt(2*t,e,.45):.5+.5*qt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-Kt.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*Kt.easeInBounce(2*t):.5*Kt.easeOutBounce(2*t-1)+.5};function Gt(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Jt(t){return Gt(t)?t:new N(t)}function Qt(t){return Gt(t)?t:new N(t).saturate(.5).darken(.1).hexString()}const te=["x","y","borderWidth","radius","tension"],ee=["color","borderColor","backgroundColor"],ie=new Map;function se(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let s=ie.get(i);return s||(s=new Intl.NumberFormat(t,e),ie.set(i,s)),s}(e,i).format(t)}const ne={values:t=>$(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const s=this.chart.options.locale;let n,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(n="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const a=_t(Math.abs(o)),r=isNaN(a)?1:Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:n,minimumFractionDigits:r,maximumFractionDigits:r};return Object.assign(l,this.options.ticks.format),se(t,s,l)},logarithmic(t,e,i){if(0===t)return"0";const s=i[e].significand||t/Math.pow(10,Math.floor(_t(t)));return[1,2,3,5,10,15].includes(s)||e>.8*i.length?ne.numeric.call(this,t,e,i):""}};var oe={formatters:ne};const ae=Object.create(null),re=Object.create(null);function le(t,e){if(!e)return t;const i=e.split(".");for(let e=0,s=i.length;e<s;++e){const s=i[e];t=t[s]||(t[s]=Object.create(null))}return t}function he(t,e,i){return"string"==typeof e?it(le(t,e),i):it(le(t,""),e)}class ce{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Qt(e.backgroundColor),this.hoverBorderColor=(t,e)=>Qt(e.borderColor),this.hoverColor=(t,e)=>Qt(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return he(this,t,e)}get(t){return le(this,t)}describe(t,e){return he(re,t,e)}override(t,e){return he(ae,t,e)}route(t,e,i,s){const n=le(this,t),o=le(this,i),a="_"+e;Object.defineProperties(n,{[a]:{value:n[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[s];return Y(t)?Object.assign({},e,t):X(t,e)},set(t){this[a]=t}}})}apply(t){t.forEach((t=>t(this)))}}var de=new ce({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:ee},numbers:{type:"number",properties:te}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:oe.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function ue(t,e,i,s,n){let o=e[n];return o||(o=e[n]=t.measureText(n).width,i.push(n)),o>s&&(s=o),s}function fe(t,e,i,s){let n=(s=s||{}).data=s.data||{},o=s.garbageCollect=s.garbageCollect||[];s.font!==e&&(n=s.data={},o=s.garbageCollect=[],s.font=e),t.save(),t.font=e;let a=0;const r=i.length;let l,h,c,d,u;for(l=0;l<r;l++)if(d=i[l],null==d||$(d)){if($(d))for(h=0,c=d.length;h<c;h++)u=d[h],null==u||$(u)||(a=ue(t,n,o,a,u))}else a=ue(t,n,o,a,d);t.restore();const f=o.length/2;if(f>i.length){for(l=0;l<f;l++)delete n[o[l]];o.splice(0,f)}return a}function ge(t,e,i){const s=t.currentDevicePixelRatio,n=0!==i?Math.max(i/2,.5):0;return Math.round((e-n)*s)/s+n}function pe(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function me(t,e,i,s){be(t,e,i,s,null)}function be(t,e,i,s,n){let o,a,r,l,h,c,d,u;const f=e.pointStyle,g=e.rotation,p=e.radius;let m=(g||0)*pt;if(f&&"object"==typeof f&&(o=f.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,s),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(p)||p<=0)){switch(t.beginPath(),f){default:n?t.ellipse(i,s,n/2,p,0,0,ut):t.arc(i,s,p,0,ut),t.closePath();break;case"triangle":c=n?n/2:p,t.moveTo(i+Math.sin(m)*c,s-Math.cos(m)*p),m+=xt,t.lineTo(i+Math.sin(m)*c,s-Math.cos(m)*p),m+=xt,t.lineTo(i+Math.sin(m)*c,s-Math.cos(m)*p),t.closePath();break;case"rectRounded":h=.516*p,l=p-h,a=Math.cos(m+bt)*l,d=Math.cos(m+bt)*(n?n/2-h:l),r=Math.sin(m+bt)*l,u=Math.sin(m+bt)*(n?n/2-h:l),t.arc(i-d,s-r,h,m-dt,m-mt),t.arc(i+u,s-a,h,m-mt,m),t.arc(i+d,s+r,h,m,m+mt),t.arc(i-u,s+a,h,m+mt,m+dt),t.closePath();break;case"rect":if(!g){l=Math.SQRT1_2*p,c=n?n/2:l,t.rect(i-c,s-l,2*c,2*l);break}m+=bt;case"rectRot":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+u,s-a),t.lineTo(i+d,s+r),t.lineTo(i-u,s+a),t.closePath();break;case"crossRot":m+=bt;case"cross":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"star":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a),m+=bt,d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"line":a=n?n/2:Math.cos(m)*p,r=Math.sin(m)*p,t.moveTo(i-a,s-r),t.lineTo(i+a,s+r);break;case"dash":t.moveTo(i,s),t.lineTo(i+Math.cos(m)*(n?n/2:p),s+Math.sin(m)*p);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function xe(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function _e(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function ye(t){t.restore()}function ve(t,e,i,s,n){if(!e)return t.lineTo(i.x,i.y);if("middle"===n){const s=(e.x+i.x)/2;t.lineTo(s,e.y),t.lineTo(s,i.y)}else"after"===n!=!!s?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function we(t,e,i,s){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(s?e.cp1x:e.cp2x,s?e.cp1y:e.cp2y,s?i.cp2x:i.cp1x,s?i.cp2y:i.cp1y,i.x,i.y)}function Me(t,e,i,s,n){if(n.strikethrough||n.underline){const o=t.measureText(s),a=e-o.actualBoundingBoxLeft,r=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,h=i+o.actualBoundingBoxDescent,c=n.strikethrough?(l+h)/2:h;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=n.decorationWidth||2,t.moveTo(a,c),t.lineTo(r,c),t.stroke()}}function ke(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function Se(t,e,i,s,n,o={}){const a=$(e)?e:[e],r=o.strokeWidth>0&&""!==o.strokeColor;let l,h;for(t.save(),t.font=n.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),j(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<a.length;++l)h=a[l],o.backdrop&&ke(t,o.backdrop),r&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),j(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(h,i,s,o.maxWidth)),t.fillText(h,i,s,o.maxWidth),Me(t,i,s,h,o),s+=Number(n.lineHeight);t.restore()}function Pe(t,e){const{x:i,y:s,w:n,h:o,radius:a}=e;t.arc(i+a.topLeft,s+a.topLeft,a.topLeft,-mt,dt,!0),t.lineTo(i,s+o-a.bottomLeft),t.arc(i+a.bottomLeft,s+o-a.bottomLeft,a.bottomLeft,dt,mt,!0),t.lineTo(i+n-a.bottomRight,s+o),t.arc(i+n-a.bottomRight,s+o-a.bottomRight,a.bottomRight,mt,0,!0),t.lineTo(i+n,s+a.topRight),t.arc(i+n-a.topRight,s+a.topRight,a.topRight,0,-mt,!0),t.lineTo(i+a.topLeft,s)}const De=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,Oe=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function Ce(t,e){const i=(""+t).match(De);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const Ae=t=>+t||0;function Te(t,e){const i={},s=Y(e),n=s?Object.keys(e):e,o=Y(t)?s?i=>X(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of n)i[t]=Ae(o(t));return i}function Le(t){return Te(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Ee(t){return Te(t,["topLeft","topRight","bottomLeft","bottomRight"])}function Ie(t){const e=Le(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function Re(t,e){t=t||{},e=e||de.font;let i=X(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let s=X(t.style,e.style);s&&!(""+s).match(Oe)&&(console.warn('Invalid font style specified: "'+s+'"'),s=void 0);const n={family:X(t.family,e.family),lineHeight:Ce(X(t.lineHeight,e.lineHeight),i),size:i,style:s,weight:X(t.weight,e.weight),string:""};return n.string=function(t){return!t||j(t.size)||j(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(n),n}function ze(t,e,i,s){let n,o,a,r=!0;for(n=0,o=t.length;n<o;++n)if(a=t[n],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),r=!1),void 0!==i&&$(a)&&(a=a[i%a.length],r=!1),void 0!==a))return s&&!r&&(s.cacheable=!1),a}function Fe(t,e){return Object.assign(Object.create(t),e)}function Ve(t,e=[""],i,s,n=(()=>t[0])){const o=i||t;void 0===s&&(s=qe("_fallback",t));const a={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:o,_fallback:s,_getTarget:n,override:i=>Ve([i,...t],e,o,s)};return new Proxy(a,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,s)=>je(i,s,(()=>function(t,e,i,s){let n;for(const o of e)if(n=qe(We(o,t),i),void 0!==n)return He(t,n)?Ze(i,s,t,n):n}(s,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Ke(t).includes(e),ownKeys:t=>Ke(t),set(t,e,i){const s=t._storage||(t._storage=n());return t[e]=s[e]=i,delete t._keys,!0}})}function Be(t,e,i,s){const n={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:Ne(t,s),setContext:e=>Be(t,e,i,s),override:n=>Be(t.override(n),e,i,s)};return new Proxy(n,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>je(t,e,(()=>function(t,e,i){const{_proxy:s,_context:n,_subProxy:o,_descriptors:a}=t;let r=s[e];return ht(r)&&a.isScriptable(e)&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_stack:r}=i;if(r.has(t))throw new Error("Recursion detected: "+Array.from(r).join("->")+"->"+t);r.add(t);let l=e(o,a||s);return r.delete(t),He(t,l)&&(l=Ze(n._scopes,n,t,l)),l}(e,r,t,i)),$(r)&&r.length&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_descriptors:r}=i;if(void 0!==o.index&&s(t))return e[o.index%e.length];if(Y(e[0])){const i=e,s=n._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=Ze(s,n,t,l);e.push(Be(i,o,a&&a[t],r))}}return e}(e,r,t,a.isIndexable)),He(e,r)&&(r=Be(r,n,o&&o[e],a)),r}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,s)=>(t[i]=s,delete e[i],!0)})}function Ne(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:s=e.indexable,_allKeys:n=e.allKeys}=t;return{allKeys:n,scriptable:i,indexable:s,isScriptable:ht(i)?i:()=>i,isIndexable:ht(s)?s:()=>s}}const We=(t,e)=>t?t+rt(e):e,He=(t,e)=>Y(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function je(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const s=i();return t[e]=s,s}function $e(t,e,i){return ht(t)?t(e,i):t}const Ye=(t,e)=>!0===t?e:"string"==typeof t?at(e,t):void 0;function Ue(t,e,i,s,n){for(const o of e){const e=Ye(i,o);if(e){t.add(e);const o=$e(e._fallback,i,n);if(void 0!==o&&o!==i&&o!==s)return o}else if(!1===e&&void 0!==s&&i!==s)return null}return!1}function Ze(t,e,i,s){const n=e._rootScopes,o=$e(e._fallback,i,s),a=[...t,...n],r=new Set;r.add(s);let l=Xe(r,a,i,o||i,s);return null!==l&&(void 0===o||o===i||(l=Xe(r,a,o,l,s),null!==l))&&Ve(Array.from(r),[""],n,o,(()=>function(t,e,i){const s=t._getTarget();e in s||(s[e]={});const n=s[e];return $(n)&&Y(i)?i:n||{}}(e,i,s)))}function Xe(t,e,i,s,n){for(;i;)i=Ue(t,e,i,s,n);return i}function qe(t,e){for(const i of e){if(!i)continue;const e=i[t];if(void 0!==e)return e}}function Ke(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function Ge(t,e,i,s){const{iScale:n}=t,{key:o="r"}=this._parsing,a=new Array(s);let r,l,h,c;for(r=0,l=s;r<l;++r)h=r+i,c=e[h],a[r]={r:n.parse(at(c,o),h)};return a}const Je=Number.EPSILON||1e-14,Qe=(t,e)=>e<t.length&&!t[e].skip&&t[e],ti=t=>"x"===t?"y":"x";function ei(t,e,i,s){const n=t.skip?e:t,o=e,a=i.skip?e:i,r=Ct(o,n),l=Ct(a,o);let h=r/(r+l),c=l/(r+l);h=isNaN(h)?0:h,c=isNaN(c)?0:c;const d=s*h,u=s*c;return{previous:{x:o.x-d*(a.x-n.x),y:o.y-d*(a.y-n.y)},next:{x:o.x+u*(a.x-n.x),y:o.y+u*(a.y-n.y)}}}function ii(t,e,i){return Math.max(Math.min(t,i),e)}function si(t,e,i,s,n){let o,a,r,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=ti(e),s=t.length,n=Array(s).fill(0),o=Array(s);let a,r,l,h=Qe(t,0);for(a=0;a<s;++a)if(r=l,l=h,h=Qe(t,a+1),l){if(h){const t=h[e]-l[e];n[a]=0!==t?(h[i]-l[i])/t:0}o[a]=r?h?yt(n[a-1])!==yt(n[a])?0:(n[a-1]+n[a])/2:n[a-1]:n[a]}!function(t,e,i){const s=t.length;let n,o,a,r,l,h=Qe(t,0);for(let c=0;c<s-1;++c)l=h,h=Qe(t,c+1),l&&h&&(vt(e[c],0,Je)?i[c]=i[c+1]=0:(n=i[c]/e[c],o=i[c+1]/e[c],r=Math.pow(n,2)+Math.pow(o,2),r<=9||(a=3/Math.sqrt(r),i[c]=n*a*e[c],i[c+1]=o*a*e[c])))}(t,n,o),function(t,e,i="x"){const s=ti(i),n=t.length;let o,a,r,l=Qe(t,0);for(let h=0;h<n;++h){if(a=r,r=l,l=Qe(t,h+1),!r)continue;const n=r[i],c=r[s];a&&(o=(n-a[i])/3,r[`cp1${i}`]=n-o,r[`cp1${s}`]=c-o*e[h]),l&&(o=(l[i]-n)/3,r[`cp2${i}`]=n+o,r[`cp2${s}`]=c+o*e[h])}}(t,o,e)}(t,n);else{let i=s?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)r=t[o],l=ei(i,r,t[Math.min(o+1,a-(s?0:1))%a],e.tension),r.cp1x=l.previous.x,r.cp1y=l.previous.y,r.cp2x=l.next.x,r.cp2y=l.next.y,i=r}e.capBezierPoints&&function(t,e){let i,s,n,o,a,r=xe(t[0],e);for(i=0,s=t.length;i<s;++i)a=o,o=r,r=i<s-1&&xe(t[i+1],e),o&&(n=t[i],a&&(n.cp1x=ii(n.cp1x,e.left,e.right),n.cp1y=ii(n.cp1y,e.top,e.bottom)),r&&(n.cp2x=ii(n.cp2x,e.left,e.right),n.cp2y=ii(n.cp2y,e.top,e.bottom)))}(t,i)}function ni(){return"undefined"!=typeof window&&"undefined"!=typeof document}function oi(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function ai(t,e,i){let s;return"string"==typeof t?(s=parseInt(t,10),-1!==t.indexOf("%")&&(s=s/100*e.parentNode[i])):s=t,s}const ri=t=>t.ownerDocument.defaultView.getComputedStyle(t,null),li=["top","right","bottom","left"];function hi(t,e,i){const s={};i=i?"-"+i:"";for(let n=0;n<4;n++){const o=li[n];s[o]=parseFloat(t[e+"-"+o+i])||0}return s.width=s.left+s.right,s.height=s.top+s.bottom,s}const ci=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function di(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:s}=e,n=ri(i),o="border-box"===n.boxSizing,a=hi(n,"padding"),r=hi(n,"border","width"),{x:l,y:h,box:c}=function(t,e){const i=t.touches,s=i&&i.length?i[0]:t,{offsetX:n,offsetY:o}=s;let a,r,l=!1;if(ci(n,o,t.target))a=n,r=o;else{const t=e.getBoundingClientRect();a=s.clientX-t.left,r=s.clientY-t.top,l=!0}return{x:a,y:r,box:l}}(t,i),d=a.left+(c&&r.left),u=a.top+(c&&r.top);let{width:f,height:g}=e;return o&&(f-=a.width+r.width,g-=a.height+r.height),{x:Math.round((l-d)/f*i.width/s),y:Math.round((h-u)/g*i.height/s)}}const ui=t=>Math.round(10*t)/10;function fi(t,e,i){const s=e||1,n=Math.floor(t.height*s),o=Math.floor(t.width*s);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==s||a.height!==n||a.width!==o)&&(t.currentDevicePixelRatio=s,a.height=n,a.width=o,t.ctx.setTransform(s,0,0,s,0,0),!0)}const gi=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function pi(t,e){const i=function(t,e){return ri(t).getPropertyValue(e)}(t,e),s=i&&i.match(/^(\d+)(\.\d+)?px$/);return s?+s[1]:void 0}function mi(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function bi(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:"middle"===s?i<.5?t.y:e.y:"after"===s?i<1?t.y:e.y:i>0?e.y:t.y}}function xi(t,e,i,s){const n={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=mi(t,n,i),r=mi(n,o,i),l=mi(o,e,i),h=mi(a,r,i),c=mi(r,l,i);return mi(h,c,i)}function _i(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function yi(t,e){let i,s;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,s=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=s)}function vi(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function wi(t){return"angle"===t?{between:Lt,compare:At,normalize:Tt}:{between:It,compare:(t,e)=>t-e,normalize:t=>t}}function Mi({start:t,end:e,count:i,loop:s,style:n}){return{start:t%i,end:e%i,loop:s&&(e-t+1)%i==0,style:n}}function ki(t,e,i){if(!i)return[t];const{property:s,start:n,end:o}=i,a=e.length,{compare:r,between:l,normalize:h}=wi(s),{start:c,end:d,loop:u,style:f}=function(t,e,i){const{property:s,start:n,end:o}=i,{between:a,normalize:r}=wi(s),l=e.length;let h,c,{start:d,end:u,loop:f}=t;if(f){for(d+=l,u+=l,h=0,c=l;h<c&&a(r(e[d%l][s]),n,o);++h)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:f,style:t.style}}(t,e,i),g=[];let p,m,b,x=!1,_=null;for(let t=c,i=c;t<=d;++t)m=e[t%a],m.skip||(p=h(m[s]),p!==b&&(x=l(p,n,o),null===_&&(x||l(n,b,p)&&0!==r(n,b))&&(_=0===r(p,n)?t:i),null!==_&&(!x||0===r(o,p)||l(o,b,p))&&(g.push(Mi({start:_,end:t,loop:u,count:a,style:f})),_=null),i=t,b=p));return null!==_&&g.push(Mi({start:_,end:d,loop:u,count:a,style:f})),g}function Si(t,e){const i=[],s=t.segments;for(let n=0;n<s.length;n++){const o=ki(s[n],t.points,e);o.length&&i.push(...o)}return i}function Pi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function Di(t,e){if(!e)return!1;const i=[],s=function(t,e){return Gt(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e};return JSON.stringify(t,s)!==JSON.stringify(e,s)}class Oi{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,s){const n=e.listeners[s],o=e.duration;n.forEach((s=>s({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=Wt.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,s)=>{if(!i.running||!i.items.length)return;const n=i.items;let o,a=n.length-1,r=!1;for(;a>=0;--a)o=n[a],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),r=!0):(n[a]=n[n.length-1],n.pop());r&&(s.draw(),this._notify(s,i,t,"progress")),n.length||(i.running=!1,this._notify(s,i,t,"complete"),i.initial=!1),e+=n.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let s=i.length-1;for(;s>=0;--s)i[s].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var Ci=new Oi;const Ai="transparent",Ti={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const s=Jt(t||Ai),n=s.valid&&Jt(e||Ai);return n&&n.valid?n.mix(s,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class Li{constructor(t,e,i,s){const n=e[i];s=ze([t.to,s,n,t.from]);const o=ze([t.from,n,s]);this._active=!0,this._fn=t.fn||Ti[t.type||typeof o],this._easing=Kt[t.easing]||Kt.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=s,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const s=this._target[this._prop],n=i-this._start,o=this._duration-n;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=n,this._loop=!!t.loop,this._to=ze([t.to,e,s,t.from]),this._from=ze([t.from,s,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,s=this._prop,n=this._from,o=this._loop,a=this._to;let r;if(this._active=n!==a&&(o||e<i),!this._active)return this._target[s]=a,void this._notify(!0);e<0?this._target[s]=n:(r=e/i%2,r=o&&r>1?2-r:r,r=this._easing(Math.min(1,Math.max(0,r))),this._target[s]=this._fn(n,a,r))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class Ei{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!Y(t))return;const e=Object.keys(de.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((s=>{const n=t[s];if(!Y(n))return;const o={};for(const t of e)o[t]=n[t];($(n.properties)&&n.properties||[s]).forEach((t=>{t!==s&&i.has(t)||i.set(t,o)}))}))}_animateOptions(t,e){const i=e.options,s=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!s)return[];const n=this._createAnimations(s,i);return i.$shared&&function(t,e){const i=[],s=Object.keys(e);for(let e=0;e<s.length;e++){const n=t[s[e]];n&&n.active()&&i.push(n.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),n}_createAnimations(t,e){const i=this._properties,s=[],n=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let r;for(r=o.length-1;r>=0;--r){const l=o[r];if("$"===l.charAt(0))continue;if("options"===l){s.push(...this._animateOptions(t,e));continue}const h=e[l];let c=n[l];const d=i.get(l);if(c){if(d&&c.active()){c.update(d,h,a);continue}c.cancel()}d&&d.duration?(n[l]=c=new Li(d,t,l,h),s.push(c)):t[l]=h}return s}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(Ci.add(this._chart,i),!0):void 0}}function Ii(t,e){const i=t&&t.options||{},s=i.reverse,n=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:s?o:n,end:s?n:o}}function Ri(t,e){const i=[],s=t._getSortedDatasetMetas(e);let n,o;for(n=0,o=s.length;n<o;++n)i.push(s[n].index);return i}function zi(t,e,i,s={}){const n=t.keys,o="single"===s.mode;let a,r,l,h;if(null!==e){for(a=0,r=n.length;a<r;++a){if(l=+n[a],l===i){if(s.all)continue;break}h=t.values[l],U(h)&&(o||0===e||yt(e)===yt(h))&&(e+=h)}return e}}function Fi(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function Vi(t,e,i){const s=t[e]||(t[e]={});return s[i]||(s[i]={})}function Bi(t,e,i,s){for(const n of e.getMatchingVisibleMetas(s).reverse()){const e=t[n.index];if(i&&e>0||!i&&e<0)return n.index}return null}function Ni(t,e){const{chart:i,_cachedMeta:s}=t,n=i._stacks||(i._stacks={}),{iScale:o,vScale:a,index:r}=s,l=o.axis,h=a.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,a,s),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[h]:d}=i;u=(i._stacks||(i._stacks={}))[h]=Vi(n,c,o),u[r]=d,u._top=Bi(u,a,!0,s.type),u._bottom=Bi(u,a,!1,s.type),(u._visualValues||(u._visualValues={}))[r]=d}}function Wi(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function Hi(t,e){const i=t.controller.index,s=t.vScale&&t.vScale.axis;if(s){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[s]||void 0===e[s][i])return;delete e[s][i],void 0!==e[s]._visualValues&&void 0!==e[s]._visualValues[i]&&delete e[s]._visualValues[i]}}}const ji=t=>"reset"===t||"none"===t,$i=(t,e)=>e?t:Object.assign({},t);class Yi{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Fi(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&Hi(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),s=(t,e,i,s)=>"x"===t?e:"r"===t?s:i,n=e.xAxisID=X(i.xAxisID,Wi(t,"x")),o=e.yAxisID=X(i.yAxisID,Wi(t,"y")),a=e.rAxisID=X(i.rAxisID,Wi(t,"r")),r=e.indexAxis,l=e.iAxisID=s(r,n,o,a),h=e.vAxisID=s(r,o,n,a);e.xScale=this.getScaleForId(n),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&Bt(this._data,this),t._stacked&&Hi(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(Y(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s],i[s]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){Bt(i,this);const t=this._cachedMeta;Hi(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(s=e)._chartjs?s._chartjs.listeners.push(this):(Object.defineProperty(s,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),Vt.forEach((t=>{const e="_onData"+rt(t),i=s[t];Object.defineProperty(s,t,{configurable:!0,enumerable:!1,value(...t){const n=i.apply(this,t);return s._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),n}})})))),this._syncList=[],this._data=e}var s}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let s=!1;this._dataCheck();const n=e._stacked;e._stacked=Fi(e.vScale,e),e.stack!==i.stack&&(s=!0,Hi(e),e.stack=i.stack),this._resyncElements(t),(s||n!==e._stacked)&&Ni(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:s}=this,{iScale:n,_stacked:o}=i,a=n.axis;let r,l,h,c=0===t&&e===s.length||i._sorted,d=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=s,i._sorted=!0,h=s;else{h=$(s[t])?this.parseArrayData(i,s,t,e):Y(s[t])?this.parseObjectData(i,s,t,e):this.parsePrimitiveData(i,s,t,e);const n=()=>null===l[a]||d&&l[a]<d[a];for(r=0;r<e;++r)i._parsed[r+t]=l=h[r],c&&(n()&&(c=!1),d=l);i._sorted=c}o&&Ni(this,h)}parsePrimitiveData(t,e,i,s){const{iScale:n,vScale:o}=t,a=n.axis,r=o.axis,l=n.getLabels(),h=n===o,c=new Array(s);let d,u,f;for(d=0,u=s;d<u;++d)f=d+i,c[d]={[a]:h||n.parse(l[f],f),[r]:o.parse(e[f],f)};return c}parseArrayData(t,e,i,s){const{xScale:n,yScale:o}=t,a=new Array(s);let r,l,h,c;for(r=0,l=s;r<l;++r)h=r+i,c=e[h],a[r]={x:n.parse(c[0],h),y:o.parse(c[1],h)};return a}parseObjectData(t,e,i,s){const{xScale:n,yScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l=new Array(s);let h,c,d,u;for(h=0,c=s;h<c;++h)d=h+i,u=e[d],l[h]={x:n.parse(at(u,a),d),y:o.parse(at(u,r),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const s=this.chart,n=this._cachedMeta,o=e[t.axis];return zi({keys:Ri(s,!0),values:e._stacks[t.axis]._visualValues},o,n.index,{mode:i})}updateRangeFromParsed(t,e,i,s){const n=i[e.axis];let o=null===n?NaN:n;const a=s&&i._stacks[e.axis];s&&a&&(s.values=a,o=zi(s,n,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,s=i._parsed,n=i._sorted&&t===i.iScale,o=s.length,a=this._getOtherScale(t),r=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:Ri(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:h,max:c}=function(t){const{min:e,max:i,minDefined:s,maxDefined:n}=t.getUserBounds();return{min:s?e:Number.NEGATIVE_INFINITY,max:n?i:Number.POSITIVE_INFINITY}}(a);let d,u;function f(){u=s[d];const e=u[a.axis];return!U(u[t.axis])||h>e||c<e}for(d=0;d<o&&(f()||(this.updateRangeFromParsed(l,t,u,r),!n));++d);if(n)for(d=o-1;d>=0;--d)if(!f()){this.updateRangeFromParsed(l,t,u,r);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s][t.axis],U(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,s=e.vScale,n=this.getParsed(t);return{label:i?""+i.getLabelForValue(n[i.axis]):"",value:s?""+s.getLabelForValue(n[s.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,s,n;return Y(t)?(e=t.top,i=t.right,s=t.bottom,n=t.left):e=i=s=n=t,{top:e,right:i,bottom:s,left:n,disabled:!1===t}}(X(this.options.clip,function(t,e,i){if(!1===i)return!1;const s=Ii(t,i),n=Ii(e,i);return{top:n.end,right:s.end,bottom:n.start,left:s.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,s=i.data||[],n=e.chartArea,o=[],a=this._drawStart||0,r=this._drawCount||s.length-a,l=this.options.drawActiveElementsOnTop;let h;for(i.dataset&&i.dataset.draw(t,n,a,r),h=a;h<a+r;++h){const e=s[h];e.hidden||(e.active&&l?o.push(e):e.draw(t,n))}for(h=0;h<o.length;++h)o[h].draw(t,n)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const s=this.getDataset();let n;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];n=e.$context||(e.$context=function(t,e,i){return Fe(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),n.parsed=this.getParsed(t),n.raw=s.data[t],n.index=n.dataIndex=t}else n=this.$context||(this.$context=function(t,e){return Fe(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),n.dataset=s,n.index=n.datasetIndex=this.index;return n.active=!!e,n.mode=i,n}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const s="active"===e,n=this._cachedDataOpts,o=t+"-"+e,a=n[o],r=this.enableOptionSharing&&lt(i);if(a)return $i(a,r);const l=this.chart.config,h=l.datasetElementScopeKeys(this._type,t),c=s?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),h),u=Object.keys(de.elements[t]),f=l.resolveNamedOptions(d,u,(()=>this.getContext(i,s,e)),c);return f.$shared&&(f.$shared=r,n[o]=Object.freeze($i(f,r))),f}_resolveAnimations(t,e,i){const s=this.chart,n=this._cachedDataOpts,o=`animation-${e}`,a=n[o];if(a)return a;let r;if(!1!==s.options.animation){const s=this.chart.config,n=s.datasetAnimationScopeKeys(this._type,e),o=s.getOptionScopes(this.getDataset(),n);r=s.createResolver(o,this.getContext(t,i,e))}const l=new Ei(s,r&&r.animations);return r&&r._cacheable&&(n[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||ji(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),s=this._sharedOptions,n=this.getSharedOptions(i),o=this.includeOptions(e,n)||n!==s;return this.updateSharedOptions(n,e,i),{sharedOptions:n,includeOptions:o}}updateElement(t,e,i,s){ji(s)?Object.assign(t,i):this._resolveAnimations(e,s).update(t,i)}updateSharedOptions(t,e,i){t&&!ji(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,s){t.active=s;const n=this.getStyle(e,s);this._resolveAnimations(e,i,s).update(t,{options:!s&&this.getSharedOptions(n)||n})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const s=i.length,n=e.length,o=Math.min(n,s);o&&this.parse(0,o),n>s?this._insertElements(s,n-s,t):n<s&&this._removeElements(n,s-n)}_insertElements(t,e,i=!0){const s=this._cachedMeta,n=s.data,o=t+e;let a;const r=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(r(n),a=t;a<o;++a)n[a]=new this.dataElementType;this._parsing&&r(s._parsed),this.parse(t,e),i&&this.updateElements(n,t,e,"reset")}updateElements(t,e,i,s){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const s=i._parsed.splice(t,e);i._stacked&&Hi(i,s)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,s]=t;this[e](i,s)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function Ui(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let s=[];for(let e=0,n=i.length;e<n;e++)s=s.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=Nt(s.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let s,n,o,a,r=e._length;const l=()=>{32767!==o&&-32768!==o&&(lt(a)&&(r=Math.min(r,Math.abs(o-a)||r)),a=o)};for(s=0,n=i.length;s<n;++s)o=e.getPixelForValue(i[s]),l();for(a=void 0,s=0,n=e.ticks.length;s<n;++s)o=e.getPixelForTick(s),l();return r}function Zi(t,e,i,s){return $(t)?function(t,e,i,s){const n=i.parse(t[0],s),o=i.parse(t[1],s),a=Math.min(n,o),r=Math.max(n,o);let l=a,h=r;Math.abs(a)>Math.abs(r)&&(l=r,h=a),e[i.axis]=h,e._custom={barStart:l,barEnd:h,start:n,end:o,min:a,max:r}}(t,e,i,s):e[i.axis]=i.parse(t,s),e}function Xi(t,e,i,s){const n=t.iScale,o=t.vScale,a=n.getLabels(),r=n===o,l=[];let h,c,d,u;for(h=i,c=i+s;h<c;++h)u=e[h],d={},d[n.axis]=r||n.parse(a[h],h),l.push(Zi(u,d,o,h));return l}function qi(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Ki(t,e,i,s){let n=e.borderSkipped;const o={};if(!n)return void(t.borderSkipped=o);if(!0===n)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:a,end:r,reverse:l,top:h,bottom:c}=function(t){let e,i,s,n,o;return t.horizontal?(e=t.base>t.x,i="left",s="right"):(e=t.base<t.y,i="bottom",s="top"),e?(n="end",o="start"):(n="start",o="end"),{start:i,end:s,reverse:e,top:n,bottom:o}}(t);"middle"===n&&i&&(t.enableBorderRadius=!0,(i._top||0)===s?n=h:(i._bottom||0)===s?n=c:(o[Gi(c,a,r,l)]=!0,n=h)),o[Gi(n,a,r,l)]=!0,t.borderSkipped=o}function Gi(t,e,i,s){var n,o,a;return s?(a=i,t=Ji(t=(n=t)===(o=e)?a:n===a?o:n,i,e)):t=Ji(t,e,i),t}function Ji(t,e,i){return"start"===t?e:"end"===t?i:t}function Qi(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class ts extends Yi{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=i;else{let n,o,a=t=>+i[t];if(Y(i[t])){const{key:t="value"}=this._parsing;a=e=>+at(i[e],t)}for(n=t,o=t+e;n<o;++n)s._parsed[n]=a(n)}}_getRotation(){return St(this.options.rotation-90)}_getCircumference(){return St(this.options.circumference)}_getRotationExtents(){let t=ut,e=-ut;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const s=this.chart.getDatasetMeta(i).controller,n=s._getRotation(),o=s._getCircumference();t=Math.min(t,n),e=Math.max(e,n+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,s=this._cachedMeta,n=s.data,o=this.getMaxBorderWidth()+this.getMaxOffset(n)+this.options.spacing,a=Math.max((Math.min(i.width,i.height)-o)/2,0),r=Math.min((h=a,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:+l/h),1);var l,h;const c=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:f,ratioY:g,offsetX:p,offsetY:m}=function(t,e,i){let s=1,n=1,o=0,a=0;if(e<ut){const r=t,l=r+e,h=Math.cos(r),c=Math.sin(r),d=Math.cos(l),u=Math.sin(l),f=(t,e,s)=>Lt(t,r,l,!0)?1:Math.max(e,e*i,s,s*i),g=(t,e,s)=>Lt(t,r,l,!0)?-1:Math.min(e,e*i,s,s*i),p=f(0,h,d),m=f(mt,c,u),b=g(dt,h,d),x=g(dt+mt,c,u);s=(p-b)/2,n=(m-x)/2,o=-(p+b)/2,a=-(m+x)/2}return{ratioX:s,ratioY:n,offsetX:o,offsetY:a}}(u,d,r),b=(i.width-o)/f,x=(i.height-o)/g,_=Math.max(Math.min(b,x)/2,0),y=q(this.options.radius,_),v=(y-Math.max(y*r,0))/this._getVisibleDatasetWeightTotal();this.offsetX=p*y,this.offsetY=m*y,s.total=this.calculateTotal(),this.outerRadius=y-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*c,0),this.updateElements(n,0,n.length,t)}_circumference(t,e){const i=this.options,s=this._cachedMeta,n=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===s._parsed[t]||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*n/ut)}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.chartArea,r=o.options.animation,l=(a.left+a.right)/2,h=(a.top+a.bottom)/2,c=n&&r.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,{sharedOptions:f,includeOptions:g}=this._getSharedOptions(e,s);let p,m=this._getRotation();for(p=0;p<e;++p)m+=this._circumference(p,n);for(p=e;p<e+i;++p){const e=this._circumference(p,n),i=t[p],o={x:l+this.offsetX,y:h+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};g&&(o.options=f||this.resolveDataElementOptions(p,i.active?"active":s)),m+=e,this.updateElement(i,p,o,s)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,s=0;for(i=0;i<e.length;i++){const n=t._parsed[i];null===n||isNaN(n)||!this.chart.getDataVisibility(i)||e[i].hidden||(s+=Math.abs(n))}return s}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?ut*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=se(e._parsed[t],i.options.locale);return{label:s[t]||"",value:n}}getMaxBorderWidth(t){let e=0;const i=this.chart;let s,n,o,a,r;if(!t)for(s=0,n=i.data.datasets.length;s<n;++s)if(i.isDatasetVisible(s)){o=i.getDatasetMeta(s),t=o.data,a=o.controller;break}if(!t)return 0;for(s=0,n=t.length;s<n;++s)r=a.resolveDataElementOptions(s),"inner"!==r.borderAlign&&(e=Math.max(e,r.borderWidth||0,r.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,s=t.length;i<s;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(X(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class es extends Yi{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=se(e._parsed[t].r,i.options.locale);return{label:s[t]||"",value:n}}parseObjectData(t,e,i,s){return Ge.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const s=this.getParsed(i).r;!isNaN(s)&&this.chart.getDataVisibility(i)&&(s<e.min&&(e.min=s),s>e.max&&(e.max=s))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,s=Math.min(e.right-e.left,e.bottom-e.top),n=Math.max(s/2,0),o=(n-Math.max(i.cutoutPercentage?n/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=n-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.options.animation,r=this._cachedMeta.rScale,l=r.xCenter,h=r.yCenter,c=r.getIndexAngle(0)-.5*dt;let d,u=c;const f=360/this.countVisibleElements();for(d=0;d<e;++d)u+=this._computeAngle(d,s,f);for(d=e;d<e+i;d++){const e=t[d];let i=u,g=u+this._computeAngle(d,s,f),p=o.getDataVisibility(d)?r.getDistanceFromCenterForValue(this.getParsed(d).r):0;u=g,n&&(a.animateScale&&(p=0),a.animateRotate&&(i=g=c));const m={x:l,y:h,innerRadius:0,outerRadius:p,startAngle:i,endAngle:g,options:this.resolveDataElementOptions(d,e.active?"active":s)};this.updateElement(e,d,m,s)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?St(this.resolveDataElementOptions(t,e).angle||i):0}}var is=Object.freeze({__proto__:null,BarController:class extends Yi{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,s){return Xi(t,e,i,s)}parseArrayData(t,e,i,s){return Xi(t,e,i,s)}parseObjectData(t,e,i,s){const{iScale:n,vScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l="x"===n.axis?a:r,h="x"===o.axis?a:r,c=[];let d,u,f,g;for(d=i,u=i+s;d<u;++d)g=e[d],f={},f[n.axis]=n.parse(at(g,l),d),c.push(Zi(at(g,h),f,o,d));return c}updateRangeFromParsed(t,e,i,s){super.updateRangeFromParsed(t,e,i,s);const n=i._custom;n&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,n.min),t.max=Math.max(t.max,n.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:s}=e,n=this.getParsed(t),o=n._custom,a=qi(o)?"["+o.start+", "+o.end+"]":""+s.getLabelForValue(n[s.axis]);return{label:""+i.getLabelForValue(n[i.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,s){const n="reset"===s,{index:o,_cachedMeta:{vScale:a}}=this,r=a.getBasePixel(),l=a.isHorizontal(),h=this._getRuler(),{sharedOptions:c,includeOptions:d}=this._getSharedOptions(e,s);for(let u=e;u<e+i;u++){const e=this.getParsed(u),i=n||j(e[a.axis])?{base:r,head:r}:this._calculateBarValuePixels(u),f=this._calculateBarIndexPixels(u,h),g=(e._stacks||{})[a.axis],p={horizontal:l,base:i.base,enableBorderRadius:!g||qi(e._custom)||o===g._top||o===g._bottom,x:l?i.head:f.center,y:l?f.center:i.head,height:l?f.size:Math.abs(i.size),width:l?Math.abs(i.size):f.size};d&&(p.options=c||this.resolveDataElementOptions(u,t[u].active?"active":s));const m=p.options||t[u].options;Ki(p,m,g,o),Qi(p,m,h.ratio),this.updateElement(t[u],u,p,s)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,s=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),n=i.options.stacked,o=[],a=t=>{const i=t.controller.getParsed(e),s=i&&i[t.vScale.axis];if(j(s)||isNaN(s))return!0};for(const i of s)if((void 0===e||!a(i))&&((!1===n||-1===o.indexOf(i.stack)||void 0===n&&void 0===i.stack)&&o.push(i.stack),i.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const s=this._getStacks(t,i),n=void 0!==e?s.indexOf(e):-1;return-1===n?s.length-1:n}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,s=[];let n,o;for(n=0,o=e.data.length;n<o;++n)s.push(i.getPixelForValue(this.getParsed(n)[i.axis],n));const a=t.barThickness;return{min:a||Ui(e),pixels:s,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:s},options:{base:n,minBarLength:o}}=this,a=n||0,r=this.getParsed(t),l=r._custom,h=qi(l);let c,d,u=r[e.axis],f=0,g=i?this.applyStack(e,r,i):u;g!==u&&(f=g-u,g=u),h&&(u=l.barStart,g=l.barEnd-l.barStart,0!==u&&yt(u)!==yt(l.barEnd)&&(f=0),f+=u);const p=j(n)||h?f:n;let m=e.getPixelForValue(p);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(f+g):m,d=c-m,Math.abs(d)<o){d=function(t,e,i){return 0!==t?yt(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,a)*o,u===a&&(m-=d/2);const t=e.getPixelForDecimal(0),n=e.getPixelForDecimal(1),l=Math.min(t,n),f=Math.max(t,n);m=Math.max(Math.min(m,f),l),c=m+d,i&&!h&&(r._stacks[e.axis]._visualValues[s]=e.getValueForPixel(c)-e.getValueForPixel(m))}if(m===e.getPixelForValue(a)){const t=yt(d)*e.getLineWidthForValue(a)/2;m+=t,d-=t}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,s=this.options,n=s.skipNull,o=X(s.maxBarThickness,1/0);let a,r;if(e.grouped){const i=n?this._getStackCount(t):e.stackCount,l="flex"===s.barThickness?function(t,e,i,s){const n=e.pixels,o=n[t];let a=t>0?n[t-1]:null,r=t<n.length-1?n[t+1]:null;const l=i.categoryPercentage;null===a&&(a=o-(null===r?e.end-e.start:r-o)),null===r&&(r=o+o-a);const h=o-(o-Math.min(a,r))/2*l;return{chunk:Math.abs(r-a)/2*l/s,ratio:i.barPercentage,start:h}}(t,e,s,i):function(t,e,i,s){const n=i.barThickness;let o,a;return j(n)?(o=e.min*i.categoryPercentage,a=i.barPercentage):(o=n*s,a=1),{chunk:o/s,ratio:a,start:e.pixels[t]-o/2}}(t,e,s,i),h=this._getStackIndex(this.index,this._cachedMeta.stack,n?t:void 0);a=l.start+l.chunk*h+l.chunk/2,r=Math.min(o,l.chunk*l.ratio)}else a=i.getPixelForValue(this.getParsed(t)[i.axis],t),r=Math.min(o,e.min*e.ratio);return{base:a-r/2,head:a+r/2,center:a,size:r}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,s=i.length;let n=0;for(;n<s;++n)null!==this.getParsed(n)[e.axis]&&i[n].draw(this._ctx)}},BubbleController:class extends Yi{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,s){const n=super.parsePrimitiveData(t,e,i,s);for(let t=0;t<n.length;t++)n[t]._custom=this.resolveDataElementOptions(t+i).radius;return n}parseArrayData(t,e,i,s){const n=super.parseArrayData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=X(s[2],this.resolveDataElementOptions(t+i).radius)}return n}parseObjectData(t,e,i,s){const n=super.parseObjectData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=X(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return n}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y),l=o._custom;return{label:i[t]||"",value:"("+a+", "+r+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:r,includeOptions:l}=this._getSharedOptions(e,s),h=o.axis,c=a.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!n&&this.getParsed(d),u={},f=u[h]=n?o.getPixelForDecimal(.5):o.getPixelForValue(i[h]),g=u[c]=n?a.getBasePixel():a.getPixelForValue(i[c]);u.skip=isNaN(f)||isNaN(g),l&&(u.options=r||this.resolveDataElementOptions(d,e.active?"active":s),n&&(u.options.radius=0)),this.updateElement(e,d,u,s)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let s=super.resolveDataElementOptions(t,e);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const n=s.radius;return"active"!==e&&(s.radius=0),s.radius+=X(i&&i._custom,n),s}},DoughnutController:ts,LineController:class extends Yi{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:s=[],_dataset:n}=e,o=this.chart._animationsDisabled;let{start:a,count:r}=Yt(e,s,o);this._drawStart=a,this._drawCount=r,Ut(e)&&(a=0,r=s.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!n._decimated,i.points=s;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:l},t),this.updateElements(s,a,r,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a,_stacked:r,_dataset:l}=this._cachedMeta,{sharedOptions:h,includeOptions:c}=this._getSharedOptions(e,s),d=o.axis,u=a.axis,{spanGaps:f,segment:g}=this.options,p=Mt(f)?f:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||n||"none"===s,b=e+i,x=t.length;let _=e>0&&this.getParsed(e-1);for(let i=0;i<x;++i){const f=t[i],x=m?f:{};if(i<e||i>=b){x.skip=!0;continue}const y=this.getParsed(i),v=j(y[u]),w=x[d]=o.getPixelForValue(y[d],i),M=x[u]=n||v?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,y,r):y[u],i);x.skip=isNaN(w)||isNaN(M)||v,x.stop=i>0&&Math.abs(y[d]-_[d])>p,g&&(x.parsed=y,x.raw=l.data[i]),c&&(x.options=h||this.resolveDataElementOptions(i,f.active?"active":s)),m||this.updateElement(f,i,x,s),_=y}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,s=t.data||[];if(!s.length)return i;const n=s[0].size(this.resolveDataElementOptions(0)),o=s[s.length-1].size(this.resolveDataElementOptions(s.length-1));return Math.max(i,n,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}},PieController:class extends ts{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},PolarAreaController:es,RadarController:class extends Yi{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,s){return Ge.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta,i=e.dataset,s=e.data||[],n=e.iScale.getLabels();if(i.points=s,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:n.length===s.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(s,0,s.length,t)}updateElements(t,e,i,s){const n=this._cachedMeta.rScale,o="reset"===s;for(let a=e;a<e+i;a++){const e=t[a],i=this.resolveDataElementOptions(a,e.active?"active":s),r=n.getPointPositionForValue(a,this.getParsed(a).r),l=o?n.xCenter:r.x,h=o?n.yCenter:r.y,c={x:l,y:h,angle:r.angle,skip:isNaN(l)||isNaN(h),options:i};this.updateElement(e,a,c,s)}}},ScatterController:class extends Yi{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y);return{label:i[t]||"",value:"("+a+", "+r+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,s=this.chart._animationsDisabled;let{start:n,count:o}=Yt(e,i,s);if(this._drawStart=n,this._drawCount=o,Ut(e)&&(n=0,o=i.length),this.options.showLine){const{dataset:n,_dataset:o}=e;n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!o._decimated,n.points=i;const a=this.resolveDatasetElementOptions(t);a.segment=this.options.segment,this.updateElement(n,void 0,{animated:!s,options:a},t)}this.updateElements(i,n,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a,_stacked:r,_dataset:l}=this._cachedMeta,h=this.resolveDataElementOptions(e,s),c=this.getSharedOptions(h),d=this.includeOptions(s,c),u=o.axis,f=a.axis,{spanGaps:g,segment:p}=this.options,m=Mt(g)?g:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||n||"none"===s;let x=e>0&&this.getParsed(e-1);for(let h=e;h<e+i;++h){const e=t[h],i=this.getParsed(h),g=b?e:{},_=j(i[f]),y=g[u]=o.getPixelForValue(i[u],h),v=g[f]=n||_?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,i,r):i[f],h);g.skip=isNaN(y)||isNaN(v)||_,g.stop=h>0&&Math.abs(i[u]-x[u])>m,p&&(g.parsed=i,g.raw=l.data[h]),d&&(g.options=c||this.resolveDataElementOptions(h,e.active?"active":s)),b||this.updateElement(e,h,g,s),x=i}this.updateSharedOptions(c,s,h)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,s=i.options&&i.options.borderWidth||0;if(!e.length)return s;const n=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(s,n,o)/2}}});function ss(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class ns{static override(t){Object.assign(ns.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return ss()}parse(){return ss()}format(){return ss()}add(){return ss()}diff(){return ss()}startOf(){return ss()}endOf(){return ss()}}var os=ns;function as(t,e,i,s){const{controller:n,data:o,_sorted:a}=t,r=n._cachedMeta.iScale;if(r&&e===r.axis&&"r"!==e&&a&&o.length){const t=r._reversePixels?Ft:zt;if(!s)return t(o,e,i);if(n._sharedOptions){const s=o[0],n="function"==typeof s.getRange&&s.getRange(e);if(n){const s=t(o,e,i-n),a=t(o,e,i+n);return{lo:s.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function rs(t,e,i,s,n){const o=t.getSortedVisibleDatasetMetas(),a=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:r}=o[t],{lo:l,hi:h}=as(o[t],e,a,n);for(let t=l;t<=h;++t){const e=r[t];e.skip||s(e,i,t)}}}function ls(t,e,i,s,n){const o=[];return n||t.isPointInArea(e)?(rs(t,i,e,(function(i,a,r){(n||xe(i,t.chartArea,0))&&i.inRange(e.x,e.y,s)&&o.push({element:i,datasetIndex:a,index:r})}),!0),o):o}function hs(t,e,i,s,n,o){return o||t.isPointInArea(e)?"r"!==i||s?function(t,e,i,s,n,o){let a=[];const r=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,s){const n=e?Math.abs(t.x-s.x):0,o=i?Math.abs(t.y-s.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return rs(t,i,e,(function(i,h,c){const d=i.inRange(e.x,e.y,n);if(s&&!d)return;const u=i.getCenterPoint(n);if(!o&&!t.isPointInArea(u)&&!d)return;const f=r(e,u);f<l?(a=[{element:i,datasetIndex:h,index:c}],l=f):f===l&&a.push({element:i,datasetIndex:h,index:c})})),a}(t,e,i,s,n,o):function(t,e,i,s){let n=[];return rs(t,i,e,(function(t,i,o){const{startAngle:a,endAngle:r}=t.getProps(["startAngle","endAngle"],s),{angle:l}=Ot(t,{x:e.x,y:e.y});Lt(l,a,r)&&n.push({element:t,datasetIndex:i,index:o})})),n}(t,e,i,n):[]}function cs(t,e,i,s,n){const o=[],a="x"===i?"inXRange":"inYRange";let r=!1;return rs(t,i,e,((t,s,l)=>{t[a](e[i],n)&&(o.push({element:t,datasetIndex:s,index:l}),r=r||t.inRange(e.x,e.y,n))})),s&&!r?[]:o}var ds={evaluateInteractionItems:rs,modes:{index(t,e,i,s){const n=di(e,t),o=i.axis||"x",a=i.includeInvisible||!1,r=i.intersect?ls(t,n,o,s,a):hs(t,n,o,!1,s,a),l=[];return r.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=r[0].index,i=t.data[e];i&&!i.skip&&l.push({element:i,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,i,s){const n=di(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;let r=i.intersect?ls(t,n,o,s,a):hs(t,n,o,!1,s,a);if(r.length>0){const e=r[0].datasetIndex,i=t.getDatasetMeta(e).data;r=[];for(let t=0;t<i.length;++t)r.push({element:i[t],datasetIndex:e,index:t})}return r},point:(t,e,i,s)=>ls(t,di(e,t),i.axis||"xy",s,i.includeInvisible||!1),nearest(t,e,i,s){const n=di(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;return hs(t,n,o,i.intersect,s,a)},x:(t,e,i,s)=>cs(t,di(e,t),"x",i.intersect,s),y:(t,e,i,s)=>cs(t,di(e,t),"y",i.intersect,s)}};const us=["left","top","right","bottom"];function fs(t,e){return t.filter((t=>t.pos===e))}function gs(t,e){return t.filter((t=>-1===us.indexOf(t.pos)&&t.box.axis===e))}function ps(t,e){return t.sort(((t,i)=>{const s=e?i:t,n=e?t:i;return s.weight===n.weight?s.index-n.index:s.weight-n.weight}))}function ms(t,e,i,s){return Math.max(t[i],e[i])+Math.max(t[s],e[s])}function bs(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function xs(t,e,i,s){const{pos:n,box:o}=i,a=t.maxPadding;if(!Y(n)){i.size&&(t[n]-=i.size);const e=s[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[n]+=i.size}o.getPadding&&bs(a,o.getPadding());const r=Math.max(0,e.outerWidth-ms(a,t,"left","right")),l=Math.max(0,e.outerHeight-ms(a,t,"top","bottom")),h=r!==t.w,c=l!==t.h;return t.w=r,t.h=l,i.horizontal?{same:h,other:c}:{same:c,other:h}}function _s(t,e){const i=e.maxPadding;return function(t){const s={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{s[t]=Math.max(e[t],i[t])})),s}(t?["left","right"]:["top","bottom"])}function ys(t,e,i,s){const n=[];let o,a,r,l,h,c;for(o=0,a=t.length,h=0;o<a;++o){r=t[o],l=r.box,l.update(r.width||e.w,r.height||e.h,_s(r.horizontal,e));const{same:a,other:d}=xs(e,i,r,s);h|=a&&n.length,c=c||d,l.fullSize||n.push(r)}return h&&ys(n,e,i,s)||c}function vs(t,e,i,s,n){t.top=i,t.left=e,t.right=e+s,t.bottom=i+n,t.width=s,t.height=n}function ws(t,e,i,s){const n=i.padding;let{x:o,y:a}=e;for(const r of t){const t=r.box,l=s[r.stack]||{count:1,placed:0,weight:1},h=r.stackWeight/l.weight||1;if(r.horizontal){const s=e.w*h,o=l.size||t.height;lt(l.start)&&(a=l.start),t.fullSize?vs(t,n.left,a,i.outerWidth-n.right-n.left,o):vs(t,e.left+l.placed,a,s,o),l.start=a,l.placed+=s,a=t.bottom}else{const s=e.h*h,a=l.size||t.width;lt(l.start)&&(o=l.start),t.fullSize?vs(t,o,n.top,a,i.outerHeight-n.bottom-n.top):vs(t,o,e.top+l.placed,a,s),l.start=o,l.placed+=s,o=t.right}}e.x=o,e.y=a}var Ms={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,s){if(!t)return;const n=Ie(t.options.layout.padding),o=Math.max(e-n.width,0),a=Math.max(i-n.height,0),r=function(t){const e=function(t){const e=[];let i,s,n,o,a,r;for(i=0,s=(t||[]).length;i<s;++i)n=t[i],({position:o,options:{stack:a,stackWeight:r=1}}=n),e.push({index:i,box:n,pos:o,horizontal:n.isHorizontal(),weight:n.weight,stack:a&&o+a,stackWeight:r});return e}(t),i=ps(e.filter((t=>t.box.fullSize)),!0),s=ps(fs(e,"left"),!0),n=ps(fs(e,"right")),o=ps(fs(e,"top"),!0),a=ps(fs(e,"bottom")),r=gs(e,"x"),l=gs(e,"y");return{fullSize:i,leftAndTop:s.concat(o),rightAndBottom:n.concat(l).concat(a).concat(r),chartArea:fs(e,"chartArea"),vertical:s.concat(n).concat(l),horizontal:o.concat(a).concat(r)}}(t.boxes),l=r.vertical,h=r.horizontal;G(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:n,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/c,hBoxMaxHeight:a/2}),u=Object.assign({},n);bs(u,Ie(s));const f=Object.assign({maxPadding:u,w:o,h:a,x:n.left,y:n.top},n),g=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:s,stackWeight:n}=i;if(!t||!us.includes(s))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=n}return e}(t),{vBoxMaxWidth:s,hBoxMaxHeight:n}=e;let o,a,r;for(o=0,a=t.length;o<a;++o){r=t[o];const{fullSize:a}=r.box,l=i[r.stack],h=l&&r.stackWeight/l.weight;r.horizontal?(r.width=h?h*s:a&&e.availableWidth,r.height=n):(r.width=s,r.height=h?h*n:a&&e.availableHeight)}return i}(l.concat(h),d);ys(r.fullSize,f,d,g),ys(l,f,d,g),ys(h,f,d,g)&&ys(l,f,d,g),function(t){const e=t.maxPadding;function i(i){const s=Math.max(e[i]-t[i],0);return t[i]+=s,s}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),ws(r.leftAndTop,f,d,g),f.x+=f.w,f.y+=f.h,ws(r.rightAndBottom,f,d,g),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},G(r.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class ks{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,s){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,s?Math.floor(e/s):i)}}isAttached(t){return!0}updateConfig(t){}}class Ss extends ks{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Ps="$chartjs",Ds={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Os=t=>null===t||""===t,Cs=!!gi&&{passive:!0};function As(t,e,i){t.canvas.removeEventListener(e,i,Cs)}function Ts(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function Ls(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Ts(i.addedNodes,s),e=e&&!Ts(i.removedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}function Es(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Ts(i.removedNodes,s),e=e&&!Ts(i.addedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}const Is=new Map;let Rs=0;function zs(){const t=window.devicePixelRatio;t!==Rs&&(Rs=t,Is.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function Fs(t,e,i){const s=t.canvas,n=s&&oi(s);if(!n)return;const o=Ht(((t,e)=>{const s=n.clientWidth;i(t,e),s<n.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,s=e.contentRect.height;0===i&&0===s||o(i,s)}));return a.observe(n),function(t,e){Is.size||window.addEventListener("resize",zs),Is.set(t,e)}(t,o),a}function Vs(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){Is.delete(t),Is.size||window.removeEventListener("resize",zs)}(t)}function Bs(t,e,i){const s=t.canvas,n=Ht((e=>{null!==t.ctx&&i(function(t,e){const i=Ds[t.type]||t.type,{x:s,y:n}=di(t,e);return{type:i,chart:e,native:t,x:void 0!==s?s:null,y:void 0!==n?n:null}}(e,t))}),t);return function(t,e,i){t.addEventListener(e,i,Cs)}(s,e,n),n}class Ns extends ks{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,s=t.getAttribute("height"),n=t.getAttribute("width");if(t[Ps]={initial:{height:s,width:n,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",Os(n)){const e=pi(t,"width");void 0!==e&&(t.width=e)}if(Os(s))if(""===t.style.height)t.height=t.width/(e||2);else{const e=pi(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[Ps])return!1;const i=e[Ps].initial;["height","width"].forEach((t=>{const s=i[t];j(s)?e.removeAttribute(t):e.setAttribute(t,s)}));const s=i.style||{};return Object.keys(s).forEach((t=>{e.style[t]=s[t]})),e.width=e.width,delete e[Ps],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const s=t.$proxies||(t.$proxies={}),n={attach:Ls,detach:Es,resize:Fs}[e]||Bs;s[e]=n(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),s=i[e];s&&(({attach:Vs,detach:Vs,resize:Vs}[e]||As)(t,e,s),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,s){return function(t,e,i,s){const n=ri(t),o=hi(n,"margin"),a=ai(n.maxWidth,t,"clientWidth")||gt,r=ai(n.maxHeight,t,"clientHeight")||gt,l=function(t,e,i){let s,n;if(void 0===e||void 0===i){const o=oi(t);if(o){const t=o.getBoundingClientRect(),a=ri(o),r=hi(a,"border","width"),l=hi(a,"padding");e=t.width-l.width-r.width,i=t.height-l.height-r.height,s=ai(a.maxWidth,o,"clientWidth"),n=ai(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:s||gt,maxHeight:n||gt}}(t,e,i);let{width:h,height:c}=l;if("content-box"===n.boxSizing){const t=hi(n,"border","width"),e=hi(n,"padding");h-=e.width+t.width,c-=e.height+t.height}return h=Math.max(0,h-o.width),c=Math.max(0,s?h/s:c-o.height),h=ui(Math.min(h,a,l.maxWidth)),c=ui(Math.min(c,r,l.maxHeight)),h&&!c&&(c=ui(h/2)),(void 0!==e||void 0!==i)&&s&&l.height&&c>l.height&&(c=l.height,h=ui(Math.floor(c*s))),{width:h,height:c}}(t,e,i,s)}isAttached(t){const e=oi(t);return!(!e||!e.isConnected)}}class Ws{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return Mt(this.x)&&Mt(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const s={};return t.forEach((t=>{s[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),s}}function Hs(t,e,i,s,n){const o=X(s,0),a=Math.min(X(n,t.length),t.length);let r,l,h,c=0;for(i=Math.ceil(i),n&&(r=n-s,i=r/Math.floor(r/i)),h=o;h<0;)c++,h=Math.round(o+c*i);for(l=Math.max(o,0);l<a;l++)l===h&&(e.push(t[l]),c++,h=Math.round(o+c*i))}const js=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,$s=(t,e)=>Math.min(e||t,t);function Ys(t,e){const i=[],s=t.length/e,n=t.length;let o=0;for(;o<n;o+=s)i.push(t[Math.floor(o)]);return i}function Us(t,e,i){const s=t.ticks.length,n=Math.min(e,s-1),o=t._startPixel,a=t._endPixel,r=1e-6;let l,h=t.getPixelForTick(n);if(!(i&&(l=1===s?Math.max(h-o,a-h):0===e?(t.getPixelForTick(1)-h)/2:(h-t.getPixelForTick(n-1))/2,h+=n<e?l:-l,h<o-r||h>a+r)))return h}function Zs(t){return t.drawTicks?t.tickLength:0}function Xs(t,e){if(!t.display)return 0;const i=Re(t.font,e),s=Ie(t.padding);return($(t.text)?t.text.length:1)*i.lineHeight+s.height}function qs(t,e,i){let s=jt(t);return(i&&"right"!==e||!i&&"right"===e)&&(s=(t=>"left"===t?"right":"right"===t?"left":t)(s)),s}class Ks extends Ws{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:s}=this;return t=Z(t,Number.POSITIVE_INFINITY),e=Z(e,Number.NEGATIVE_INFINITY),i=Z(i,Number.POSITIVE_INFINITY),s=Z(s,Number.NEGATIVE_INFINITY),{min:Z(t,i),max:Z(e,s),minDefined:U(t),maxDefined:U(e)}}getMinMax(t){let e,{min:i,max:s,minDefined:n,maxDefined:o}=this.getUserBounds();if(n&&o)return{min:i,max:s};const a=this.getMatchingVisibleMetas();for(let r=0,l=a.length;r<l;++r)e=a[r].controller.getMinMax(this,t),n||(i=Math.min(i,e.min)),o||(s=Math.max(s,e.max));return i=o&&i>s?s:i,s=n&&i>s?i:s,{min:Z(i,Z(s,i)),max:Z(s,Z(i,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){K(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:s,grace:n,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:s,max:n}=t,o=q(e,(n-s)/2),a=(t,e)=>i&&0===t?0:t+e;return{min:a(s,-Math.abs(o)),max:a(n,o)}}(this,n,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const r=a<this.ticks.length;this._convertTicksToLabels(r?Ys(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const i=t.options.ticks,s=function(t){const e=t.options.offset,i=t._tickSize(),s=t._length/i+(e?0:1),n=t._maxLength/i;return Math.floor(Math.min(s,n))}(t),n=Math.min(i.maxTicksLimit||s,s),o=i.major.enabled?function(t){const e=[];let i,s;for(i=0,s=t.length;i<s;i++)t[i].major&&e.push(i);return e}(e):[],a=o.length,r=o[0],l=o[a-1],h=[];if(a>n)return function(t,e,i,s){let n,o=0,a=i[0];for(s=Math.ceil(s),n=0;n<t.length;n++)n===a&&(e.push(t[n]),o++,a=i[o*s])}(e,h,o,a/n),h;const c=function(t,e,i){const s=function(t){const e=t.length;let i,s;if(e<2)return!1;for(s=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==s)return!1;return s}(t),n=e.length/i;if(!s)return Math.max(n,1);const o=function(t){const e=[],i=Math.sqrt(t);let s;for(s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(s);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>n)return e}return Math.max(n,1)}(o,e,n);if(a>0){let t,i;const s=a>1?Math.round((l-r)/(a-1)):null;for(Hs(e,h,c,j(s)?0:r-s,r),t=0,i=a-1;t<i;t++)Hs(e,h,c,o[t],o[t+1]);return Hs(e,h,c,l,j(s)?e.length:l+s),h}return Hs(e,h,c),h}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),r&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){K(this.options.afterUpdate,[this])}beforeSetDimensions(){K(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){K(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),K(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){K(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,s,n;for(i=0,s=t.length;i<s;i++)n=t[i],n.label=K(e.callback,[n.value,i,t],this)}afterTickToLabelConversion(){K(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){K(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=$s(this.ticks.length,t.ticks.maxTicksLimit),s=e.minRotation||0,n=e.maxRotation;let o,a,r,l=s;if(!this._isVisible()||!e.display||s>=n||i<=1||!this.isHorizontal())return void(this.labelRotation=s);const h=this._getLabelSizes(),c=h.widest.width,d=h.highest.height,u=Et(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),a=this.maxHeight-Zs(t.grid)-e.padding-Xs(t.title,this.chart.options.font),r=Math.sqrt(c*c+d*d),l=Pt(Math.min(Math.asin(Et((h.highest.height+6)/o,-1,1)),Math.asin(Et(a/r,-1,1))-Math.asin(Et(d/r,-1,1)))),l=Math.max(s,Math.min(n,l))),this.labelRotation=l}afterCalculateLabelRotation(){K(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){K(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:s,grid:n}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=Xs(s,e.options.font);if(a?(t.width=this.maxWidth,t.height=Zs(n)+o):(t.height=this.maxHeight,t.width=Zs(n)+o),i.display&&this.ticks.length){const{first:e,last:s,widest:n,highest:o}=this._getLabelSizes(),r=2*i.padding,l=St(this.labelRotation),h=Math.cos(l),c=Math.sin(l);if(a){const e=i.mirror?0:c*n.width+h*o.height;t.height=Math.min(this.maxHeight,t.height+e+r)}else{const e=i.mirror?0:h*n.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+r)}this._calculatePadding(e,s,c,h)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,s){const{ticks:{align:n,padding:o},position:a}=this.options,r=0!==this.labelRotation,l="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,h=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;r?l?(c=s*t.width,d=i*e.height):(c=i*t.height,d=s*e.width):"start"===n?d=e.width:"end"===n?c=t.width:"inner"!==n&&(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((d-h+o)*this.width/(this.width-h),0)}else{let i=e.height/2,s=t.height/2;"start"===n?(i=0,s=t.height):"end"===n&&(i=e.height,s=0),this.paddingTop=i+o,this.paddingBottom=s+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){K(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)j(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Ys(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:s,_longestTextCache:n}=this,o=[],a=[],r=Math.floor(e/$s(e,i));let l,h,c,d,u,f,g,p,m,b,x,_=0,y=0;for(l=0;l<e;l+=r){if(d=t[l].label,u=this._resolveTickFontOptions(l),s.font=f=u.string,g=n[f]=n[f]||{data:{},gc:[]},p=u.lineHeight,m=b=0,j(d)||$(d)){if($(d))for(h=0,c=d.length;h<c;++h)x=d[h],j(x)||$(x)||(m=ue(s,g.data,g.gc,m,x),b+=p)}else m=ue(s,g.data,g.gc,m,d),b=p;o.push(m),a.push(b),_=Math.max(m,_),y=Math.max(b,y)}!function(t,e){G(t,(t=>{const i=t.gc,s=i.length/2;let n;if(s>e){for(n=0;n<s;++n)delete t.data[i[n]];i.splice(0,s)}}))}(n,e);const v=o.indexOf(_),w=a.indexOf(y),M=t=>({width:o[t]||0,height:a[t]||0});return{first:M(0),last:M(e-1),widest:M(v),highest:M(w),widths:o,heights:a}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return Et(this._alignToPixels?ge(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return Fe(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=Fe(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=St(this.labelRotation),i=Math.abs(Math.cos(e)),s=Math.abs(Math.sin(e)),n=this._getLabelSizes(),o=t.autoSkipPadding||0,a=n?n.widest.width+o:0,r=n?n.highest.height+o:0;return this.isHorizontal()?r*i>a*s?a/i:r/s:r*s<a*i?r/i:a/s}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,s=this.options,{grid:n,position:o,border:a}=s,r=n.offset,l=this.isHorizontal(),h=this.ticks.length+(r?1:0),c=Zs(n),d=[],u=a.setContext(this.getContext()),f=u.display?u.width:0,g=f/2,p=function(t){return ge(i,t,f)};let m,b,x,_,y,v,w,M,k,S,P,D;if("top"===o)m=p(this.bottom),v=this.bottom-c,M=m-g,S=p(t.top)+g,D=t.bottom;else if("bottom"===o)m=p(this.top),S=t.top,D=p(t.bottom)-g,v=m+g,M=this.top+c;else if("left"===o)m=p(this.right),y=this.right-c,w=m-g,k=p(t.left)+g,P=t.right;else if("right"===o)m=p(this.left),k=t.left,P=p(t.right)-g,y=m+g,w=this.left+c;else if("x"===e){if("center"===o)m=p((t.top+t.bottom)/2+.5);else if(Y(o)){const t=Object.keys(o)[0],e=o[t];m=p(this.chart.scales[t].getPixelForValue(e))}S=t.top,D=t.bottom,v=m+g,M=v+c}else if("y"===e){if("center"===o)m=p((t.left+t.right)/2);else if(Y(o)){const t=Object.keys(o)[0],e=o[t];m=p(this.chart.scales[t].getPixelForValue(e))}y=m-g,w=y-c,k=t.left,P=t.right}const O=X(s.ticks.maxTicksLimit,h),C=Math.max(1,Math.ceil(h/O));for(b=0;b<h;b+=C){const t=this.getContext(b),e=n.setContext(t),s=a.setContext(t),o=e.lineWidth,h=e.color,c=s.dash||[],u=s.dashOffset,f=e.tickWidth,g=e.tickColor,p=e.tickBorderDash||[],m=e.tickBorderDashOffset;x=Us(this,b,r),void 0!==x&&(_=ge(i,x,o),l?y=w=k=P=_:v=M=S=D=_,d.push({tx1:y,ty1:v,tx2:w,ty2:M,x1:k,y1:S,x2:P,y2:D,width:o,color:h,borderDash:c,borderDashOffset:u,tickWidth:f,tickColor:g,tickBorderDash:p,tickBorderDashOffset:m}))}return this._ticksLength=h,this._borderValue=m,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:s,ticks:n}=i,o=this.isHorizontal(),a=this.ticks,{align:r,crossAlign:l,padding:h,mirror:c}=n,d=Zs(i.grid),u=d+h,f=c?-h:u,g=-St(this.labelRotation),p=[];let m,b,x,_,y,v,w,M,k,S,P,D,O="middle";if("top"===s)v=this.bottom-f,w=this._getXAxisLabelAlignment();else if("bottom"===s)v=this.top+f,w=this._getXAxisLabelAlignment();else if("left"===s){const t=this._getYAxisLabelAlignment(d);w=t.textAlign,y=t.x}else if("right"===s){const t=this._getYAxisLabelAlignment(d);w=t.textAlign,y=t.x}else if("x"===e){if("center"===s)v=(t.top+t.bottom)/2+u;else if(Y(s)){const t=Object.keys(s)[0],e=s[t];v=this.chart.scales[t].getPixelForValue(e)+u}w=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===s)y=(t.left+t.right)/2-u;else if(Y(s)){const t=Object.keys(s)[0],e=s[t];y=this.chart.scales[t].getPixelForValue(e)}w=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===r?O="top":"end"===r&&(O="bottom"));const C=this._getLabelSizes();for(m=0,b=a.length;m<b;++m){x=a[m],_=x.label;const t=n.setContext(this.getContext(m));M=this.getPixelForTick(m)+n.labelOffset,k=this._resolveTickFontOptions(m),S=k.lineHeight,P=$(_)?_.length:1;const e=P/2,i=t.color,r=t.textStrokeColor,h=t.textStrokeWidth;let d,u=w;if(o?(y=M,"inner"===w&&(u=m===b-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),D="top"===s?"near"===l||0!==g?-P*S+S/2:"center"===l?-C.highest.height/2-e*S+S:-C.highest.height+S/2:"near"===l||0!==g?S/2:"center"===l?C.highest.height/2-e*S:C.highest.height-P*S,c&&(D*=-1),0===g||t.showLabelBackdrop||(y+=S/2*Math.sin(g))):(v=M,D=(1-P)*S/2),t.showLabelBackdrop){const e=Ie(t.backdropPadding),i=C.heights[m],s=C.widths[m];let n=D-e.top,o=0-e.left;switch(O){case"middle":n-=i/2;break;case"bottom":n-=i}switch(w){case"center":o-=s/2;break;case"right":o-=s}d={left:o,top:n,width:s+e.width,height:i+e.height,color:t.backdropColor}}p.push({label:_,font:k,textOffset:D,options:{rotation:g,color:i,strokeColor:r,strokeWidth:h,textAlign:u,textBaseline:O,translation:[y,v],backdrop:d}})}return p}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-St(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:s,padding:n}}=this.options,o=t+n,a=this._getLabelSizes().widest.width;let r,l;return"left"===e?s?(l=this.right+n,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l+=a)):(l=this.right-o,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l=this.left)):"right"===e?s?(l=this.left+n,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l-=a)):(l=this.left+o,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l=this.right)):r="right",{textAlign:r,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:s,width:n,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,s,n,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,s=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let n,o;const a=(t,e,s)=>{s.width&&s.color&&(i.save(),i.lineWidth=s.width,i.strokeStyle=s.color,i.setLineDash(s.borderDash||[]),i.lineDashOffset=s.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(n=0,o=s.length;n<o;++n){const t=s[n];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:s}}=this,n=i.setContext(this.getContext()),o=i.display?n.width:0;if(!o)return;const a=s.setContext(this.getContext(0)).lineWidth,r=this._borderValue;let l,h,c,d;this.isHorizontal()?(l=ge(t,this.left,o)-o/2,h=ge(t,this.right,a)+a/2,c=d=r):(c=ge(t,this.top,o)-o/2,d=ge(t,this.bottom,a)+a/2,l=h=r),e.save(),e.lineWidth=n.width,e.strokeStyle=n.color,e.beginPath(),e.moveTo(l,c),e.lineTo(h,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&_e(e,i);const s=this.getLabelItems(t);for(const t of s){const i=t.options,s=t.font;Se(e,t.label,0,t.textOffset,s,i)}i&&ye(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:s}}=this;if(!i.display)return;const n=Re(i.font),o=Ie(i.padding),a=i.align;let r=n.lineHeight/2;"bottom"===e||"center"===e||Y(e)?(r+=o.bottom,$(i.text)&&(r+=n.lineHeight*(i.text.length-1))):r+=o.top;const{titleX:l,titleY:h,maxWidth:c,rotation:d}=function(t,e,i,s){const{top:n,left:o,bottom:a,right:r,chart:l}=t,{chartArea:h,scales:c}=l;let d,u,f,g=0;const p=a-n,m=r-o;if(t.isHorizontal()){if(u=$t(s,o,r),Y(i)){const t=Object.keys(i)[0],s=i[t];f=c[t].getPixelForValue(s)+p-e}else f="center"===i?(h.bottom+h.top)/2+p-e:js(t,i,e);d=r-o}else{if(Y(i)){const t=Object.keys(i)[0],s=i[t];u=c[t].getPixelForValue(s)-m+e}else u="center"===i?(h.left+h.right)/2-m+e:js(t,i,e);f=$t(s,a,n),g="left"===i?-mt:mt}return{titleX:u,titleY:f,maxWidth:d,rotation:g}}(this,r,e,a);Se(t,i.text,0,0,n,{color:i.color,maxWidth:c,rotation:d,textAlign:qs(a,e,s),textBaseline:"middle",translation:[l,h]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=X(t.grid&&t.grid.z,-1),s=X(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Ks.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:s,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",s=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];o[i]!==this.id||t&&o.type!==t||s.push(o)}return s}_resolveTickFontOptions(t){return Re(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Gs{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const s=this.items,n=t.id,o=this.scope+"."+n;if(!n)throw new Error("class does not have id: "+t);return n in s||(s[n]=t,function(t,e,i){const s=it(Object.create(null),[i?de.get(i):{},de.get(e),t.defaults]);de.set(e,s),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const s=i.split("."),n=s.pop(),o=[t].concat(s).join("."),a=e[i].split("."),r=a.pop(),l=a.join(".");de.route(o,n,l,r)}))}(e,t.defaultRoutes),t.descriptors&&de.describe(e,t.descriptors)}(t,o,i),this.override&&de.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,s=this.scope;i in e&&delete e[i],s&&i in de[s]&&(delete de[s][i],this.override&&delete ae[i])}}class Js{constructor(){this.controllers=new Gs(Yi,"datasets",!0),this.elements=new Gs(Ws,"elements"),this.plugins=new Gs(Object,"plugins"),this.scales=new Gs(Ks,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const s=i||this._getRegistryForType(e);i||s.isForType(e)||s===this.plugins&&e.id?this._exec(t,s,e):G(e,(e=>{const s=i||this._getRegistryForType(e);this._exec(t,s,e)}))}))}_exec(t,e,i){const s=rt(t);K(i["before"+s],[],i),e[t](i),K(i["after"+s],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const s=e.get(t);if(void 0===s)throw new Error('"'+t+'" is not a registered '+i+".");return s}}var Qs=new Js;class tn{constructor(){this._init=[]}notify(t,e,i,s){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const n=s?this._descriptors(t).filter(s):this._descriptors(t),o=this._notify(n,t,e,i);return"afterDestroy"===e&&(this._notify(n,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,s){s=s||{};for(const n of t){const t=n.plugin;if(!1===K(t[i],[e,s,n.options],t)&&s.cancelable)return!1}return!0}invalidate(){j(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,s=X(i.options&&i.options.plugins,{}),n=function(t){const e={},i=[],s=Object.keys(Qs.plugins.items);for(let t=0;t<s.length;t++)i.push(Qs.getPlugin(s[t]));const n=t.plugins||[];for(let t=0;t<n.length;t++){const s=n[t];-1===i.indexOf(s)&&(i.push(s),e[s.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==s||e?function(t,{plugins:e,localIds:i},s,n){const o=[],a=t.getContext();for(const r of e){const e=r.id,l=en(s[e],n);null!==l&&o.push({plugin:r,options:sn(t.config,{plugin:r,local:i[e]},l,a)})}return o}(t,n,s,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,s=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(s(e,i),t,"stop"),this._notify(s(i,e),t,"start")}}function en(t,e){return e||!1!==t?!0===t?{}:t:null}function sn(t,{plugin:e,local:i},s,n){const o=t.pluginScopeKeys(e),a=t.getOptionScopes(s,o);return i&&e.defaults&&a.push(e.defaults),t.createResolver(a,n,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function nn(t,e){const i=de.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function on(t){if("x"===t||"y"===t||"r"===t)return t}function an(t,...e){if(on(t))return t;for(const s of e){const e=s.axis||("top"===(i=s.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&on(t[0].toLowerCase());if(e)return e}var i;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function rn(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function ln(t){const e=t.options||(t.options={});e.plugins=X(e.plugins,{}),e.scales=function(t,e){const i=ae[t.type]||{scales:{}},s=e.scales||{},n=nn(t.type,e),o=Object.create(null);return Object.keys(s).forEach((e=>{const a=s[e];if(!Y(a))return console.error(`Invalid scale configuration for scale: ${e}`);if(a._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const r=an(e,a,function(t,e){if(e.data&&e.data.datasets){const i=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(i.length)return rn(t,"x",i[0])||rn(t,"y",i[0])}return{}}(e,t),de.scales[a.type]),l=function(t,e){return t===e?"_index_":"_value_"}(r,n),h=i.scales||{};o[e]=st(Object.create(null),[{axis:r},a,h[r],h[l]])})),t.data.datasets.forEach((i=>{const n=i.type||t.type,a=i.indexAxis||nn(n,e),r=(ae[n]||{}).scales||{};Object.keys(r).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,a),n=i[e+"AxisID"]||e;o[n]=o[n]||Object.create(null),st(o[n],[{axis:e},s[n],r[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];st(e,[de.scales[e.type],de.scale])})),o}(t,e)}function hn(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const cn=new Map,dn=new Set;function un(t,e){let i=cn.get(t);return i||(i=e(),cn.set(t,i),dn.add(i)),i}const fn=(t,e,i)=>{const s=at(e,i);void 0!==s&&t.add(s)};class gn{constructor(t){this._config=function(t){return(t=t||{}).data=hn(t.data),ln(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=hn(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),ln(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return un(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return un(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return un(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return un(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let s=i.get(t);return s&&!e||(s=new Map,i.set(t,s)),s}getOptionScopes(t,e,i){const{options:s,type:n}=this,o=this._cachedScopes(t,i),a=o.get(e);if(a)return a;const r=new Set;e.forEach((e=>{t&&(r.add(t),e.forEach((e=>fn(r,t,e)))),e.forEach((t=>fn(r,s,t))),e.forEach((t=>fn(r,ae[n]||{},t))),e.forEach((t=>fn(r,de,t))),e.forEach((t=>fn(r,re,t)))}));const l=Array.from(r);return 0===l.length&&l.push(Object.create(null)),dn.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,ae[e]||{},de.datasets[e]||{},{type:e},de,re]}resolveNamedOptions(t,e,i,s=[""]){const n={$shared:!0},{resolver:o,subPrefixes:a}=pn(this._resolverCache,t,s);let r=o;(function(t,e){const{isScriptable:i,isIndexable:s}=Ne(t);for(const n of e){const e=i(n),o=s(n),a=(o||e)&&t[n];if(e&&(ht(a)||mn(a))||o&&$(a))return!0}return!1})(o,e)&&(n.$shared=!1,r=Be(o,i=ht(i)?i():i,this.createResolver(t,i,a)));for(const t of e)n[t]=r[t];return n}createResolver(t,e,i=[""],s){const{resolver:n}=pn(this._resolverCache,t,i);return Y(e)?Be(n,e,void 0,s):n}}function pn(t,e,i){let s=t.get(e);s||(s=new Map,t.set(e,s));const n=i.join();let o=s.get(n);return o||(o={resolver:Ve(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},s.set(n,o)),o}const mn=t=>Y(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||ht(t[i])),!1),bn=["top","bottom","left","right","chartArea"];function xn(t,e){return"top"===t||"bottom"===t||-1===bn.indexOf(t)&&"x"===e}function _n(t,e){return function(i,s){return i[t]===s[t]?i[e]-s[e]:i[t]-s[t]}}function yn(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),K(i&&i.onComplete,[t],e)}function vn(t){const e=t.chart,i=e.options.animation;K(i&&i.onProgress,[t],e)}function wn(t){return ni()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Mn={},kn=t=>{const e=wn(t);return Object.values(Mn).filter((t=>t.canvas===e)).pop()};function Sn(t,e,i){const s=Object.keys(t);for(const n of s){const s=+n;if(s>=e){const o=t[n];delete t[n],(i>0||s>e)&&(t[s+i]=o)}}}class Pn{static defaults=de;static instances=Mn;static overrides=ae;static registry=Qs;static version="4.3.0";static getChart=kn;static register(...t){Qs.add(...t),Dn()}static unregister(...t){Qs.remove(...t),Dn()}constructor(t,e){const i=this.config=new gn(e),s=wn(t),n=kn(s);if(n)throw new Error("Canvas is already in use. Chart with ID '"+n.id+"' must be destroyed before the canvas with ID '"+n.canvas.id+"' can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!ni()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Ss:Ns}(s)),this.platform.updateConfig(i);const a=this.platform.acquireContext(s,o.aspectRatio),r=a&&a.canvas,l=r&&r.height,h=r&&r.width;this.id=H(),this.ctx=a,this.canvas=r,this.width=h,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new tn,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...s){return e?(clearTimeout(i),i=setTimeout(t,e,s)):t.apply(this,s),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],Mn[this.id]=this,a&&r?(Ci.listen(this,"complete",yn),Ci.listen(this,"progress",vn),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:s,_aspectRatio:n}=this;return j(t)?e&&n?n:s?i/s:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return Qs}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():fi(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return pe(this.canvas,this.ctx),this}stop(){return Ci.stop(this),this}resize(t,e){Ci.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,s=this.canvas,n=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(s,t,e,n),a=i.devicePixelRatio||this.platform.getDevicePixelRatio(),r=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,fi(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),K(i.onResize,[this,o],this),this.attached&&this._doResize(r)&&this.render())}ensureScalesHaveIDs(){G(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,s=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let n=[];e&&(n=n.concat(Object.keys(e).map((t=>{const i=e[t],s=an(t,i),n="r"===s,o="x"===s;return{options:i,dposition:n?"chartArea":o?"bottom":"left",dtype:n?"radialLinear":o?"category":"linear"}})))),G(n,(e=>{const n=e.options,o=n.id,a=an(o,n),r=X(n.type,e.dtype);void 0!==n.position&&xn(n.position,a)===xn(e.dposition)||(n.position=e.dposition),s[o]=!0;let l=null;o in i&&i[o].type===r?l=i[o]:(l=new(Qs.getScale(r))({id:o,type:r,ctx:this.ctx,chart:this}),i[l.id]=l),l.init(n,t)})),G(s,((t,e)=>{t||delete i[e]})),G(i,(t=>{Ms.configure(this,t,t.options),Ms.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(_n("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,s;for(this._removeUnreferencedMetasets(),i=0,s=e.length;i<s;i++){const s=e[i];let n=this.getDatasetMeta(i);const o=s.type||this.config.type;if(n.type&&n.type!==o&&(this._destroyDatasetMeta(i),n=this.getDatasetMeta(i)),n.type=o,n.indexAxis=s.indexAxis||nn(o,this.options),n.order=s.order||0,n.index=i,n.label=""+s.label,n.visible=this.isDatasetVisible(i),n.controller)n.controller.updateIndex(i),n.controller.linkScales();else{const e=Qs.getController(o),{datasetElementType:s,dataElementType:a}=de.datasets[o];Object.assign(e,{dataElementType:Qs.getElement(a),datasetElementType:s&&Qs.getElement(s)}),n.controller=new e(this,i),t.push(n.controller)}}return this._updateMetasets(),t}_resetElements(){G(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const n=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!s&&-1===n.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),s||G(n,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(_n("z","_idx"));const{_active:a,_lastEvent:r}=this;r?this._eventHandler(r,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){G(this.scales,(t=>{Ms.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);ct(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:s,count:n}of e)Sn(t,s,"_removeElements"===i?-n:n)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),s=i(0);for(let t=1;t<e;t++)if(!ct(s,i(t)))return;return Array.from(s).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Ms.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],G(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,ht(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),s={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",s)&&(i.controller._update(e),s.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",s))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(Ci.has(this)?this.attached&&!Ci.running(this)&&Ci.start(this):(this.draw(),yn({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let s,n;for(s=0,n=e.length;s<n;++s){const n=e[s];t&&!n.visible||i.push(n)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,s=!i.disabled,n=function(t){const{xScale:e,yScale:i}=t;if(e&&i)return{left:e.left,right:e.right,top:i.top,bottom:i.bottom}}(t)||this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(s&&_e(e,{left:!1===i.left?0:n.left-i.left,right:!1===i.right?this.width:n.right+i.right,top:!1===i.top?0:n.top-i.top,bottom:!1===i.bottom?this.height:n.bottom+i.bottom}),t.controller.draw(),s&&ye(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return xe(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,s){const n=ds.modes[e];return"function"==typeof n?n(this,t,i,s):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let s=i.filter((t=>t&&t._dataset===e)).pop();return s||(s={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(s)),s}getContext(){return this.$context||(this.$context=Fe(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const s=i?"show":"hide",n=this.getDatasetMeta(t),o=n.controller._resolveAnimations(void 0,s);lt(e)?(n.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(n,{visible:i}),this.update((e=>e.datasetIndex===t?s:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),Ci.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),pe(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete Mn[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};G(this.options.events,(t=>i(t,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(i,s)=>{t[i]&&(e.removeEventListener(this,i,s),delete t[i])},n=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{s("attach",a),this.attached=!0,this.resize(),i("resize",n),i("detach",o)};o=()=>{this.attached=!1,s("resize",n),this._stop(),this._resize(0,0),i("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){G(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},G(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const s=i?"set":"remove";let n,o,a,r;for("dataset"===e&&(n=this.getDatasetMeta(t[0].datasetIndex),n.controller["_"+s+"DatasetHoverStyle"]()),a=0,r=t.length;a<r;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[s+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!J(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const s=this.options.hover,n=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=n(e,t),a=i?t:n(t,e);o.length&&this.updateHoverStyle(o,s.mode,!1),a.length&&s.mode&&this.updateHoverStyle(a,s.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},s=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,s))return;const n=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,s),(n||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:s=[],options:n}=this,o=e,a=this._getActiveElements(t,s,i,o),r=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,s){return i&&"mouseout"!==t.type?s?e:t:null}(t,this._lastEvent,i,r);i&&(this._lastEvent=null,K(n.onHover,[t,a,this],this),r&&K(n.onClick,[t,a,this],this));const h=!J(a,s);return(h||e)&&(this._active=a,this._updateHoverStyles(a,s,e)),this._lastEvent=l,h}_getActiveElements(t,e,i,s){if("mouseout"===t.type)return[];if(!i)return e;const n=this.options.hover;return this.getElementsAtEventForMode(t,n.mode,n,s)}}function Dn(){return G(Pn.instances,(t=>t._plugins.invalidate()))}function On(t,e,i,s){return{x:i+t*Math.cos(e),y:s+t*Math.sin(e)}}function Cn(t,e,i,s,n,o){const{x:a,y:r,startAngle:l,pixelMargin:h,innerRadius:c}=e,d=Math.max(e.outerRadius+s+i-h,0),u=c>0?c+s+i+h:0;let f=0;const g=n-l;if(s){const t=((c>0?c-s:0)+(d>0?d-s:0))/2;f=(g-(0!==t?g*t/(t+s):g))/2}const p=(g-Math.max(.001,g*d-i/dt)/d)/2,m=l+p+f,b=n-p-f,{outerStart:x,outerEnd:_,innerStart:y,innerEnd:v}=function(t,e,i,s){const n=Te(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,a=Math.min(o,s*e/2),r=t=>{const e=(i-Math.min(o,t))*s/2;return Et(t,0,Math.min(o,e))};return{outerStart:r(n.outerStart),outerEnd:r(n.outerEnd),innerStart:Et(n.innerStart,0,a),innerEnd:Et(n.innerEnd,0,a)}}(e,u,d,b-m),w=d-x,M=d-_,k=m+x/w,S=b-_/M,P=u+y,D=u+v,O=m+y/P,C=b-v/D;if(t.beginPath(),o){const e=(k+S)/2;if(t.arc(a,r,d,k,e),t.arc(a,r,d,e,S),_>0){const e=On(M,S,a,r);t.arc(e.x,e.y,_,S,b+mt)}const i=On(D,b,a,r);if(t.lineTo(i.x,i.y),v>0){const e=On(D,C,a,r);t.arc(e.x,e.y,v,b+mt,C+Math.PI)}const s=(b-v/u+(m+y/u))/2;if(t.arc(a,r,u,b-v/u,s,!0),t.arc(a,r,u,s,m+y/u,!0),y>0){const e=On(P,O,a,r);t.arc(e.x,e.y,y,O+Math.PI,m-mt)}const n=On(w,m,a,r);if(t.lineTo(n.x,n.y),x>0){const e=On(w,k,a,r);t.arc(e.x,e.y,x,m-mt,k)}}else{t.moveTo(a,r);const e=Math.cos(k)*d+a,i=Math.sin(k)*d+r;t.lineTo(e,i);const s=Math.cos(S)*d+a,n=Math.sin(S)*d+r;t.lineTo(s,n)}t.closePath()}function An(t,e,i=e){t.lineCap=X(i.borderCapStyle,e.borderCapStyle),t.setLineDash(X(i.borderDash,e.borderDash)),t.lineDashOffset=X(i.borderDashOffset,e.borderDashOffset),t.lineJoin=X(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=X(i.borderWidth,e.borderWidth),t.strokeStyle=X(i.borderColor,e.borderColor)}function Tn(t,e,i){t.lineTo(i.x,i.y)}function Ln(t,e,i={}){const s=t.length,{start:n=0,end:o=s-1}=i,{start:a,end:r}=e,l=Math.max(n,a),h=Math.min(o,r),c=n<a&&o<a||n>r&&o>r;return{count:s,start:l,loop:e.loop,ilen:h<l&&!c?s+h-l:h-l}}function En(t,e,i,s){const{points:n,options:o}=e,{count:a,start:r,loop:l,ilen:h}=Ln(n,i,s),c=function(t){return t.stepped?ve:t.tension||"monotone"===t.cubicInterpolationMode?we:Tn}(o);let d,u,f,{move:g=!0,reverse:p}=s||{};for(d=0;d<=h;++d)u=n[(r+(p?h-d:d))%a],u.skip||(g?(t.moveTo(u.x,u.y),g=!1):c(t,f,u,p,o.stepped),f=u);return l&&(u=n[(r+(p?h:0))%a],c(t,f,u,p,o.stepped)),!!l}function In(t,e,i,s){const n=e.points,{count:o,start:a,ilen:r}=Ln(n,i,s),{move:l=!0,reverse:h}=s||{};let c,d,u,f,g,p,m=0,b=0;const x=t=>(a+(h?r-t:t))%o,_=()=>{f!==g&&(t.lineTo(m,g),t.lineTo(m,f),t.lineTo(m,p))};for(l&&(d=n[x(0)],t.moveTo(d.x,d.y)),c=0;c<=r;++c){if(d=n[x(c)],d.skip)continue;const e=d.x,i=d.y,s=0|e;s===u?(i<f?f=i:i>g&&(g=i),m=(b*m+e)/++b):(_(),t.lineTo(e,i),u=s,b=0,f=g=i),p=i}_()}function Rn(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?En:In}const zn="function"==typeof Path2D;class Fn extends Ws{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const s=i.spanGaps?this._loop:this._fullLoop;si(this._points,i,t,s,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,s=t.options.spanGaps,n=i.length;if(!n)return[];const o=!!t._loop,{start:a,end:r}=function(t,e,i,s){let n=0,o=e-1;if(i&&!s)for(;n<e&&!t[n].skip;)n++;for(;n<e&&t[n].skip;)n++;for(n%=e,i&&(o+=n);o>n&&t[o%e].skip;)o--;return o%=e,{start:n,end:o}}(i,n,o,s);return function(t,e,i,s){return s&&s.setContext&&i?function(t,e,i,s){const n=t._chart.getContext(),o=Pi(t.options),{_datasetIndex:a,options:{spanGaps:r}}=t,l=i.length,h=[];let c=o,d=e[0].start,u=d;function f(t,e,s,n){const o=r?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(h.push({start:t%l,end:e%l,loop:s,style:n}),c=n,d=e%l)}}for(const t of e){d=r?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const r=i[u%l];e=Pi(s.setContext(Fe(n,{type:"segment",p0:o,p1:r,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:a}))),Di(e,c)&&f(d,u-1,t.loop,c),o=r,c=e}d<u-1&&f(d,u-1,t.loop,c)}return h}(t,e,i,s):e}(t,!0===s?[{start:a,end:r,loop:o}]:function(t,e,i,s){const n=t.length,o=[];let a,r=e,l=t[e];for(a=e+1;a<=i;++a){const i=t[a%n];i.skip||i.stop?l.skip||(s=!1,o.push({start:e%n,end:(a-1)%n,loop:s}),e=r=i.stop?a:null):(r=a,l.skip&&(e=a)),l=i}return null!==r&&o.push({start:e%n,end:r%n,loop:s}),o}(i,a,r<a?r+n:r,!!t._fullLoop&&0===a&&r===n-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,s=t[e],n=this.points,o=Si(this,{property:e,start:s,end:s});if(!o.length)return;const a=[],r=function(t){return t.stepped?bi:t.tension||"monotone"===t.cubicInterpolationMode?xi:mi}(i);let l,h;for(l=0,h=o.length;l<h;++l){const{start:h,end:c}=o[l],d=n[h],u=n[c];if(d===u){a.push(d);continue}const f=r(d,u,Math.abs((s-d[e])/(u[e]-d[e])),i.stepped);f[e]=t[e],a.push(f)}return 1===a.length?a[0]:a}pathSegment(t,e,i){return Rn(this)(t,this,e,i)}path(t,e,i){const s=this.segments,n=Rn(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const a of s)o&=n(t,this,a,{start:e,end:e+i-1});return!!o}draw(t,e,i,s){const n=this.options||{};(this.points||[]).length&&n.borderWidth&&(t.save(),function(t,e,i,s){zn&&!e.options.segment?function(t,e,i,s){let n=e._path;n||(n=e._path=new Path2D,e.path(n,i,s)&&n.closePath()),An(t,e.options),t.stroke(n)}(t,e,i,s):function(t,e,i,s){const{segments:n,options:o}=e,a=Rn(e);for(const r of n)An(t,o,r.style),t.beginPath(),a(t,e,r,{start:i,end:i+s-1})&&t.closePath(),t.stroke()}(t,e,i,s)}(t,this,i,s),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Vn(t,e,i,s){const n=t.options,{[i]:o}=t.getProps([i],s);return Math.abs(e-o)<n.radius+n.hitRadius}function Bn(t,e){const{x:i,y:s,base:n,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let r,l,h,c,d;return t.horizontal?(d=a/2,r=Math.min(i,n),l=Math.max(i,n),h=s-d,c=s+d):(d=o/2,r=i-d,l=i+d,h=Math.min(s,n),c=Math.max(s,n)),{left:r,top:h,right:l,bottom:c}}function Nn(t,e,i,s){return t?0:Et(e,i,s)}function Wn(t,e,i,s){const n=null===e,o=null===i,a=t&&!(n&&o)&&Bn(t,s);return a&&(n||It(e,a.left,a.right))&&(o||It(i,a.top,a.bottom))}function Hn(t,e){t.rect(e.x,e.y,e.w,e.h)}function jn(t,e,i={}){const s=t.x!==i.x?-e:0,n=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-s,a=(t.y+t.h!==i.y+i.h?e:0)-n;return{x:t.x+s,y:t.y+n,w:t.w+o,h:t.h+a,radius:t.radius}}var $n=Object.freeze({__proto__:null,ArcElement:class extends Ws{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.getProps(["x","y"],i),{angle:n,distance:o}=Ot(s,{x:t,y:e}),{startAngle:a,endAngle:r,innerRadius:l,outerRadius:h,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=(this.options.spacing+this.options.borderWidth)/2,u=X(c,r-a)>=ut||Lt(n,a,r),f=It(o,l+d,h+d);return u&&f}getCenterPoint(t){const{x:e,y:i,startAngle:s,endAngle:n,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:r,spacing:l}=this.options,h=(s+n)/2,c=(o+a+l+r)/2;return{x:e+Math.cos(h)*c,y:i+Math.sin(h)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,s=(e.offset||0)/4,n=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>ut?Math.floor(i/ut):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const a=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(a)*s,Math.sin(a)*s);const r=s*(1-Math.sin(Math.min(dt,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,s,n){const{fullCircles:o,startAngle:a,circumference:r}=e;let l=e.endAngle;if(o){Cn(t,e,i,s,l,n);for(let e=0;e<o;++e)t.fill();isNaN(r)||(l=a+(r%ut||ut))}Cn(t,e,i,s,l,n),t.fill()}(t,this,r,n,o),function(t,e,i,s,n){const{fullCircles:o,startAngle:a,circumference:r,options:l}=e,{borderWidth:h,borderJoinStyle:c,borderDash:d,borderDashOffset:u}=l,f="inner"===l.borderAlign;if(!h)return;t.setLineDash(d||[]),t.lineDashOffset=u,f?(t.lineWidth=2*h,t.lineJoin=c||"round"):(t.lineWidth=h,t.lineJoin=c||"bevel");let g=e.endAngle;if(o){Cn(t,e,i,s,g,n);for(let e=0;e<o;++e)t.stroke();isNaN(r)||(g=a+(r%ut||ut))}f&&function(t,e,i){const{startAngle:s,pixelMargin:n,x:o,y:a,outerRadius:r,innerRadius:l}=e;let h=n/r;t.beginPath(),t.arc(o,a,r,s-h,i+h),l>n?(h=n/l,t.arc(o,a,l,i+h,s-h,!0)):t.arc(o,a,n,i+mt,s-mt),t.closePath(),t.clip()}(t,e,g),o||(Cn(t,e,i,s,g,n),t.stroke())}(t,this,r,n,o),t.restore()}},BarElement:class extends Ws{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:s}}=this,{inner:n,outer:o}=function(t){const e=Bn(t),i=e.right-e.left,s=e.bottom-e.top,n=function(t,e,i){const s=t.options.borderWidth,n=t.borderSkipped,o=Le(s);return{t:Nn(n.top,o.top,0,i),r:Nn(n.right,o.right,0,e),b:Nn(n.bottom,o.bottom,0,i),l:Nn(n.left,o.left,0,e)}}(t,i/2,s/2),o=function(t,e,i){const{enableBorderRadius:s}=t.getProps(["enableBorderRadius"]),n=t.options.borderRadius,o=Ee(n),a=Math.min(e,i),r=t.borderSkipped,l=s||Y(n);return{topLeft:Nn(!l||r.top||r.left,o.topLeft,0,a),topRight:Nn(!l||r.top||r.right,o.topRight,0,a),bottomLeft:Nn(!l||r.bottom||r.left,o.bottomLeft,0,a),bottomRight:Nn(!l||r.bottom||r.right,o.bottomRight,0,a)}}(t,i/2,s/2);return{outer:{x:e.left,y:e.top,w:i,h:s,radius:o},inner:{x:e.left+n.l,y:e.top+n.t,w:i-n.l-n.r,h:s-n.t-n.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(n.t,n.l)),topRight:Math.max(0,o.topRight-Math.max(n.t,n.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(n.b,n.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(n.b,n.r))}}}}(this),a=(r=o.radius).topLeft||r.topRight||r.bottomLeft||r.bottomRight?Pe:Hn;var r;t.save(),o.w===n.w&&o.h===n.h||(t.beginPath(),a(t,jn(o,e,n)),t.clip(),a(t,jn(n,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),a(t,jn(n,e)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,e,i){return Wn(this,t,e,i)}inXRange(t,e){return Wn(this,t,null,e)}inYRange(t,e){return Wn(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:s,horizontal:n}=this.getProps(["x","y","base","horizontal"],t);return{x:n?(e+s)/2:e,y:n?i:(i+s)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}},LineElement:Fn,PointElement:class extends Ws{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.options,{x:n,y:o}=this.getProps(["x","y"],i);return Math.pow(t-n,2)+Math.pow(e-o,2)<Math.pow(s.hitRadius+s.radius,2)}inXRange(t,e){return Vn(this,t,"x",e)}inYRange(t,e){return Vn(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!xe(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,me(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}});const Yn=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],Un=Yn.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function Zn(t){return Yn[t%Yn.length]}function Xn(t){return Un[t%Un.length]}function qn(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var Kn={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:s},options:n}=t.config,{elements:o}=n;if(!i.forceOverride&&(qn(s)||(a=n)&&(a.borderColor||a.backgroundColor)||o&&qn(o)))return;var a;const r=function(t){let e=0;return(i,s)=>{const n=t.getDatasetMeta(s).controller;n instanceof ts?e=function(t,e){return t.backgroundColor=t.data.map((()=>Zn(e++))),e}(i,e):n instanceof es?e=function(t,e){return t.backgroundColor=t.data.map((()=>Xn(e++))),e}(i,e):n&&(e=function(t,e){return t.borderColor=Zn(e),t.backgroundColor=Xn(e),++e}(i,e))}}(t);s.forEach(r)}};function Gn(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function Jn(t){t.data.datasets.forEach((t=>{Gn(t)}))}var Qn={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Jn(t);const s=t.width;t.data.datasets.forEach(((e,n)=>{const{_data:o,indexAxis:a}=e,r=t.getDatasetMeta(n),l=o||e.data;if("y"===ze([a,t.options.indexAxis]))return;if(!r.controller.supportsDecimation)return;const h=t.scales[r.xAxisID];if("linear"!==h.type&&"time"!==h.type)return;if(t.options.parsing)return;let c,{start:d,count:u}=function(t,e){const i=e.length;let s,n=0;const{iScale:o}=t,{min:a,max:r,minDefined:l,maxDefined:h}=o.getUserBounds();return l&&(n=Et(zt(e,o.axis,a).lo,0,i-1)),s=h?Et(zt(e,o.axis,r).hi+1,n,i)-n:i-n,{start:n,count:s}}(r,l);if(u<=(i.threshold||4*s))Gn(e);else{switch(j(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":c=function(t,e,i,s,n){const o=n.samples||s;if(o>=i)return t.slice(e,e+i);const a=[],r=(i-2)/(o-2);let l=0;const h=e+i-1;let c,d,u,f,g,p=e;for(a[l++]=t[p],c=0;c<o-2;c++){let s,n=0,o=0;const h=Math.floor((c+1)*r)+1+e,m=Math.min(Math.floor((c+2)*r)+1,i)+e,b=m-h;for(s=h;s<m;s++)n+=t[s].x,o+=t[s].y;n/=b,o/=b;const x=Math.floor(c*r)+1+e,_=Math.min(Math.floor((c+1)*r)+1,i)+e,{x:y,y:v}=t[p];for(u=f=-1,s=x;s<_;s++)f=.5*Math.abs((y-n)*(t[s].y-v)-(y-t[s].x)*(o-v)),f>u&&(u=f,d=t[s],g=s);a[l++]=d,p=g}return a[l++]=t[h],a}(l,d,u,s,i);break;case"min-max":c=function(t,e,i,s){let n,o,a,r,l,h,c,d,u,f,g=0,p=0;const m=[],b=e+i-1,x=t[e].x,_=t[b].x-x;for(n=e;n<e+i;++n){o=t[n],a=(o.x-x)/_*s,r=o.y;const e=0|a;if(e===l)r<u?(u=r,h=n):r>f&&(f=r,c=n),g=(p*g+o.x)/++p;else{const i=n-1;if(!j(h)&&!j(c)){const e=Math.min(h,c),s=Math.max(h,c);e!==d&&e!==i&&m.push({...t[e],x:g}),s!==d&&s!==i&&m.push({...t[s],x:g})}n>0&&i!==d&&m.push(t[i]),m.push(o),l=e,p=0,u=f=r,h=c=d=n}}return m}(l,d,u,s);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=c}}))},destroy(t){Jn(t)}};function to(t,e,i,s){if(s)return;let n=e[t],o=i[t];return"angle"===t&&(n=Tt(n),o=Tt(o)),{property:t,start:n,end:o}}function eo(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function io(t,e,i,s){return t&&e?s(t[i],e[i]):t?t[i]:e?e[i]:0}function so(t,e){let i=[],s=!1;return $(t)?(s=!0,i=t):i=function(t,e){const{x:i=null,y:s=null}=t||{},n=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=eo(t,e,n);const a=n[t],r=n[e];null!==s?(o.push({x:a.x,y:s}),o.push({x:r.x,y:s})):null!==i&&(o.push({x:i,y:a.y}),o.push({x:i,y:r.y}))})),o}(t,e),i.length?new Fn({points:i,options:{tension:0},_loop:s,_fullLoop:s}):null}function no(t){return t&&!1!==t.fill}function oo(t,e,i){let s=t[e].fill;const n=[e];let o;if(!i)return s;for(;!1!==s&&-1===n.indexOf(s);){if(!U(s))return s;if(o=t[s],!o)return!1;if(o.visible)return s;n.push(s),s=o.fill}return!1}function ao(t,e,i){const s=function(t){const e=t.options,i=e.fill;let s=X(i&&i.target,i);return void 0===s&&(s=!!e.backgroundColor),!1!==s&&null!==s&&(!0===s?"origin":s)}(t);if(Y(s))return!isNaN(s.value)&&s;let n=parseFloat(s);return U(n)&&Math.floor(n)===n?function(t,e,i,s){return"-"!==t&&"+"!==t||(i=e+i),!(i===e||i<0||i>=s)&&i}(s[0],e,n,i):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}function ro(t,e,i){const s=[];for(let n=0;n<i.length;n++){const o=i[n],{first:a,last:r,point:l}=lo(o,e,"x");if(!(!l||a&&r))if(a)s.unshift(l);else if(t.push(l),!r)break}t.push(...s)}function lo(t,e,i){const s=t.interpolate(e,i);if(!s)return{};const n=s[i],o=t.segments,a=t.points;let r=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],s=a[e.start][i],h=a[e.end][i];if(It(n,s,h)){r=n===s,l=n===h;break}}return{first:r,last:l,point:s}}class ho{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:s,y:n,radius:o}=this;return e=e||{start:0,end:ut},t.arc(s,n,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:s}=this,n=t.angle;return{x:e+Math.cos(n)*s,y:i+Math.sin(n)*s,angle:n}}}function co(t,e,i){const s=function(t){const{chart:e,fill:i,line:s}=t;if(U(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:s}=t,n=[],o=s.segments,a=s.points,r=function(t,e){const i=[],s=t.getMatchingVisibleMetas("line");for(let t=0;t<s.length;t++){const n=s[t];if(n.index===e)break;n.hidden||i.unshift(n.dataset)}return i}(e,i);r.push(so({x:null,y:e.bottom},s));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)ro(n,a[t],r)}return new Fn({points:n,options:{}})}(t);if("shape"===i)return!0;const n=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,s=e.options,n=e.getLabels().length,o=s.reverse?e.max:e.min,a=function(t,e,i){let s;return s="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:Y(t)?t.value:e.getBaseValue(),s}(i,e,o),r=[];if(s.grid.circular){const t=e.getPointPositionForValue(0,o);return new ho({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(a)})}for(let t=0;t<n;++t)r.push(e.getPointPositionForValue(t,a));return r}(t):function(t){const{scale:e={},fill:i}=t,s=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:Y(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(U(s)){const t=e.isHorizontal();return{x:t?s:null,y:t?null:s}}return null}(t)}(t);return n instanceof ho?n:so(n,s)}(e),{line:n,scale:o,axis:a}=e,r=n.options,l=r.fill,h=r.backgroundColor,{above:c=h,below:d=h}=l||{};s&&n.points.length&&(_e(t,i),function(t,e){const{line:i,target:s,above:n,below:o,area:a,scale:r}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==n&&(uo(t,s,a.top),fo(t,{line:i,target:s,color:n,scale:r,property:l}),t.restore(),t.save(),uo(t,s,a.bottom)),fo(t,{line:i,target:s,color:o,scale:r,property:l}),t.restore()}(t,{line:n,target:s,above:c,below:d,area:i,scale:o,axis:a}),ye(t))}function uo(t,e,i){const{segments:s,points:n}=e;let o=!0,a=!1;t.beginPath();for(const r of s){const{start:s,end:l}=r,h=n[s],c=n[eo(s,l,n)];o?(t.moveTo(h.x,h.y),o=!1):(t.lineTo(h.x,i),t.lineTo(h.x,h.y)),a=!!e.pathSegment(t,r,{move:a}),a?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function fo(t,e){const{line:i,target:s,property:n,color:o,scale:a}=e,r=function(t,e,i){const s=t.segments,n=t.points,o=e.points,a=[];for(const t of s){let{start:s,end:r}=t;r=eo(s,r,n);const l=to(i,n[s],n[r],t.loop);if(!e.segments){a.push({source:t,target:l,start:n[s],end:n[r]});continue}const h=Si(e,l);for(const e of h){const s=to(i,o[e.start],o[e.end],e.loop),r=ki(t,n,s);for(const t of r)a.push({source:t,target:e,start:{[i]:io(l,s,"start",Math.max)},end:{[i]:io(l,s,"end",Math.min)}})}}return a}(i,s,n);for(const{source:e,target:l,start:h,end:c}of r){const{style:{backgroundColor:r=o}={}}=e,d=!0!==s;t.save(),t.fillStyle=r,go(t,a,d&&to(n,h,c)),t.beginPath();const u=!!i.pathSegment(t,e);let f;if(d){u?t.closePath():po(t,s,c,n);const e=!!s.pathSegment(t,l,{move:u,reverse:!0});f=u&&e,f||po(t,s,h,n)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function go(t,e,i){const{top:s,bottom:n}=e.chart.chartArea,{property:o,start:a,end:r}=i||{};"x"===o&&(t.beginPath(),t.rect(a,s,r-a,n-s),t.clip())}function po(t,e,i,s){const n=e.interpolate(i,s);n&&t.lineTo(n.x,n.y)}var mo={id:"filler",afterDatasetsUpdate(t,e,i){const s=(t.data.datasets||[]).length,n=[];let o,a,r,l;for(a=0;a<s;++a)o=t.getDatasetMeta(a),r=o.dataset,l=null,r&&r.options&&r instanceof Fn&&(l={visible:t.isDatasetVisible(a),index:a,fill:ao(r,a,s),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:r}),o.$filler=l,n.push(l);for(a=0;a<s;++a)l=n[a],l&&!1!==l.fill&&(l.fill=oo(n,a,i.propagate))},beforeDraw(t,e,i){const s="beforeDraw"===i.drawTime,n=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),s&&i.fill&&co(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const s=t.getSortedVisibleDatasetMetas();for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;no(i)&&co(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const s=e.meta.$filler;no(s)&&"beforeDatasetDraw"===i.drawTime&&co(t.ctx,s,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const bo=(t,e)=>{let{boxHeight:i=e,boxWidth:s=e}=t;return t.usePointStyle&&(i=Math.min(i,e),s=t.pointStyleWidth||Math.min(s,e)),{boxWidth:s,boxHeight:i,itemHeight:Math.max(e,i)}};class xo extends Ws{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=K(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,s=Re(i.font),n=s.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:r}=bo(i,n);let l,h;e.font=s.string,this.isHorizontal()?(l=this.maxWidth,h=this._fitRows(o,n,a,r)+10):(h=this.maxHeight,l=this._fitCols(o,s,a,r)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(h,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,s){const{ctx:n,maxWidth:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.lineWidths=[0],h=s+a;let c=t;n.textAlign="left",n.textBaseline="middle";let d=-1,u=-h;return this.legendItems.forEach(((t,f)=>{const g=i+e/2+n.measureText(t.text).width;(0===f||l[l.length-1]+g+2*a>o)&&(c+=h,l[l.length-(f>0?0:1)]=0,u+=h,d++),r[f]={left:0,top:u,row:d,width:g,height:s},l[l.length-1]+=g+a})),c}_fitCols(t,e,i,s){const{ctx:n,maxHeight:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.columnSizes=[],h=o-t;let c=a,d=0,u=0,f=0,g=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:p,itemHeight:m}=function(t,e,i,s,n){const o=function(t,e,i,s){let n=t.text;return n&&"string"!=typeof n&&(n=n.reduce(((t,e)=>t.length>e.length?t:e))),e+i.size/2+s.measureText(n).width}(s,t,e,i),a=function(t,e,i){let s=t;return"string"!=typeof e.text&&(s=_o(e,i)),s}(n,s,e.lineHeight);return{itemWidth:o,itemHeight:a}}(i,e,n,t,s);o>0&&u+m+2*a>h&&(c+=d+a,l.push({width:d,height:u}),f+=d+a,g++,d=u=0),r[o]={left:f,top:u,col:g,width:p,height:m},d=Math.max(d,p),u+=m+a})),c+=d,l.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:s},rtl:n}}=this,o=_i(n,this.left,this.width);if(this.isHorizontal()){let n=0,a=$t(i,this.left+s,this.right-this.lineWidths[n]);for(const r of e)n!==r.row&&(n=r.row,a=$t(i,this.left+s,this.right-this.lineWidths[n])),r.top+=this.top+t+s,r.left=o.leftForLtr(o.x(a),r.width),a+=r.width+s}else{let n=0,a=$t(i,this.top+t+s,this.bottom-this.columnSizes[n].height);for(const r of e)r.col!==n&&(n=r.col,a=$t(i,this.top+t+s,this.bottom-this.columnSizes[n].height)),r.top=a,r.left+=this.left+s,r.left=o.leftForLtr(o.x(r.left),r.width),a+=r.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;_e(t,this),this._draw(),ye(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:s}=this,{align:n,labels:o}=t,a=de.color,r=_i(t.rtl,this.left,this.width),l=Re(o.font),{padding:h}=o,c=l.size,d=c/2;let u;this.drawTitle(),s.textAlign=r.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=l.string;const{boxWidth:f,boxHeight:g,itemHeight:p}=bo(o,c),m=this.isHorizontal(),b=this._computeTitleHeight();u=m?{x:$t(n,this.left+h,this.right-i[0]),y:this.top+h+b,line:0}:{x:this.left+h,y:$t(n,this.top+b+h,this.bottom-e[0].height),line:0},yi(this.ctx,t.textDirection);const x=p+h;this.legendItems.forEach(((_,y)=>{s.strokeStyle=_.fontColor,s.fillStyle=_.fontColor;const v=s.measureText(_.text).width,w=r.textAlign(_.textAlign||(_.textAlign=o.textAlign)),M=f+d+v;let k=u.x,S=u.y;if(r.setWidth(this.width),m?y>0&&k+M+h>this.right&&(S=u.y+=x,u.line++,k=u.x=$t(n,this.left+h,this.right-i[u.line])):y>0&&S+x>this.bottom&&(k=u.x=k+e[u.line].width+h,u.line++,S=u.y=$t(n,this.top+b+h,this.bottom-e[u.line].height)),function(t,e,i){if(isNaN(f)||f<=0||isNaN(g)||g<0)return;s.save();const n=X(i.lineWidth,1);if(s.fillStyle=X(i.fillStyle,a),s.lineCap=X(i.lineCap,"butt"),s.lineDashOffset=X(i.lineDashOffset,0),s.lineJoin=X(i.lineJoin,"miter"),s.lineWidth=n,s.strokeStyle=X(i.strokeStyle,a),s.setLineDash(X(i.lineDash,[])),o.usePointStyle){const a={radius:g*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:n},l=r.xPlus(t,f/2);be(s,a,l,e+d,o.pointStyleWidth&&f)}else{const o=e+Math.max((c-g)/2,0),a=r.leftForLtr(t,f),l=Ee(i.borderRadius);s.beginPath(),Object.values(l).some((t=>0!==t))?Pe(s,{x:a,y:o,w:f,h:g,radius:l}):s.rect(a,o,f,g),s.fill(),0!==n&&s.stroke()}s.restore()}(r.x(k),S,_),k=((t,e,i,s)=>t===(s?"left":"right")?i:"center"===t?(e+i)/2:e)(w,k+f+d,m?k+M:this.right,t.rtl),function(t,e,i){Se(s,i.text,t,e+p/2,l,{strikethrough:i.hidden,textAlign:r.textAlign(i.textAlign)})}(r.x(k),S,_),m)u.x+=M+h;else if("string"!=typeof _.text){const t=l.lineHeight;u.y+=_o(_,t)}else u.y+=x})),vi(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=Re(e.font),s=Ie(e.padding);if(!e.display)return;const n=_i(t.rtl,this.left,this.width),o=this.ctx,a=e.position,r=i.size/2,l=s.top+r;let h,c=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),h=this.top+l,c=$t(t.align,c,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);h=l+$t(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=$t(a,c,c+d);o.textAlign=n.textAlign(jt(a)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,Se(o,e.text,u,h,i)}_computeTitleHeight(){const t=this.options.title,e=Re(t.font),i=Ie(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,s,n;if(It(t,this.left,this.right)&&It(e,this.top,this.bottom))for(n=this.legendHitBoxes,i=0;i<n.length;++i)if(s=n[i],It(t,s.left,s.left+s.width)&&It(e,s.top,s.top+s.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,a=(n=i,null!==(s=o)&&null!==n&&s.datasetIndex===n.datasetIndex&&s.index===n.index);o&&!a&&K(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!a&&K(e.onHover,[t,i,this],this)}else i&&K(e.onClick,[t,i,this],this);var s,n}}function _o(t,e){return e*(t.text?t.text.length+.5:0)}var yo={id:"legend",_element:xo,start(t,e,i){const s=t.legend=new xo({ctx:t.ctx,options:i,chart:t});Ms.configure(t,s,i),Ms.addBox(t,s)},stop(t){Ms.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const s=t.legend;Ms.configure(t,s,i),s.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const s=e.datasetIndex,n=i.chart;n.isDatasetVisible(s)?(n.hide(s),e.hidden=!0):(n.show(s),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:s,textAlign:n,color:o,useBorderRadius:a,borderRadius:r}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(i?0:void 0),h=Ie(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(h.width+h.height)/4,strokeStyle:l.borderColor,pointStyle:s||l.pointStyle,rotation:l.rotation,textAlign:n||l.textAlign,borderRadius:a&&(r||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class vo extends Ws{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const s=$(i.text)?i.text.length:1;this._padding=Ie(i.padding);const n=s*Re(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=n:this.width=n}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:s,right:n,options:o}=this,a=o.align;let r,l,h,c=0;return this.isHorizontal()?(l=$t(a,i,n),h=e+t,r=n-i):("left"===o.position?(l=i+t,h=$t(a,s,e),c=-.5*dt):(l=n-t,h=$t(a,e,s),c=.5*dt),r=s-e),{titleX:l,titleY:h,maxWidth:r,rotation:c}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=Re(e.font),s=i.lineHeight/2+this._padding.top,{titleX:n,titleY:o,maxWidth:a,rotation:r}=this._drawArgs(s);Se(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:r,textAlign:jt(e.align),textBaseline:"middle",translation:[n,o]})}}var wo={id:"title",_element:vo,start(t,e,i){!function(t,e){const i=new vo({ctx:t.ctx,options:e,chart:t});Ms.configure(t,i,e),Ms.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;Ms.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const s=t.titleBlock;Ms.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Mo=new WeakMap;var ko={id:"subtitle",start(t,e,i){const s=new vo({ctx:t.ctx,options:i,chart:t});Ms.configure(t,s,i),Ms.addBox(t,s),Mo.set(t,s)},stop(t){Ms.removeBox(t,Mo.get(t)),Mo.delete(t)},beforeUpdate(t,e,i){const s=Mo.get(t);Ms.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const So={average(t){if(!t.length)return!1;let e,i,s=0,n=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();s+=t.x,n+=t.y,++o}}return{x:s/o,y:n/o}},nearest(t,e){if(!t.length)return!1;let i,s,n,o=e.x,a=e.y,r=Number.POSITIVE_INFINITY;for(i=0,s=t.length;i<s;++i){const s=t[i].element;if(s&&s.hasValue()){const t=Ct(e,s.getCenterPoint());t<r&&(r=t,n=s)}}if(n){const t=n.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function Po(t,e){return e&&($(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Do(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Oo(t,e){const{element:i,datasetIndex:s,index:n}=e,o=t.getDatasetMeta(s).controller,{label:a,value:r}=o.getLabelAndValue(n);return{chart:t,label:a,parsed:o.getParsed(n),raw:t.data.datasets[s].data[n],formattedValue:r,dataset:o.getDataset(),dataIndex:n,datasetIndex:s,element:i}}function Co(t,e){const i=t.chart.ctx,{body:s,footer:n,title:o}=t,{boxWidth:a,boxHeight:r}=e,l=Re(e.bodyFont),h=Re(e.titleFont),c=Re(e.footerFont),d=o.length,u=n.length,f=s.length,g=Ie(e.padding);let p=g.height,m=0,b=s.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,d&&(p+=d*h.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b&&(p+=f*(e.displayColors?Math.max(r,l.lineHeight):l.lineHeight)+(b-f)*l.lineHeight+(b-1)*e.bodySpacing),u&&(p+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let x=0;const _=function(t){m=Math.max(m,i.measureText(t).width+x)};return i.save(),i.font=h.string,G(t.title,_),i.font=l.string,G(t.beforeBody.concat(t.afterBody),_),x=e.displayColors?a+2+e.boxPadding:0,G(s,(t=>{G(t.before,_),G(t.lines,_),G(t.after,_)})),x=0,i.font=c.string,G(t.footer,_),i.restore(),m+=g.width,{width:m,height:p}}function Ao(t,e,i,s){const{x:n,width:o}=i,{width:a,chartArea:{left:r,right:l}}=t;let h="center";return"center"===s?h=n<=(r+l)/2?"left":"right":n<=o/2?h="left":n>=a-o/2&&(h="right"),function(t,e,i,s){const{x:n,width:o}=s,a=i.caretSize+i.caretPadding;return"left"===t&&n+o+a>e.width||"right"===t&&n-o-a<0||void 0}(h,t,e,i)&&(h="center"),h}function To(t,e,i){const s=i.yAlign||e.yAlign||function(t,e){const{y:i,height:s}=e;return i<s/2?"top":i>t.height-s/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||Ao(t,e,i,s),yAlign:s}}function Lo(t,e,i,s){const{caretSize:n,caretPadding:o,cornerRadius:a}=t,{xAlign:r,yAlign:l}=i,h=n+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=Ee(a);let g=function(t,e){let{x:i,width:s}=t;return"right"===e?i-=s:"center"===e&&(i-=s/2),i}(e,r);const p=function(t,e,i){let{y:s,height:n}=t;return"top"===e?s+=i:s-="bottom"===e?n+i:n/2,s}(e,l,h);return"center"===l?"left"===r?g+=h:"right"===r&&(g-=h):"left"===r?g-=Math.max(c,u)+n:"right"===r&&(g+=Math.max(d,f)+n),{x:Et(g,0,s.width-e.width),y:Et(p,0,s.height-e.height)}}function Eo(t,e,i){const s=Ie(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-s.right:t.x+s.left}function Io(t){return Po([],Do(t))}function Ro(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const zo={beforeTitle:W,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,s=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(s>0&&e.dataIndex<s)return i[e.dataIndex]}return""},afterTitle:W,beforeBody:W,beforeLabel:W,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return j(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:W,afterBody:W,beforeFooter:W,footer:W,afterFooter:W};function Fo(t,e,i,s){const n=t[e].call(i,s);return void 0===n?zo[e].call(i,s):n}class Vo extends Ws{static positioners=So;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),s=i.enabled&&e.options.animation&&i.animations,n=new Ei(this.chart,s);return s._cacheable&&(this._cachedAnimations=Object.freeze(n)),n}getContext(){return this.$context||(this.$context=(this,Fe(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,s=Fo(i,"beforeTitle",this,t),n=Fo(i,"title",this,t),o=Fo(i,"afterTitle",this,t);let a=[];return a=Po(a,Do(s)),a=Po(a,Do(n)),a=Po(a,Do(o)),a}getBeforeBody(t,e){return Io(Fo(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,s=[];return G(t,(t=>{const e={before:[],lines:[],after:[]},n=Ro(i,t);Po(e.before,Do(Fo(n,"beforeLabel",this,t))),Po(e.lines,Fo(n,"label",this,t)),Po(e.after,Do(Fo(n,"afterLabel",this,t))),s.push(e)})),s}getAfterBody(t,e){return Io(Fo(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,s=Fo(i,"beforeFooter",this,t),n=Fo(i,"footer",this,t),o=Fo(i,"afterFooter",this,t);let a=[];return a=Po(a,Do(s)),a=Po(a,Do(n)),a=Po(a,Do(o)),a}_createItems(t){const e=this._active,i=this.chart.data,s=[],n=[],o=[];let a,r,l=[];for(a=0,r=e.length;a<r;++a)l.push(Oo(this.chart,e[a]));return t.filter&&(l=l.filter(((e,s,n)=>t.filter(e,s,n,i)))),t.itemSort&&(l=l.sort(((e,s)=>t.itemSort(e,s,i)))),G(l,(e=>{const i=Ro(t.callbacks,e);s.push(Fo(i,"labelColor",this,e)),n.push(Fo(i,"labelPointStyle",this,e)),o.push(Fo(i,"labelTextColor",this,e))})),this.labelColors=s,this.labelPointStyles=n,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),s=this._active;let n,o=[];if(s.length){const t=So[i.position].call(this,s,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=Co(this,i),a=Object.assign({},t,e),r=To(this.chart,i,a),l=Lo(i,a,r,this.chart);this.xAlign=r.xAlign,this.yAlign=r.yAlign,n={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(n={opacity:0});this._tooltipItems=o,this.$context=void 0,n&&this._resolveAnimations().update(this,n),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,s){const n=this.getCaretPosition(t,i,s);e.lineTo(n.x1,n.y1),e.lineTo(n.x2,n.y2),e.lineTo(n.x3,n.y3)}getCaretPosition(t,e,i){const{xAlign:s,yAlign:n}=this,{caretSize:o,cornerRadius:a}=i,{topLeft:r,topRight:l,bottomLeft:h,bottomRight:c}=Ee(a),{x:d,y:u}=t,{width:f,height:g}=e;let p,m,b,x,_,y;return"center"===n?(_=u+g/2,"left"===s?(p=d,m=p-o,x=_+o,y=_-o):(p=d+f,m=p+o,x=_-o,y=_+o),b=p):(m="left"===s?d+Math.max(r,h)+o:"right"===s?d+f-Math.max(l,c)-o:this.caretX,"top"===n?(x=u,_=x-o,p=m-o,b=m+o):(x=u+g,_=x+o,p=m+o,b=m-o),y=x),{x1:p,x2:m,x3:b,y1:x,y2:_,y3:y}}drawTitle(t,e,i){const s=this.title,n=s.length;let o,a,r;if(n){const l=_i(i.rtl,this.x,this.width);for(t.x=Eo(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",o=Re(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,r=0;r<n;++r)e.fillText(s[r],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,r+1===n&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,s,n){const o=this.labelColors[i],a=this.labelPointStyles[i],{boxHeight:r,boxWidth:l}=n,h=Re(n.bodyFont),c=Eo(this,"left",n),d=s.x(c),u=r<h.lineHeight?(h.lineHeight-r)/2:0,f=e.y+u;if(n.usePointStyle){const e={radius:Math.min(l,r)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},i=s.leftForLtr(d,l)+l/2,h=f+r/2;t.strokeStyle=n.multiKeyBackground,t.fillStyle=n.multiKeyBackground,me(t,e,i,h),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,me(t,e,i,h)}else{t.lineWidth=Y(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=s.leftForLtr(d,l),i=s.leftForLtr(s.xPlus(d,1),l-2),a=Ee(o.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=n.multiKeyBackground,Pe(t,{x:e,y:f,w:l,h:r,radius:a}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),Pe(t,{x:i,y:f+1,w:l-2,h:r-2,radius:a}),t.fill()):(t.fillStyle=n.multiKeyBackground,t.fillRect(e,f,l,r),t.strokeRect(e,f,l,r),t.fillStyle=o.backgroundColor,t.fillRect(i,f+1,l-2,r-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:s}=this,{bodySpacing:n,bodyAlign:o,displayColors:a,boxHeight:r,boxWidth:l,boxPadding:h}=i,c=Re(i.bodyFont);let d=c.lineHeight,u=0;const f=_i(i.rtl,this.x,this.width),g=function(i){e.fillText(i,f.x(t.x+u),t.y+d/2),t.y+=d+n},p=f.textAlign(o);let m,b,x,_,y,v,w;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=Eo(this,p,i),e.fillStyle=i.bodyColor,G(this.beforeBody,g),u=a&&"right"!==p?"center"===o?l/2+h:l+2+h:0,_=0,v=s.length;_<v;++_){for(m=s[_],b=this.labelTextColors[_],e.fillStyle=b,G(m.before,g),x=m.lines,a&&x.length&&(this._drawColorBox(e,t,_,f,i),d=Math.max(c.lineHeight,r)),y=0,w=x.length;y<w;++y)g(x[y]),d=c.lineHeight;G(m.after,g)}u=0,d=c.lineHeight,G(this.afterBody,g),t.y-=n}drawFooter(t,e,i){const s=this.footer,n=s.length;let o,a;if(n){const r=_i(i.rtl,this.x,this.width);for(t.x=Eo(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=r.textAlign(i.footerAlign),e.textBaseline="middle",o=Re(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,a=0;a<n;++a)e.fillText(s[a],r.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,s){const{xAlign:n,yAlign:o}=this,{x:a,y:r}=t,{width:l,height:h}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=Ee(s.cornerRadius);e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,e.lineWidth=s.borderWidth,e.beginPath(),e.moveTo(a+c,r),"top"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+l-d,r),e.quadraticCurveTo(a+l,r,a+l,r+d),"center"===o&&"right"===n&&this.drawCaret(t,e,i,s),e.lineTo(a+l,r+h-f),e.quadraticCurveTo(a+l,r+h,a+l-f,r+h),"bottom"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+u,r+h),e.quadraticCurveTo(a,r+h,a,r+h-u),"center"===o&&"left"===n&&this.drawCaret(t,e,i,s),e.lineTo(a,r+c),e.quadraticCurveTo(a,r,a+c,r),e.closePath(),e.fill(),s.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,s=i&&i.x,n=i&&i.y;if(s||n){const i=So[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=Co(this,t),a=Object.assign({},i,this._size),r=To(e,t,a),l=Lo(t,a,r,e);s._to===l.x&&n._to===l.y||(this.xAlign=r.xAlign,this.yAlign=r.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const s={width:this.width,height:this.height},n={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=Ie(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=i,this.drawBackground(n,t,s,e),yi(t,e.textDirection),n.y+=o.top,this.drawTitle(n,t,e),this.drawBody(n,t,e),this.drawFooter(n,t,e),vi(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,s=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),n=!J(i,s),o=this._positionChanged(s,e);(n||o)&&(this._active=s,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,n=this._active||[],o=this._getActiveElements(t,n,e,i),a=this._positionChanged(o,t),r=e||!J(o,n)||a;return r&&(this._active=o,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),r}_getActiveElements(t,e,i,s){const n=this.options;if("mouseout"===t.type)return[];if(!s)return e;const o=this.chart.getElementsAtEventForMode(t,n.mode,n,i);return n.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:s,options:n}=this,o=So[n.position].call(this,t,e);return!1!==o&&(i!==o.x||s!==o.y)}}var Bo={id:"tooltip",_element:Vo,positioners:So,afterInit(t,e,i){i&&(t.tooltip=new Vo({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:zo},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},No=Object.freeze({__proto__:null,Colors:Kn,Decimation:Qn,Filler:mo,Legend:yo,SubTitle:ko,Title:wo,Tooltip:Bo});function Wo(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function Ho(t,e,{horizontal:i,minRotation:s}){const n=St(s),o=(i?Math.sin(n):Math.cos(n))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}class jo extends Ks{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return j(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:s,max:n}=this;const o=t=>s=e?s:t,a=t=>n=i?n:t;if(t){const t=yt(s),e=yt(n);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(s===n){let e=0===n?1:Math.abs(.05*n);a(n+e),t||o(s-e)}this.min=s,this.max=n}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:s}=t;return s?(e=Math.ceil(this.max/s)-Math.floor(this.min/s)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const s=function(t,e){const i=[],{bounds:s,step:n,min:o,max:a,precision:r,count:l,maxTicks:h,maxDigits:c,includeBounds:d}=t,u=n||1,f=h-1,{min:g,max:p}=e,m=!j(o),b=!j(a),x=!j(l),_=(p-g)/(c+1);let y,v,w,M,k=wt((p-g)/f/u)*u;if(k<1e-14&&!m&&!b)return[{value:g},{value:p}];M=Math.ceil(p/k)-Math.floor(g/k),M>f&&(k=wt(M*k/f/u)*u),j(r)||(y=Math.pow(10,r),k=Math.ceil(k*y)/y),"ticks"===s?(v=Math.floor(g/k)*k,w=Math.ceil(p/k)*k):(v=g,w=p),m&&b&&n&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((a-o)/n,k/1e3)?(M=Math.round(Math.min((a-o)/k,h)),k=(a-o)/M,v=o,w=a):x?(v=m?o:v,w=b?a:w,M=l-1,k=(w-v)/M):(M=(w-v)/k,M=vt(M,Math.round(M),k/1e3)?Math.round(M):Math.ceil(M));const S=Math.max(Dt(k),Dt(v));y=Math.pow(10,j(r)?S:r),v=Math.round(v*y)/y,w=Math.round(w*y)/y;let P=0;for(m&&(d&&v!==o?(i.push({value:o}),v<o&&P++,vt(Math.round((v+P*k)*y)/y,o,Ho(o,_,t))&&P++):v<o&&P++);P<M;++P){const t=Math.round((v+P*k)*y)/y;if(b&&t>a)break;i.push({value:t})}return b&&d&&w!==a?i.length&&vt(i[i.length-1].value,a,Ho(a,_,t))?i[i.length-1].value=a:i.push({value:a}):b&&w!==a||i.push({value:w}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&kt(s,this,"value"),t.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const s=(i-e)/Math.max(t.length-1,1)/2;e-=s,i+=s}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return se(t,this.chart.options.locale,this.options.ticks.format)}}class $o extends jo{static id="linear";static defaults={ticks:{callback:oe.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=U(t)?t:0,this.max=U(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=St(this.options.ticks.minRotation),s=(t?Math.sin(i):Math.cos(i))||.001,n=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,n.lineHeight/s))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const Yo=t=>Math.floor(_t(t)),Uo=(t,e)=>Math.pow(10,Yo(t)+e);function Zo(t){return 1==t/Math.pow(10,Yo(t))}function Xo(t,e,i){const s=Math.pow(10,i),n=Math.floor(t/s);return Math.ceil(e/s)-n}class qo extends Ks{static id="logarithmic";static defaults={ticks:{callback:oe.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=jo.prototype.parse.apply(this,[t,e]);if(0!==i)return U(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=U(t)?Math.max(0,t):null,this.max=U(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!U(this._userMin)&&(this.min=t===Uo(this.min,0)?Uo(this.min,-1):Uo(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,s=this.max;const n=e=>i=t?i:e,o=t=>s=e?s:t;i===s&&(i<=0?(n(1),o(10)):(n(Uo(i,-1)),o(Uo(s,1)))),i<=0&&n(Uo(s,-1)),s<=0&&o(Uo(i,1)),this.min=i,this.max=s}buildTicks(){const t=this.options,e=function(t,{min:e,max:i}){e=Z(t.min,e);const s=[],n=Yo(e);let o=function(t,e){let i=Yo(e-t);for(;Xo(t,e,i)>10;)i++;for(;Xo(t,e,i)<10;)i--;return Math.min(i,Yo(t))}(e,i),a=o<0?Math.pow(10,Math.abs(o)):1;const r=Math.pow(10,o),l=n>o?Math.pow(10,n):0,h=Math.round((e-l)*a)/a,c=Math.floor((e-l)/r/10)*r*10;let d=Math.floor((h-c)/Math.pow(10,o)),u=Z(t.min,Math.round((l+c+d*Math.pow(10,o))*a)/a);for(;u<i;)s.push({value:u,major:Zo(u),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(o++,d=2,a=o>=0?1:a),u=Math.round((l+c+d*Math.pow(10,o))*a)/a;const f=Z(t.max,u);return s.push({value:f,major:Zo(f),significand:d}),s}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&kt(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":se(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=_t(t),this._valueRange=_t(this.max)-_t(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(_t(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Ko(t){const e=t.ticks;if(e.display&&t.display){const t=Ie(e.backdropPadding);return X(e.font&&e.font.size,de.font.size)+t.height}return 0}function Go(t,e,i,s,n){return t===s||t===n?{start:e-i/2,end:e+i/2}:t<s||t>n?{start:e-i,end:e}:{start:e,end:e+i}}function Jo(t,e,i,s,n){const o=Math.abs(Math.sin(i)),a=Math.abs(Math.cos(i));let r=0,l=0;s.start<e.l?(r=(e.l-s.start)/o,t.l=Math.min(t.l,e.l-r)):s.end>e.r&&(r=(s.end-e.r)/o,t.r=Math.max(t.r,e.r+r)),n.start<e.t?(l=(e.t-n.start)/a,t.t=Math.min(t.t,e.t-l)):n.end>e.b&&(l=(n.end-e.b)/a,t.b=Math.max(t.b,e.b+l))}function Qo(t,e,i){const s=t.drawingArea,{extra:n,additionalAngle:o,padding:a,size:r}=i,l=t.getPointPosition(e,s+n+a,o),h=Math.round(Pt(Tt(l.angle+mt))),c=function(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}(l.y,r.h,h),d=function(t){return 0===t||180===t?"center":t<180?"left":"right"}(h),u=(f=l.x,g=r.w,"right"===(p=d)?f-=g:"center"===p&&(f-=g/2),f);var f,g,p;return{visible:!0,x:l.x,y:c,textAlign:d,left:u,top:c,right:u+r.w,bottom:c+r.h}}function ta(t,e){if(!e)return!0;const{left:i,top:s,right:n,bottom:o}=t;return!(xe({x:i,y:s},e)||xe({x:i,y:o},e)||xe({x:n,y:s},e)||xe({x:n,y:o},e))}function ea(t,e,i){const{left:s,top:n,right:o,bottom:a}=i,{backdropColor:r}=e;if(!j(r)){const i=Ee(e.borderRadius),l=Ie(e.backdropPadding);t.fillStyle=r;const h=s-l.left,c=n-l.top,d=o-s+l.width,u=a-n+l.height;Object.values(i).some((t=>0!==t))?(t.beginPath(),Pe(t,{x:h,y:c,w:d,h:u,radius:i}),t.fill()):t.fillRect(h,c,d,u)}}function ia(t,e,i,s){const{ctx:n}=t;if(i)n.arc(t.xCenter,t.yCenter,e,0,ut);else{let i=t.getPointPosition(0,e);n.moveTo(i.x,i.y);for(let o=1;o<s;o++)i=t.getPointPosition(o,e),n.lineTo(i.x,i.y)}}class sa extends jo{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:oe.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=Ie(Ko(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=U(t)&&!isNaN(t)?t:0,this.max=U(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Ko(this.options))}generateTickLabels(t){jo.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=K(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),s=[],n=[],o=t._pointLabels.length,a=t.options.pointLabels,r=a.centerPointLabels?dt/o:0;for(let d=0;d<o;d++){const o=a.setContext(t.getPointLabelContext(d));n[d]=o.padding;const u=t.getPointPosition(d,t.drawingArea+n[d],r),f=Re(o.font),g=(l=t.ctx,h=f,c=$(c=t._pointLabels[d])?c:[c],{w:fe(l,h.string,c),h:c.length*h.lineHeight});s[d]=g;const p=Tt(t.getIndexAngle(d)+r),m=Math.round(Pt(p));Jo(i,e,p,Go(m,u.x,g.w,0,180),Go(m,u.y,g.h,90,270))}var l,h,c;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const s=[],n=t._pointLabels.length,o=t.options,{centerPointLabels:a,display:r}=o.pointLabels,l={extra:Ko(o)/2,additionalAngle:a?dt/n:0};let h;for(let o=0;o<n;o++){l.padding=i[o],l.size=e[o];const n=Qo(t,o,l);s.push(n),"auto"===r&&(n.visible=ta(n,h),n.visible&&(h=n))}return s}(t,s,n)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,s){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-s)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,s))}getIndexAngle(t){return Tt(t*(ut/(this._pointLabels.length||1))+St(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(j(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(j(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return Fe(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const s=this.getIndexAngle(t)-mt+i;return{x:Math.cos(s)*e+this.xCenter,y:Math.sin(s)*e+this.yCenter,angle:s}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:s,bottom:n}=this._pointLabelItems[t];return{left:e,top:i,right:s,bottom:n}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),ia(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:s,border:n}=e,o=this._pointLabels.length;let a,r,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:s}}=t;for(let n=e-1;n>=0;n--){const e=t._pointLabelItems[n];if(!e.visible)continue;const o=s.setContext(t.getPointLabelContext(n));ea(i,o,e);const a=Re(o.font),{x:r,y:l,textAlign:h}=e;Se(i,t._pointLabels[n],r,l+a.lineHeight/2,a,{color:o.color,textAlign:h,textBaseline:"middle"})}}(this,o),s.display&&this.ticks.forEach(((t,e)=>{if(0!==e){r=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),a=s.setContext(i),l=n.setContext(i);!function(t,e,i,s,n){const o=t.ctx,a=e.circular,{color:r,lineWidth:l}=e;!a&&!s||!r||!l||i<0||(o.save(),o.strokeStyle=r,o.lineWidth=l,o.setLineDash(n.dash),o.lineDashOffset=n.dashOffset,o.beginPath(),ia(t,i,a,s),o.closePath(),o.stroke(),o.restore())}(this,a,r,o,l)}})),i.display){for(t.save(),a=o-1;a>=0;a--){const s=i.setContext(this.getPointLabelContext(a)),{color:n,lineWidth:o}=s;o&&n&&(t.lineWidth=o,t.strokeStyle=n,t.setLineDash(s.borderDash),t.lineDashOffset=s.borderDashOffset,r=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(a,r),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const s=this.getIndexAngle(0);let n,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(s),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&!e.reverse)return;const r=i.setContext(this.getContext(a)),l=Re(r.font);if(n=this.getDistanceFromCenterForValue(this.ticks[a].value),r.showLabelBackdrop){t.font=l.string,o=t.measureText(s.label).width,t.fillStyle=r.backdropColor;const e=Ie(r.backdropPadding);t.fillRect(-o/2-e.left,-n-l.size/2-e.top,o+e.width,l.size+e.height)}Se(t,s.label,0,-n,l,{color:r.color})})),t.restore()}drawTitle(){}}const na={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},oa=Object.keys(na);function aa(t,e){return t-e}function ra(t,e){if(j(e))return null;const i=t._adapter,{parser:s,round:n,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof s&&(a=s(a)),U(a)||(a="string"==typeof s?i.parse(a,s):i.parse(a)),null===a?null:(n&&(a="week"!==n||!Mt(o)&&!0!==o?i.startOf(a,n):i.startOf(a,"isoWeek",o)),+a)}function la(t,e,i,s){const n=oa.length;for(let o=oa.indexOf(t);o<n-1;++o){const t=na[oa[o]],n=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(n*t.size))<=s)return oa[o]}return oa[n-1]}function ha(t,e,i){if(i){if(i.length){const{lo:s,hi:n}=Rt(i,e);t[i[s]>=e?i[s]:i[n]]=!0}}else t[e]=!0}function ca(t,e,i){const s=[],n={},o=e.length;let a,r;for(a=0;a<o;++a)r=e[a],n[r]=a,s.push({value:r,major:!1});return 0!==o&&i?function(t,e,i,s){const n=t._adapter,o=+n.startOf(e[0].value,s),a=e[e.length-1].value;let r,l;for(r=o;r<=a;r=+n.add(r,1,s))l=i[r],l>=0&&(e[l].major=!0);return e}(t,s,n,i):s}class da extends Ks{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),s=this._adapter=new os(t.adapters.date);s.init(e),st(i.displayFormats,s.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:ra(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:s,max:n,minDefined:o,maxDefined:a}=this.getUserBounds();function r(t){o||isNaN(t.min)||(s=Math.min(s,t.min)),a||isNaN(t.max)||(n=Math.max(n,t.max))}o&&a||(r(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||r(this.getMinMax(!1))),s=U(s)&&!isNaN(s)?s:+e.startOf(Date.now(),i),n=U(n)&&!isNaN(n)?n:+e.endOf(Date.now(),i)+1,this.min=Math.min(s,n-1),this.max=Math.max(s+1,n)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,s="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const n=this.min,o=function(t,e,i){let s=0,n=t.length;for(;s<n&&t[s]<e;)s++;for(;n>s&&t[n-1]>i;)n--;return s>0||n<t.length?t.slice(s,n):t}(s,n,this.max);return this._unit=e.unit||(i.autoSkip?la(e.minUnit,this.min,this.max,this._getLabelCapacity(n)):function(t,e,i,s,n){for(let o=oa.length-1;o>=oa.indexOf(i);o--){const i=oa[o];if(na[i].common&&t._adapter.diff(n,s,i)>=e-1)return i}return oa[i?oa.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=oa.indexOf(t)+1,i=oa.length;e<i;++e)if(na[oa[e]].common)return oa[e]}(this._unit):void 0,this.initOffsets(s),t.reverse&&o.reverse(),ca(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,s=0,n=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),s=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),n=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;s=Et(s,0,o),n=Et(n,0,o),this._offsets={start:s,end:n,factor:1/(s+1+n)}}_generate(){const t=this._adapter,e=this.min,i=this.max,s=this.options,n=s.time,o=n.unit||la(n.minUnit,e,i,this._getLabelCapacity(e)),a=X(s.ticks.stepSize,1),r="week"===o&&n.isoWeekday,l=Mt(r)||!0===r,h={};let c,d,u=e;if(l&&(u=+t.startOf(u,"isoWeek",r)),u=+t.startOf(u,l?"day":o),t.diff(i,e,o)>1e5*a)throw new Error(e+" and "+i+" are too far apart with stepSize of "+a+" "+o);const f="data"===s.ticks.source&&this.getDataTimestamps();for(c=u,d=0;c<i;c=+t.add(c,a,o),d++)ha(h,c,f);return c!==i&&"ticks"!==s.bounds&&1!==d||ha(h,c,f),Object.keys(h).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,s=this._unit,n=e||i[s];return this._adapter.format(t,n)}_tickFormatFunction(t,e,i,s){const n=this.options,o=n.ticks.callback;if(o)return K(o,[t,e,i],this);const a=n.time.displayFormats,r=this._unit,l=this._majorUnit,h=r&&a[r],c=l&&a[l],d=i[e],u=l&&c&&d&&d.major;return this._adapter.format(t,s||(u?c:h))}generateTickLabels(t){let e,i,s;for(e=0,i=t.length;e<i;++e)s=t[e],s.label=this._tickFormatFunction(s.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,s=St(this.isHorizontal()?e.maxRotation:e.minRotation),n=Math.cos(s),o=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:i*n+a*o,h:i*o+a*n}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,s=i[e.unit]||i.millisecond,n=this._tickFormatFunction(t,0,ca(this,[t],this._majorUnit),s),o=this._getLabelSize(n),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const s=this.getMatchingVisibleMetas();if(this._normalized&&s.length)return this._cache.data=s[0].controller.getAllParsedValues(this);for(t=0,e=s.length;t<e;++t)i=i.concat(s[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const s=this.getLabels();for(e=0,i=s.length;e<i;++e)t.push(ra(this,s[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return Nt(t.sort(aa))}}function ua(t,e,i){let s,n,o,a,r=0,l=t.length-1;i?(e>=t[r].pos&&e<=t[l].pos&&({lo:r,hi:l}=zt(t,"pos",e)),({pos:s,time:o}=t[r]),({pos:n,time:a}=t[l])):(e>=t[r].time&&e<=t[l].time&&({lo:r,hi:l}=zt(t,"time",e)),({time:s,pos:o}=t[r]),({time:n,pos:a}=t[l]));const h=n-s;return h?o+(a-o)*(e-s)/h:o}var fa=Object.freeze({__proto__:null,CategoryScale:class extends Ks{static id="category";static defaults={ticks:{callback:Wo}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:s}of e)t[i]===s&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(j(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:Et(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,s){const n=t.indexOf(e);return-1===n?((t,e,i,s)=>("string"==typeof e?(i=t.push(e)-1,s.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,s):n!==t.lastIndexOf(e)?i:n}(i,t,X(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:s}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(s=this.getLabels().length-1)),this.min=i,this.max=s}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,s=[];let n=this.getLabels();n=0===t&&e===n.length-1?n:n.slice(t,e+1),this._valueRange=Math.max(n.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)s.push({value:i});return s}getLabelForValue(t){return Wo.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:$o,LogarithmicScale:qo,RadialLinearScale:sa,TimeScale:da,TimeSeriesScale:class extends da{static id="timeseries";static defaults=da.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=ua(e,this.min),this._tableRange=ua(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,s=[],n=[];let o,a,r,l,h;for(o=0,a=t.length;o<a;++o)l=t[o],l>=e&&l<=i&&s.push(l);if(s.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,a=s.length;o<a;++o)h=s[o+1],r=s[o-1],l=s[o],Math.round((h+r)/2)!==l&&n.push({time:l,pos:o/(a-1)});return n}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(ua(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return ua(this._table,i*this._tableRange+this._minPos,!0)}}});const ga=[is,$n,No,fa];Pn.register(...ga);var pa=function(){function t(){this.button=document.getElementById("switchHr"),this.chartItem=document.getElementById("hrChart")}return t.prototype.createTimeInZoneChart=function(){null==this.chart&&null==this.chart||this.chart.destroy(),this.chart=new Pn(this.chartItem,{type:"bar",data:{labels:["Zone 1","Zone 2","Zone 3","Zone 4","Zone 5"],datasets:[{label:"Time in Zone (hours)",data:this.timeInZone.map((function(t){return t/3600})),borderWidth:1}]},options:{scales:{y:{beginAtZero:!0}}}})},t}(),ma=function(t,e,i,s){return new(i||(i=Promise))((function(n,o){function a(t){try{l(s.next(t))}catch(t){o(t)}}function r(t){try{l(s.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,r)}l((s=s.apply(t,e||[])).next())}))},ba=function(t,e){var i,s,n,o,a={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function r(r){return function(l){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,r[0]&&(a=0)),a;)try{if(i=1,s&&(n=2&r[0]?s.return:r[0]?s.throw||((n=s.return)&&n.call(s),0):s.next)&&!(n=n.call(s,r[1])).done)return n;switch(s=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,s=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((n=(n=a.trys).length>0&&n[n.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){a.label=r[1];break}if(6===r[0]&&a.label<n[1]){a.label=n[1],n=r;break}if(n&&a.label<n[2]){a.label=n[2],a.ops.push(r);break}n[2]&&a.ops.pop(),a.trys.pop();continue}r=e.call(t,a)}catch(t){r=[6,t],s=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,l])}}};function xa(){return ma(this,void 0,void 0,(function(){var t,e,s,n,o,a,r,l,h,d,u;return ba(this,(function(f){switch(f.label){case 0:return[4,(t=new i).getPowerData()];case 1:return e=f.sent(),[4,t.getHeartRateData()];case 2:return s=f.sent(),[4,t.getActivities()];case 3:return n=f.sent(),[4,t.getDetailedActivities()];case 4:return o=f.sent(),a=new pa,function(t,e,i){for(var s=function(i){var s=e.find((function(t){return t.id==i.id})),n=t.find((function(t){return t.id==i.id}));i.powerStream=null==n?void 0:n.powerDict,i.hrStream=null==s?void 0:s.heartRateDict},n=0,o=i;n<o.length;n++)s(o[n])}(e,s,n),function(t,e){for(var i=function(t){var i=e.find((function(e){return e.id==t.id}));t.details=i},s=0,n=t;s<n.length;s++)i(n[s])}(n,o),console.log(n),(r=new c(n)).setTimeInZoneLists(),a.timeInZone=r.hrTimeInZone,a.createTimeInZoneChart(),l=document.getElementById("applyDates"),h=document.getElementById("fromDate"),d=document.getElementById("toDate"),u=document.getElementById("total"),l.addEventListener("click",(function(){console.log("ran"),console.log(h.value),console.log(Date.parse(h.value)),r.filterByDate(new Date(h.value),new Date(d.value)),r.setTimeInZoneLists(),console.log(r.hrTimeInZone),a.timeInZone=r.hrTimeInZone,a.createTimeInZoneChart();for(var t=0,e=0,i=a.timeInZone;e<i.length;e++)t+=i[e];t/=3600,u.textContent="Total hours: "+t.toString()})),[2]}}))}))}ma(void 0,void 0,void 0,(function(){var t;return ba(this,(function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,xa()];case 1:return e.sent(),[3,3];case 2:return t=e.sent(),console.error(t),[3,3];case 3:return[2]}}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FDTkMsT0FBUSxTQUNSQyxRQUFTLFNBQ1RDLFNBQVUsU0FDVkMsT0FBUSxTQUNSQyxNQUFPLFNBQ1BDLElBQUssU0FDTEMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLEtBQU0sU0FDTkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLElBQUssT0FDTEMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLFNBQVUsT0FDVkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLFNBQVUsU0FDVkMsU0FBVSxTQUNWQyxTQUFVLFNBQ1ZDLFNBQVUsU0FDVkMsT0FBUSxTQUNSQyxRQUFTLFNBQ1RDLFVBQVcsU0FDWEMsSUFBSyxTQUNMQyxPQUFRLFNBQ1JDLElBQUssU0FDTEMsSUFBSyxPQUNMQyxNQUFPLFNBQ1BDLElBQUssU0FDTEMsUUFBUyxTQUNUQyxPQUFRLFNBQ1JDLFFBQVMsU0FDVEMsTUFBTyxTQUNQQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsT0FBUSxTQUNSQyxVQUFXLFNBQ1hDLFFBQVMsU0FDVEMsV0FBWSxTQUNaQyxJQUFLLFNBQ0xDLEtBQU0sU0FDTkMsTUFBTyxTQUNQQyxVQUFXLFNBQ1hDLEtBQU0sU0FDTkMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLE9BQVEsU0FDUkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLFFBQVMsU0FDVEMsSUFBSyxTQUNMQyxLQUFNLE9BQ05DLFFBQVMsU0FDVEMsSUFBSyxTQUNMQyxPQUFRLFNBQ1JDLE1BQU8sU0FDUEMsV0FBWSxTQUNaQyxJQUFLLEtBQ0xDLE1BQU8sU0FDUEMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLEtBQU0sU0FDTkMsVUFBVyxPQUNYQyxJQUFLLFNBQ0xDLFNBQVUsU0FDVkMsV0FBWSxTQUNaQyxRQUFTLFNBQ1RDLFNBQVUsU0FDVkMsUUFBUyxTQUNUQyxXQUFZLFNBQ1pDLEtBQU0sS0FDTkMsT0FBUSxTQUNSQyxLQUFNLFNBQ05DLFFBQVMsU0FDVEMsTUFBTyxTQUNQQyxRQUFTLFNBQ1RDLEtBQU0sU0FDTkMsVUFB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LGVBQWUsVUFDakN6a0IsRUFBUWxiLFNBQVMyL0IsZUFBZSxTQUNwQzR2QixFQUFXenNELGlCQUFpQixTQUFTLFdBQ2pDeDlCLFFBQVE4cEYsSUFBSSxPQUNaOXBGLFFBQVE4cEYsSUFBSTFuRixFQUFTb1QsT0FDckJ4VixRQUFROHBGLElBQUlocUYsS0FBS3dDLE1BQU1GLEVBQVNvVCxRQUNoQ3UwRSxFQUFlNW5GLGFBQWEsSUFBSXJDLEtBQUtzQyxFQUFTb1QsT0FBUSxJQUFJMVYsS0FBS1AsRUFBT2lXLFFBQ3RFdTBFLEVBQWV0bkYscUJBQ2Z6QyxRQUFROHBGLElBQUlDLEVBQWVubkYsY0FDM0J3bUYsRUFBY1AsV0FBYWtCLEVBQWVubkYsYUFDMUN3bUYsRUFBY1Isd0JBRWQsSUFEQSxJQUFJc0IsRUFBVyxFQUNDLE1BQUFkLEVBQWNQLFdBQWQsZUFDWnFCLEdBRFEsS0FHWkEsR0FBc0IsS0FDdEJ0MEMsRUFBTXUwQyxZQUFjLGdCQUFrQkQsRUFBU3RxRixVQUNuRCxlQW1CSCw2RkFFTyxnQ0FBTWtwRixvQkFBTix3Q0FFQTlvRixRQUFReTNELE1BQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHJhdmEvLi9zcmMvYXBpQ2xpZW50LnRzIiwid2VicGFjazovL3N0cmF2YS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vc3RyYXZhLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzQWZ0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3RyYXZhLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0JlZm9yZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9zcmMvcG93ZXJab25lQ2FsY3VsYXRvci50cyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9zcmMvaHJab25lQ2FsY3VsYXRvci50cyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9zcmMvZGF0YUNhbGN1bGF0b3IudHMiLCJ3ZWJwYWNrOi8vc3RyYXZhLy4vbm9kZV9tb2R1bGVzL0BrdXJrbGUvY29sb3IvZGlzdC9jb2xvci5lc20uanMiLCJ3ZWJwYWNrOi8vc3RyYXZhLy4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL2Rpc3QvY2h1bmtzL2hlbHBlcnMuc2VnbWVudC5qcyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvZGlzdC9jaGFydC5qcyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvYXV0by9hdXRvLmpzIiwid2VicGFjazovL3N0cmF2YS8uL3NyYy9jaGFydFByb3ZpZGVyLnRzIiwid2VicGFjazovL3N0cmF2YS8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZXRhaWxlZEFjdGl2aXR5IH0gZnJvbSBcIi4vbW9kZWxzL2RldGFpbGVkQWN0aXZpdHlcIjtcclxuaW1wb3J0IHsgU3RyYXZhQWN0aXZpdHkgfSBmcm9tIFwiLi9tb2RlbHMvc3RyYXZhQWN0aXZpdHlcIjtcclxuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcIi4vbW9kZWxzL3N0cmVhbVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0cmF2YUFwaUNsaWVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRQb3dlckRhdGEoKTogUHJvbWlzZTxTdHJlYW1bXT4ge1xyXG4gICAgICAgIHZhciB1cmwgPSBcImh0dHBzOi8vbG9jYWxob3N0OjcwMzgvYXBpL3N0cmF2YU1vbmdvL0dldEFsbFBvd2VyU3RyZWFtc1wiO1xyXG5cclxuICAgICAgICB2YXIgcmVzdWx0ID0gYXdhaXQgZmV0Y2godXJsKTtcclxuICAgICAgICB2YXIgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCkgYXMgU3RyZWFtW107XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0SGVhcnRSYXRlRGF0YSgpOiBQcm9taXNlPFN0cmVhbVtdPiB7XHJcbiAgICAgICAgdmFyIHVybCA9IFwiaHR0cHM6Ly9sb2NhbGhvc3Q6NzAzOC9hcGkvc3RyYXZhTW9uZ28vR2V0QWxsSHJTdHJlYW1zXCI7XHJcblxyXG4gICAgICAgIHZhciByZXN1bHQgPSBhd2FpdCBmZXRjaCh1cmwpO1xyXG4gICAgICAgIHZhciBkYXRhID0gYXdhaXQgcmVzdWx0Lmpzb24oKSBhcyBTdHJlYW1bXTtcclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRBY3Rpdml0aWVzKCk6IFByb21pc2U8U3RyYXZhQWN0aXZpdHlbXT4ge1xyXG4gICAgICAgIHZhciB1cmwgPSBcImh0dHBzOi8vbG9jYWxob3N0OjcwMzgvYXBpL3N0cmF2YU1vbmdvL0dldEFsbEFjdGl2aXRpZXNcIjtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gYXdhaXQgZmV0Y2godXJsKTtcclxuICAgICAgICB2YXIgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCkgYXMgU3RyYXZhQWN0aXZpdHlbXTtcclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXREZXRhaWxlZEFjdGl2aXRpZXMoKTogUHJvbWlzZTxEZXRhaWxlZEFjdGl2aXR5W10+IHtcclxuICAgICAgICB2YXIgdXJsID0gXCJodHRwczovL2xvY2FsaG9zdDo3MDM4L2FwaS9zdHJhdmFNb25nby9HZXRBbGxEZXRhaWxlZEFjdGl2aXRpZXNcIjtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gYXdhaXQgZmV0Y2godXJsKTtcclxuICAgICAgICB2YXIgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCkgYXMgRGV0YWlsZWRBY3Rpdml0eVtdO1xyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIF90eXBlb2Yob2JqKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7XG5cbiAgLy8gQ2xvbmUgdGhlIGRhdGVcbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKGFyZ3VtZW50KSA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI3N0cmluZy1hcmd1bWVudHNcIik7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzQWZ0ZXJcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGZpcnN0IGRhdGUgYWZ0ZXIgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZmlyc3QgZGF0ZSBhZnRlciB0aGUgc2Vjb25kIG9uZT9cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdGhhdCBzaG91bGQgYmUgYWZ0ZXIgdGhlIG90aGVyIG9uZSB0byByZXR1cm4gdHJ1ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVRvQ29tcGFyZSAtIHRoZSBkYXRlIHRvIGNvbXBhcmUgd2l0aFxuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBmaXJzdCBkYXRlIGlzIGFmdGVyIHRoZSBzZWNvbmQgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJcyAxMCBKdWx5IDE5ODkgYWZ0ZXIgMTEgRmVicnVhcnkgMTk4Nz9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzQWZ0ZXIobmV3IERhdGUoMTk4OSwgNiwgMTApLCBuZXcgRGF0ZSgxOTg3LCAxLCAxMSkpXG4gKiAvLz0+IHRydWVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBZnRlcihkaXJ0eURhdGUsIGRpcnR5RGF0ZVRvQ29tcGFyZSkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRhdGVUb0NvbXBhcmUgPSB0b0RhdGUoZGlydHlEYXRlVG9Db21wYXJlKTtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpID4gZGF0ZVRvQ29tcGFyZS5nZXRUaW1lKCk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0JlZm9yZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZmlyc3QgZGF0ZSBiZWZvcmUgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZmlyc3QgZGF0ZSBiZWZvcmUgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRoYXQgc2hvdWxkIGJlIGJlZm9yZSB0aGUgb3RoZXIgb25lIHRvIHJldHVybiB0cnVlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlVG9Db21wYXJlIC0gdGhlIGRhdGUgdG8gY29tcGFyZSB3aXRoXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGZpcnN0IGRhdGUgaXMgYmVmb3JlIHRoZSBzZWNvbmQgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJcyAxMCBKdWx5IDE5ODkgYmVmb3JlIDExIEZlYnJ1YXJ5IDE5ODc/XG4gKiBjb25zdCByZXN1bHQgPSBpc0JlZm9yZShuZXcgRGF0ZSgxOTg5LCA2LCAxMCksIG5ldyBEYXRlKDE5ODcsIDEsIDExKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNCZWZvcmUoZGlydHlEYXRlLCBkaXJ0eURhdGVUb0NvbXBhcmUpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXRlVG9Db21wYXJlID0gdG9EYXRlKGRpcnR5RGF0ZVRvQ29tcGFyZSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSA8IGRhdGVUb0NvbXBhcmUuZ2V0VGltZSgpO1xufSIsImltcG9ydCB7IENoYXJ0LCBDaGFydENvbmZpZ3VyYXRpb24sIENoYXJ0SXRlbSwgQ2hhcnRUeXBlLCBDaGFydFR5cGVSZWdpc3RyeSB9IGZyb20gXCJjaGFydC5qcy9hdXRvXCI7XHJcbmltcG9ydCB7IENoYXJ0R2VuZXJhdG9yIH0gZnJvbSBcIi4vY2hhcnRHZW5lcmF0b3JcIjtcclxuaW1wb3J0IHsgU3RyYXZhQWN0aXZpdHkgfSBmcm9tIFwiLi9tb2RlbHMvc3RyYXZhQWN0aXZpdHlcIjtcclxuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcIi4vbW9kZWxzL3N0cmVhbVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvd2VyWm9uZSB7XHJcbiAgICBwb3dlclpvbmVzOiBudW1iZXJbXTtcclxuXHJcbiAgICBwdWJsaWMgZ2V0VGltZUluWm9uZUxpc3QoYWN0aXZpdGllczogU3RyYXZhQWN0aXZpdHlbXSk6IG51bWJlcltdIHtcclxuICAgICAgICBsZXQgdGltZUluWm9uZURpY3Q6IHsgW2luZGV4OiBzdHJpbmddOiBudW1iZXIgfSA9IHtcclxuICAgICAgICAgICAgXCIxXCI6IDAsXHJcbiAgICAgICAgICAgIFwiMlwiOiAwLFxyXG4gICAgICAgICAgICBcIjNcIjogMCxcclxuICAgICAgICAgICAgXCI0XCI6IDAsXHJcbiAgICAgICAgICAgIFwiNVwiOiAwLFxyXG4gICAgICAgICAgICBcIjZcIjogMCxcclxuICAgICAgICAgICAgXCI3XCI6IDAsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKGxldCBhY3Rpdml0eSBvZiBhY3Rpdml0aWVzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBhY3Rpdml0eS5wb3dlclN0cmVhbSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRpbWVBdFBvd2VySW5TZWNvbmRzID0gYWN0aXZpdHkucG93ZXJTdHJlYW1ba2V5XTtcclxuICAgICAgICAgICAgICAgIGxldCB6b25lID0gdGhpcy5nZXRab25lKGtleSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgem9uZVN0cmluZyA9IHpvbmUudG9TdHJpbmcoKSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICB0aW1lSW5ab25lRGljdFt6b25lU3RyaW5nXSArPSBOdW1iZXIucGFyc2VJbnQodGltZUF0UG93ZXJJblNlY29uZHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aW1lSW5ab25lRGljdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRab25lKHBvd2VyOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgICAgIHZhciBwb3dlckFzTnVtYmVyID0gTnVtYmVyLnBhcnNlSW50KHBvd2VyKTtcclxuICAgICAgICBpZiAocG93ZXJBc051bWJlciA8PSAxMzIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBvd2VyQXNOdW1iZXIgPiAxMzIgJiYgcG93ZXJBc051bWJlciA8PSAxODApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBvd2VyQXNOdW1iZXIgPiAxODAgJiYgcG93ZXJBc051bWJlciA8PSAyMTYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBvd2VyQXNOdW1iZXIgPiAyMTYgJiYgcG93ZXJBc051bWJlciA8PSAyNTIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBvd2VyQXNOdW1iZXIgPiAyNTIgJiYgcG93ZXJBc051bWJlciA8PSAyODgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBvd2VyQXNOdW1iZXIgPiAyODggJiYgcG93ZXJBc051bWJlciA8PSAzNjApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBvd2VyQXNOdW1iZXIgPj0gMzYwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiA3O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldFBvd2VyWm9uZXMoZnRwOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnBvd2VyWm9uZXNbMF0gPSBmdHAgKiAuNTU7XHJcbiAgICAgICAgdGhpcy5wb3dlclpvbmVzWzFdID0gZnRwICogLjc1O1xyXG4gICAgICAgIHRoaXMucG93ZXJab25lc1syXSA9IGZ0cCAqIC44NztcclxuICAgICAgICB0aGlzLnBvd2VyWm9uZXNbM10gPSBmdHAgKiAxLjA1O1xyXG4gICAgICAgIHRoaXMucG93ZXJab25lc1s0XSA9IGZ0cCAqIDEuMjtcclxuICAgICAgICB0aGlzLnBvd2VyWm9uZXNbNV0gPSBmdHAgKiAxLjU7XHJcbiAgICAgICAgdGhpcy5wb3dlclpvbmVzWzZdID0gZnRwICogMjtcclxuICAgIH1cclxufSIsImltcG9ydCB7IENoYXJ0LCBDaGFydENvbmZpZ3VyYXRpb24sIENoYXJ0SXRlbSwgQ2hhcnRUeXBlLCBDaGFydFR5cGVSZWdpc3RyeSB9IGZyb20gXCJjaGFydC5qcy9hdXRvXCI7XHJcbmltcG9ydCB7IENoYXJ0R2VuZXJhdG9yIH0gZnJvbSBcIi4vY2hhcnRHZW5lcmF0b3JcIjtcclxuaW1wb3J0IHsgU3RyYXZhQWN0aXZpdHkgfSBmcm9tIFwiLi9tb2RlbHMvc3RyYXZhQWN0aXZpdHlcIjtcclxuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcIi4vbW9kZWxzL3N0cmVhbVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEhyWm9uZSB7XHJcbiAgICBoclpvbmVzOiBudW1iZXJbXTtcclxuXHJcbiAgICBwdWJsaWMgZ2V0VGltZUluWm9uZUxpc3QoYWN0aXZpdGllczogU3RyYXZhQWN0aXZpdHlbXSk6IG51bWJlcltdIHtcclxuICAgICAgICBsZXQgdGltZUluWm9uZURpY3Q6IHsgW2luZGV4OiBzdHJpbmddOiBudW1iZXIgfSA9IHtcclxuICAgICAgICAgICAgXCIxXCI6IDAsXHJcbiAgICAgICAgICAgIFwiMlwiOiAwLFxyXG4gICAgICAgICAgICBcIjNcIjogMCxcclxuICAgICAgICAgICAgXCI0XCI6IDAsXHJcbiAgICAgICAgICAgIFwiNVwiOiAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yIChsZXQgYWN0aXZpdHkgb2YgYWN0aXZpdGllcykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gYWN0aXZpdHkuaHJTdHJlYW0pIHtcclxuICAgICAgICAgICAgICAgIGxldCB0aW1lQXRQb3dlckluU2Vjb25kcyA9IGFjdGl2aXR5LmhyU3RyZWFtW2tleV07XHJcbiAgICAgICAgICAgICAgICBsZXQgem9uZSA9IHRoaXMuZ2V0Wm9uZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHpvbmVTdHJpbmcgPSB6b25lLnRvU3RyaW5nKCkgYXMgc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgdGltZUluWm9uZURpY3Rbem9uZVN0cmluZ10gKz0gTnVtYmVyLnBhcnNlSW50KHRpbWVBdFBvd2VySW5TZWNvbmRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGltZUluWm9uZURpY3QpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFpvbmUoaGVhcnRSYXRlOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgICAgIHZhciBwb3dlckFzTnVtYmVyID0gTnVtYmVyLnBhcnNlSW50KGhlYXJ0UmF0ZSk7XHJcbiAgICAgICAgaWYgKHBvd2VyQXNOdW1iZXIgPD0gMTE4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwb3dlckFzTnVtYmVyID4gMTE4ICYmIHBvd2VyQXNOdW1iZXIgPD0gMTU2KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwb3dlckFzTnVtYmVyID4gMTU2ICYmIHBvd2VyQXNOdW1iZXIgPD0gMTc1KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwb3dlckFzTnVtYmVyID4gMTc1ICYmIHBvd2VyQXNOdW1iZXIgPD0gMTk0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiA0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwb3dlckFzTnVtYmVyID4gMTk0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiA1O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldEhyWm9uZXMobWF4SHI6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuaHJab25lc1swXSA9IG1heEhyICogLjU7XHJcbiAgICAgICAgdGhpcy5oclpvbmVzWzFdID0gbWF4SHIgKiAuNjtcclxuICAgICAgICB0aGlzLmhyWm9uZXNbMl0gPSBtYXhIciAqIC43O1xyXG4gICAgICAgIHRoaXMuaHJab25lc1szXSA9IG1heEhyICogLjg7XHJcbiAgICAgICAgdGhpcy5oclpvbmVzWzRdID0gbWF4SHIgKiAuOTtcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBDaGFydCwgQ2hhcnRDb25maWd1cmF0aW9uLCBDaGFydEl0ZW0sIENoYXJ0VHlwZSB9IGZyb20gXCJjaGFydC5qcy9hdXRvXCI7XHJcbmltcG9ydCB7IENoYXJ0R2VuZXJhdG9yIH0gZnJvbSBcIi4vY2hhcnRHZW5lcmF0b3JcIjtcclxuaW1wb3J0IHsgU3RyYXZhQWN0aXZpdHkgfSBmcm9tIFwiLi9tb2RlbHMvc3RyYXZhQWN0aXZpdHlcIjtcclxuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcIi4vbW9kZWxzL3N0cmVhbVwiO1xyXG5pbXBvcnQgeyBUaW1lSW5ab25lRmlsdGVyIH0gZnJvbSBcIi4vdGltZUluWm9uZUZpbHRlclwiO1xyXG5pbXBvcnQgKiBhcyBEYXRlSGVscGVyIGZyb20gJ2RhdGUtZm5zJztcclxuaW1wb3J0IHsgUG93ZXJab25lIH0gZnJvbSBcIi4vcG93ZXJab25lQ2FsY3VsYXRvclwiO1xyXG5pbXBvcnQgeyBIclpvbmUgfSBmcm9tIFwiLi9oclpvbmVDYWxjdWxhdG9yXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0YUNhbGN1bGF0b3Ige1xyXG4gICAgYWxsQWN0aXZpdGllczogU3RyYXZhQWN0aXZpdHlbXTtcclxuICAgIGZpbHRlcmVkQWN0aXZpdGllczogU3RyYXZhQWN0aXZpdHlbXTtcclxuXHJcbiAgICBoclRpbWVJblpvbmU6IG51bWJlcltdO1xyXG4gICAgcG93ZXJUaW1lSW5ab25lOiBudW1iZXJbXVxyXG4gICAgY2Fsb3JpZXNCdXJuZWRJblRpbWVQZXJpb2Q6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhY3Rpdml0aWVzOiBTdHJhdmFBY3Rpdml0eVtdKSB7XHJcbiAgICAgICAgdGhpcy5hbGxBY3Rpdml0aWVzID0gYWN0aXZpdGllcztcclxuICAgICAgICB0aGlzLmZpbHRlcmVkQWN0aXZpdGllcyA9IGFjdGl2aXRpZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsdGVyQnlEYXRlKGZyb21EYXRlOiBEYXRlLCB0b0RhdGU6IERhdGUpIHtcclxuICAgICAgICB0aGlzLmZpbHRlcmVkQWN0aXZpdGllcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGFjdGl2aXR5IG9mIHRoaXMuYWxsQWN0aXZpdGllcykge1xyXG4gICAgICAgICAgICBsZXQgYWN0aXZpdHlEYXRlID0gRGF0ZS5wYXJzZShhY3Rpdml0eS5zdGFydF9kYXRlX2xvY2FsKTtcclxuICAgICAgICAgICAgaWYgKERhdGVIZWxwZXIuaXNBZnRlcihhY3Rpdml0eURhdGUsIGZyb21EYXRlKSAmJiBEYXRlSGVscGVyLmlzQmVmb3JlKGFjdGl2aXR5RGF0ZSwgdG9EYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJlZEFjdGl2aXRpZXMucHVzaChhY3Rpdml0eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGltZUluWm9uZUxpc3RzKCkge1xyXG4gICAgICAgIHRoaXMucG93ZXJUaW1lSW5ab25lID0gbmV3IFBvd2VyWm9uZSgpLmdldFRpbWVJblpvbmVMaXN0KHRoaXMuZmlsdGVyZWRBY3Rpdml0aWVzKTtcclxuICAgICAgICB0aGlzLmhyVGltZUluWm9uZSA9IG5ldyBIclpvbmUoKS5nZXRUaW1lSW5ab25lTGlzdCh0aGlzLmZpbHRlcmVkQWN0aXZpdGllcyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q2Fsb3JpZXNCdXJuZWQoKSB7XHJcbiAgICAgICAgdGhpcy5jYWxvcmllc0J1cm5lZEluVGltZVBlcmlvZCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgYWN0aXZpdHkgb2YgdGhpcy5maWx0ZXJlZEFjdGl2aXRpZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5jYWxvcmllc0J1cm5lZEluVGltZVBlcmlvZCArPSBhY3Rpdml0eS5kZXRhaWxzLmNhbG9yaWVzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8qIVxuICogQGt1cmtsZS9jb2xvciB2MC4zLjJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rdXJrbGUvY29sb3IjcmVhZG1lXG4gKiAoYykgMjAyMyBKdWtrYSBLdXJrZWxhXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuZnVuY3Rpb24gcm91bmQodikge1xuICByZXR1cm4gdiArIDAuNSB8IDA7XG59XG5jb25zdCBsaW0gPSAodiwgbCwgaCkgPT4gTWF0aC5tYXgoTWF0aC5taW4odiwgaCksIGwpO1xuZnVuY3Rpb24gcDJiKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2ICogMi41NSksIDAsIDI1NSk7XG59XG5mdW5jdGlvbiBiMnAodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgLyAyLjU1KSwgMCwgMTAwKTtcbn1cbmZ1bmN0aW9uIG4yYih2KSB7XG4gIHJldHVybiBsaW0ocm91bmQodiAqIDI1NSksIDAsIDI1NSk7XG59XG5mdW5jdGlvbiBiMm4odikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgLyAyLjU1KSAvIDEwMCwgMCwgMSk7XG59XG5mdW5jdGlvbiBuMnAodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgKiAxMDApLCAwLCAxMDApO1xufVxuXG5jb25zdCBtYXAkMSA9IHswOiAwLCAxOiAxLCAyOiAyLCAzOiAzLCA0OiA0LCA1OiA1LCA2OiA2LCA3OiA3LCA4OiA4LCA5OiA5LCBBOiAxMCwgQjogMTEsIEM6IDEyLCBEOiAxMywgRTogMTQsIEY6IDE1LCBhOiAxMCwgYjogMTEsIGM6IDEyLCBkOiAxMywgZTogMTQsIGY6IDE1fTtcbmNvbnN0IGhleCA9IFsuLi4nMDEyMzQ1Njc4OUFCQ0RFRiddO1xuY29uc3QgaDEgPSBiID0+IGhleFtiICYgMHhGXTtcbmNvbnN0IGgyID0gYiA9PiBoZXhbKGIgJiAweEYwKSA+PiA0XSArIGhleFtiICYgMHhGXTtcbmNvbnN0IGVxID0gYiA9PiAoKGIgJiAweEYwKSA+PiA0KSA9PT0gKGIgJiAweEYpO1xuY29uc3QgaXNTaG9ydCA9IHYgPT4gZXEodi5yKSAmJiBlcSh2LmcpICYmIGVxKHYuYikgJiYgZXEodi5hKTtcbmZ1bmN0aW9uIGhleFBhcnNlKHN0cikge1xuICB2YXIgbGVuID0gc3RyLmxlbmd0aDtcbiAgdmFyIHJldDtcbiAgaWYgKHN0clswXSA9PT0gJyMnKSB7XG4gICAgaWYgKGxlbiA9PT0gNCB8fCBsZW4gPT09IDUpIHtcbiAgICAgIHJldCA9IHtcbiAgICAgICAgcjogMjU1ICYgbWFwJDFbc3RyWzFdXSAqIDE3LFxuICAgICAgICBnOiAyNTUgJiBtYXAkMVtzdHJbMl1dICogMTcsXG4gICAgICAgIGI6IDI1NSAmIG1hcCQxW3N0clszXV0gKiAxNyxcbiAgICAgICAgYTogbGVuID09PSA1ID8gbWFwJDFbc3RyWzRdXSAqIDE3IDogMjU1XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAobGVuID09PSA3IHx8IGxlbiA9PT0gOSkge1xuICAgICAgcmV0ID0ge1xuICAgICAgICByOiBtYXAkMVtzdHJbMV1dIDw8IDQgfCBtYXAkMVtzdHJbMl1dLFxuICAgICAgICBnOiBtYXAkMVtzdHJbM11dIDw8IDQgfCBtYXAkMVtzdHJbNF1dLFxuICAgICAgICBiOiBtYXAkMVtzdHJbNV1dIDw8IDQgfCBtYXAkMVtzdHJbNl1dLFxuICAgICAgICBhOiBsZW4gPT09IDkgPyAobWFwJDFbc3RyWzddXSA8PCA0IHwgbWFwJDFbc3RyWzhdXSkgOiAyNTVcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5jb25zdCBhbHBoYSA9IChhLCBmKSA9PiBhIDwgMjU1ID8gZihhKSA6ICcnO1xuZnVuY3Rpb24gaGV4U3RyaW5nKHYpIHtcbiAgdmFyIGYgPSBpc1Nob3J0KHYpID8gaDEgOiBoMjtcbiAgcmV0dXJuIHZcbiAgICA/ICcjJyArIGYodi5yKSArIGYodi5nKSArIGYodi5iKSArIGFscGhhKHYuYSwgZilcbiAgICA6IHVuZGVmaW5lZDtcbn1cblxuY29uc3QgSFVFX1JFID0gL14oaHNsYT98aHdifGhzdilcXChcXHMqKFstKy5lXFxkXSspKD86ZGVnKT9bXFxzLF0rKFstKy5lXFxkXSspJVtcXHMsXSsoWy0rLmVcXGRdKyklKD86W1xccyxdKyhbLSsuZVxcZF0rKSglKT8pP1xccypcXCkkLztcbmZ1bmN0aW9uIGhzbDJyZ2JuKGgsIHMsIGwpIHtcbiAgY29uc3QgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG4gIGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDMwKSAlIDEyKSA9PiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcbiAgcmV0dXJuIFtmKDApLCBmKDgpLCBmKDQpXTtcbn1cbmZ1bmN0aW9uIGhzdjJyZ2JuKGgsIHMsIHYpIHtcbiAgY29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gNjApICUgNikgPT4gdiAtIHYgKiBzICogTWF0aC5tYXgoTWF0aC5taW4oaywgNCAtIGssIDEpLCAwKTtcbiAgcmV0dXJuIFtmKDUpLCBmKDMpLCBmKDEpXTtcbn1cbmZ1bmN0aW9uIGh3YjJyZ2JuKGgsIHcsIGIpIHtcbiAgY29uc3QgcmdiID0gaHNsMnJnYm4oaCwgMSwgMC41KTtcbiAgbGV0IGk7XG4gIGlmICh3ICsgYiA+IDEpIHtcbiAgICBpID0gMSAvICh3ICsgYik7XG4gICAgdyAqPSBpO1xuICAgIGIgKj0gaTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgcmdiW2ldICo9IDEgLSB3IC0gYjtcbiAgICByZ2JbaV0gKz0gdztcbiAgfVxuICByZXR1cm4gcmdiO1xufVxuZnVuY3Rpb24gaHVlVmFsdWUociwgZywgYiwgZCwgbWF4KSB7XG4gIGlmIChyID09PSBtYXgpIHtcbiAgICByZXR1cm4gKChnIC0gYikgLyBkKSArIChnIDwgYiA/IDYgOiAwKTtcbiAgfVxuICBpZiAoZyA9PT0gbWF4KSB7XG4gICAgcmV0dXJuIChiIC0gcikgLyBkICsgMjtcbiAgfVxuICByZXR1cm4gKHIgLSBnKSAvIGQgKyA0O1xufVxuZnVuY3Rpb24gcmdiMmhzbCh2KSB7XG4gIGNvbnN0IHJhbmdlID0gMjU1O1xuICBjb25zdCByID0gdi5yIC8gcmFuZ2U7XG4gIGNvbnN0IGcgPSB2LmcgLyByYW5nZTtcbiAgY29uc3QgYiA9IHYuYiAvIHJhbmdlO1xuICBjb25zdCBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgY29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gIGNvbnN0IGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGxldCBoLCBzLCBkO1xuICBpZiAobWF4ICE9PSBtaW4pIHtcbiAgICBkID0gbWF4IC0gbWluO1xuICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICBoID0gaHVlVmFsdWUociwgZywgYiwgZCwgbWF4KTtcbiAgICBoID0gaCAqIDYwICsgMC41O1xuICB9XG4gIHJldHVybiBbaCB8IDAsIHMgfHwgMCwgbF07XG59XG5mdW5jdGlvbiBjYWxsbihmLCBhLCBiLCBjKSB7XG4gIHJldHVybiAoXG4gICAgQXJyYXkuaXNBcnJheShhKVxuICAgICAgPyBmKGFbMF0sIGFbMV0sIGFbMl0pXG4gICAgICA6IGYoYSwgYiwgYylcbiAgKS5tYXAobjJiKTtcbn1cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgcywgbCkge1xuICByZXR1cm4gY2FsbG4oaHNsMnJnYm4sIGgsIHMsIGwpO1xufVxuZnVuY3Rpb24gaHdiMnJnYihoLCB3LCBiKSB7XG4gIHJldHVybiBjYWxsbihod2IycmdibiwgaCwgdywgYik7XG59XG5mdW5jdGlvbiBoc3YycmdiKGgsIHMsIHYpIHtcbiAgcmV0dXJuIGNhbGxuKGhzdjJyZ2JuLCBoLCBzLCB2KTtcbn1cbmZ1bmN0aW9uIGh1ZShoKSB7XG4gIHJldHVybiAoaCAlIDM2MCArIDM2MCkgJSAzNjA7XG59XG5mdW5jdGlvbiBodWVQYXJzZShzdHIpIHtcbiAgY29uc3QgbSA9IEhVRV9SRS5leGVjKHN0cik7XG4gIGxldCBhID0gMjU1O1xuICBsZXQgdjtcbiAgaWYgKCFtKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtWzVdICE9PSB2KSB7XG4gICAgYSA9IG1bNl0gPyBwMmIoK21bNV0pIDogbjJiKCttWzVdKTtcbiAgfVxuICBjb25zdCBoID0gaHVlKCttWzJdKTtcbiAgY29uc3QgcDEgPSArbVszXSAvIDEwMDtcbiAgY29uc3QgcDIgPSArbVs0XSAvIDEwMDtcbiAgaWYgKG1bMV0gPT09ICdod2InKSB7XG4gICAgdiA9IGh3YjJyZ2IoaCwgcDEsIHAyKTtcbiAgfSBlbHNlIGlmIChtWzFdID09PSAnaHN2Jykge1xuICAgIHYgPSBoc3YycmdiKGgsIHAxLCBwMik7XG4gIH0gZWxzZSB7XG4gICAgdiA9IGhzbDJyZ2IoaCwgcDEsIHAyKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHI6IHZbMF0sXG4gICAgZzogdlsxXSxcbiAgICBiOiB2WzJdLFxuICAgIGE6IGFcbiAgfTtcbn1cbmZ1bmN0aW9uIHJvdGF0ZSh2LCBkZWcpIHtcbiAgdmFyIGggPSByZ2IyaHNsKHYpO1xuICBoWzBdID0gaHVlKGhbMF0gKyBkZWcpO1xuICBoID0gaHNsMnJnYihoKTtcbiAgdi5yID0gaFswXTtcbiAgdi5nID0gaFsxXTtcbiAgdi5iID0gaFsyXTtcbn1cbmZ1bmN0aW9uIGhzbFN0cmluZyh2KSB7XG4gIGlmICghdikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBhID0gcmdiMmhzbCh2KTtcbiAgY29uc3QgaCA9IGFbMF07XG4gIGNvbnN0IHMgPSBuMnAoYVsxXSk7XG4gIGNvbnN0IGwgPSBuMnAoYVsyXSk7XG4gIHJldHVybiB2LmEgPCAyNTVcbiAgICA/IGBoc2xhKCR7aH0sICR7c30lLCAke2x9JSwgJHtiMm4odi5hKX0pYFxuICAgIDogYGhzbCgke2h9LCAke3N9JSwgJHtsfSUpYDtcbn1cblxuY29uc3QgbWFwID0ge1xuICB4OiAnZGFyaycsXG4gIFo6ICdsaWdodCcsXG4gIFk6ICdyZScsXG4gIFg6ICdibHUnLFxuICBXOiAnZ3InLFxuICBWOiAnbWVkaXVtJyxcbiAgVTogJ3NsYXRlJyxcbiAgQTogJ2VlJyxcbiAgVDogJ29sJyxcbiAgUzogJ29yJyxcbiAgQjogJ3JhJyxcbiAgQzogJ2xhdGVnJyxcbiAgRDogJ2lnaHRzJyxcbiAgUjogJ2luJyxcbiAgUTogJ3R1cnF1b2lzJyxcbiAgRTogJ2hpJyxcbiAgUDogJ3JvJyxcbiAgTzogJ2FsJyxcbiAgTjogJ2xlJyxcbiAgTTogJ2RlJyxcbiAgTDogJ3llbGxvJyxcbiAgRjogJ2VuJyxcbiAgSzogJ2NoJyxcbiAgRzogJ2Fya3MnLFxuICBIOiAnZWEnLFxuICBJOiAnaWdodGcnLFxuICBKOiAnd2gnXG59O1xuY29uc3QgbmFtZXMkMSA9IHtcbiAgT2ljZVhlOiAnZjBmOGZmJyxcbiAgYW50aXF1ZXdFdGU6ICdmYWViZDcnLFxuICBhcXVhOiAnZmZmZicsXG4gIGFxdWFtYXJSZTogJzdmZmZkNCcsXG4gIGF6dVk6ICdmMGZmZmYnLFxuICBiZWlnZTogJ2Y1ZjVkYycsXG4gIGJpc3F1ZTogJ2ZmZTRjNCcsXG4gIGJsYWNrOiAnMCcsXG4gIGJsYW5LZWRPbW9uZDogJ2ZmZWJjZCcsXG4gIFhlOiAnZmYnLFxuICBYZXZpVGV0OiAnOGEyYmUyJyxcbiAgYlB3bjogJ2E1MmEyYScsXG4gIGJ1cmx5d29vZDogJ2RlYjg4NycsXG4gIGNhTXRYZTogJzVmOWVhMCcsXG4gIEthcnRZdXNlOiAnN2ZmZjAwJyxcbiAgS29jVGF0ZTogJ2QyNjkxZScsXG4gIGNTTzogJ2ZmN2Y1MCcsXG4gIGNTbmZsb3dlclhlOiAnNjQ5NWVkJyxcbiAgY1Nuc2lsazogJ2ZmZjhkYycsXG4gIGNyaW1zb246ICdkYzE0M2MnLFxuICBjeWFuOiAnZmZmZicsXG4gIHhYZTogJzhiJyxcbiAgeGN5YW46ICc4YjhiJyxcbiAgeGdUTW5QZDogJ2I4ODYwYicsXG4gIHhXYXk6ICdhOWE5YTknLFxuICB4Z1lGOiAnNjQwMCcsXG4gIHhnWXk6ICdhOWE5YTknLFxuICB4a2hha2k6ICdiZGI3NmInLFxuICB4bWFnRnRhOiAnOGIwMDhiJyxcbiAgeFRpdmVnWUY6ICc1NTZiMmYnLFxuICB4U2FuZ2U6ICdmZjhjMDAnLFxuICB4U2NFZDogJzk5MzJjYycsXG4gIHhZZDogJzhiMDAwMCcsXG4gIHhzT21vbjogJ2U5OTY3YScsXG4gIHhzSGdZRjogJzhmYmM4ZicsXG4gIHhVWGU6ICc0ODNkOGInLFxuICB4VVdheTogJzJmNGY0ZicsXG4gIHhVZ1l5OiAnMmY0ZjRmJyxcbiAgeFFlOiAnY2VkMScsXG4gIHh2aVRldDogJzk0MDBkMycsXG4gIGRBcHBSazogJ2ZmMTQ5MycsXG4gIGRBcHNreVhlOiAnYmZmZicsXG4gIGRpbVdheTogJzY5Njk2OScsXG4gIGRpbWdZeTogJzY5Njk2OScsXG4gIGRvZGdlclhlOiAnMWU5MGZmJyxcbiAgZmlZYnJpY2s6ICdiMjIyMjInLFxuICBmbFNPd0V0ZTogJ2ZmZmFmMCcsXG4gIGZvWXN0V0FuOiAnMjI4YjIyJyxcbiAgZnVLc2lhOiAnZmYwMGZmJyxcbiAgZ2FSc2JTbzogJ2RjZGNkYycsXG4gIGdob3N0d0V0ZTogJ2Y4ZjhmZicsXG4gIGdUZDogJ2ZmZDcwMCcsXG4gIGdUTW5QZDogJ2RhYTUyMCcsXG4gIFdheTogJzgwODA4MCcsXG4gIGdZRjogJzgwMDAnLFxuICBnWUZMdzogJ2FkZmYyZicsXG4gIGdZeTogJzgwODA4MCcsXG4gIGhvbmV5TXc6ICdmMGZmZjAnLFxuICBob3RwUms6ICdmZjY5YjQnLFxuICBSZGlhbllkOiAnY2Q1YzVjJyxcbiAgUmRpZ286ICc0YjAwODInLFxuICBpdlN5OiAnZmZmZmYwJyxcbiAga2hha2k6ICdmMGU2OGMnLFxuICBsYXZGTXI6ICdlNmU2ZmEnLFxuICBsYXZGTXJYc2g6ICdmZmYwZjUnLFxuICBsYXduZ1lGOiAnN2NmYzAwJyxcbiAgTm1vbmNFZmZvbjogJ2ZmZmFjZCcsXG4gIFpYZTogJ2FkZDhlNicsXG4gIFpjU086ICdmMDgwODAnLFxuICBaY3lhbjogJ2UwZmZmZicsXG4gIFpnVE1uUGRMdzogJ2ZhZmFkMicsXG4gIFpXYXk6ICdkM2QzZDMnLFxuICBaZ1lGOiAnOTBlZTkwJyxcbiAgWmdZeTogJ2QzZDNkMycsXG4gIFpwUms6ICdmZmI2YzEnLFxuICBac09tb246ICdmZmEwN2EnLFxuICBac0hnWUY6ICcyMGIyYWEnLFxuICBac2t5WGU6ICc4N2NlZmEnLFxuICBaVVdheTogJzc3ODg5OScsXG4gIFpVZ1l5OiAnNzc4ODk5JyxcbiAgWnN0QWxYZTogJ2IwYzRkZScsXG4gIFpMdzogJ2ZmZmZlMCcsXG4gIGxpbWU6ICdmZjAwJyxcbiAgbGltZWdZRjogJzMyY2QzMicsXG4gIGxSRjogJ2ZhZjBlNicsXG4gIG1hZ0Z0YTogJ2ZmMDBmZicsXG4gIG1hUG9uOiAnODAwMDAwJyxcbiAgVmFxdWFtYXJSZTogJzY2Y2RhYScsXG4gIFZYZTogJ2NkJyxcbiAgVlNjRWQ6ICdiYTU1ZDMnLFxuICBWcHVycE46ICc5MzcwZGInLFxuICBWc0hnWUY6ICczY2IzNzEnLFxuICBWVVhlOiAnN2I2OGVlJyxcbiAgVnNwclJnZ1lGOiAnZmE5YScsXG4gIFZRZTogJzQ4ZDFjYycsXG4gIFZ2aVRldFlkOiAnYzcxNTg1JyxcbiAgbWlkbmlnaHRYZTogJzE5MTk3MCcsXG4gIG1SdGNZYW06ICdmNWZmZmEnLFxuICBtaXN0eVBzZTogJ2ZmZTRlMScsXG4gIG1vY2Nhc1I6ICdmZmU0YjUnLFxuICBuYXZham93RXRlOiAnZmZkZWFkJyxcbiAgbmF2eTogJzgwJyxcbiAgVGRsYWNlOiAnZmRmNWU2JyxcbiAgVGl2ZTogJzgwODAwMCcsXG4gIFRpdmVkQmI6ICc2YjhlMjMnLFxuICBTYW5nZTogJ2ZmYTUwMCcsXG4gIFNhbmdlWWQ6ICdmZjQ1MDAnLFxuICBTY0VkOiAnZGE3MGQ2JyxcbiAgcE9lZ1RNblBkOiAnZWVlOGFhJyxcbiAgcE9lZ1lGOiAnOThmYjk4JyxcbiAgcE9lUWU6ICdhZmVlZWUnLFxuICBwT2V2aVRldFlkOiAnZGI3MDkzJyxcbiAgcGFwYXlhd0VwOiAnZmZlZmQ1JyxcbiAgcEhLcHVmZjogJ2ZmZGFiOScsXG4gIHBlcnU6ICdjZDg1M2YnLFxuICBwUms6ICdmZmMwY2InLFxuICBwbHVtOiAnZGRhMGRkJyxcbiAgcG93TXJYZTogJ2IwZTBlNicsXG4gIHB1cnBOOiAnODAwMDgwJyxcbiAgWWJlY2NhcHVycE46ICc2NjMzOTknLFxuICBZZDogJ2ZmMDAwMCcsXG4gIFBzeWJyb3duOiAnYmM4ZjhmJyxcbiAgUHlPWGU6ICc0MTY5ZTEnLFxuICBzYWRkTmJQd246ICc4YjQ1MTMnLFxuICBzT21vbjogJ2ZhODA3MicsXG4gIHNhbmR5YlB3bjogJ2Y0YTQ2MCcsXG4gIHNIZ1lGOiAnMmU4YjU3JyxcbiAgc0hzaGVsbDogJ2ZmZjVlZScsXG4gIHNpRm5hOiAnYTA1MjJkJyxcbiAgc2lsdmVyOiAnYzBjMGMwJyxcbiAgc2t5WGU6ICc4N2NlZWInLFxuICBVWGU6ICc2YTVhY2QnLFxuICBVV2F5OiAnNzA4MDkwJyxcbiAgVWdZeTogJzcwODA5MCcsXG4gIHNub3c6ICdmZmZhZmEnLFxuICBzcHJSZ2dZRjogJ2ZmN2YnLFxuICBzdEFsWGU6ICc0NjgyYjQnLFxuICB0YW46ICdkMmI0OGMnLFxuICB0ZU86ICc4MDgwJyxcbiAgdEVzdE46ICdkOGJmZDgnLFxuICB0b21hdG86ICdmZjYzNDcnLFxuICBRZTogJzQwZTBkMCcsXG4gIHZpVGV0OiAnZWU4MmVlJyxcbiAgSkh0OiAnZjVkZWIzJyxcbiAgd0V0ZTogJ2ZmZmZmZicsXG4gIHdFdGVzbW9rZTogJ2Y1ZjVmNScsXG4gIEx3OiAnZmZmZjAwJyxcbiAgTHdnWUY6ICc5YWNkMzInXG59O1xuZnVuY3Rpb24gdW5wYWNrKCkge1xuICBjb25zdCB1bnBhY2tlZCA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobmFtZXMkMSk7XG4gIGNvbnN0IHRrZXlzID0gT2JqZWN0LmtleXMobWFwKTtcbiAgbGV0IGksIGosIGssIG9rLCBuaztcbiAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBvayA9IG5rID0ga2V5c1tpXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgdGtleXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGsgPSB0a2V5c1tqXTtcbiAgICAgIG5rID0gbmsucmVwbGFjZShrLCBtYXBba10pO1xuICAgIH1cbiAgICBrID0gcGFyc2VJbnQobmFtZXMkMVtva10sIDE2KTtcbiAgICB1bnBhY2tlZFtua10gPSBbayA+PiAxNiAmIDB4RkYsIGsgPj4gOCAmIDB4RkYsIGsgJiAweEZGXTtcbiAgfVxuICByZXR1cm4gdW5wYWNrZWQ7XG59XG5cbmxldCBuYW1lcztcbmZ1bmN0aW9uIG5hbWVQYXJzZShzdHIpIHtcbiAgaWYgKCFuYW1lcykge1xuICAgIG5hbWVzID0gdW5wYWNrKCk7XG4gICAgbmFtZXMudHJhbnNwYXJlbnQgPSBbMCwgMCwgMCwgMF07XG4gIH1cbiAgY29uc3QgYSA9IG5hbWVzW3N0ci50b0xvd2VyQ2FzZSgpXTtcbiAgcmV0dXJuIGEgJiYge1xuICAgIHI6IGFbMF0sXG4gICAgZzogYVsxXSxcbiAgICBiOiBhWzJdLFxuICAgIGE6IGEubGVuZ3RoID09PSA0ID8gYVszXSA6IDI1NVxuICB9O1xufVxuXG5jb25zdCBSR0JfUkUgPSAvXnJnYmE/XFwoXFxzKihbLSsuXFxkXSspKCUpP1tcXHMsXSsoWy0rLmVcXGRdKykoJSk/W1xccyxdKyhbLSsuZVxcZF0rKSglKT8oPzpbXFxzLC9dKyhbLSsuZVxcZF0rKSglKT8pP1xccypcXCkkLztcbmZ1bmN0aW9uIHJnYlBhcnNlKHN0cikge1xuICBjb25zdCBtID0gUkdCX1JFLmV4ZWMoc3RyKTtcbiAgbGV0IGEgPSAyNTU7XG4gIGxldCByLCBnLCBiO1xuICBpZiAoIW0pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1bN10gIT09IHIpIHtcbiAgICBjb25zdCB2ID0gK21bN107XG4gICAgYSA9IG1bOF0gPyBwMmIodikgOiBsaW0odiAqIDI1NSwgMCwgMjU1KTtcbiAgfVxuICByID0gK21bMV07XG4gIGcgPSArbVszXTtcbiAgYiA9ICttWzVdO1xuICByID0gMjU1ICYgKG1bMl0gPyBwMmIocikgOiBsaW0ociwgMCwgMjU1KSk7XG4gIGcgPSAyNTUgJiAobVs0XSA/IHAyYihnKSA6IGxpbShnLCAwLCAyNTUpKTtcbiAgYiA9IDI1NSAmIChtWzZdID8gcDJiKGIpIDogbGltKGIsIDAsIDI1NSkpO1xuICByZXR1cm4ge1xuICAgIHI6IHIsXG4gICAgZzogZyxcbiAgICBiOiBiLFxuICAgIGE6IGFcbiAgfTtcbn1cbmZ1bmN0aW9uIHJnYlN0cmluZyh2KSB7XG4gIHJldHVybiB2ICYmIChcbiAgICB2LmEgPCAyNTVcbiAgICAgID8gYHJnYmEoJHt2LnJ9LCAke3YuZ30sICR7di5ifSwgJHtiMm4odi5hKX0pYFxuICAgICAgOiBgcmdiKCR7di5yfSwgJHt2Lmd9LCAke3YuYn0pYFxuICApO1xufVxuXG5jb25zdCB0byA9IHYgPT4gdiA8PSAwLjAwMzEzMDggPyB2ICogMTIuOTIgOiBNYXRoLnBvdyh2LCAxLjAgLyAyLjQpICogMS4wNTUgLSAwLjA1NTtcbmNvbnN0IGZyb20gPSB2ID0+IHYgPD0gMC4wNDA0NSA/IHYgLyAxMi45MiA6IE1hdGgucG93KCh2ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZShyZ2IxLCByZ2IyLCB0KSB7XG4gIGNvbnN0IHIgPSBmcm9tKGIybihyZ2IxLnIpKTtcbiAgY29uc3QgZyA9IGZyb20oYjJuKHJnYjEuZykpO1xuICBjb25zdCBiID0gZnJvbShiMm4ocmdiMS5iKSk7XG4gIHJldHVybiB7XG4gICAgcjogbjJiKHRvKHIgKyB0ICogKGZyb20oYjJuKHJnYjIucikpIC0gcikpKSxcbiAgICBnOiBuMmIodG8oZyArIHQgKiAoZnJvbShiMm4ocmdiMi5nKSkgLSBnKSkpLFxuICAgIGI6IG4yYih0byhiICsgdCAqIChmcm9tKGIybihyZ2IyLmIpKSAtIGIpKSksXG4gICAgYTogcmdiMS5hICsgdCAqIChyZ2IyLmEgLSByZ2IxLmEpXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vZEhTTCh2LCBpLCByYXRpbykge1xuICBpZiAodikge1xuICAgIGxldCB0bXAgPSByZ2IyaHNsKHYpO1xuICAgIHRtcFtpXSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRtcFtpXSArIHRtcFtpXSAqIHJhdGlvLCBpID09PSAwID8gMzYwIDogMSkpO1xuICAgIHRtcCA9IGhzbDJyZ2IodG1wKTtcbiAgICB2LnIgPSB0bXBbMF07XG4gICAgdi5nID0gdG1wWzFdO1xuICAgIHYuYiA9IHRtcFsyXTtcbiAgfVxufVxuZnVuY3Rpb24gY2xvbmUodiwgcHJvdG8pIHtcbiAgcmV0dXJuIHYgPyBPYmplY3QuYXNzaWduKHByb3RvIHx8IHt9LCB2KSA6IHY7XG59XG5mdW5jdGlvbiBmcm9tT2JqZWN0KGlucHV0KSB7XG4gIHZhciB2ID0ge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDI1NX07XG4gIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgIGlmIChpbnB1dC5sZW5ndGggPj0gMykge1xuICAgICAgdiA9IHtyOiBpbnB1dFswXSwgZzogaW5wdXRbMV0sIGI6IGlucHV0WzJdLCBhOiAyNTV9O1xuICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IDMpIHtcbiAgICAgICAgdi5hID0gbjJiKGlucHV0WzNdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdiA9IGNsb25lKGlucHV0LCB7cjogMCwgZzogMCwgYjogMCwgYTogMX0pO1xuICAgIHYuYSA9IG4yYih2LmEpO1xuICB9XG4gIHJldHVybiB2O1xufVxuZnVuY3Rpb24gZnVuY3Rpb25QYXJzZShzdHIpIHtcbiAgaWYgKHN0ci5jaGFyQXQoMCkgPT09ICdyJykge1xuICAgIHJldHVybiByZ2JQYXJzZShzdHIpO1xuICB9XG4gIHJldHVybiBodWVQYXJzZShzdHIpO1xufVxuY2xhc3MgQ29sb3Ige1xuICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIENvbG9yKSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgaW5wdXQ7XG4gICAgbGV0IHY7XG4gICAgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICB2ID0gZnJvbU9iamVjdChpbnB1dCk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgdiA9IGhleFBhcnNlKGlucHV0KSB8fCBuYW1lUGFyc2UoaW5wdXQpIHx8IGZ1bmN0aW9uUGFyc2UoaW5wdXQpO1xuICAgIH1cbiAgICB0aGlzLl9yZ2IgPSB2O1xuICAgIHRoaXMuX3ZhbGlkID0gISF2O1xuICB9XG4gIGdldCB2YWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQ7XG4gIH1cbiAgZ2V0IHJnYigpIHtcbiAgICB2YXIgdiA9IGNsb25lKHRoaXMuX3JnYik7XG4gICAgaWYgKHYpIHtcbiAgICAgIHYuYSA9IGIybih2LmEpO1xuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfVxuICBzZXQgcmdiKG9iaikge1xuICAgIHRoaXMuX3JnYiA9IGZyb21PYmplY3Qob2JqKTtcbiAgfVxuICByZ2JTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkID8gcmdiU3RyaW5nKHRoaXMuX3JnYikgOiB1bmRlZmluZWQ7XG4gIH1cbiAgaGV4U3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWxpZCA/IGhleFN0cmluZyh0aGlzLl9yZ2IpIDogdW5kZWZpbmVkO1xuICB9XG4gIGhzbFN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQgPyBoc2xTdHJpbmcodGhpcy5fcmdiKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBtaXgoY29sb3IsIHdlaWdodCkge1xuICAgIGlmIChjb2xvcikge1xuICAgICAgY29uc3QgYzEgPSB0aGlzLnJnYjtcbiAgICAgIGNvbnN0IGMyID0gY29sb3IucmdiO1xuICAgICAgbGV0IHcyO1xuICAgICAgY29uc3QgcCA9IHdlaWdodCA9PT0gdzIgPyAwLjUgOiB3ZWlnaHQ7XG4gICAgICBjb25zdCB3ID0gMiAqIHAgLSAxO1xuICAgICAgY29uc3QgYSA9IGMxLmEgLSBjMi5hO1xuICAgICAgY29uc3QgdzEgPSAoKHcgKiBhID09PSAtMSA/IHcgOiAodyArIGEpIC8gKDEgKyB3ICogYSkpICsgMSkgLyAyLjA7XG4gICAgICB3MiA9IDEgLSB3MTtcbiAgICAgIGMxLnIgPSAweEZGICYgdzEgKiBjMS5yICsgdzIgKiBjMi5yICsgMC41O1xuICAgICAgYzEuZyA9IDB4RkYgJiB3MSAqIGMxLmcgKyB3MiAqIGMyLmcgKyAwLjU7XG4gICAgICBjMS5iID0gMHhGRiAmIHcxICogYzEuYiArIHcyICogYzIuYiArIDAuNTtcbiAgICAgIGMxLmEgPSBwICogYzEuYSArICgxIC0gcCkgKiBjMi5hO1xuICAgICAgdGhpcy5yZ2IgPSBjMTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgaW50ZXJwb2xhdGUoY29sb3IsIHQpIHtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIHRoaXMuX3JnYiA9IGludGVycG9sYXRlKHRoaXMuX3JnYiwgY29sb3IuX3JnYiwgdCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgQ29sb3IodGhpcy5yZ2IpO1xuICB9XG4gIGFscGhhKGEpIHtcbiAgICB0aGlzLl9yZ2IuYSA9IG4yYihhKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjbGVhcmVyKHJhdGlvKSB7XG4gICAgY29uc3QgcmdiID0gdGhpcy5fcmdiO1xuICAgIHJnYi5hICo9IDEgLSByYXRpbztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBncmV5c2NhbGUoKSB7XG4gICAgY29uc3QgcmdiID0gdGhpcy5fcmdiO1xuICAgIGNvbnN0IHZhbCA9IHJvdW5kKHJnYi5yICogMC4zICsgcmdiLmcgKiAwLjU5ICsgcmdiLmIgKiAwLjExKTtcbiAgICByZ2IuciA9IHJnYi5nID0gcmdiLmIgPSB2YWw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgb3BhcXVlcihyYXRpbykge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICByZ2IuYSAqPSAxICsgcmF0aW87XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgbmVnYXRlKCkge1xuICAgIGNvbnN0IHYgPSB0aGlzLl9yZ2I7XG4gICAgdi5yID0gMjU1IC0gdi5yO1xuICAgIHYuZyA9IDI1NSAtIHYuZztcbiAgICB2LmIgPSAyNTUgLSB2LmI7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgbGlnaHRlbihyYXRpbykge1xuICAgIG1vZEhTTCh0aGlzLl9yZ2IsIDIsIHJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBkYXJrZW4ocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAyLCAtcmF0aW8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHNhdHVyYXRlKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMSwgcmF0aW8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGRlc2F0dXJhdGUocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAxLCAtcmF0aW8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJvdGF0ZShkZWcpIHtcbiAgICByb3RhdGUodGhpcy5fcmdiLCBkZWcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4X2VzbShpbnB1dCkge1xuICByZXR1cm4gbmV3IENvbG9yKGlucHV0KTtcbn1cblxuZXhwb3J0IHsgQ29sb3IsIGIybiwgYjJwLCBpbmRleF9lc20gYXMgZGVmYXVsdCwgaGV4UGFyc2UsIGhleFN0cmluZywgaHNsMnJnYiwgaHNsU3RyaW5nLCBoc3YycmdiLCBodWVQYXJzZSwgaHdiMnJnYiwgbGltLCBuMmIsIG4ycCwgbmFtZVBhcnNlLCBwMmIsIHJnYjJoc2wsIHJnYlBhcnNlLCByZ2JTdHJpbmcsIHJvdGF0ZSwgcm91bmQgfTtcbiIsIi8qIVxuICogQ2hhcnQuanMgdjQuMy4wXG4gKiBodHRwczovL3d3dy5jaGFydGpzLm9yZ1xuICogKGMpIDIwMjMgQ2hhcnQuanMgQ29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICdAa3Vya2xlL2NvbG9yJztcblxuLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmhlbHBlcnNcbiAqLyAvKipcbiAqIEFuIGVtcHR5IGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQsIGZvciBleGFtcGxlLCBmb3Igb3B0aW9uYWwgY2FsbGJhY2suXG4gKi8gZnVuY3Rpb24gbm9vcCgpIHtcbi8qIG5vb3AgKi8gfVxuLyoqXG4gKiBSZXR1cm5zIGEgdW5pcXVlIGlkLCBzZXF1ZW50aWFsbHkgZ2VuZXJhdGVkIGZyb20gYSBnbG9iYWwgdmFyaWFibGUuXG4gKi8gY29uc3QgdWlkID0gKCgpPT57XG4gICAgbGV0IGlkID0gMDtcbiAgICByZXR1cm4gKCk9PmlkKys7XG59KSgpO1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBuZWl0aGVyIG51bGwgbm9yIHVuZGVmaW5lZCwgZWxzZSByZXR1cm5zIGZhbHNlLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QuXG4gKiBAc2luY2UgMi43LjBcbiAqLyBmdW5jdGlvbiBpc051bGxPclVuZGVmKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IChpbmNsdWRpbmcgdHlwZWQgYXJyYXlzKSwgZWxzZSByZXR1cm5zIGZhbHNlLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QuXG4gKiBAZnVuY3Rpb25cbiAqLyBmdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIGlmICh0eXBlLnNsaWNlKDAsIDcpID09PSAnW29iamVjdCcgJiYgdHlwZS5zbGljZSgtNikgPT09ICdBcnJheV0nKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCAoZXhjbHVkaW5nIG51bGwpLCBlbHNlIHJldHVybnMgZmFsc2UuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gdGVzdC5cbiAqIEBzaW5jZSAyLjcuMFxuICovIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgcmV0dXJucyBmYWxzZVxuICogQHBhcmFtIHZhbHVlICAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICovIGZ1bmN0aW9uIGlzTnVtYmVyRmluaXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyKSAmJiBpc0Zpbml0ZSgrdmFsdWUpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGB2YWx1ZWAgaWYgZmluaXRlLCBlbHNlIHJldHVybnMgYGRlZmF1bHRWYWx1ZWAuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gcmV0dXJuIGlmIGRlZmluZWQuXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBgdmFsdWVgIGlzIG5vdCBmaW5pdGUuXG4gKi8gZnVuY3Rpb24gZmluaXRlT3JEZWZhdWx0KHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gaXNOdW1iZXJGaW5pdGUodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG4vKipcbiAqIFJldHVybnMgYHZhbHVlYCBpZiBkZWZpbmVkLCBlbHNlIHJldHVybnMgYGRlZmF1bHRWYWx1ZWAuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gcmV0dXJuIGlmIGRlZmluZWQuXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBgdmFsdWVgIGlzIHVuZGVmaW5lZC5cbiAqLyBmdW5jdGlvbiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbn1cbmNvbnN0IHRvUGVyY2VudGFnZSA9ICh2YWx1ZSwgZGltZW5zaW9uKT0+dHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnJScpID8gcGFyc2VGbG9hdCh2YWx1ZSkgLyAxMDAgOiArdmFsdWUgLyBkaW1lbnNpb247XG5jb25zdCB0b0RpbWVuc2lvbiA9ICh2YWx1ZSwgZGltZW5zaW9uKT0+dHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnJScpID8gcGFyc2VGbG9hdCh2YWx1ZSkgLyAxMDAgKiBkaW1lbnNpb24gOiArdmFsdWU7XG4vKipcbiAqIENhbGxzIGBmbmAgd2l0aCB0aGUgZ2l2ZW4gYGFyZ3NgIGluIHRoZSBzY29wZSBkZWZpbmVkIGJ5IGB0aGlzQXJnYCBhbmQgcmV0dXJucyB0aGVcbiAqIHZhbHVlIHJldHVybmVkIGJ5IGBmbmAuIElmIGBmbmAgaXMgbm90IGEgZnVuY3Rpb24sIHRoaXMgbWV0aG9kIHJldHVybnMgdW5kZWZpbmVkLlxuICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gKiBAcGFyYW0gYXJncyAtIFRoZSBhcmd1bWVudHMgd2l0aCB3aGljaCBgZm5gIHNob3VsZCBiZSBjYWxsZWQuXG4gKiBAcGFyYW0gW3RoaXNBcmddIC0gVGhlIHZhbHVlIG9mIGB0aGlzYCBwcm92aWRlZCBmb3IgdGhlIGNhbGwgdG8gYGZuYC5cbiAqLyBmdW5jdGlvbiBjYWxsYmFjayhmbiwgYXJncywgdGhpc0FyZykge1xuICAgIGlmIChmbiAmJiB0eXBlb2YgZm4uY2FsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZWFjaChsb29wYWJsZSwgZm4sIHRoaXNBcmcsIHJldmVyc2UpIHtcbiAgICBsZXQgaSwgbGVuLCBrZXlzO1xuICAgIGlmIChpc0FycmF5KGxvb3BhYmxlKSkge1xuICAgICAgICBsZW4gPSBsb29wYWJsZS5sZW5ndGg7XG4gICAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgICAgICBmb3IoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2ldLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbjsgaSsrKXtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2ldLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QobG9vcGFibGUpKSB7XG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhsb29wYWJsZSk7XG4gICAgICAgIGxlbiA9IGtleXMubGVuZ3RoO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2tleXNbaV1dLCBrZXlzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBgYTBgIGFuZCBgYTFgIGFycmF5cyBoYXZlIHRoZSBzYW1lIGNvbnRlbnQsIGVsc2UgcmV0dXJucyBmYWxzZS5cbiAqIEBwYXJhbSBhMCAtIFRoZSBhcnJheSB0byBjb21wYXJlXG4gKiBAcGFyYW0gYTEgLSBUaGUgYXJyYXkgdG8gY29tcGFyZVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfZWxlbWVudHNFcXVhbChhMCwgYTEpIHtcbiAgICBsZXQgaSwgaWxlbiwgdjAsIHYxO1xuICAgIGlmICghYTAgfHwgIWExIHx8IGEwLmxlbmd0aCAhPT0gYTEubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gYTAubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgdjAgPSBhMFtpXTtcbiAgICAgICAgdjEgPSBhMVtpXTtcbiAgICAgICAgaWYgKHYwLmRhdGFzZXRJbmRleCAhPT0gdjEuZGF0YXNldEluZGV4IHx8IHYwLmluZGV4ICE9PSB2MS5pbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgZGVlcCBjb3B5IG9mIGBzb3VyY2VgIHdpdGhvdXQga2VlcGluZyByZWZlcmVuY2VzIG9uIG9iamVjdHMgYW5kIGFycmF5cy5cbiAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKi8gZnVuY3Rpb24gY2xvbmUoc291cmNlKSB7XG4gICAgaWYgKGlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICByZXR1cm4gc291cmNlLm1hcChjbG9uZSk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgICAgICBjb25zdCBrbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIGxldCBrID0gMDtcbiAgICAgICAgZm9yKDsgayA8IGtsZW47ICsrayl7XG4gICAgICAgICAgICB0YXJnZXRba2V5c1trXV0gPSBjbG9uZShzb3VyY2Vba2V5c1trXV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG59XG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xuICAgIHJldHVybiBbXG4gICAgICAgICdfX3Byb3RvX18nLFxuICAgICAgICAncHJvdG90eXBlJyxcbiAgICAgICAgJ2NvbnN0cnVjdG9yJ1xuICAgIF0uaW5kZXhPZihrZXkpID09PSAtMTtcbn1cbi8qKlxuICogVGhlIGRlZmF1bHQgbWVyZ2VyIHdoZW4gQ2hhcnQuaGVscGVycy5tZXJnZSBpcyBjYWxsZWQgd2l0aG91dCBtZXJnZXIgb3B0aW9uLlxuICogTm90ZShTQik6IGFsc28gdXNlZCBieSBtZXJnZUNvbmZpZyBhbmQgbWVyZ2VTY2FsZUNvbmZpZyBhcyBmYWxsYmFjay5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX21lcmdlcihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgaWYgKCFpc1ZhbGlkS2V5KGtleSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gICAgY29uc3Qgc3ZhbCA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChpc09iamVjdCh0dmFsKSAmJiBpc09iamVjdChzdmFsKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICAgIG1lcmdlKHR2YWwsIHN2YWwsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gY2xvbmUoc3ZhbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzb3VyY2VzID0gaXNBcnJheShzb3VyY2UpID8gc291cmNlIDogW1xuICAgICAgICBzb3VyY2VcbiAgICBdO1xuICAgIGNvbnN0IGlsZW4gPSBzb3VyY2VzLmxlbmd0aDtcbiAgICBpZiAoIWlzT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgY29uc3QgbWVyZ2VyID0gb3B0aW9ucy5tZXJnZXIgfHwgX21lcmdlcjtcbiAgICBsZXQgY3VycmVudDtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgY3VycmVudCA9IHNvdXJjZXNbaV07XG4gICAgICAgIGlmICghaXNPYmplY3QoY3VycmVudCkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjdXJyZW50KTtcbiAgICAgICAgZm9yKGxldCBrID0gMCwga2xlbiA9IGtleXMubGVuZ3RoOyBrIDwga2xlbjsgKytrKXtcbiAgICAgICAgICAgIG1lcmdlcihrZXlzW2tdLCB0YXJnZXQsIGN1cnJlbnQsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBtZXJnZUlmKHRhcmdldCwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgIHJldHVybiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwge1xuICAgICAgICBtZXJnZXI6IF9tZXJnZXJJZlxuICAgIH0pO1xufVxuLyoqXG4gKiBNZXJnZXMgc291cmNlW2tleV0gaW4gdGFyZ2V0W2tleV0gb25seSBpZiB0YXJnZXRba2V5XSBpcyB1bmRlZmluZWQuXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9tZXJnZXJJZihrZXksIHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKCFpc1ZhbGlkS2V5KGtleSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gICAgY29uc3Qgc3ZhbCA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChpc09iamVjdCh0dmFsKSAmJiBpc09iamVjdChzdmFsKSkge1xuICAgICAgICBtZXJnZUlmKHR2YWwsIHN2YWwpO1xuICAgIH0gZWxzZSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBjbG9uZShzdmFsKTtcbiAgICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2RlcHJlY2F0ZWQoc2NvcGUsIHZhbHVlLCBwcmV2aW91cywgY3VycmVudCkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihzY29wZSArICc6IFwiJyArIHByZXZpb3VzICsgJ1wiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCInICsgY3VycmVudCArICdcIiBpbnN0ZWFkJyk7XG4gICAgfVxufVxuLy8gcmVzb2x2ZU9iamVjdEtleSByZXNvbHZlciBjYWNoZVxuY29uc3Qga2V5UmVzb2x2ZXJzID0ge1xuICAgIC8vIENoYXJ0LmhlbHBlcnMuY29yZSByZXNvbHZlT2JqZWN0S2V5IHNob3VsZCByZXNvbHZlIGVtcHR5IGtleSB0byByb290IG9iamVjdFxuICAgICcnOiAodik9PnYsXG4gICAgLy8gZGVmYXVsdCByZXNvbHZlcnNcbiAgICB4OiAobyk9Pm8ueCxcbiAgICB5OiAobyk9Pm8ueVxufTtcbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfc3BsaXRLZXkoa2V5KSB7XG4gICAgY29uc3QgcGFydHMgPSBrZXkuc3BsaXQoJy4nKTtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgbGV0IHRtcCA9ICcnO1xuICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cyl7XG4gICAgICAgIHRtcCArPSBwYXJ0O1xuICAgICAgICBpZiAodG1wLmVuZHNXaXRoKCdcXFxcJykpIHtcbiAgICAgICAgICAgIHRtcCA9IHRtcC5zbGljZSgwLCAtMSkgKyAnLic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrZXlzLnB1c2godG1wKTtcbiAgICAgICAgICAgIHRtcCA9ICcnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gX2dldEtleVJlc29sdmVyKGtleSkge1xuICAgIGNvbnN0IGtleXMgPSBfc3BsaXRLZXkoa2V5KTtcbiAgICByZXR1cm4gKG9iaik9PntcbiAgICAgICAgZm9yIChjb25zdCBrIG9mIGtleXMpe1xuICAgICAgICAgICAgaWYgKGsgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmogPSBvYmogJiYgb2JqW2tdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVPYmplY3RLZXkob2JqLCBrZXkpIHtcbiAgICBjb25zdCByZXNvbHZlciA9IGtleVJlc29sdmVyc1trZXldIHx8IChrZXlSZXNvbHZlcnNba2V5XSA9IF9nZXRLZXlSZXNvbHZlcihrZXkpKTtcbiAgICByZXR1cm4gcmVzb2x2ZXIob2JqKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfY2FwaXRhbGl6ZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxuY29uc3QgZGVmaW5lZCA9ICh2YWx1ZSk9PnR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBpc0Z1bmN0aW9uID0gKHZhbHVlKT0+dHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMxMTI4ODU1L2NvbXBhcmluZy1lY21hNi1zZXRzLWZvci1lcXVhbGl0eSMzMTEyOTM4NFxuY29uc3Qgc2V0c0VxdWFsID0gKGEsIGIpPT57XG4gICAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGEpe1xuICAgICAgICBpZiAoIWIuaGFzKGl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG4gKiBAcGFyYW0gZSAtIFRoZSBldmVudFxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaXNDbGlja0V2ZW50KGUpIHtcbiAgICByZXR1cm4gZS50eXBlID09PSAnbW91c2V1cCcgfHwgZS50eXBlID09PSAnY2xpY2snIHx8IGUudHlwZSA9PT0gJ2NvbnRleHRtZW51Jztcbn1cblxuLyoqXG4gKiBAYWxpYXMgQ2hhcnQuaGVscGVycy5tYXRoXG4gKiBAbmFtZXNwYWNlXG4gKi8gY29uc3QgUEkgPSBNYXRoLlBJO1xuY29uc3QgVEFVID0gMiAqIFBJO1xuY29uc3QgUElUQVUgPSBUQVUgKyBQSTtcbmNvbnN0IElORklOSVRZID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuY29uc3QgUkFEX1BFUl9ERUcgPSBQSSAvIDE4MDtcbmNvbnN0IEhBTEZfUEkgPSBQSSAvIDI7XG5jb25zdCBRVUFSVEVSX1BJID0gUEkgLyA0O1xuY29uc3QgVFdPX1RISVJEU19QSSA9IFBJICogMiAvIDM7XG5jb25zdCBsb2cxMCA9IE1hdGgubG9nMTA7XG5jb25zdCBzaWduID0gTWF0aC5zaWduO1xuZnVuY3Rpb24gYWxtb3N0RXF1YWxzKHgsIHksIGVwc2lsb24pIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCAtIHkpIDwgZXBzaWxvbjtcbn1cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIG5pY2UgbnVtYmVyIGFsZ29yaXRobSB1c2VkIGluIGRldGVybWluaW5nIHdoZXJlIGF4aXMgbGFiZWxzIHdpbGwgZ29cbiAqLyBmdW5jdGlvbiBuaWNlTnVtKHJhbmdlKSB7XG4gICAgY29uc3Qgcm91bmRlZFJhbmdlID0gTWF0aC5yb3VuZChyYW5nZSk7XG4gICAgcmFuZ2UgPSBhbG1vc3RFcXVhbHMocmFuZ2UsIHJvdW5kZWRSYW5nZSwgcmFuZ2UgLyAxMDAwKSA/IHJvdW5kZWRSYW5nZSA6IHJhbmdlO1xuICAgIGNvbnN0IG5pY2VSYW5nZSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGxvZzEwKHJhbmdlKSkpO1xuICAgIGNvbnN0IGZyYWN0aW9uID0gcmFuZ2UgLyBuaWNlUmFuZ2U7XG4gICAgY29uc3QgbmljZUZyYWN0aW9uID0gZnJhY3Rpb24gPD0gMSA/IDEgOiBmcmFjdGlvbiA8PSAyID8gMiA6IGZyYWN0aW9uIDw9IDUgPyA1IDogMTA7XG4gICAgcmV0dXJuIG5pY2VGcmFjdGlvbiAqIG5pY2VSYW5nZTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBmYWN0b3JzIHNvcnRlZCBmcm9tIDEgdG8gc3FydCh2YWx1ZSlcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2ZhY3Rvcml6ZSh2YWx1ZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IHNxcnQgPSBNYXRoLnNxcnQodmFsdWUpO1xuICAgIGxldCBpO1xuICAgIGZvcihpID0gMTsgaSA8IHNxcnQ7IGkrKyl7XG4gICAgICAgIGlmICh2YWx1ZSAlIGkgPT09IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUgLyBpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3FydCA9PT0gKHNxcnQgfCAwKSkge1xuICAgICAgICByZXN1bHQucHVzaChzcXJ0KTtcbiAgICB9XG4gICAgcmVzdWx0LnNvcnQoKGEsIGIpPT5hIC0gYikucG9wKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGlzTnVtYmVyKG4pIHtcbiAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuZnVuY3Rpb24gYWxtb3N0V2hvbGUoeCwgZXBzaWxvbikge1xuICAgIGNvbnN0IHJvdW5kZWQgPSBNYXRoLnJvdW5kKHgpO1xuICAgIHJldHVybiByb3VuZGVkIC0gZXBzaWxvbiA8PSB4ICYmIHJvdW5kZWQgKyBlcHNpbG9uID49IHg7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3NldE1pbkFuZE1heEJ5S2V5KGFycmF5LCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgIHZhbHVlID0gYXJyYXlbaV1bcHJvcGVydHldO1xuICAgICAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgdGFyZ2V0Lm1pbiA9IE1hdGgubWluKHRhcmdldC5taW4sIHZhbHVlKTtcbiAgICAgICAgICAgIHRhcmdldC5tYXggPSBNYXRoLm1heCh0YXJnZXQubWF4LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0b1JhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogKFBJIC8gMTgwKTtcbn1cbmZ1bmN0aW9uIHRvRGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiAoMTgwIC8gUEkpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXNcbiAqIGkuZS4gdGhlIG51bWJlciBvZiBkaWdpdHMgYWZ0ZXIgdGhlIGRlY2ltYWwgcG9pbnQsIG9mIHRoZSB2YWx1ZSBvZiB0aGlzIE51bWJlci5cbiAqIEBwYXJhbSB4IC0gQSBudW1iZXIuXG4gKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfZGVjaW1hbFBsYWNlcyh4KSB7XG4gICAgaWYgKCFpc051bWJlckZpbml0ZSh4KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBlID0gMTtcbiAgICBsZXQgcCA9IDA7XG4gICAgd2hpbGUoTWF0aC5yb3VuZCh4ICogZSkgLyBlICE9PSB4KXtcbiAgICAgICAgZSAqPSAxMDtcbiAgICAgICAgcCsrO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbn1cbi8vIEdldHMgdGhlIGFuZ2xlIGZyb20gdmVydGljYWwgdXByaWdodCB0byB0aGUgcG9pbnQgYWJvdXQgYSBjZW50cmUuXG5mdW5jdGlvbiBnZXRBbmdsZUZyb21Qb2ludChjZW50cmVQb2ludCwgYW5nbGVQb2ludCkge1xuICAgIGNvbnN0IGRpc3RhbmNlRnJvbVhDZW50ZXIgPSBhbmdsZVBvaW50LnggLSBjZW50cmVQb2ludC54O1xuICAgIGNvbnN0IGRpc3RhbmNlRnJvbVlDZW50ZXIgPSBhbmdsZVBvaW50LnkgLSBjZW50cmVQb2ludC55O1xuICAgIGNvbnN0IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciA9IE1hdGguc3FydChkaXN0YW5jZUZyb21YQ2VudGVyICogZGlzdGFuY2VGcm9tWENlbnRlciArIGRpc3RhbmNlRnJvbVlDZW50ZXIgKiBkaXN0YW5jZUZyb21ZQ2VudGVyKTtcbiAgICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKGRpc3RhbmNlRnJvbVlDZW50ZXIsIGRpc3RhbmNlRnJvbVhDZW50ZXIpO1xuICAgIGlmIChhbmdsZSA8IC0wLjUgKiBQSSkge1xuICAgICAgICBhbmdsZSArPSBUQVU7IC8vIG1ha2Ugc3VyZSB0aGUgcmV0dXJuZWQgYW5nbGUgaXMgaW4gdGhlIHJhbmdlIG9mICgtUEkvMiwgM1BJLzJdXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGFuZ2xlLFxuICAgICAgICBkaXN0YW5jZTogcmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRpc3RhbmNlQmV0d2VlblBvaW50cyhwdDEsIHB0Mikge1xuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocHQyLnggLSBwdDEueCwgMikgKyBNYXRoLnBvdyhwdDIueSAtIHB0MS55LCAyKSk7XG59XG4vKipcbiAqIFNob3J0ZXN0IGRpc3RhbmNlIGJldHdlZW4gYW5nbGVzLCBpbiBlaXRoZXIgZGlyZWN0aW9uLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYW5nbGVEaWZmKGEsIGIpIHtcbiAgICByZXR1cm4gKGEgLSBiICsgUElUQVUpICUgVEFVIC0gUEk7XG59XG4vKipcbiAqIE5vcm1hbGl6ZSBhbmdsZSB0byBiZSBiZXR3ZWVuIDAgYW5kIDIqUElcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX25vcm1hbGl6ZUFuZ2xlKGEpIHtcbiAgICByZXR1cm4gKGEgJSBUQVUgKyBUQVUpICUgVEFVO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0LCBlbmQsIHNhbWVBbmdsZUlzRnVsbENpcmNsZSkge1xuICAgIGNvbnN0IGEgPSBfbm9ybWFsaXplQW5nbGUoYW5nbGUpO1xuICAgIGNvbnN0IHMgPSBfbm9ybWFsaXplQW5nbGUoc3RhcnQpO1xuICAgIGNvbnN0IGUgPSBfbm9ybWFsaXplQW5nbGUoZW5kKTtcbiAgICBjb25zdCBhbmdsZVRvU3RhcnQgPSBfbm9ybWFsaXplQW5nbGUocyAtIGEpO1xuICAgIGNvbnN0IGFuZ2xlVG9FbmQgPSBfbm9ybWFsaXplQW5nbGUoZSAtIGEpO1xuICAgIGNvbnN0IHN0YXJ0VG9BbmdsZSA9IF9ub3JtYWxpemVBbmdsZShhIC0gcyk7XG4gICAgY29uc3QgZW5kVG9BbmdsZSA9IF9ub3JtYWxpemVBbmdsZShhIC0gZSk7XG4gICAgcmV0dXJuIGEgPT09IHMgfHwgYSA9PT0gZSB8fCBzYW1lQW5nbGVJc0Z1bGxDaXJjbGUgJiYgcyA9PT0gZSB8fCBhbmdsZVRvU3RhcnQgPiBhbmdsZVRvRW5kICYmIHN0YXJ0VG9BbmdsZSA8IGVuZFRvQW5nbGU7XG59XG4vKipcbiAqIExpbWl0IGB2YWx1ZWAgYmV0d2VlbiBgbWluYCBhbmQgYG1heGBcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIG1pblxuICogQHBhcmFtIG1heFxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHZhbHVlKSk7XG59XG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaW50MTZSYW5nZSh2YWx1ZSkge1xuICAgIHJldHVybiBfbGltaXRWYWx1ZSh2YWx1ZSwgLTMyNzY4LCAzMjc2Nyk7XG59XG4vKipcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIHN0YXJ0XG4gKiBAcGFyYW0gZW5kXG4gKiBAcGFyYW0gW2Vwc2lsb25dXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9pc0JldHdlZW4odmFsdWUsIHN0YXJ0LCBlbmQsIGVwc2lsb24gPSAxZS02KSB7XG4gICAgcmV0dXJuIHZhbHVlID49IE1hdGgubWluKHN0YXJ0LCBlbmQpIC0gZXBzaWxvbiAmJiB2YWx1ZSA8PSBNYXRoLm1heChzdGFydCwgZW5kKSArIGVwc2lsb247XG59XG5cbmZ1bmN0aW9uIF9sb29rdXAodGFibGUsIHZhbHVlLCBjbXApIHtcbiAgICBjbXAgPSBjbXAgfHwgKChpbmRleCk9PnRhYmxlW2luZGV4XSA8IHZhbHVlKTtcbiAgICBsZXQgaGkgPSB0YWJsZS5sZW5ndGggLSAxO1xuICAgIGxldCBsbyA9IDA7XG4gICAgbGV0IG1pZDtcbiAgICB3aGlsZShoaSAtIGxvID4gMSl7XG4gICAgICAgIG1pZCA9IGxvICsgaGkgPj4gMTtcbiAgICAgICAgaWYgKGNtcChtaWQpKSB7XG4gICAgICAgICAgICBsbyA9IG1pZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpID0gbWlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGxvLFxuICAgICAgICBoaVxuICAgIH07XG59XG4vKipcbiAqIEJpbmFyeSBzZWFyY2hcbiAqIEBwYXJhbSB0YWJsZSAtIHRoZSB0YWJsZSBzZWFyY2guIG11c3QgYmUgc29ydGVkIVxuICogQHBhcmFtIGtleSAtIHByb3BlcnR5IG5hbWUgZm9yIHRoZSB2YWx1ZSBpbiBlYWNoIGVudHJ5XG4gKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZSB0byBmaW5kXG4gKiBAcGFyYW0gbGFzdCAtIGxvb2t1cCBsYXN0IGluZGV4XG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF9sb29rdXBCeUtleSA9ICh0YWJsZSwga2V5LCB2YWx1ZSwgbGFzdCk9Pl9sb29rdXAodGFibGUsIHZhbHVlLCBsYXN0ID8gKGluZGV4KT0+e1xuICAgICAgICBjb25zdCB0aSA9IHRhYmxlW2luZGV4XVtrZXldO1xuICAgICAgICByZXR1cm4gdGkgPCB2YWx1ZSB8fCB0aSA9PT0gdmFsdWUgJiYgdGFibGVbaW5kZXggKyAxXVtrZXldID09PSB2YWx1ZTtcbiAgICB9IDogKGluZGV4KT0+dGFibGVbaW5kZXhdW2tleV0gPCB2YWx1ZSk7XG4vKipcbiAqIFJldmVyc2UgYmluYXJ5IHNlYXJjaFxuICogQHBhcmFtIHRhYmxlIC0gdGhlIHRhYmxlIHNlYXJjaC4gbXVzdCBiZSBzb3J0ZWQhXG4gKiBAcGFyYW0ga2V5IC0gcHJvcGVydHkgbmFtZSBmb3IgdGhlIHZhbHVlIGluIGVhY2ggZW50cnlcbiAqIEBwYXJhbSB2YWx1ZSAtIHZhbHVlIHRvIGZpbmRcbiAqIEBwcml2YXRlXG4gKi8gY29uc3QgX3Jsb29rdXBCeUtleSA9ICh0YWJsZSwga2V5LCB2YWx1ZSk9Pl9sb29rdXAodGFibGUsIHZhbHVlLCAoaW5kZXgpPT50YWJsZVtpbmRleF1ba2V5XSA+PSB2YWx1ZSk7XG4vKipcbiAqIFJldHVybiBzdWJzZXQgb2YgYHZhbHVlc2AgYmV0d2VlbiBgbWluYCBhbmQgYG1heGAgaW5jbHVzaXZlLlxuICogVmFsdWVzIGFyZSBhc3N1bWVkIHRvIGJlIGluIHNvcnRlZCBvcmRlci5cbiAqIEBwYXJhbSB2YWx1ZXMgLSBzb3J0ZWQgYXJyYXkgb2YgdmFsdWVzXG4gKiBAcGFyYW0gbWluIC0gbWluIHZhbHVlXG4gKiBAcGFyYW0gbWF4IC0gbWF4IHZhbHVlXG4gKi8gZnVuY3Rpb24gX2ZpbHRlckJldHdlZW4odmFsdWVzLCBtaW4sIG1heCkge1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGVuZCA9IHZhbHVlcy5sZW5ndGg7XG4gICAgd2hpbGUoc3RhcnQgPCBlbmQgJiYgdmFsdWVzW3N0YXJ0XSA8IG1pbil7XG4gICAgICAgIHN0YXJ0Kys7XG4gICAgfVxuICAgIHdoaWxlKGVuZCA+IHN0YXJ0ICYmIHZhbHVlc1tlbmQgLSAxXSA+IG1heCl7XG4gICAgICAgIGVuZC0tO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnQgPiAwIHx8IGVuZCA8IHZhbHVlcy5sZW5ndGggPyB2YWx1ZXMuc2xpY2Uoc3RhcnQsIGVuZCkgOiB2YWx1ZXM7XG59XG5jb25zdCBhcnJheUV2ZW50cyA9IFtcbiAgICAncHVzaCcsXG4gICAgJ3BvcCcsXG4gICAgJ3NoaWZ0JyxcbiAgICAnc3BsaWNlJyxcbiAgICAndW5zaGlmdCdcbl07XG5mdW5jdGlvbiBsaXN0ZW5BcnJheUV2ZW50cyhhcnJheSwgbGlzdGVuZXIpIHtcbiAgICBpZiAoYXJyYXkuX2NoYXJ0anMpIHtcbiAgICAgICAgYXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwgJ19jaGFydGpzJywge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgbGlzdGVuZXJzOiBbXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGFycmF5RXZlbnRzLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ19vbkRhdGEnICsgX2NhcGl0YWxpemUoa2V5KTtcbiAgICAgICAgY29uc3QgYmFzZSA9IGFycmF5W2tleV07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwga2V5LCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlICguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYmFzZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICBhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMuZm9yRWFjaCgob2JqZWN0KT0+e1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9iamVjdFttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RbbWV0aG9kXSguLi5hcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdW5saXN0ZW5BcnJheUV2ZW50cyhhcnJheSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBzdHViID0gYXJyYXkuX2NoYXJ0anM7XG4gICAgaWYgKCFzdHViKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbGlzdGVuZXJzID0gc3R1Yi5saXN0ZW5lcnM7XG4gICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgaWYgKGxpc3RlbmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXJyYXlFdmVudHMuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICBkZWxldGUgYXJyYXlba2V5XTtcbiAgICB9KTtcbiAgICBkZWxldGUgYXJyYXkuX2NoYXJ0anM7XG59XG4vKipcbiAqIEBwYXJhbSBpdGVtc1xuICovIGZ1bmN0aW9uIF9hcnJheVVuaXF1ZShpdGVtcykge1xuICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoaXRlbXMpO1xuICAgIGlmIChzZXQuc2l6ZSA9PT0gaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmZyb20oc2V0KTtcbn1cblxuZnVuY3Rpb24gZm9udFN0cmluZyhwaXhlbFNpemUsIGZvbnRTdHlsZSwgZm9udEZhbWlseSkge1xuICAgIHJldHVybiBmb250U3R5bGUgKyAnICcgKyBwaXhlbFNpemUgKyAncHggJyArIGZvbnRGYW1pbHk7XG59XG4vKipcbiogUmVxdWVzdCBhbmltYXRpb24gcG9seWZpbGxcbiovIGNvbnN0IHJlcXVlc3RBbmltRnJhbWUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG59KCk7XG4vKipcbiAqIFRocm90dGxlcyBjYWxsaW5nIGBmbmAgb25jZSBwZXIgYW5pbWF0aW9uIGZyYW1lXG4gKiBMYXRlc3QgYXJndW1lbnRzIGFyZSB1c2VkIG9uIHRoZSBhY3R1YWwgY2FsbFxuICovIGZ1bmN0aW9uIHRocm90dGxlZChmbiwgdGhpc0FyZykge1xuICAgIGxldCBhcmdzVG9Vc2UgPSBbXTtcbiAgICBsZXQgdGlja2luZyA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgIC8vIFNhdmUgdGhlIGFyZ3MgZm9yIHVzZSBsYXRlclxuICAgICAgICBhcmdzVG9Vc2UgPSBhcmdzO1xuICAgICAgICBpZiAoIXRpY2tpbmcpIHtcbiAgICAgICAgICAgIHRpY2tpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgKCk9PntcbiAgICAgICAgICAgICAgICB0aWNraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZm4uYXBwbHkodGhpc0FyZywgYXJnc1RvVXNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogRGVib3VuY2VzIGNhbGxpbmcgYGZuYCBmb3IgYGRlbGF5YCBtc1xuICovIGZ1bmN0aW9uIGRlYm91bmNlKGZuLCBkZWxheSkge1xuICAgIGxldCB0aW1lb3V0O1xuICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgIGlmIChkZWxheSkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZm4sIGRlbGF5LCBhcmdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWxheTtcbiAgICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyAnc3RhcnQnIHRvICdsZWZ0JywgJ2VuZCcgdG8gJ3JpZ2h0JyBhbmQgb3RoZXJzIHRvICdjZW50ZXInXG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF90b0xlZnRSaWdodENlbnRlciA9IChhbGlnbik9PmFsaWduID09PSAnc3RhcnQnID8gJ2xlZnQnIDogYWxpZ24gPT09ICdlbmQnID8gJ3JpZ2h0JyA6ICdjZW50ZXInO1xuLyoqXG4gKiBSZXR1cm5zIGBzdGFydGAsIGBlbmRgIG9yIGAoc3RhcnQgKyBlbmQpIC8gMmAgZGVwZW5kaW5nIG9uIGBhbGlnbmAuIERlZmF1bHRzIHRvIGBjZW50ZXJgXG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF9hbGlnblN0YXJ0RW5kID0gKGFsaWduLCBzdGFydCwgZW5kKT0+YWxpZ24gPT09ICdzdGFydCcgPyBzdGFydCA6IGFsaWduID09PSAnZW5kJyA/IGVuZCA6IChzdGFydCArIGVuZCkgLyAyO1xuLyoqXG4gKiBSZXR1cm5zIGBsZWZ0YCwgYHJpZ2h0YCBvciBgKGxlZnQgKyByaWdodCkgLyAyYCBkZXBlbmRpbmcgb24gYGFsaWduYC4gRGVmYXVsdHMgdG8gYGxlZnRgXG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF90ZXh0WCA9IChhbGlnbiwgbGVmdCwgcmlnaHQsIHJ0bCk9PntcbiAgICBjb25zdCBjaGVjayA9IHJ0bCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgcmV0dXJuIGFsaWduID09PSBjaGVjayA/IHJpZ2h0IDogYWxpZ24gPT09ICdjZW50ZXInID8gKGxlZnQgKyByaWdodCkgLyAyIDogbGVmdDtcbn07XG4vKipcbiAqIFJldHVybiBzdGFydCBhbmQgY291bnQgb2YgdmlzaWJsZSBwb2ludHMuXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKSB7XG4gICAgY29uc3QgcG9pbnRDb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgY291bnQgPSBwb2ludENvdW50O1xuICAgIGlmIChtZXRhLl9zb3J0ZWQpIHtcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCBfcGFyc2VkICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgYXhpcyA9IGlTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCB7IG1pbiAsIG1heCAsIG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gaVNjYWxlLmdldFVzZXJCb3VuZHMoKTtcbiAgICAgICAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoTWF0aC5taW4oLy8gQHRzLWV4cGVjdC1lcnJvciBOZWVkIHRvIHR5cGUgX3BhcnNlZFxuICAgICAgICAgICAgX2xvb2t1cEJ5S2V5KF9wYXJzZWQsIGlTY2FsZS5heGlzLCBtaW4pLmxvLCAvLyBAdHMtZXhwZWN0LWVycm9yIE5lZWQgdG8gZml4IHR5cGVzIG9uIF9sb29rdXBCeUtleVxuICAgICAgICAgICAgYW5pbWF0aW9uc0Rpc2FibGVkID8gcG9pbnRDb3VudCA6IF9sb29rdXBCeUtleShwb2ludHMsIGF4aXMsIGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKG1pbikpLmxvKSwgMCwgcG9pbnRDb3VudCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhEZWZpbmVkKSB7XG4gICAgICAgICAgICBjb3VudCA9IF9saW1pdFZhbHVlKE1hdGgubWF4KC8vIEB0cy1leHBlY3QtZXJyb3IgTmVlZCB0byB0eXBlIF9wYXJzZWRcbiAgICAgICAgICAgIF9sb29rdXBCeUtleShfcGFyc2VkLCBpU2NhbGUuYXhpcywgbWF4LCB0cnVlKS5oaSArIDEsIC8vIEB0cy1leHBlY3QtZXJyb3IgTmVlZCB0byBmaXggdHlwZXMgb24gX2xvb2t1cEJ5S2V5XG4gICAgICAgICAgICBhbmltYXRpb25zRGlzYWJsZWQgPyAwIDogX2xvb2t1cEJ5S2V5KHBvaW50cywgYXhpcywgaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUobWF4KSwgdHJ1ZSkuaGkgKyAxKSwgc3RhcnQsIHBvaW50Q291bnQpIC0gc3RhcnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb3VudCA9IHBvaW50Q291bnQgLSBzdGFydDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICAgICAgY291bnRcbiAgICB9O1xufVxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHNjYWxlIHJhbmdlcyBoYXZlIGNoYW5nZWQuXG4gKiBAcGFyYW0ge29iamVjdH0gbWV0YSAtIGRhdGFzZXQgbWV0YS5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpIHtcbiAgICBjb25zdCB7IHhTY2FsZSAsIHlTY2FsZSAsIF9zY2FsZVJhbmdlcyAgfSA9IG1ldGE7XG4gICAgY29uc3QgbmV3UmFuZ2VzID0ge1xuICAgICAgICB4bWluOiB4U2NhbGUubWluLFxuICAgICAgICB4bWF4OiB4U2NhbGUubWF4LFxuICAgICAgICB5bWluOiB5U2NhbGUubWluLFxuICAgICAgICB5bWF4OiB5U2NhbGUubWF4XG4gICAgfTtcbiAgICBpZiAoIV9zY2FsZVJhbmdlcykge1xuICAgICAgICBtZXRhLl9zY2FsZVJhbmdlcyA9IG5ld1JhbmdlcztcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZWQgPSBfc2NhbGVSYW5nZXMueG1pbiAhPT0geFNjYWxlLm1pbiB8fCBfc2NhbGVSYW5nZXMueG1heCAhPT0geFNjYWxlLm1heCB8fCBfc2NhbGVSYW5nZXMueW1pbiAhPT0geVNjYWxlLm1pbiB8fCBfc2NhbGVSYW5nZXMueW1heCAhPT0geVNjYWxlLm1heDtcbiAgICBPYmplY3QuYXNzaWduKF9zY2FsZVJhbmdlcywgbmV3UmFuZ2VzKTtcbiAgICByZXR1cm4gY2hhbmdlZDtcbn1cblxuY29uc3QgYXRFZGdlID0gKHQpPT50ID09PSAwIHx8IHQgPT09IDE7XG5jb25zdCBlbGFzdGljSW4gPSAodCwgcywgcCk9Pi0oTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAtIHMpICogVEFVIC8gcCkpO1xuY29uc3QgZWxhc3RpY091dCA9ICh0LCBzLCBwKT0+TWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigodCAtIHMpICogVEFVIC8gcCkgKyAxO1xuLyoqXG4gKiBFYXNpbmcgZnVuY3Rpb25zIGFkYXB0ZWQgZnJvbSBSb2JlcnQgUGVubmVyJ3MgZWFzaW5nIGVxdWF0aW9ucy5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5lYXNpbmcuZWZmZWN0c1xuICogQHNlZSBodHRwOi8vd3d3LnJvYmVydHBlbm5lci5jb20vZWFzaW5nL1xuICovIGNvbnN0IGVmZmVjdHMgPSB7XG4gICAgbGluZWFyOiAodCk9PnQsXG4gICAgZWFzZUluUXVhZDogKHQpPT50ICogdCxcbiAgICBlYXNlT3V0UXVhZDogKHQpPT4tdCAqICh0IC0gMiksXG4gICAgZWFzZUluT3V0UXVhZDogKHQpPT4odCAvPSAwLjUpIDwgMSA/IDAuNSAqIHQgKiB0IDogLTAuNSAqICgtLXQgKiAodCAtIDIpIC0gMSksXG4gICAgZWFzZUluQ3ViaWM6ICh0KT0+dCAqIHQgKiB0LFxuICAgIGVhc2VPdXRDdWJpYzogKHQpPT4odCAtPSAxKSAqIHQgKiB0ICsgMSxcbiAgICBlYXNlSW5PdXRDdWJpYzogKHQpPT4odCAvPSAwLjUpIDwgMSA/IDAuNSAqIHQgKiB0ICogdCA6IDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICsgMiksXG4gICAgZWFzZUluUXVhcnQ6ICh0KT0+dCAqIHQgKiB0ICogdCxcbiAgICBlYXNlT3V0UXVhcnQ6ICh0KT0+LSgodCAtPSAxKSAqIHQgKiB0ICogdCAtIDEpLFxuICAgIGVhc2VJbk91dFF1YXJ0OiAodCk9Pih0IC89IDAuNSkgPCAxID8gMC41ICogdCAqIHQgKiB0ICogdCA6IC0wLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgLSAyKSxcbiAgICBlYXNlSW5RdWludDogKHQpPT50ICogdCAqIHQgKiB0ICogdCxcbiAgICBlYXNlT3V0UXVpbnQ6ICh0KT0+KHQgLT0gMSkgKiB0ICogdCAqIHQgKiB0ICsgMSxcbiAgICBlYXNlSW5PdXRRdWludDogKHQpPT4odCAvPSAwLjUpIDwgMSA/IDAuNSAqIHQgKiB0ICogdCAqIHQgKiB0IDogMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpLFxuICAgIGVhc2VJblNpbmU6ICh0KT0+LU1hdGguY29zKHQgKiBIQUxGX1BJKSArIDEsXG4gICAgZWFzZU91dFNpbmU6ICh0KT0+TWF0aC5zaW4odCAqIEhBTEZfUEkpLFxuICAgIGVhc2VJbk91dFNpbmU6ICh0KT0+LTAuNSAqIChNYXRoLmNvcyhQSSAqIHQpIC0gMSksXG4gICAgZWFzZUluRXhwbzogKHQpPT50ID09PSAwID8gMCA6IE1hdGgucG93KDIsIDEwICogKHQgLSAxKSksXG4gICAgZWFzZU91dEV4cG86ICh0KT0+dCA9PT0gMSA/IDEgOiAtTWF0aC5wb3coMiwgLTEwICogdCkgKyAxLFxuICAgIGVhc2VJbk91dEV4cG86ICh0KT0+YXRFZGdlKHQpID8gdCA6IHQgPCAwLjUgPyAwLjUgKiBNYXRoLnBvdygyLCAxMCAqICh0ICogMiAtIDEpKSA6IDAuNSAqICgtTWF0aC5wb3coMiwgLTEwICogKHQgKiAyIC0gMSkpICsgMiksXG4gICAgZWFzZUluQ2lyYzogKHQpPT50ID49IDEgPyB0IDogLShNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpLFxuICAgIGVhc2VPdXRDaXJjOiAodCk9Pk1hdGguc3FydCgxIC0gKHQgLT0gMSkgKiB0KSxcbiAgICBlYXNlSW5PdXRDaXJjOiAodCk9Pih0IC89IDAuNSkgPCAxID8gLTAuNSAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpIDogMC41ICogKE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpLFxuICAgIGVhc2VJbkVsYXN0aWM6ICh0KT0+YXRFZGdlKHQpID8gdCA6IGVsYXN0aWNJbih0LCAwLjA3NSwgMC4zKSxcbiAgICBlYXNlT3V0RWxhc3RpYzogKHQpPT5hdEVkZ2UodCkgPyB0IDogZWxhc3RpY091dCh0LCAwLjA3NSwgMC4zKSxcbiAgICBlYXNlSW5PdXRFbGFzdGljICh0KSB7XG4gICAgICAgIGNvbnN0IHMgPSAwLjExMjU7XG4gICAgICAgIGNvbnN0IHAgPSAwLjQ1O1xuICAgICAgICByZXR1cm4gYXRFZGdlKHQpID8gdCA6IHQgPCAwLjUgPyAwLjUgKiBlbGFzdGljSW4odCAqIDIsIHMsIHApIDogMC41ICsgMC41ICogZWxhc3RpY091dCh0ICogMiAtIDEsIHMsIHApO1xuICAgIH0sXG4gICAgZWFzZUluQmFjayAodCkge1xuICAgICAgICBjb25zdCBzID0gMS43MDE1ODtcbiAgICAgICAgcmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG4gICAgfSxcbiAgICBlYXNlT3V0QmFjayAodCkge1xuICAgICAgICBjb25zdCBzID0gMS43MDE1ODtcbiAgICAgICAgcmV0dXJuICh0IC09IDEpICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbiAgICB9LFxuICAgIGVhc2VJbk91dEJhY2sgKHQpIHtcbiAgICAgICAgbGV0IHMgPSAxLjcwMTU4O1xuICAgICAgICBpZiAoKHQgLz0gMC41KSA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiAwLjUgKiAodCAqIHQgKiAoKChzICo9IDEuNTI1KSArIDEpICogdCAtIHMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqICgoKHMgKj0gMS41MjUpICsgMSkgKiB0ICsgcykgKyAyKTtcbiAgICB9LFxuICAgIGVhc2VJbkJvdW5jZTogKHQpPT4xIC0gZWZmZWN0cy5lYXNlT3V0Qm91bmNlKDEgLSB0KSxcbiAgICBlYXNlT3V0Qm91bmNlICh0KSB7XG4gICAgICAgIGNvbnN0IG0gPSA3LjU2MjU7XG4gICAgICAgIGNvbnN0IGQgPSAyLjc1O1xuICAgICAgICBpZiAodCA8IDEgLyBkKSB7XG4gICAgICAgICAgICByZXR1cm4gbSAqIHQgKiB0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0IDwgMiAvIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBtICogKHQgLT0gMS41IC8gZCkgKiB0ICsgMC43NTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA8IDIuNSAvIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBtICogKHQgLT0gMi4yNSAvIGQpICogdCArIDAuOTM3NTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbSAqICh0IC09IDIuNjI1IC8gZCkgKiB0ICsgMC45ODQzNzU7XG4gICAgfSxcbiAgICBlYXNlSW5PdXRCb3VuY2U6ICh0KT0+dCA8IDAuNSA/IGVmZmVjdHMuZWFzZUluQm91bmNlKHQgKiAyKSAqIDAuNSA6IGVmZmVjdHMuZWFzZU91dEJvdW5jZSh0ICogMiAtIDEpICogMC41ICsgMC41XG59O1xuXG5mdW5jdGlvbiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiB0eXBlID09PSAnW29iamVjdCBDYW52YXNQYXR0ZXJuXScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgQ2FudmFzR3JhZGllbnRdJztcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY29sb3IodmFsdWUpIHtcbiAgICByZXR1cm4gaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSkgPyB2YWx1ZSA6IG5ldyBDb2xvcih2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRIb3ZlckNvbG9yKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpID8gdmFsdWUgOiBuZXcgQ29sb3IodmFsdWUpLnNhdHVyYXRlKDAuNSkuZGFya2VuKDAuMSkuaGV4U3RyaW5nKCk7XG59XG5cbmNvbnN0IG51bWJlcnMgPSBbXG4gICAgJ3gnLFxuICAgICd5JyxcbiAgICAnYm9yZGVyV2lkdGgnLFxuICAgICdyYWRpdXMnLFxuICAgICd0ZW5zaW9uJ1xuXTtcbmNvbnN0IGNvbG9ycyA9IFtcbiAgICAnY29sb3InLFxuICAgICdib3JkZXJDb2xvcicsXG4gICAgJ2JhY2tncm91bmRDb2xvcidcbl07XG5mdW5jdGlvbiBhcHBseUFuaW1hdGlvbnNEZWZhdWx0cyhkZWZhdWx0cykge1xuICAgIGRlZmF1bHRzLnNldCgnYW5pbWF0aW9uJywge1xuICAgICAgICBkZWxheTogdW5kZWZpbmVkLFxuICAgICAgICBkdXJhdGlvbjogMTAwMCxcbiAgICAgICAgZWFzaW5nOiAnZWFzZU91dFF1YXJ0JyxcbiAgICAgICAgZm46IHVuZGVmaW5lZCxcbiAgICAgICAgZnJvbTogdW5kZWZpbmVkLFxuICAgICAgICBsb29wOiB1bmRlZmluZWQsXG4gICAgICAgIHRvOiB1bmRlZmluZWQsXG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKCdhbmltYXRpb24nLCB7XG4gICAgICAgIF9mYWxsYmFjazogZmFsc2UsXG4gICAgICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICAgICAgICBfc2NyaXB0YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnb25Qcm9ncmVzcycgJiYgbmFtZSAhPT0gJ29uQ29tcGxldGUnICYmIG5hbWUgIT09ICdmbidcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5zZXQoJ2FuaW1hdGlvbnMnLCB7XG4gICAgICAgIGNvbG9yczoge1xuICAgICAgICAgICAgdHlwZTogJ2NvbG9yJyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IGNvbG9yc1xuICAgICAgICB9LFxuICAgICAgICBudW1iZXJzOiB7XG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IG51bWJlcnNcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKCdhbmltYXRpb25zJywge1xuICAgICAgICBfZmFsbGJhY2s6ICdhbmltYXRpb24nXG4gICAgfSk7XG4gICAgZGVmYXVsdHMuc2V0KCd0cmFuc2l0aW9ucycsIHtcbiAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogNDAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2l6ZToge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2hvdzoge1xuICAgICAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgICAgIGNvbG9yczoge1xuICAgICAgICAgICAgICAgICAgICBmcm9tOiAndHJhbnNwYXJlbnQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGhpZGU6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdG86ICd0cmFuc3BhcmVudCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHZpc2libGU6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgICAgICBmbjogKHYpPT52IHwgMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhcHBseUxheW91dHNEZWZhdWx0cyhkZWZhdWx0cykge1xuICAgIGRlZmF1bHRzLnNldCgnbGF5b3V0Jywge1xuICAgICAgICBhdXRvUGFkZGluZzogdHJ1ZSxcbiAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgICBsZWZ0OiAwXG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuY29uc3QgaW50bENhY2hlID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gbG9jYWxlICsgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyk7XG4gICAgbGV0IGZvcm1hdHRlciA9IGludGxDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIGlmICghZm9ybWF0dGVyKSB7XG4gICAgICAgIGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpO1xuICAgICAgICBpbnRsQ2FjaGUuc2V0KGNhY2hlS2V5LCBmb3JtYXR0ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0dGVyO1xufVxuZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bSwgbG9jYWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGdldE51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpLmZvcm1hdChudW0pO1xufVxuXG5jb25zdCBmb3JtYXR0ZXJzID0ge1xuIHZhbHVlcyAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gIHZhbHVlIDogJycgKyB2YWx1ZTtcbiAgICB9LFxuIG51bWVyaWMgKHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKSB7XG4gICAgICAgIGlmICh0aWNrVmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnMCc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9jYWxlID0gdGhpcy5jaGFydC5vcHRpb25zLmxvY2FsZTtcbiAgICAgICAgbGV0IG5vdGF0aW9uO1xuICAgICAgICBsZXQgZGVsdGEgPSB0aWNrVmFsdWU7XG4gICAgICAgIGlmICh0aWNrcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjb25zdCBtYXhUaWNrID0gTWF0aC5tYXgoTWF0aC5hYnModGlja3NbMF0udmFsdWUpLCBNYXRoLmFicyh0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSkpO1xuICAgICAgICAgICAgaWYgKG1heFRpY2sgPCAxZS00IHx8IG1heFRpY2sgPiAxZSsxNSkge1xuICAgICAgICAgICAgICAgIG5vdGF0aW9uID0gJ3NjaWVudGlmaWMnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsdGEgPSBjYWxjdWxhdGVEZWx0YSh0aWNrVmFsdWUsIHRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2dEZWx0YSA9IGxvZzEwKE1hdGguYWJzKGRlbHRhKSk7XG4gICAgICAgIGNvbnN0IG51bURlY2ltYWwgPSBpc05hTihsb2dEZWx0YSkgPyAxIDogTWF0aC5tYXgoTWF0aC5taW4oLTEgKiBNYXRoLmZsb29yKGxvZ0RlbHRhKSwgMjApLCAwKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG5vdGF0aW9uLFxuICAgICAgICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBudW1EZWNpbWFsLFxuICAgICAgICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiBudW1EZWNpbWFsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5hc3NpZ24ob3B0aW9ucywgdGhpcy5vcHRpb25zLnRpY2tzLmZvcm1hdCk7XG4gICAgICAgIHJldHVybiBmb3JtYXROdW1iZXIodGlja1ZhbHVlLCBsb2NhbGUsIG9wdGlvbnMpO1xuICAgIH0sXG4gbG9nYXJpdGhtaWMgKHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKSB7XG4gICAgICAgIGlmICh0aWNrVmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnMCc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVtYWluID0gdGlja3NbaW5kZXhdLnNpZ25pZmljYW5kIHx8IHRpY2tWYWx1ZSAvIE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGxvZzEwKHRpY2tWYWx1ZSkpKTtcbiAgICAgICAgaWYgKFtcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE1XG4gICAgICAgIF0uaW5jbHVkZXMocmVtYWluKSB8fCBpbmRleCA+IDAuOCAqIHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlcnMubnVtZXJpYy5jYWxsKHRoaXMsIHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGNhbGN1bGF0ZURlbHRhKHRpY2tWYWx1ZSwgdGlja3MpIHtcbiAgICBsZXQgZGVsdGEgPSB0aWNrcy5sZW5ndGggPiAzID8gdGlja3NbMl0udmFsdWUgLSB0aWNrc1sxXS52YWx1ZSA6IHRpY2tzWzFdLnZhbHVlIC0gdGlja3NbMF0udmFsdWU7XG4gICAgaWYgKE1hdGguYWJzKGRlbHRhKSA+PSAxICYmIHRpY2tWYWx1ZSAhPT0gTWF0aC5mbG9vcih0aWNrVmFsdWUpKSB7XG4gICAgICAgIGRlbHRhID0gdGlja1ZhbHVlIC0gTWF0aC5mbG9vcih0aWNrVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZGVsdGE7XG59XG4gdmFyIFRpY2tzID0ge1xuICAgIGZvcm1hdHRlcnNcbn07XG5cbmZ1bmN0aW9uIGFwcGx5U2NhbGVEZWZhdWx0cyhkZWZhdWx0cykge1xuICAgIGRlZmF1bHRzLnNldCgnc2NhbGUnLCB7XG4gICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgIG9mZnNldDogZmFsc2UsXG4gICAgICAgIHJldmVyc2U6IGZhbHNlLFxuICAgICAgICBiZWdpbkF0WmVybzogZmFsc2UsXG4gYm91bmRzOiAndGlja3MnLFxuIGdyYWNlOiAwLFxuICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgZHJhd09uQ2hhcnRBcmVhOiB0cnVlLFxuICAgICAgICAgICAgZHJhd1RpY2tzOiB0cnVlLFxuICAgICAgICAgICAgdGlja0xlbmd0aDogOCxcbiAgICAgICAgICAgIHRpY2tXaWR0aDogKF9jdHgsIG9wdGlvbnMpPT5vcHRpb25zLmxpbmVXaWR0aCxcbiAgICAgICAgICAgIHRpY2tDb2xvcjogKF9jdHgsIG9wdGlvbnMpPT5vcHRpb25zLmNvbG9yLFxuICAgICAgICAgICAgb2Zmc2V0OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBib3JkZXI6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBkYXNoOiBbXSxcbiAgICAgICAgICAgIGRhc2hPZmZzZXQ6IDAuMCxcbiAgICAgICAgICAgIHdpZHRoOiAxXG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgIHRleHQ6ICcnLFxuICAgICAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgICAgIHRvcDogNCxcbiAgICAgICAgICAgICAgICBib3R0b206IDRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIG1pblJvdGF0aW9uOiAwLFxuICAgICAgICAgICAgbWF4Um90YXRpb246IDUwLFxuICAgICAgICAgICAgbWlycm9yOiBmYWxzZSxcbiAgICAgICAgICAgIHRleHRTdHJva2VXaWR0aDogMCxcbiAgICAgICAgICAgIHRleHRTdHJva2VDb2xvcjogJycsXG4gICAgICAgICAgICBwYWRkaW5nOiAzLFxuICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGF1dG9Ta2lwOiB0cnVlLFxuICAgICAgICAgICAgYXV0b1NraXBQYWRkaW5nOiAzLFxuICAgICAgICAgICAgbGFiZWxPZmZzZXQ6IDAsXG4gICAgICAgICAgICBjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy52YWx1ZXMsXG4gICAgICAgICAgICBtaW5vcjoge30sXG4gICAgICAgICAgICBtYWpvcjoge30sXG4gICAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICBjcm9zc0FsaWduOiAnbmVhcicsXG4gICAgICAgICAgICBzaG93TGFiZWxCYWNrZHJvcDogZmFsc2UsXG4gICAgICAgICAgICBiYWNrZHJvcENvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjc1KScsXG4gICAgICAgICAgICBiYWNrZHJvcFBhZGRpbmc6IDJcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRlZmF1bHRzLnJvdXRlKCdzY2FsZS50aWNrcycsICdjb2xvcicsICcnLCAnY29sb3InKTtcbiAgICBkZWZhdWx0cy5yb3V0ZSgnc2NhbGUuZ3JpZCcsICdjb2xvcicsICcnLCAnYm9yZGVyQ29sb3InKTtcbiAgICBkZWZhdWx0cy5yb3V0ZSgnc2NhbGUuYm9yZGVyJywgJ2NvbG9yJywgJycsICdib3JkZXJDb2xvcicpO1xuICAgIGRlZmF1bHRzLnJvdXRlKCdzY2FsZS50aXRsZScsICdjb2xvcicsICcnLCAnY29sb3InKTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnc2NhbGUnLCB7XG4gICAgICAgIF9mYWxsYmFjazogZmFsc2UsXG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9PiFuYW1lLnN0YXJ0c1dpdGgoJ2JlZm9yZScpICYmICFuYW1lLnN0YXJ0c1dpdGgoJ2FmdGVyJykgJiYgbmFtZSAhPT0gJ2NhbGxiYWNrJyAmJiBuYW1lICE9PSAncGFyc2VyJyxcbiAgICAgICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnYm9yZGVyRGFzaCcgJiYgbmFtZSAhPT0gJ3RpY2tCb3JkZXJEYXNoJyAmJiBuYW1lICE9PSAnZGFzaCdcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnc2NhbGVzJywge1xuICAgICAgICBfZmFsbGJhY2s6ICdzY2FsZSdcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnc2NhbGUudGlja3MnLCB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdiYWNrZHJvcFBhZGRpbmcnICYmIG5hbWUgIT09ICdjYWxsYmFjaycsXG4gICAgICAgIF9pbmRleGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2JhY2tkcm9wUGFkZGluZydcbiAgICB9KTtcbn1cblxuY29uc3Qgb3ZlcnJpZGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBmdW5jdGlvbiBnZXRTY29wZSQxKG5vZGUsIGtleSkge1xuICAgIGlmICgha2V5KSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICBjb25zdCBrZXlzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgZm9yKGxldCBpID0gMCwgbiA9IGtleXMubGVuZ3RoOyBpIDwgbjsgKytpKXtcbiAgICAgICAgY29uc3QgayA9IGtleXNbaV07XG4gICAgICAgIG5vZGUgPSBub2RlW2tdIHx8IChub2RlW2tdID0gT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gc2V0KHJvb3QsIHNjb3BlLCB2YWx1ZXMpIHtcbiAgICBpZiAodHlwZW9mIHNjb3BlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbWVyZ2UoZ2V0U2NvcGUkMShyb290LCBzY29wZSksIHZhbHVlcyk7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZShnZXRTY29wZSQxKHJvb3QsICcnKSwgc2NvcGUpO1xufVxuIGNsYXNzIERlZmF1bHRzIHtcbiAgICBjb25zdHJ1Y3RvcihfZGVzY3JpcHRvcnMsIF9hcHBsaWVycyl7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDAsMCwwLDAuMSknO1xuICAgICAgICB0aGlzLmJvcmRlckNvbG9yID0gJ3JnYmEoMCwwLDAsMC4xKSc7XG4gICAgICAgIHRoaXMuY29sb3IgPSAnIzY2Nic7XG4gICAgICAgIHRoaXMuZGF0YXNldHMgPSB7fTtcbiAgICAgICAgdGhpcy5kZXZpY2VQaXhlbFJhdGlvID0gKGNvbnRleHQpPT5jb250ZXh0LmNoYXJ0LnBsYXRmb3JtLmdldERldmljZVBpeGVsUmF0aW8oKTtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IHt9O1xuICAgICAgICB0aGlzLmV2ZW50cyA9IFtcbiAgICAgICAgICAgICdtb3VzZW1vdmUnLFxuICAgICAgICAgICAgJ21vdXNlb3V0JyxcbiAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAndG91Y2hzdGFydCcsXG4gICAgICAgICAgICAndG91Y2htb3ZlJ1xuICAgICAgICBdO1xuICAgICAgICB0aGlzLmZvbnQgPSB7XG4gICAgICAgICAgICBmYW1pbHk6IFwiJ0hlbHZldGljYSBOZXVlJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWZcIixcbiAgICAgICAgICAgIHNpemU6IDEyLFxuICAgICAgICAgICAgc3R5bGU6ICdub3JtYWwnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgd2VpZ2h0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaG92ZXIgPSB7fTtcbiAgICAgICAgdGhpcy5ob3ZlckJhY2tncm91bmRDb2xvciA9IChjdHgsIG9wdGlvbnMpPT5nZXRIb3ZlckNvbG9yKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgdGhpcy5ob3ZlckJvcmRlckNvbG9yID0gKGN0eCwgb3B0aW9ucyk9PmdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcik7XG4gICAgICAgIHRoaXMuaG92ZXJDb2xvciA9IChjdHgsIG9wdGlvbnMpPT5nZXRIb3ZlckNvbG9yKG9wdGlvbnMuY29sb3IpO1xuICAgICAgICB0aGlzLmluZGV4QXhpcyA9ICd4JztcbiAgICAgICAgdGhpcy5pbnRlcmFjdGlvbiA9IHtcbiAgICAgICAgICAgIG1vZGU6ICduZWFyZXN0JyxcbiAgICAgICAgICAgIGludGVyc2VjdDogdHJ1ZSxcbiAgICAgICAgICAgIGluY2x1ZGVJbnZpc2libGU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubWFpbnRhaW5Bc3BlY3RSYXRpbyA9IHRydWU7XG4gICAgICAgIHRoaXMub25Ib3ZlciA9IG51bGw7XG4gICAgICAgIHRoaXMub25DbGljayA9IG51bGw7XG4gICAgICAgIHRoaXMucGFyc2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMucGx1Z2lucyA9IHt9O1xuICAgICAgICB0aGlzLnJlc3BvbnNpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNjYWxlcyA9IHt9O1xuICAgICAgICB0aGlzLnNob3dMaW5lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVzY3JpYmUoX2Rlc2NyaXB0b3JzKTtcbiAgICAgICAgdGhpcy5hcHBseShfYXBwbGllcnMpO1xuICAgIH1cbiBzZXQoc2NvcGUsIHZhbHVlcykge1xuICAgICAgICByZXR1cm4gc2V0KHRoaXMsIHNjb3BlLCB2YWx1ZXMpO1xuICAgIH1cbiBnZXQoc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIGdldFNjb3BlJDEodGhpcywgc2NvcGUpO1xuICAgIH1cbiBkZXNjcmliZShzY29wZSwgdmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBzZXQoZGVzY3JpcHRvcnMsIHNjb3BlLCB2YWx1ZXMpO1xuICAgIH1cbiAgICBvdmVycmlkZShzY29wZSwgdmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBzZXQob3ZlcnJpZGVzLCBzY29wZSwgdmFsdWVzKTtcbiAgICB9XG4gcm91dGUoc2NvcGUsIG5hbWUsIHRhcmdldFNjb3BlLCB0YXJnZXROYW1lKSB7XG4gICAgICAgIGNvbnN0IHNjb3BlT2JqZWN0ID0gZ2V0U2NvcGUkMSh0aGlzLCBzY29wZSk7XG4gICAgICAgIGNvbnN0IHRhcmdldFNjb3BlT2JqZWN0ID0gZ2V0U2NvcGUkMSh0aGlzLCB0YXJnZXRTY29wZSk7XG4gICAgICAgIGNvbnN0IHByaXZhdGVOYW1lID0gJ18nICsgbmFtZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc2NvcGVPYmplY3QsIHtcbiAgICAgICAgICAgIFtwcml2YXRlTmFtZV06IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogc2NvcGVPYmplY3RbbmFtZV0sXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbbmFtZV06IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsID0gdGhpc1twcml2YXRlTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRhcmdldFNjb3BlT2JqZWN0W3RhcmdldE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3QobG9jYWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGFyZ2V0LCBsb2NhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KGxvY2FsLCB0YXJnZXQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW3ByaXZhdGVOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFwcGx5KGFwcGxpZXJzKSB7XG4gICAgICAgIGFwcGxpZXJzLmZvckVhY2goKGFwcGx5KT0+YXBwbHkodGhpcykpO1xuICAgIH1cbn1cbnZhciBkZWZhdWx0cyA9IC8qICNfX1BVUkVfXyAqLyBuZXcgRGVmYXVsdHMoe1xuICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9PiFuYW1lLnN0YXJ0c1dpdGgoJ29uJyksXG4gICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnZXZlbnRzJyxcbiAgICBob3Zlcjoge1xuICAgICAgICBfZmFsbGJhY2s6ICdpbnRlcmFjdGlvbidcbiAgICB9LFxuICAgIGludGVyYWN0aW9uOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiBmYWxzZSxcbiAgICAgICAgX2luZGV4YWJsZTogZmFsc2VcbiAgICB9XG59LCBbXG4gICAgYXBwbHlBbmltYXRpb25zRGVmYXVsdHMsXG4gICAgYXBwbHlMYXlvdXRzRGVmYXVsdHMsXG4gICAgYXBwbHlTY2FsZURlZmF1bHRzXG5dKTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gZm9udCBvYmplY3QgaW50byBhIENTUyBmb250IHN0cmluZy5cbiAqIEBwYXJhbSBmb250IC0gQSBmb250IG9iamVjdC5cbiAqIEByZXR1cm4gVGhlIENTUyBmb250IHN0cmluZy4gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb250XG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIHRvRm9udFN0cmluZyhmb250KSB7XG4gICAgaWYgKCFmb250IHx8IGlzTnVsbE9yVW5kZWYoZm9udC5zaXplKSB8fCBpc051bGxPclVuZGVmKGZvbnQuZmFtaWx5KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChmb250LnN0eWxlID8gZm9udC5zdHlsZSArICcgJyA6ICcnKSArIChmb250LndlaWdodCA/IGZvbnQud2VpZ2h0ICsgJyAnIDogJycpICsgZm9udC5zaXplICsgJ3B4ICcgKyBmb250LmZhbWlseTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgc3RyaW5nKSB7XG4gICAgbGV0IHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXTtcbiAgICBpZiAoIXRleHRXaWR0aCkge1xuICAgICAgICB0ZXh0V2lkdGggPSBkYXRhW3N0cmluZ10gPSBjdHgubWVhc3VyZVRleHQoc3RyaW5nKS53aWR0aDtcbiAgICAgICAgZ2MucHVzaChzdHJpbmcpO1xuICAgIH1cbiAgICBpZiAodGV4dFdpZHRoID4gbG9uZ2VzdCkge1xuICAgICAgICBsb25nZXN0ID0gdGV4dFdpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gbG9uZ2VzdDtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gX2xvbmdlc3RUZXh0KGN0eCwgZm9udCwgYXJyYXlPZlRoaW5ncywgY2FjaGUpIHtcbiAgICBjYWNoZSA9IGNhY2hlIHx8IHt9O1xuICAgIGxldCBkYXRhID0gY2FjaGUuZGF0YSA9IGNhY2hlLmRhdGEgfHwge307XG4gICAgbGV0IGdjID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCB8fCBbXTtcbiAgICBpZiAoY2FjaGUuZm9udCAhPT0gZm9udCkge1xuICAgICAgICBkYXRhID0gY2FjaGUuZGF0YSA9IHt9O1xuICAgICAgICBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gW107XG4gICAgICAgIGNhY2hlLmZvbnQgPSBmb250O1xuICAgIH1cbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5mb250ID0gZm9udDtcbiAgICBsZXQgbG9uZ2VzdCA9IDA7XG4gICAgY29uc3QgaWxlbiA9IGFycmF5T2ZUaGluZ3MubGVuZ3RoO1xuICAgIGxldCBpLCBqLCBqbGVuLCB0aGluZywgbmVzdGVkVGhpbmc7XG4gICAgZm9yKGkgPSAwOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgdGhpbmcgPSBhcnJheU9mVGhpbmdzW2ldO1xuICAgICAgICAvLyBVbmRlZmluZWQgc3RyaW5ncyBhbmQgYXJyYXlzIHNob3VsZCBub3QgYmUgbWVhc3VyZWRcbiAgICAgICAgaWYgKHRoaW5nICE9PSB1bmRlZmluZWQgJiYgdGhpbmcgIT09IG51bGwgJiYgIWlzQXJyYXkodGhpbmcpKSB7XG4gICAgICAgICAgICBsb25nZXN0ID0gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIHRoaW5nKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHRoaW5nKSkge1xuICAgICAgICAgICAgLy8gaWYgaXQgaXMgYW4gYXJyYXkgbGV0cyBtZWFzdXJlIGVhY2ggZWxlbWVudFxuICAgICAgICAgICAgLy8gdG8gZG8gbWF5YmUgc2ltcGxpZnkgdGhpcyBmdW5jdGlvbiBhIGJpdCBzbyB3ZSBjYW4gZG8gdGhpcyBtb3JlIHJlY3Vyc2l2ZWx5P1xuICAgICAgICAgICAgZm9yKGogPSAwLCBqbGVuID0gdGhpbmcubGVuZ3RoOyBqIDwgamxlbjsgaisrKXtcbiAgICAgICAgICAgICAgICBuZXN0ZWRUaGluZyA9IHRoaW5nW2pdO1xuICAgICAgICAgICAgICAgIC8vIFVuZGVmaW5lZCBzdHJpbmdzIGFuZCBhcnJheXMgc2hvdWxkIG5vdCBiZSBtZWFzdXJlZFxuICAgICAgICAgICAgICAgIGlmIChuZXN0ZWRUaGluZyAhPT0gdW5kZWZpbmVkICYmIG5lc3RlZFRoaW5nICE9PSBudWxsICYmICFpc0FycmF5KG5lc3RlZFRoaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICBsb25nZXN0ID0gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIG5lc3RlZFRoaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICBjb25zdCBnY0xlbiA9IGdjLmxlbmd0aCAvIDI7XG4gICAgaWYgKGdjTGVuID4gYXJyYXlPZlRoaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgZ2NMZW47IGkrKyl7XG4gICAgICAgICAgICBkZWxldGUgZGF0YVtnY1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgZ2Muc3BsaWNlKDAsIGdjTGVuKTtcbiAgICB9XG4gICAgcmV0dXJuIGxvbmdlc3Q7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGFsaWduZWQgcGl4ZWwgdmFsdWUgdG8gYXZvaWQgYW50aS1hbGlhc2luZyBibHVyXG4gKiBAcGFyYW0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0gcGl4ZWwgLSBBIHBpeGVsIHZhbHVlLlxuICogQHBhcmFtIHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50LlxuICogQHJldHVybnMgVGhlIGFsaWduZWQgcGl4ZWwgdmFsdWUuXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9hbGlnblBpeGVsKGNoYXJ0LCBwaXhlbCwgd2lkdGgpIHtcbiAgICBjb25zdCBkZXZpY2VQaXhlbFJhdGlvID0gY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW87XG4gICAgY29uc3QgaGFsZldpZHRoID0gd2lkdGggIT09IDAgPyBNYXRoLm1heCh3aWR0aCAvIDIsIDAuNSkgOiAwO1xuICAgIHJldHVybiBNYXRoLnJvdW5kKChwaXhlbCAtIGhhbGZXaWR0aCkgKiBkZXZpY2VQaXhlbFJhdGlvKSAvIGRldmljZVBpeGVsUmF0aW8gKyBoYWxmV2lkdGg7XG59XG4vKipcbiAqIENsZWFycyB0aGUgZW50aXJlIGNhbnZhcy5cbiAqLyBmdW5jdGlvbiBjbGVhckNhbnZhcyhjYW52YXMsIGN0eCkge1xuICAgIGN0eCA9IGN0eCB8fCBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIC8vIGNhbnZhcy53aWR0aCBhbmQgY2FudmFzLmhlaWdodCBkbyBub3QgY29uc2lkZXIgdGhlIGNhbnZhcyB0cmFuc2Zvcm0sXG4gICAgLy8gd2hpbGUgY2xlYXJSZWN0IGRvZXNcbiAgICBjdHgucmVzZXRUcmFuc2Zvcm0oKTtcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGRyYXdQb2ludChjdHgsIG9wdGlvbnMsIHgsIHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgZHJhd1BvaW50TGVnZW5kKGN0eCwgb3B0aW9ucywgeCwgeSwgbnVsbCk7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gZHJhd1BvaW50TGVnZW5kKGN0eCwgb3B0aW9ucywgeCwgeSwgdykge1xuICAgIGxldCB0eXBlLCB4T2Zmc2V0LCB5T2Zmc2V0LCBzaXplLCBjb3JuZXJSYWRpdXMsIHdpZHRoLCB4T2Zmc2V0VywgeU9mZnNldFc7XG4gICAgY29uc3Qgc3R5bGUgPSBvcHRpb25zLnBvaW50U3R5bGU7XG4gICAgY29uc3Qgcm90YXRpb24gPSBvcHRpb25zLnJvdGF0aW9uO1xuICAgIGNvbnN0IHJhZGl1cyA9IG9wdGlvbnMucmFkaXVzO1xuICAgIGxldCByYWQgPSAocm90YXRpb24gfHwgMCkgKiBSQURfUEVSX0RFRztcbiAgICBpZiAoc3R5bGUgJiYgdHlwZW9mIHN0eWxlID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0eXBlID0gc3R5bGUudG9TdHJpbmcoKTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IEhUTUxJbWFnZUVsZW1lbnRdJyB8fCB0eXBlID09PSAnW29iamVjdCBIVE1MQ2FudmFzRWxlbWVudF0nKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSh4LCB5KTtcbiAgICAgICAgICAgIGN0eC5yb3RhdGUocmFkKTtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2Uoc3R5bGUsIC1zdHlsZS53aWR0aCAvIDIsIC1zdHlsZS5oZWlnaHQgLyAyLCBzdHlsZS53aWR0aCwgc3R5bGUuaGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTmFOKHJhZGl1cykgfHwgcmFkaXVzIDw9IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgc3dpdGNoKHN0eWxlKXtcbiAgICAgICAgLy8gRGVmYXVsdCBpbmNsdWRlcyBjaXJjbGVcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmICh3KSB7XG4gICAgICAgICAgICAgICAgY3R4LmVsbGlwc2UoeCwgeSwgdyAvIDIsIHJhZGl1cywgMCwgMCwgVEFVKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIDAsIFRBVSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndHJpYW5nbGUnOlxuICAgICAgICAgICAgd2lkdGggPSB3ID8gdyAvIDIgOiByYWRpdXM7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggKyBNYXRoLnNpbihyYWQpICogd2lkdGgsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICAgICAgICAgIHJhZCArPSBUV09fVEhJUkRTX1BJO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHdpZHRoLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgICAgICAgICByYWQgKz0gVFdPX1RISVJEU19QSTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIE1hdGguc2luKHJhZCkgKiB3aWR0aCwgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlY3RSb3VuZGVkJzpcbiAgICAgICAgICAgIC8vIE5PVEU6IHRoZSByb3VuZGVkIHJlY3QgaW1wbGVtZW50YXRpb24gY2hhbmdlZCB0byB1c2UgYGFyY2AgaW5zdGVhZCBvZlxuICAgICAgICAgICAgLy8gYHF1YWRyYXRpY0N1cnZlVG9gIHNpbmNlIGl0IGdlbmVyYXRlcyBiZXR0ZXIgcmVzdWx0cyB3aGVuIHJlY3QgaXNcbiAgICAgICAgICAgIC8vIGFsbW9zdCBhIGNpcmNsZS4gMC41MTYgKGluc3RlYWQgb2YgMC41KSBwcm9kdWNlcyByZXN1bHRzIHdpdGggdmlzdWFsbHlcbiAgICAgICAgICAgIC8vIGNsb3NlciBwcm9wb3J0aW9uIHRvIHRoZSBwcmV2aW91cyBpbXBsIGFuZCBpdCBpcyBpbnNjcmliZWQgaW4gdGhlXG4gICAgICAgICAgICAvLyBjaXJjbGUgd2l0aCBgcmFkaXVzYC4gRm9yIG1vcmUgZGV0YWlscywgc2VlIHRoZSBmb2xsb3dpbmcgUFJzOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzU1OTdcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81ODU4XG4gICAgICAgICAgICBjb3JuZXJSYWRpdXMgPSByYWRpdXMgKiAwLjUxNjtcbiAgICAgICAgICAgIHNpemUgPSByYWRpdXMgLSBjb3JuZXJSYWRpdXM7XG4gICAgICAgICAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkICsgUVVBUlRFUl9QSSkgKiBzaXplO1xuICAgICAgICAgICAgeE9mZnNldFcgPSBNYXRoLmNvcyhyYWQgKyBRVUFSVEVSX1BJKSAqICh3ID8gdyAvIDIgLSBjb3JuZXJSYWRpdXMgOiBzaXplKTtcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCArIFFVQVJURVJfUEkpICogKHcgPyB3IC8gMiAtIGNvcm5lclJhZGl1cyA6IHNpemUpO1xuICAgICAgICAgICAgY3R4LmFyYyh4IC0geE9mZnNldFcsIHkgLSB5T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCAtIFBJLCByYWQgLSBIQUxGX1BJKTtcbiAgICAgICAgICAgIGN0eC5hcmMoeCArIHlPZmZzZXRXLCB5IC0geE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBIQUxGX1BJLCByYWQpO1xuICAgICAgICAgICAgY3R4LmFyYyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCwgcmFkICsgSEFMRl9QSSk7XG4gICAgICAgICAgICBjdHguYXJjKHggLSB5T2Zmc2V0VywgeSArIHhPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkICsgSEFMRl9QSSwgcmFkICsgUEkpO1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlY3QnOlxuICAgICAgICAgICAgaWYgKCFyb3RhdGlvbikge1xuICAgICAgICAgICAgICAgIHNpemUgPSBNYXRoLlNRUlQxXzIgKiByYWRpdXM7XG4gICAgICAgICAgICAgICAgd2lkdGggPSB3ID8gdyAvIDIgOiBzaXplO1xuICAgICAgICAgICAgICAgIGN0eC5yZWN0KHggLSB3aWR0aCwgeSAtIHNpemUsIDIgKiB3aWR0aCwgMiAqIHNpemUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmFkICs9IFFVQVJURVJfUEk7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8gY2FzZSAncmVjdFJvdCc6XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB5T2Zmc2V0VywgeSAtIHhPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY3Jvc3NSb3QnOlxuICAgICAgICAgICAgcmFkICs9IFFVQVJURVJfUEk7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8gY2FzZSAnY3Jvc3MnOlxuICAgICAgICAgICAgeE9mZnNldFcgPSBNYXRoLmNvcyhyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldFcgPSBNYXRoLnNpbihyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0VywgeSAtIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXRXLCB5IC0geE9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0VywgeSArIHhPZmZzZXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3N0YXInOlxuICAgICAgICAgICAgeE9mZnNldFcgPSBNYXRoLmNvcyhyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldFcgPSBNYXRoLnNpbihyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0VywgeSAtIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXRXLCB5IC0geE9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0VywgeSArIHhPZmZzZXQpO1xuICAgICAgICAgICAgcmFkICs9IFFVQVJURVJfUEk7XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0VywgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldFcsIHkgLSB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbGluZSc6XG4gICAgICAgICAgICB4T2Zmc2V0ID0gdyA/IHcgLyAyIDogTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Rhc2gnOlxuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKSwgeSArIE1hdGguc2luKHJhZCkgKiByYWRpdXMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY3R4LmZpbGwoKTtcbiAgICBpZiAob3B0aW9ucy5ib3JkZXJXaWR0aCA+IDApIHtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwb2ludCBpcyBpbnNpZGUgdGhlIHJlY3RhbmdsZVxuICogQHBhcmFtIHBvaW50IC0gVGhlIHBvaW50IHRvIHRlc3RcbiAqIEBwYXJhbSBhcmVhIC0gVGhlIHJlY3RhbmdsZVxuICogQHBhcmFtIG1hcmdpbiAtIGFsbG93ZWQgbWFyZ2luXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9pc1BvaW50SW5BcmVhKHBvaW50LCBhcmVhLCBtYXJnaW4pIHtcbiAgICBtYXJnaW4gPSBtYXJnaW4gfHwgMC41OyAvLyBtYXJnaW4gLSBkZWZhdWx0IGlzIHRvIG1hdGNoIHJvdW5kZWQgZGVjaW1hbHNcbiAgICByZXR1cm4gIWFyZWEgfHwgcG9pbnQgJiYgcG9pbnQueCA+IGFyZWEubGVmdCAtIG1hcmdpbiAmJiBwb2ludC54IDwgYXJlYS5yaWdodCArIG1hcmdpbiAmJiBwb2ludC55ID4gYXJlYS50b3AgLSBtYXJnaW4gJiYgcG9pbnQueSA8IGFyZWEuYm90dG9tICsgbWFyZ2luO1xufVxuZnVuY3Rpb24gY2xpcEFyZWEoY3R4LCBhcmVhKSB7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LnJlY3QoYXJlYS5sZWZ0LCBhcmVhLnRvcCwgYXJlYS5yaWdodCAtIGFyZWEubGVmdCwgYXJlYS5ib3R0b20gLSBhcmVhLnRvcCk7XG4gICAgY3R4LmNsaXAoKTtcbn1cbmZ1bmN0aW9uIHVuY2xpcEFyZWEoY3R4KSB7XG4gICAgY3R4LnJlc3RvcmUoKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfc3RlcHBlZExpbmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQsIGZsaXAsIG1vZGUpIHtcbiAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgIHJldHVybiBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG4gICAgfVxuICAgIGlmIChtb2RlID09PSAnbWlkZGxlJykge1xuICAgICAgICBjb25zdCBtaWRwb2ludCA9IChwcmV2aW91cy54ICsgdGFyZ2V0LngpIC8gMi4wO1xuICAgICAgICBjdHgubGluZVRvKG1pZHBvaW50LCBwcmV2aW91cy55KTtcbiAgICAgICAgY3R4LmxpbmVUbyhtaWRwb2ludCwgdGFyZ2V0LnkpO1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2FmdGVyJyAhPT0gISFmbGlwKSB7XG4gICAgICAgIGN0eC5saW5lVG8ocHJldmlvdXMueCwgdGFyZ2V0LnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5saW5lVG8odGFyZ2V0LngsIHByZXZpb3VzLnkpO1xuICAgIH1cbiAgICBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2JlemllckN1cnZlVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwKSB7XG4gICAgaWYgKCFwcmV2aW91cykge1xuICAgICAgICByZXR1cm4gY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xuICAgIH1cbiAgICBjdHguYmV6aWVyQ3VydmVUbyhmbGlwID8gcHJldmlvdXMuY3AxeCA6IHByZXZpb3VzLmNwMngsIGZsaXAgPyBwcmV2aW91cy5jcDF5IDogcHJldmlvdXMuY3AyeSwgZmxpcCA/IHRhcmdldC5jcDJ4IDogdGFyZ2V0LmNwMXgsIGZsaXAgPyB0YXJnZXQuY3AyeSA6IHRhcmdldC5jcDF5LCB0YXJnZXQueCwgdGFyZ2V0LnkpO1xufVxuZnVuY3Rpb24gc2V0UmVuZGVyT3B0cyhjdHgsIG9wdHMpIHtcbiAgICBpZiAob3B0cy50cmFuc2xhdGlvbikge1xuICAgICAgICBjdHgudHJhbnNsYXRlKG9wdHMudHJhbnNsYXRpb25bMF0sIG9wdHMudHJhbnNsYXRpb25bMV0pO1xuICAgIH1cbiAgICBpZiAoIWlzTnVsbE9yVW5kZWYob3B0cy5yb3RhdGlvbikpIHtcbiAgICAgICAgY3R4LnJvdGF0ZShvcHRzLnJvdGF0aW9uKTtcbiAgICB9XG4gICAgaWYgKG9wdHMuY29sb3IpIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdHMuY29sb3I7XG4gICAgfVxuICAgIGlmIChvcHRzLnRleHRBbGlnbikge1xuICAgICAgICBjdHgudGV4dEFsaWduID0gb3B0cy50ZXh0QWxpZ247XG4gICAgfVxuICAgIGlmIChvcHRzLnRleHRCYXNlbGluZSkge1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gb3B0cy50ZXh0QmFzZWxpbmU7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVjb3JhdGVUZXh0KGN0eCwgeCwgeSwgbGluZSwgb3B0cykge1xuICAgIGlmIChvcHRzLnN0cmlrZXRocm91Z2ggfHwgb3B0cy51bmRlcmxpbmUpIHtcbiAgICAgICAgLyoqXG4gICAgICogTm93IHRoYXQgSUUxMSBzdXBwb3J0IGhhcyBiZWVuIGRyb3BwZWQsIHdlIGNhbiB1c2UgbW9yZVxuICAgICAqIG9mIHRoZSBUZXh0TWV0cmljcyBvYmplY3QuIFRoZSBhY3R1YWwgYm91bmRpbmcgYm94ZXNcbiAgICAgKiBhcmUgdW5mbGFnZ2VkIGluIENocm9tZSwgRmlyZWZveCwgRWRnZSwgYW5kIFNhZmFyaSBzbyB0aGV5XG4gICAgICogY2FuIGJlIHNhZmVseSB1c2VkLlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVGV4dE1ldHJpY3MjQnJvd3Nlcl9jb21wYXRpYmlsaXR5XG4gICAgICovIGNvbnN0IG1ldHJpY3MgPSBjdHgubWVhc3VyZVRleHQobGluZSk7XG4gICAgICAgIGNvbnN0IGxlZnQgPSB4IC0gbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveExlZnQ7XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0geCArIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hSaWdodDtcbiAgICAgICAgY29uc3QgdG9wID0geSAtIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQ7XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IHkgKyBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94RGVzY2VudDtcbiAgICAgICAgY29uc3QgeURlY29yYXRpb24gPSBvcHRzLnN0cmlrZXRocm91Z2ggPyAodG9wICsgYm90dG9tKSAvIDIgOiBib3R0b207XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGN0eC5maWxsU3R5bGU7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdHMuZGVjb3JhdGlvbldpZHRoIHx8IDI7XG4gICAgICAgIGN0eC5tb3ZlVG8obGVmdCwgeURlY29yYXRpb24pO1xuICAgICAgICBjdHgubGluZVRvKHJpZ2h0LCB5RGVjb3JhdGlvbik7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkcmF3QmFja2Ryb3AoY3R4LCBvcHRzKSB7XG4gICAgY29uc3Qgb2xkQ29sb3IgPSBjdHguZmlsbFN0eWxlO1xuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzLmNvbG9yO1xuICAgIGN0eC5maWxsUmVjdChvcHRzLmxlZnQsIG9wdHMudG9wLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9sZENvbG9yO1xufVxuLyoqXG4gKiBSZW5kZXIgdGV4dCBvbnRvIHRoZSBjYW52YXNcbiAqLyBmdW5jdGlvbiByZW5kZXJUZXh0KGN0eCwgdGV4dCwgeCwgeSwgZm9udCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgbGluZXMgPSBpc0FycmF5KHRleHQpID8gdGV4dCA6IFtcbiAgICAgICAgdGV4dFxuICAgIF07XG4gICAgY29uc3Qgc3Ryb2tlID0gb3B0cy5zdHJva2VXaWR0aCA+IDAgJiYgb3B0cy5zdHJva2VDb2xvciAhPT0gJyc7XG4gICAgbGV0IGksIGxpbmU7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZm9udCA9IGZvbnQuc3RyaW5nO1xuICAgIHNldFJlbmRlck9wdHMoY3R4LCBvcHRzKTtcbiAgICBmb3IoaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSl7XG4gICAgICAgIGxpbmUgPSBsaW5lc1tpXTtcbiAgICAgICAgaWYgKG9wdHMuYmFja2Ryb3ApIHtcbiAgICAgICAgICAgIGRyYXdCYWNrZHJvcChjdHgsIG9wdHMuYmFja2Ryb3ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHJva2UpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLnN0cm9rZUNvbG9yKSB7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0cy5zdHJva2VDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNOdWxsT3JVbmRlZihvcHRzLnN0cm9rZVdpZHRoKSkge1xuICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRzLnN0cm9rZVdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnN0cm9rZVRleHQobGluZSwgeCwgeSwgb3B0cy5tYXhXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmZpbGxUZXh0KGxpbmUsIHgsIHksIG9wdHMubWF4V2lkdGgpO1xuICAgICAgICBkZWNvcmF0ZVRleHQoY3R4LCB4LCB5LCBsaW5lLCBvcHRzKTtcbiAgICAgICAgeSArPSBOdW1iZXIoZm9udC5saW5lSGVpZ2h0KTtcbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbn1cbi8qKlxuICogQWRkIGEgcGF0aCBvZiBhIHJlY3RhbmdsZSB3aXRoIHJvdW5kZWQgY29ybmVycyB0byB0aGUgY3VycmVudCBzdWItcGF0aFxuICogQHBhcmFtIGN0eCAtIENvbnRleHRcbiAqIEBwYXJhbSByZWN0IC0gQm91bmRpbmcgcmVjdFxuICovIGZ1bmN0aW9uIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHJlY3QpIHtcbiAgICBjb25zdCB7IHggLCB5ICwgdyAsIGggLCByYWRpdXMgIH0gPSByZWN0O1xuICAgIC8vIHRvcCBsZWZ0IGFyY1xuICAgIGN0eC5hcmMoeCArIHJhZGl1cy50b3BMZWZ0LCB5ICsgcmFkaXVzLnRvcExlZnQsIHJhZGl1cy50b3BMZWZ0LCAtSEFMRl9QSSwgUEksIHRydWUpO1xuICAgIC8vIGxpbmUgZnJvbSB0b3AgbGVmdCB0byBib3R0b20gbGVmdFxuICAgIGN0eC5saW5lVG8oeCwgeSArIGggLSByYWRpdXMuYm90dG9tTGVmdCk7XG4gICAgLy8gYm90dG9tIGxlZnQgYXJjXG4gICAgY3R4LmFyYyh4ICsgcmFkaXVzLmJvdHRvbUxlZnQsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbUxlZnQsIHJhZGl1cy5ib3R0b21MZWZ0LCBQSSwgSEFMRl9QSSwgdHJ1ZSk7XG4gICAgLy8gbGluZSBmcm9tIGJvdHRvbSBsZWZ0IHRvIGJvdHRvbSByaWdodFxuICAgIGN0eC5saW5lVG8oeCArIHcgLSByYWRpdXMuYm90dG9tUmlnaHQsIHkgKyBoKTtcbiAgICAvLyBib3R0b20gcmlnaHQgYXJjXG4gICAgY3R4LmFyYyh4ICsgdyAtIHJhZGl1cy5ib3R0b21SaWdodCwgeSArIGggLSByYWRpdXMuYm90dG9tUmlnaHQsIHJhZGl1cy5ib3R0b21SaWdodCwgSEFMRl9QSSwgMCwgdHJ1ZSk7XG4gICAgLy8gbGluZSBmcm9tIGJvdHRvbSByaWdodCB0byB0b3AgcmlnaHRcbiAgICBjdHgubGluZVRvKHggKyB3LCB5ICsgcmFkaXVzLnRvcFJpZ2h0KTtcbiAgICAvLyB0b3AgcmlnaHQgYXJjXG4gICAgY3R4LmFyYyh4ICsgdyAtIHJhZGl1cy50b3BSaWdodCwgeSArIHJhZGl1cy50b3BSaWdodCwgcmFkaXVzLnRvcFJpZ2h0LCAwLCAtSEFMRl9QSSwgdHJ1ZSk7XG4gICAgLy8gbGluZSBmcm9tIHRvcCByaWdodCB0byB0b3AgbGVmdFxuICAgIGN0eC5saW5lVG8oeCArIHJhZGl1cy50b3BMZWZ0LCB5KTtcbn1cblxuY29uc3QgTElORV9IRUlHSFQgPSAvXihub3JtYWx8KFxcZCsoPzpcXC5cXGQrKT8pKHB4fGVtfCUpPykkLztcbmNvbnN0IEZPTlRfU1RZTEUgPSAvXihub3JtYWx8aXRhbGljfGluaXRpYWx8aW5oZXJpdHx1bnNldHwob2JsaXF1ZSggLT9bMC05XT9bMC05XWRlZyk/KSkkLztcbi8qKlxuICogQGFsaWFzIENoYXJ0LmhlbHBlcnMub3B0aW9uc1xuICogQG5hbWVzcGFjZVxuICovIC8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIGxpbmUgaGVpZ2h0IGB2YWx1ZWAgaW4gcGl4ZWxzIGZvciBhIHNwZWNpZmljIGZvbnQgYHNpemVgLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIGxpbmVIZWlnaHQgdG8gcGFyc2UgKGVnLiAxLjYsICcxNHB4JywgJzc1JScsICcxLjZlbScpLlxuICogQHBhcmFtIHNpemUgLSBUaGUgZm9udCBzaXplIChpbiBwaXhlbHMpIHVzZWQgdG8gcmVzb2x2ZSByZWxhdGl2ZSBgdmFsdWVgLlxuICogQHJldHVybnMgVGhlIGVmZmVjdGl2ZSBsaW5lIGhlaWdodCBpbiBwaXhlbHMgKHNpemUgKiAxLjIgaWYgdmFsdWUgaXMgaW52YWxpZCkuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saW5lLWhlaWdodFxuICogQHNpbmNlIDIuNy4wXG4gKi8gZnVuY3Rpb24gdG9MaW5lSGVpZ2h0KHZhbHVlLCBzaXplKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9ICgnJyArIHZhbHVlKS5tYXRjaChMSU5FX0hFSUdIVCk7XG4gICAgaWYgKCFtYXRjaGVzIHx8IG1hdGNoZXNbMV0gPT09ICdub3JtYWwnKSB7XG4gICAgICAgIHJldHVybiBzaXplICogMS4yO1xuICAgIH1cbiAgICB2YWx1ZSA9ICttYXRjaGVzWzJdO1xuICAgIHN3aXRjaChtYXRjaGVzWzNdKXtcbiAgICAgICAgY2FzZSAncHgnOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlICclJzpcbiAgICAgICAgICAgIHZhbHVlIC89IDEwMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAqIHZhbHVlO1xufVxuY29uc3QgbnVtYmVyT3JaZXJvID0gKHYpPT4rdiB8fCAwO1xuZnVuY3Rpb24gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIHByb3BzKSB7XG4gICAgY29uc3QgcmV0ID0ge307XG4gICAgY29uc3Qgb2JqUHJvcHMgPSBpc09iamVjdChwcm9wcyk7XG4gICAgY29uc3Qga2V5cyA9IG9ialByb3BzID8gT2JqZWN0LmtleXMocHJvcHMpIDogcHJvcHM7XG4gICAgY29uc3QgcmVhZCA9IGlzT2JqZWN0KHZhbHVlKSA/IG9ialByb3BzID8gKHByb3ApPT52YWx1ZU9yRGVmYXVsdCh2YWx1ZVtwcm9wXSwgdmFsdWVbcHJvcHNbcHJvcF1dKSA6IChwcm9wKT0+dmFsdWVbcHJvcF0gOiAoKT0+dmFsdWU7XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIGtleXMpe1xuICAgICAgICByZXRbcHJvcF0gPSBudW1iZXJPclplcm8ocmVhZChwcm9wKSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGEgVFJCTCBvYmplY3QuXG4gKiBAcGFyYW0gdmFsdWUgLSBJZiBhIG51bWJlciwgc2V0IHRoZSB2YWx1ZSB0byBhbGwgVFJCTCBjb21wb25lbnQsXG4gKiAgZWxzZSwgaWYgYW4gb2JqZWN0LCB1c2UgZGVmaW5lZCBwcm9wZXJ0aWVzIGFuZCBzZXRzIHVuZGVmaW5lZCBvbmVzIHRvIDAuXG4gKiAgeCAvIHkgYXJlIHNob3J0aGFuZHMgZm9yIHNhbWUgdmFsdWUgZm9yIGxlZnQvcmlnaHQgYW5kIHRvcC9ib3R0b20uXG4gKiBAcmV0dXJucyBUaGUgcGFkZGluZyB2YWx1ZXMgKHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdClcbiAqIEBzaW5jZSAzLjAuMFxuICovIGZ1bmN0aW9uIHRvVFJCTCh2YWx1ZSkge1xuICAgIHJldHVybiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwge1xuICAgICAgICB0b3A6ICd5JyxcbiAgICAgICAgcmlnaHQ6ICd4JyxcbiAgICAgICAgYm90dG9tOiAneScsXG4gICAgICAgIGxlZnQ6ICd4J1xuICAgIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdmFsdWUgaW50byBhIFRSQkwgY29ybmVycyBvYmplY3QgKHNpbWlsYXIgd2l0aCBjc3MgYm9yZGVyLXJhZGl1cykuXG4gKiBAcGFyYW0gdmFsdWUgLSBJZiBhIG51bWJlciwgc2V0IHRoZSB2YWx1ZSB0byBhbGwgVFJCTCBjb3JuZXIgY29tcG9uZW50cyxcbiAqICBlbHNlLCBpZiBhbiBvYmplY3QsIHVzZSBkZWZpbmVkIHByb3BlcnRpZXMgYW5kIHNldHMgdW5kZWZpbmVkIG9uZXMgdG8gMC5cbiAqIEByZXR1cm5zIFRoZSBUUkJMIGNvcm5lciB2YWx1ZXMgKHRvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LCBib3R0b21SaWdodClcbiAqIEBzaW5jZSAzLjAuMFxuICovIGZ1bmN0aW9uIHRvVFJCTENvcm5lcnModmFsdWUpIHtcbiAgICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIFtcbiAgICAgICAgJ3RvcExlZnQnLFxuICAgICAgICAndG9wUmlnaHQnLFxuICAgICAgICAnYm90dG9tTGVmdCcsXG4gICAgICAgICdib3R0b21SaWdodCdcbiAgICBdKTtcbn1cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIHZhbHVlIGludG8gYSBwYWRkaW5nIG9iamVjdCB3aXRoIHByZS1jb21wdXRlZCB3aWR0aC9oZWlnaHQuXG4gKiBAcGFyYW0gdmFsdWUgLSBJZiBhIG51bWJlciwgc2V0IHRoZSB2YWx1ZSB0byBhbGwgVFJCTCBjb21wb25lbnQsXG4gKiAgZWxzZSwgaWYgYW4gb2JqZWN0LCB1c2UgZGVmaW5lZCBwcm9wZXJ0aWVzIGFuZCBzZXRzIHVuZGVmaW5lZCBvbmVzIHRvIDAuXG4gKiAgeCAvIHkgYXJlIHNob3J0aGFuZHMgZm9yIHNhbWUgdmFsdWUgZm9yIGxlZnQvcmlnaHQgYW5kIHRvcC9ib3R0b20uXG4gKiBAcmV0dXJucyBUaGUgcGFkZGluZyB2YWx1ZXMgKHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgd2lkdGgsIGhlaWdodClcbiAqIEBzaW5jZSAyLjcuMFxuICovIGZ1bmN0aW9uIHRvUGFkZGluZyh2YWx1ZSkge1xuICAgIGNvbnN0IG9iaiA9IHRvVFJCTCh2YWx1ZSk7XG4gICAgb2JqLndpZHRoID0gb2JqLmxlZnQgKyBvYmoucmlnaHQ7XG4gICAgb2JqLmhlaWdodCA9IG9iai50b3AgKyBvYmouYm90dG9tO1xuICAgIHJldHVybiBvYmo7XG59XG4vKipcbiAqIFBhcnNlcyBmb250IG9wdGlvbnMgYW5kIHJldHVybnMgdGhlIGZvbnQgb2JqZWN0LlxuICogQHBhcmFtIG9wdGlvbnMgLSBBIG9iamVjdCB0aGF0IGNvbnRhaW5zIGZvbnQgb3B0aW9ucyB0byBiZSBwYXJzZWQuXG4gKiBAcGFyYW0gZmFsbGJhY2sgLSBBIG9iamVjdCB0aGF0IGNvbnRhaW5zIGZhbGxiYWNrIGZvbnQgb3B0aW9ucy5cbiAqIEByZXR1cm4gVGhlIGZvbnQgb2JqZWN0LlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiB0b0ZvbnQob3B0aW9ucywgZmFsbGJhY2spIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBmYWxsYmFjayA9IGZhbGxiYWNrIHx8IGRlZmF1bHRzLmZvbnQ7XG4gICAgbGV0IHNpemUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnNpemUsIGZhbGxiYWNrLnNpemUpO1xuICAgIGlmICh0eXBlb2Ygc2l6ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2l6ZSA9IHBhcnNlSW50KHNpemUsIDEwKTtcbiAgICB9XG4gICAgbGV0IHN0eWxlID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5zdHlsZSwgZmFsbGJhY2suc3R5bGUpO1xuICAgIGlmIChzdHlsZSAmJiAhKCcnICsgc3R5bGUpLm1hdGNoKEZPTlRfU1RZTEUpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBmb250IHN0eWxlIHNwZWNpZmllZDogXCInICsgc3R5bGUgKyAnXCInKTtcbiAgICAgICAgc3R5bGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGZvbnQgPSB7XG4gICAgICAgIGZhbWlseTogdmFsdWVPckRlZmF1bHQob3B0aW9ucy5mYW1pbHksIGZhbGxiYWNrLmZhbWlseSksXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRvTGluZUhlaWdodCh2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmxpbmVIZWlnaHQsIGZhbGxiYWNrLmxpbmVIZWlnaHQpLCBzaXplKSxcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIHdlaWdodDogdmFsdWVPckRlZmF1bHQob3B0aW9ucy53ZWlnaHQsIGZhbGxiYWNrLndlaWdodCksXG4gICAgICAgIHN0cmluZzogJydcbiAgICB9O1xuICAgIGZvbnQuc3RyaW5nID0gdG9Gb250U3RyaW5nKGZvbnQpO1xuICAgIHJldHVybiBmb250O1xufVxuLyoqXG4gKiBFdmFsdWF0ZXMgdGhlIGdpdmVuIGBpbnB1dHNgIHNlcXVlbnRpYWxseSBhbmQgcmV0dXJucyB0aGUgZmlyc3QgZGVmaW5lZCB2YWx1ZS5cbiAqIEBwYXJhbSBpbnB1dHMgLSBBbiBhcnJheSBvZiB2YWx1ZXMsIGZhbGxpbmcgYmFjayB0byB0aGUgbGFzdCB2YWx1ZS5cbiAqIEBwYXJhbSBjb250ZXh0IC0gSWYgZGVmaW5lZCBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgaXMgYSBmdW5jdGlvbiwgdGhlIHZhbHVlXG4gKiBpcyBjYWxsZWQgd2l0aCBgY29udGV4dGAgYXMgZmlyc3QgYXJndW1lbnQgYW5kIHRoZSByZXN1bHQgYmVjb21lcyB0aGUgbmV3IGlucHV0LlxuICogQHBhcmFtIGluZGV4IC0gSWYgZGVmaW5lZCBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgaXMgYW4gYXJyYXksIHRoZSB2YWx1ZVxuICogYXQgYGluZGV4YCBiZWNvbWUgdGhlIG5ldyBpbnB1dC5cbiAqIEBwYXJhbSBpbmZvIC0gb2JqZWN0IHRvIHJldHVybiBpbmZvcm1hdGlvbiBhYm91dCByZXNvbHV0aW9uIGluXG4gKiBAcGFyYW0gaW5mby5jYWNoZWFibGUgLSBXaWxsIGJlIHNldCB0byBgZmFsc2VgIGlmIG9wdGlvbiBpcyBub3QgY2FjaGVhYmxlLlxuICogQHNpbmNlIDIuNy4wXG4gKi8gZnVuY3Rpb24gcmVzb2x2ZShpbnB1dHMsIGNvbnRleHQsIGluZGV4LCBpbmZvKSB7XG4gICAgbGV0IGNhY2hlYWJsZSA9IHRydWU7XG4gICAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGlucHV0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICB2YWx1ZSA9IGlucHV0c1tpXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlKGNvbnRleHQpO1xuICAgICAgICAgICAgY2FjaGVhYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVbaW5kZXggJSB2YWx1ZS5sZW5ndGhdO1xuICAgICAgICAgICAgY2FjaGVhYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChpbmZvICYmICFjYWNoZWFibGUpIHtcbiAgICAgICAgICAgICAgICBpbmZvLmNhY2hlYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gbWlubWF4XG4gKiBAcGFyYW0gZ3JhY2VcbiAqIEBwYXJhbSBiZWdpbkF0WmVyb1xuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYWRkR3JhY2UobWlubWF4LCBncmFjZSwgYmVnaW5BdFplcm8pIHtcbiAgICBjb25zdCB7IG1pbiAsIG1heCAgfSA9IG1pbm1heDtcbiAgICBjb25zdCBjaGFuZ2UgPSB0b0RpbWVuc2lvbihncmFjZSwgKG1heCAtIG1pbikgLyAyKTtcbiAgICBjb25zdCBrZWVwWmVybyA9ICh2YWx1ZSwgYWRkKT0+YmVnaW5BdFplcm8gJiYgdmFsdWUgPT09IDAgPyAwIDogdmFsdWUgKyBhZGQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiBrZWVwWmVybyhtaW4sIC1NYXRoLmFicyhjaGFuZ2UpKSxcbiAgICAgICAgbWF4OiBrZWVwWmVybyhtYXgsIGNoYW5nZSlcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQ29udGV4dChwYXJlbnRDb250ZXh0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShwYXJlbnRDb250ZXh0KSwgY29udGV4dCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFByb3h5IGZvciByZXNvbHZpbmcgcmF3IHZhbHVlcyBmb3Igb3B0aW9ucy5cbiAqIEBwYXJhbSBzY29wZXMgLSBUaGUgb3B0aW9uIHNjb3BlcyB0byBsb29rIGZvciB2YWx1ZXMsIGluIHJlc29sdXRpb24gb3JkZXJcbiAqIEBwYXJhbSBwcmVmaXhlcyAtIFRoZSBwcmVmaXhlcyBmb3IgdmFsdWVzLCBpbiByZXNvbHV0aW9uIG9yZGVyLlxuICogQHBhcmFtIHJvb3RTY29wZXMgLSBUaGUgcm9vdCBvcHRpb24gc2NvcGVzXG4gKiBAcGFyYW0gZmFsbGJhY2sgLSBQYXJlbnQgc2NvcGVzIGZhbGxiYWNrXG4gKiBAcGFyYW0gZ2V0VGFyZ2V0IC0gY2FsbGJhY2sgZm9yIGdldHRpbmcgdGhlIHRhcmdldCBmb3IgY2hhbmdlZCB2YWx1ZXNcbiAqIEByZXR1cm5zIFByb3h5XG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9jcmVhdGVSZXNvbHZlcihzY29wZXMsIHByZWZpeGVzID0gW1xuICAgICcnXG5dLCByb290U2NvcGVzLCBmYWxsYmFjaywgZ2V0VGFyZ2V0ID0gKCk9PnNjb3Blc1swXSkge1xuICAgIGNvbnN0IGZpbmFsUm9vdFNjb3BlcyA9IHJvb3RTY29wZXMgfHwgc2NvcGVzO1xuICAgIGlmICh0eXBlb2YgZmFsbGJhY2sgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGZhbGxiYWNrID0gX3Jlc29sdmUoJ19mYWxsYmFjaycsIHNjb3Blcyk7XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlID0ge1xuICAgICAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ09iamVjdCcsXG4gICAgICAgIF9jYWNoZWFibGU6IHRydWUsXG4gICAgICAgIF9zY29wZXM6IHNjb3BlcyxcbiAgICAgICAgX3Jvb3RTY29wZXM6IGZpbmFsUm9vdFNjb3BlcyxcbiAgICAgICAgX2ZhbGxiYWNrOiBmYWxsYmFjayxcbiAgICAgICAgX2dldFRhcmdldDogZ2V0VGFyZ2V0LFxuICAgICAgICBvdmVycmlkZTogKHNjb3BlKT0+X2NyZWF0ZVJlc29sdmVyKFtcbiAgICAgICAgICAgICAgICBzY29wZSxcbiAgICAgICAgICAgICAgICAuLi5zY29wZXNcbiAgICAgICAgICAgIF0sIHByZWZpeGVzLCBmaW5hbFJvb3RTY29wZXMsIGZhbGxiYWNrKVxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIHRoZSBkZWxldGUgb3BlcmF0b3IuXG4gICAgICovIGRlbGV0ZVByb3BlcnR5ICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07IC8vIHJlbW92ZSBmcm9tIGNhY2hlXG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0Ll9rZXlzOyAvLyByZW1vdmUgY2FjaGVkIGtleXNcbiAgICAgICAgICAgIGRlbGV0ZSBzY29wZXNbMF1bcHJvcF07IC8vIHJlbW92ZSBmcm9tIHRvcCBsZXZlbCBzY29wZVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgZ2V0dGluZyBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICovIGdldCAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NhY2hlZCh0YXJnZXQsIHByb3AsICgpPT5fcmVzb2x2ZVdpdGhQcmVmaXhlcyhwcm9wLCBwcmVmaXhlcywgc2NvcGVzLCB0YXJnZXQpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLlxuICAgICAqIEFsc28gdXNlZCBieSBPYmplY3QuaGFzT3duUHJvcGVydHkuXG4gICAgICovIGdldE93blByb3BlcnR5RGVzY3JpcHRvciAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0Ll9zY29wZXNbMF0sIHByb3ApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZi5cbiAgICAgKi8gZ2V0UHJvdG90eXBlT2YgKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yoc2NvcGVzWzBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciB0aGUgaW4gb3BlcmF0b3IuXG4gICAgICovIGhhcyAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0S2V5c0Zyb21BbGxTY29wZXModGFyZ2V0KS5pbmNsdWRlcyhwcm9wKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyBhbmQgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scy5cbiAgICAgKi8gb3duS2V5cyAodGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0S2V5c0Zyb21BbGxTY29wZXModGFyZ2V0KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBzZXR0aW5nIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKi8gc2V0ICh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBzdG9yYWdlID0gdGFyZ2V0Ll9zdG9yYWdlIHx8ICh0YXJnZXQuX3N0b3JhZ2UgPSBnZXRUYXJnZXQoKSk7XG4gICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSBzdG9yYWdlW3Byb3BdID0gdmFsdWU7IC8vIHNldCB0byB0b3AgbGV2ZWwgc2NvcGUgKyBjYWNoZVxuICAgICAgICAgICAgZGVsZXRlIHRhcmdldC5fa2V5czsgLy8gcmVtb3ZlIGNhY2hlZCBrZXlzXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIFByb3h5IGZvciByZXNvbHZpbmcgb3B0aW9uIHZhbHVlcyB3aXRoIGNvbnRleHQuXG4gKiBAcGFyYW0gcHJveHkgLSBUaGUgUHJveHkgcmV0dXJuZWQgYnkgYF9jcmVhdGVSZXNvbHZlcmBcbiAqIEBwYXJhbSBjb250ZXh0IC0gQ29udGV4dCBvYmplY3QgZm9yIHNjcmlwdGFibGUvaW5kZXhhYmxlIG9wdGlvbnNcbiAqIEBwYXJhbSBzdWJQcm94eSAtIFRoZSBwcm94eSBwcm92aWRlZCBmb3Igc2NyaXB0YWJsZSBvcHRpb25zXG4gKiBAcGFyYW0gZGVzY3JpcHRvckRlZmF1bHRzIC0gRGVmYXVsdHMgZm9yIGRlc2NyaXB0b3JzXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9hdHRhY2hDb250ZXh0KHByb3h5LCBjb250ZXh0LCBzdWJQcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKSB7XG4gICAgY29uc3QgY2FjaGUgPSB7XG4gICAgICAgIF9jYWNoZWFibGU6IGZhbHNlLFxuICAgICAgICBfcHJveHk6IHByb3h5LFxuICAgICAgICBfY29udGV4dDogY29udGV4dCxcbiAgICAgICAgX3N1YlByb3h5OiBzdWJQcm94eSxcbiAgICAgICAgX3N0YWNrOiBuZXcgU2V0KCksXG4gICAgICAgIF9kZXNjcmlwdG9yczogX2Rlc2NyaXB0b3JzKHByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpLFxuICAgICAgICBzZXRDb250ZXh0OiAoY3R4KT0+X2F0dGFjaENvbnRleHQocHJveHksIGN0eCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cyksXG4gICAgICAgIG92ZXJyaWRlOiAoc2NvcGUpPT5fYXR0YWNoQ29udGV4dChwcm94eS5vdmVycmlkZShzY29wZSksIGNvbnRleHQsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpXG4gICAgfTtcbiAgICByZXR1cm4gbmV3IFByb3h5KGNhY2hlLCB7XG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgdGhlIGRlbGV0ZSBvcGVyYXRvci5cbiAgICAgKi8gZGVsZXRlUHJvcGVydHkgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTsgLy8gcmVtb3ZlIGZyb20gY2FjaGVcbiAgICAgICAgICAgIGRlbGV0ZSBwcm94eVtwcm9wXTsgLy8gcmVtb3ZlIGZyb20gcHJveHlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIGdldHRpbmcgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqLyBnZXQgKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBfY2FjaGVkKHRhcmdldCwgcHJvcCwgKCk9Pl9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuXG4gICAgICogQWxzbyB1c2VkIGJ5IE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5cbiAgICAgKi8gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuX2Rlc2NyaXB0b3JzLmFsbEtleXMgPyBSZWZsZWN0Lmhhcyhwcm94eSwgcHJvcCkgPyB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgIH0gOiB1bmRlZmluZWQgOiBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm94eSwgcHJvcCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mLlxuICAgICAqLyBnZXRQcm90b3R5cGVPZiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihwcm94eSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgdGhlIGluIG9wZXJhdG9yLlxuICAgICAqLyBoYXMgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuaGFzKHByb3h5LCBwcm9wKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyBhbmQgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scy5cbiAgICAgKi8gb3duS2V5cyAoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHByb3h5KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBzZXR0aW5nIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKi8gc2V0ICh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICBwcm94eVtwcm9wXSA9IHZhbHVlOyAvLyBzZXQgdG8gcHJveHlcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07IC8vIHJlbW92ZSBmcm9tIGNhY2hlXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9kZXNjcmlwdG9ycyhwcm94eSwgZGVmYXVsdHMgPSB7XG4gICAgc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICBpbmRleGFibGU6IHRydWVcbn0pIHtcbiAgICBjb25zdCB7IF9zY3JpcHRhYmxlID1kZWZhdWx0cy5zY3JpcHRhYmxlICwgX2luZGV4YWJsZSA9ZGVmYXVsdHMuaW5kZXhhYmxlICwgX2FsbEtleXMgPWRlZmF1bHRzLmFsbEtleXMgIH0gPSBwcm94eTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbGxLZXlzOiBfYWxsS2V5cyxcbiAgICAgICAgc2NyaXB0YWJsZTogX3NjcmlwdGFibGUsXG4gICAgICAgIGluZGV4YWJsZTogX2luZGV4YWJsZSxcbiAgICAgICAgaXNTY3JpcHRhYmxlOiBpc0Z1bmN0aW9uKF9zY3JpcHRhYmxlKSA/IF9zY3JpcHRhYmxlIDogKCk9Pl9zY3JpcHRhYmxlLFxuICAgICAgICBpc0luZGV4YWJsZTogaXNGdW5jdGlvbihfaW5kZXhhYmxlKSA/IF9pbmRleGFibGUgOiAoKT0+X2luZGV4YWJsZVxuICAgIH07XG59XG5jb25zdCByZWFkS2V5ID0gKHByZWZpeCwgbmFtZSk9PnByZWZpeCA/IHByZWZpeCArIF9jYXBpdGFsaXplKG5hbWUpIDogbmFtZTtcbmNvbnN0IG5lZWRzU3ViUmVzb2x2ZXIgPSAocHJvcCwgdmFsdWUpPT5pc09iamVjdCh2YWx1ZSkgJiYgcHJvcCAhPT0gJ2FkYXB0ZXJzJyAmJiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSA9PT0gbnVsbCB8fCB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KTtcbmZ1bmN0aW9uIF9jYWNoZWQodGFyZ2V0LCBwcm9wLCByZXNvbHZlKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByb3ApKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gcmVzb2x2ZSgpO1xuICAgIC8vIGNhY2hlIHRoZSByZXNvbHZlZCB2YWx1ZVxuICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgIGNvbnN0IHsgX3Byb3h5ICwgX2NvbnRleHQgLCBfc3ViUHJveHkgLCBfZGVzY3JpcHRvcnM6IGRlc2NyaXB0b3JzICB9ID0gdGFyZ2V0O1xuICAgIGxldCB2YWx1ZSA9IF9wcm94eVtwcm9wXTsgLy8gcmVzb2x2ZSBmcm9tIHByb3h5XG4gICAgLy8gcmVzb2x2ZSB3aXRoIGNvbnRleHRcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkgJiYgZGVzY3JpcHRvcnMuaXNTY3JpcHRhYmxlKHByb3ApKSB7XG4gICAgICAgIHZhbHVlID0gX3Jlc29sdmVTY3JpcHRhYmxlKHByb3AsIHZhbHVlLCB0YXJnZXQsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgZGVzY3JpcHRvcnMuaXNJbmRleGFibGUpO1xuICAgIH1cbiAgICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICAgICAgLy8gaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFuIG9iamVjdCwgY3JlYXRlIGEgc3ViIHJlc29sdmVyIGZvciBpdFxuICAgICAgICB2YWx1ZSA9IF9hdHRhY2hDb250ZXh0KHZhbHVlLCBfY29udGV4dCwgX3N1YlByb3h5ICYmIF9zdWJQcm94eVtwcm9wXSwgZGVzY3JpcHRvcnMpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZVNjcmlwdGFibGUocHJvcCwgZ2V0VmFsdWUsIHRhcmdldCwgcmVjZWl2ZXIpIHtcbiAgICBjb25zdCB7IF9wcm94eSAsIF9jb250ZXh0ICwgX3N1YlByb3h5ICwgX3N0YWNrICB9ID0gdGFyZ2V0O1xuICAgIGlmIChfc3RhY2suaGFzKHByb3ApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVjdXJzaW9uIGRldGVjdGVkOiAnICsgQXJyYXkuZnJvbShfc3RhY2spLmpvaW4oJy0+JykgKyAnLT4nICsgcHJvcCk7XG4gICAgfVxuICAgIF9zdGFjay5hZGQocHJvcCk7XG4gICAgbGV0IHZhbHVlID0gZ2V0VmFsdWUoX2NvbnRleHQsIF9zdWJQcm94eSB8fCByZWNlaXZlcik7XG4gICAgX3N0YWNrLmRlbGV0ZShwcm9wKTtcbiAgICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICAgICAgLy8gV2hlbiBzY3JpcHRhYmxlIG9wdGlvbiByZXR1cm5zIGFuIG9iamVjdCwgY3JlYXRlIGEgcmVzb2x2ZXIgb24gdGhhdC5cbiAgICAgICAgdmFsdWUgPSBjcmVhdGVTdWJSZXNvbHZlcihfcHJveHkuX3Njb3BlcywgX3Byb3h5LCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgaXNJbmRleGFibGUpIHtcbiAgICBjb25zdCB7IF9wcm94eSAsIF9jb250ZXh0ICwgX3N1YlByb3h5ICwgX2Rlc2NyaXB0b3JzOiBkZXNjcmlwdG9ycyAgfSA9IHRhcmdldDtcbiAgICBpZiAodHlwZW9mIF9jb250ZXh0LmluZGV4ICE9PSAndW5kZWZpbmVkJyAmJiBpc0luZGV4YWJsZShwcm9wKSkge1xuICAgICAgICByZXR1cm4gdmFsdWVbX2NvbnRleHQuaW5kZXggJSB2YWx1ZS5sZW5ndGhdO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWVbMF0pKSB7XG4gICAgICAgIC8vIEFycmF5IG9mIG9iamVjdHMsIHJldHVybiBhcnJheSBvciByZXNvbHZlcnNcbiAgICAgICAgY29uc3QgYXJyID0gdmFsdWU7XG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IF9wcm94eS5fc2NvcGVzLmZpbHRlcigocyk9PnMgIT09IGFycik7XG4gICAgICAgIHZhbHVlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBhcnIpe1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBjcmVhdGVTdWJSZXNvbHZlcihzY29wZXMsIF9wcm94eSwgcHJvcCwgaXRlbSk7XG4gICAgICAgICAgICB2YWx1ZS5wdXNoKF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBfY29udGV4dCwgX3N1YlByb3h5ICYmIF9zdWJQcm94eVtwcm9wXSwgZGVzY3JpcHRvcnMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiByZXNvbHZlRmFsbGJhY2soZmFsbGJhY2ssIHByb3AsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oZmFsbGJhY2spID8gZmFsbGJhY2socHJvcCwgdmFsdWUpIDogZmFsbGJhY2s7XG59XG5jb25zdCBnZXRTY29wZSA9IChrZXksIHBhcmVudCk9PmtleSA9PT0gdHJ1ZSA/IHBhcmVudCA6IHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnID8gcmVzb2x2ZU9iamVjdEtleShwYXJlbnQsIGtleSkgOiB1bmRlZmluZWQ7XG5mdW5jdGlvbiBhZGRTY29wZXMoc2V0LCBwYXJlbnRTY29wZXMsIGtleSwgcGFyZW50RmFsbGJhY2ssIHZhbHVlKSB7XG4gICAgZm9yIChjb25zdCBwYXJlbnQgb2YgcGFyZW50U2NvcGVzKXtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSBnZXRTY29wZShrZXksIHBhcmVudCk7XG4gICAgICAgIGlmIChzY29wZSkge1xuICAgICAgICAgICAgc2V0LmFkZChzY29wZSk7XG4gICAgICAgICAgICBjb25zdCBmYWxsYmFjayA9IHJlc29sdmVGYWxsYmFjayhzY29wZS5fZmFsbGJhY2ssIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcgJiYgZmFsbGJhY2sgIT09IGtleSAmJiBmYWxsYmFjayAhPT0gcGFyZW50RmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIHdlIHJlYWNoIHRoZSBkZXNjcmlwdG9yIHRoYXQgZGVmaW5lcyBhIG5ldyBfZmFsbGJhY2ssIHJldHVybiB0aGF0LlxuICAgICAgICAgICAgICAgIC8vIFRoZSBmYWxsYmFjayB3aWxsIHJlc3VtZSB0byB0aGF0IG5ldyBzY29wZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2NvcGUgPT09IGZhbHNlICYmIHR5cGVvZiBwYXJlbnRGYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcgJiYga2V5ICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2sgdG8gYGZhbHNlYCByZXN1bHRzIHRvIGBmYWxzZWAsIHdoZW4gZmFsbGluZyBiYWNrIHRvIGRpZmZlcmVudCBrZXkuXG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSBgaW50ZXJhY3Rpb25gIGZyb20gYGhvdmVyYCBvciBgcGx1Z2lucy50b29sdGlwYCBhbmQgYGFuaW1hdGlvbmAgZnJvbSBgYW5pbWF0aW9uc2BcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN1YlJlc29sdmVyKHBhcmVudFNjb3BlcywgcmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gICAgY29uc3Qgcm9vdFNjb3BlcyA9IHJlc29sdmVyLl9yb290U2NvcGVzO1xuICAgIGNvbnN0IGZhbGxiYWNrID0gcmVzb2x2ZUZhbGxiYWNrKHJlc29sdmVyLl9mYWxsYmFjaywgcHJvcCwgdmFsdWUpO1xuICAgIGNvbnN0IGFsbFNjb3BlcyA9IFtcbiAgICAgICAgLi4ucGFyZW50U2NvcGVzLFxuICAgICAgICAuLi5yb290U2NvcGVzXG4gICAgXTtcbiAgICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gICAgc2V0LmFkZCh2YWx1ZSk7XG4gICAgbGV0IGtleSA9IGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIHByb3AsIGZhbGxiYWNrIHx8IHByb3AsIHZhbHVlKTtcbiAgICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcgJiYgZmFsbGJhY2sgIT09IHByb3ApIHtcbiAgICAgICAga2V5ID0gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3BlcywgZmFsbGJhY2ssIGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVSZXNvbHZlcihBcnJheS5mcm9tKHNldCksIFtcbiAgICAgICAgJydcbiAgICBdLCByb290U2NvcGVzLCBmYWxsYmFjaywgKCk9PnN1YkdldFRhcmdldChyZXNvbHZlciwgcHJvcCwgdmFsdWUpKTtcbn1cbmZ1bmN0aW9uIGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIGtleSwgZmFsbGJhY2ssIGl0ZW0pIHtcbiAgICB3aGlsZShrZXkpe1xuICAgICAgICBrZXkgPSBhZGRTY29wZXMoc2V0LCBhbGxTY29wZXMsIGtleSwgZmFsbGJhY2ssIGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xufVxuZnVuY3Rpb24gc3ViR2V0VGFyZ2V0KHJlc29sdmVyLCBwcm9wLCB2YWx1ZSkge1xuICAgIGNvbnN0IHBhcmVudCA9IHJlc29sdmVyLl9nZXRUYXJnZXQoKTtcbiAgICBpZiAoIShwcm9wIGluIHBhcmVudCkpIHtcbiAgICAgICAgcGFyZW50W3Byb3BdID0ge307XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IHBhcmVudFtwcm9wXTtcbiAgICBpZiAoaXNBcnJheSh0YXJnZXQpICYmIGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAvLyBGb3IgYXJyYXkgb2Ygb2JqZWN0cywgdGhlIG9iamVjdCBpcyB1c2VkIHRvIHN0b3JlIHVwZGF0ZWQgdmFsdWVzXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldCB8fCB7fTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlV2l0aFByZWZpeGVzKHByb3AsIHByZWZpeGVzLCBzY29wZXMsIHByb3h5KSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGZvciAoY29uc3QgcHJlZml4IG9mIHByZWZpeGVzKXtcbiAgICAgICAgdmFsdWUgPSBfcmVzb2x2ZShyZWFkS2V5KHByZWZpeCwgcHJvcCksIHNjb3Blcyk7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkgPyBjcmVhdGVTdWJSZXNvbHZlcihzY29wZXMsIHByb3h5LCBwcm9wLCB2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIF9yZXNvbHZlKGtleSwgc2NvcGVzKSB7XG4gICAgZm9yIChjb25zdCBzY29wZSBvZiBzY29wZXMpe1xuICAgICAgICBpZiAoIXNjb3BlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHNjb3BlW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpIHtcbiAgICBsZXQga2V5cyA9IHRhcmdldC5fa2V5cztcbiAgICBpZiAoIWtleXMpIHtcbiAgICAgICAga2V5cyA9IHRhcmdldC5fa2V5cyA9IHJlc29sdmVLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQuX3Njb3Blcyk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzKHNjb3Blcykge1xuICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IHNjb3BlIG9mIHNjb3Blcyl7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNjb3BlKS5maWx0ZXIoKGspPT4hay5zdGFydHNXaXRoKCdfJykpKXtcbiAgICAgICAgICAgIHNldC5hZGQoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuZnJvbShzZXQpO1xufVxuZnVuY3Rpb24gX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHsgaVNjYWxlICB9ID0gbWV0YTtcbiAgICBjb25zdCB7IGtleSA9J3InICB9ID0gdGhpcy5fcGFyc2luZztcbiAgICBjb25zdCBwYXJzZWQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGluZGV4ID0gaSArIHN0YXJ0O1xuICAgICAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgIHI6IGlTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KGl0ZW0sIGtleSksIGluZGV4KVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xufVxuXG5jb25zdCBFUFNJTE9OID0gTnVtYmVyLkVQU0lMT04gfHwgMWUtMTQ7XG5jb25zdCBnZXRQb2ludCA9IChwb2ludHMsIGkpPT5pIDwgcG9pbnRzLmxlbmd0aCAmJiAhcG9pbnRzW2ldLnNraXAgJiYgcG9pbnRzW2ldO1xuY29uc3QgZ2V0VmFsdWVBeGlzID0gKGluZGV4QXhpcyk9PmluZGV4QXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xuZnVuY3Rpb24gc3BsaW5lQ3VydmUoZmlyc3RQb2ludCwgbWlkZGxlUG9pbnQsIGFmdGVyUG9pbnQsIHQpIHtcbiAgICAvLyBQcm9wcyB0byBSb2IgU3BlbmNlciBhdCBzY2FsZWQgaW5ub3ZhdGlvbiBmb3IgaGlzIHBvc3Qgb24gc3BsaW5pbmcgYmV0d2VlbiBwb2ludHNcbiAgICAvLyBodHRwOi8vc2NhbGVkaW5ub3ZhdGlvbi5jb20vYW5hbHl0aWNzL3NwbGluZXMvYWJvdXRTcGxpbmVzLmh0bWxcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIG11c3QgYWxzbyByZXNwZWN0IFwic2tpcHBlZFwiIHBvaW50c1xuICAgIGNvbnN0IHByZXZpb3VzID0gZmlyc3RQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBmaXJzdFBvaW50O1xuICAgIGNvbnN0IGN1cnJlbnQgPSBtaWRkbGVQb2ludDtcbiAgICBjb25zdCBuZXh0ID0gYWZ0ZXJQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBhZnRlclBvaW50O1xuICAgIGNvbnN0IGQwMSA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhjdXJyZW50LCBwcmV2aW91cyk7XG4gICAgY29uc3QgZDEyID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKG5leHQsIGN1cnJlbnQpO1xuICAgIGxldCBzMDEgPSBkMDEgLyAoZDAxICsgZDEyKTtcbiAgICBsZXQgczEyID0gZDEyIC8gKGQwMSArIGQxMik7XG4gICAgLy8gSWYgYWxsIHBvaW50cyBhcmUgdGhlIHNhbWUsIHMwMSAmIHMwMiB3aWxsIGJlIGluZlxuICAgIHMwMSA9IGlzTmFOKHMwMSkgPyAwIDogczAxO1xuICAgIHMxMiA9IGlzTmFOKHMxMikgPyAwIDogczEyO1xuICAgIGNvbnN0IGZhID0gdCAqIHMwMTsgLy8gc2NhbGluZyBmYWN0b3IgZm9yIHRyaWFuZ2xlIFRhXG4gICAgY29uc3QgZmIgPSB0ICogczEyO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByZXZpb3VzOiB7XG4gICAgICAgICAgICB4OiBjdXJyZW50LnggLSBmYSAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcbiAgICAgICAgICAgIHk6IGN1cnJlbnQueSAtIGZhICogKG5leHQueSAtIHByZXZpb3VzLnkpXG4gICAgICAgIH0sXG4gICAgICAgIG5leHQ6IHtcbiAgICAgICAgICAgIHg6IGN1cnJlbnQueCArIGZiICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuICAgICAgICAgICAgeTogY3VycmVudC55ICsgZmIgKiAobmV4dC55IC0gcHJldmlvdXMueSlcbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIEFkanVzdCB0YW5nZW50cyB0byBlbnN1cmUgbW9ub3RvbmljIHByb3BlcnRpZXNcbiAqLyBmdW5jdGlvbiBtb25vdG9uZUFkanVzdChwb2ludHMsIGRlbHRhSywgbUspIHtcbiAgICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICAgIGxldCBhbHBoYUssIGJldGFLLCB0YXVLLCBzcXVhcmVkTWFnbml0dWRlLCBwb2ludEN1cnJlbnQ7XG4gICAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW4gLSAxOyArK2kpe1xuICAgICAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgICAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgICAgIGlmICghcG9pbnRDdXJyZW50IHx8ICFwb2ludEFmdGVyKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxtb3N0RXF1YWxzKGRlbHRhS1tpXSwgMCwgRVBTSUxPTikpIHtcbiAgICAgICAgICAgIG1LW2ldID0gbUtbaSArIDFdID0gMDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGFscGhhSyA9IG1LW2ldIC8gZGVsdGFLW2ldO1xuICAgICAgICBiZXRhSyA9IG1LW2kgKyAxXSAvIGRlbHRhS1tpXTtcbiAgICAgICAgc3F1YXJlZE1hZ25pdHVkZSA9IE1hdGgucG93KGFscGhhSywgMikgKyBNYXRoLnBvdyhiZXRhSywgMik7XG4gICAgICAgIGlmIChzcXVhcmVkTWFnbml0dWRlIDw9IDkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRhdUsgPSAzIC8gTWF0aC5zcXJ0KHNxdWFyZWRNYWduaXR1ZGUpO1xuICAgICAgICBtS1tpXSA9IGFscGhhSyAqIHRhdUsgKiBkZWx0YUtbaV07XG4gICAgICAgIG1LW2kgKyAxXSA9IGJldGFLICogdGF1SyAqIGRlbHRhS1tpXTtcbiAgICB9XG59XG5mdW5jdGlvbiBtb25vdG9uZUNvbXB1dGUocG9pbnRzLCBtSywgaW5kZXhBeGlzID0gJ3gnKSB7XG4gICAgY29uc3QgdmFsdWVBeGlzID0gZ2V0VmFsdWVBeGlzKGluZGV4QXhpcyk7XG4gICAgY29uc3QgcG9pbnRzTGVuID0gcG9pbnRzLmxlbmd0aDtcbiAgICBsZXQgZGVsdGEsIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gICAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW47ICsraSl7XG4gICAgICAgIHBvaW50QmVmb3JlID0gcG9pbnRDdXJyZW50O1xuICAgICAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgICAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgICAgIGlmICghcG9pbnRDdXJyZW50KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpUGl4ZWwgPSBwb2ludEN1cnJlbnRbaW5kZXhBeGlzXTtcbiAgICAgICAgY29uc3QgdlBpeGVsID0gcG9pbnRDdXJyZW50W3ZhbHVlQXhpc107XG4gICAgICAgIGlmIChwb2ludEJlZm9yZSkge1xuICAgICAgICAgICAgZGVsdGEgPSAoaVBpeGVsIC0gcG9pbnRCZWZvcmVbaW5kZXhBeGlzXSkgLyAzO1xuICAgICAgICAgICAgcG9pbnRDdXJyZW50W2BjcDEke2luZGV4QXhpc31gXSA9IGlQaXhlbCAtIGRlbHRhO1xuICAgICAgICAgICAgcG9pbnRDdXJyZW50W2BjcDEke3ZhbHVlQXhpc31gXSA9IHZQaXhlbCAtIGRlbHRhICogbUtbaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvaW50QWZ0ZXIpIHtcbiAgICAgICAgICAgIGRlbHRhID0gKHBvaW50QWZ0ZXJbaW5kZXhBeGlzXSAtIGlQaXhlbCkgLyAzO1xuICAgICAgICAgICAgcG9pbnRDdXJyZW50W2BjcDIke2luZGV4QXhpc31gXSA9IGlQaXhlbCArIGRlbHRhO1xuICAgICAgICAgICAgcG9pbnRDdXJyZW50W2BjcDIke3ZhbHVlQXhpc31gXSA9IHZQaXhlbCArIGRlbHRhICogbUtbaV07XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY2FsY3VsYXRlcyBCw6l6aWVyIGNvbnRyb2wgcG9pbnRzIGluIGEgc2ltaWxhciB3YXkgdGhhbiB8c3BsaW5lQ3VydmV8LFxuICogYnV0IHByZXNlcnZlcyBtb25vdG9uaWNpdHkgb2YgdGhlIHByb3ZpZGVkIGRhdGEgYW5kIGVuc3VyZXMgbm8gbG9jYWwgZXh0cmVtdW1zIGFyZSBhZGRlZFxuICogYmV0d2VlbiB0aGUgZGF0YXNldCBkaXNjcmV0ZSBwb2ludHMgZHVlIHRvIHRoZSBpbnRlcnBvbGF0aW9uLlxuICogU2VlIDogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9ub3RvbmVfY3ViaWNfaW50ZXJwb2xhdGlvblxuICovIGZ1bmN0aW9uIHNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzLCBpbmRleEF4aXMgPSAneCcpIHtcbiAgICBjb25zdCB2YWx1ZUF4aXMgPSBnZXRWYWx1ZUF4aXMoaW5kZXhBeGlzKTtcbiAgICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IGRlbHRhSyA9IEFycmF5KHBvaW50c0xlbikuZmlsbCgwKTtcbiAgICBjb25zdCBtSyA9IEFycmF5KHBvaW50c0xlbik7XG4gICAgLy8gQ2FsY3VsYXRlIHNsb3BlcyAoZGVsdGFLKSBhbmQgaW5pdGlhbGl6ZSB0YW5nZW50cyAobUspXG4gICAgbGV0IGksIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gICAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICAgIGZvcihpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKXtcbiAgICAgICAgcG9pbnRCZWZvcmUgPSBwb2ludEN1cnJlbnQ7XG4gICAgICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICAgICAgaWYgKCFwb2ludEN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb2ludEFmdGVyKSB7XG4gICAgICAgICAgICBjb25zdCBzbG9wZURlbHRhID0gcG9pbnRBZnRlcltpbmRleEF4aXNdIC0gcG9pbnRDdXJyZW50W2luZGV4QXhpc107XG4gICAgICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiB0d28gcG9pbnRzIHRoYXQgYXBwZWFyIGF0IHRoZSBzYW1lIHggcGl4ZWwsIHNsb3BlRGVsdGFYIGlzIDBcbiAgICAgICAgICAgIGRlbHRhS1tpXSA9IHNsb3BlRGVsdGEgIT09IDAgPyAocG9pbnRBZnRlclt2YWx1ZUF4aXNdIC0gcG9pbnRDdXJyZW50W3ZhbHVlQXhpc10pIC8gc2xvcGVEZWx0YSA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgbUtbaV0gPSAhcG9pbnRCZWZvcmUgPyBkZWx0YUtbaV0gOiAhcG9pbnRBZnRlciA/IGRlbHRhS1tpIC0gMV0gOiBzaWduKGRlbHRhS1tpIC0gMV0pICE9PSBzaWduKGRlbHRhS1tpXSkgPyAwIDogKGRlbHRhS1tpIC0gMV0gKyBkZWx0YUtbaV0pIC8gMjtcbiAgICB9XG4gICAgbW9ub3RvbmVBZGp1c3QocG9pbnRzLCBkZWx0YUssIG1LKTtcbiAgICBtb25vdG9uZUNvbXB1dGUocG9pbnRzLCBtSywgaW5kZXhBeGlzKTtcbn1cbmZ1bmN0aW9uIGNhcENvbnRyb2xQb2ludChwdCwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4ocHQsIG1heCksIG1pbik7XG59XG5mdW5jdGlvbiBjYXBCZXppZXJQb2ludHMocG9pbnRzLCBhcmVhKSB7XG4gICAgbGV0IGksIGlsZW4sIHBvaW50LCBpbkFyZWEsIGluQXJlYVByZXY7XG4gICAgbGV0IGluQXJlYU5leHQgPSBfaXNQb2ludEluQXJlYShwb2ludHNbMF0sIGFyZWEpO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBpbkFyZWFQcmV2ID0gaW5BcmVhO1xuICAgICAgICBpbkFyZWEgPSBpbkFyZWFOZXh0O1xuICAgICAgICBpbkFyZWFOZXh0ID0gaSA8IGlsZW4gLSAxICYmIF9pc1BvaW50SW5BcmVhKHBvaW50c1tpICsgMV0sIGFyZWEpO1xuICAgICAgICBpZiAoIWluQXJlYSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgIGlmIChpbkFyZWFQcmV2KSB7XG4gICAgICAgICAgICBwb2ludC5jcDF4ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMXgsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG4gICAgICAgICAgICBwb2ludC5jcDF5ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMXksIGFyZWEudG9wLCBhcmVhLmJvdHRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluQXJlYU5leHQpIHtcbiAgICAgICAgICAgIHBvaW50LmNwMnggPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AyeCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcbiAgICAgICAgICAgIHBvaW50LmNwMnkgPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AyeSwgYXJlYS50b3AsIGFyZWEuYm90dG9tKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyhwb2ludHMsIG9wdGlvbnMsIGFyZWEsIGxvb3AsIGluZGV4QXhpcykge1xuICAgIGxldCBpLCBpbGVuLCBwb2ludCwgY29udHJvbFBvaW50cztcbiAgICAvLyBPbmx5IGNvbnNpZGVyIHBvaW50cyB0aGF0IGFyZSBkcmF3biBpbiBjYXNlIHRoZSBzcGFuR2FwcyBvcHRpb24gaXMgdXNlZFxuICAgIGlmIChvcHRpb25zLnNwYW5HYXBzKSB7XG4gICAgICAgIHBvaW50cyA9IHBvaW50cy5maWx0ZXIoKHB0KT0+IXB0LnNraXApO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgICAgIHNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzLCBpbmRleEF4aXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwcmV2ID0gbG9vcCA/IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0gOiBwb2ludHNbMF07XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb250cm9sUG9pbnRzID0gc3BsaW5lQ3VydmUocHJldiwgcG9pbnQsIHBvaW50c1tNYXRoLm1pbihpICsgMSwgaWxlbiAtIChsb29wID8gMCA6IDEpKSAlIGlsZW5dLCBvcHRpb25zLnRlbnNpb24pO1xuICAgICAgICAgICAgcG9pbnQuY3AxeCA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueDtcbiAgICAgICAgICAgIHBvaW50LmNwMXkgPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLnk7XG4gICAgICAgICAgICBwb2ludC5jcDJ4ID0gY29udHJvbFBvaW50cy5uZXh0Lng7XG4gICAgICAgICAgICBwb2ludC5jcDJ5ID0gY29udHJvbFBvaW50cy5uZXh0Lnk7XG4gICAgICAgICAgICBwcmV2ID0gcG9pbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuY2FwQmV6aWVyUG9pbnRzKSB7XG4gICAgICAgIGNhcEJlemllclBvaW50cyhwb2ludHMsIGFyZWEpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBOb3RlOiB0eXBlZGVmcyBhcmUgYXV0by1leHBvcnRlZCwgc28gdXNlIGEgbWFkZS11cCBgZG9tYCBuYW1lc3BhY2Ugd2hlcmVcbiAqIG5lY2Vzc2FyeSB0byBhdm9pZCBkdXBsaWNhdGVzIHdpdGggYGV4cG9ydCAqIGZyb20gJy4vaGVscGVyc2A7IHNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy80NjAxMVxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uL2NvcmUvY29yZS5jb250cm9sbGVyLmpzJykuZGVmYXVsdCB9IGRvbS5DaGFydFxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzJykuQ2hhcnRFdmVudCB9IENoYXJ0RXZlbnRcbiAqLyAvKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2lzRG9tU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9nZXRQYXJlbnROb2RlKGRvbU5vZGUpIHtcbiAgICBsZXQgcGFyZW50ID0gZG9tTm9kZS5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IFNoYWRvd1Jvb3RdJykge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuaG9zdDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcmVudDtcbn1cbi8qKlxuICogY29udmVydCBtYXgtd2lkdGgvbWF4LWhlaWdodCB2YWx1ZXMgdGhhdCBtYXkgYmUgcGVyY2VudGFnZXMgaW50byBhIG51bWJlclxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBwYXJzZU1heFN0eWxlKHN0eWxlVmFsdWUsIG5vZGUsIHBhcmVudFByb3BlcnR5KSB7XG4gICAgbGV0IHZhbHVlSW5QaXhlbHM7XG4gICAgaWYgKHR5cGVvZiBzdHlsZVZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YWx1ZUluUGl4ZWxzID0gcGFyc2VJbnQoc3R5bGVWYWx1ZSwgMTApO1xuICAgICAgICBpZiAoc3R5bGVWYWx1ZS5pbmRleE9mKCclJykgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBwZXJjZW50YWdlICogc2l6ZSBpbiBkaW1lbnNpb25cbiAgICAgICAgICAgIHZhbHVlSW5QaXhlbHMgPSB2YWx1ZUluUGl4ZWxzIC8gMTAwICogbm9kZS5wYXJlbnROb2RlW3BhcmVudFByb3BlcnR5XTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlSW5QaXhlbHMgPSBzdHlsZVZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVJblBpeGVscztcbn1cbmNvbnN0IGdldENvbXB1dGVkU3R5bGUgPSAoZWxlbWVudCk9PmVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuZnVuY3Rpb24gZ2V0U3R5bGUoZWwsIHByb3BlcnR5KSB7XG4gICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpO1xufVxuY29uc3QgcG9zaXRpb25zID0gW1xuICAgICd0b3AnLFxuICAgICdyaWdodCcsXG4gICAgJ2JvdHRvbScsXG4gICAgJ2xlZnQnXG5dO1xuZnVuY3Rpb24gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlcywgc3R5bGUsIHN1ZmZpeCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIHN1ZmZpeCA9IHN1ZmZpeCA/ICctJyArIHN1ZmZpeCA6ICcnO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCA0OyBpKyspe1xuICAgICAgICBjb25zdCBwb3MgPSBwb3NpdGlvbnNbaV07XG4gICAgICAgIHJlc3VsdFtwb3NdID0gcGFyc2VGbG9hdChzdHlsZXNbc3R5bGUgKyAnLScgKyBwb3MgKyBzdWZmaXhdKSB8fCAwO1xuICAgIH1cbiAgICByZXN1bHQud2lkdGggPSByZXN1bHQubGVmdCArIHJlc3VsdC5yaWdodDtcbiAgICByZXN1bHQuaGVpZ2h0ID0gcmVzdWx0LnRvcCArIHJlc3VsdC5ib3R0b207XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IHVzZU9mZnNldFBvcyA9ICh4LCB5LCB0YXJnZXQpPT4oeCA+IDAgfHwgeSA+IDApICYmICghdGFyZ2V0IHx8ICF0YXJnZXQuc2hhZG93Um9vdCk7XG4vKipcbiAqIEBwYXJhbSBlXG4gKiBAcGFyYW0gY2FudmFzXG4gKiBAcmV0dXJucyBDYW52YXMgcG9zaXRpb25cbiAqLyBmdW5jdGlvbiBnZXRDYW52YXNQb3NpdGlvbihlLCBjYW52YXMpIHtcbiAgICBjb25zdCB0b3VjaGVzID0gZS50b3VjaGVzO1xuICAgIGNvbnN0IHNvdXJjZSA9IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPyB0b3VjaGVzWzBdIDogZTtcbiAgICBjb25zdCB7IG9mZnNldFggLCBvZmZzZXRZICB9ID0gc291cmNlO1xuICAgIGxldCBib3ggPSBmYWxzZTtcbiAgICBsZXQgeCwgeTtcbiAgICBpZiAodXNlT2Zmc2V0UG9zKG9mZnNldFgsIG9mZnNldFksIGUudGFyZ2V0KSkge1xuICAgICAgICB4ID0gb2Zmc2V0WDtcbiAgICAgICAgeSA9IG9mZnNldFk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgeCA9IHNvdXJjZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgICAgICB5ID0gc291cmNlLmNsaWVudFkgLSByZWN0LnRvcDtcbiAgICAgICAgYm94ID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgYm94XG4gICAgfTtcbn1cbi8qKlxuICogR2V0cyBhbiBldmVudCdzIHgsIHkgY29vcmRpbmF0ZXMsIHJlbGF0aXZlIHRvIHRoZSBjaGFydCBhcmVhXG4gKiBAcGFyYW0gZXZlbnRcbiAqIEBwYXJhbSBjaGFydFxuICogQHJldHVybnMgeCBhbmQgeSBjb29yZGluYXRlcyBvZiB0aGUgZXZlbnRcbiAqLyBmdW5jdGlvbiBnZXRSZWxhdGl2ZVBvc2l0aW9uKGV2ZW50LCBjaGFydCkge1xuICAgIGlmICgnbmF0aXZlJyBpbiBldmVudCkge1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICAgIGNvbnN0IHsgY2FudmFzICwgY3VycmVudERldmljZVBpeGVsUmF0aW8gIH0gPSBjaGFydDtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY2FudmFzKTtcbiAgICBjb25zdCBib3JkZXJCb3ggPSBzdHlsZS5ib3hTaXppbmcgPT09ICdib3JkZXItYm94JztcbiAgICBjb25zdCBwYWRkaW5ncyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ3BhZGRpbmcnKTtcbiAgICBjb25zdCBib3JkZXJzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gICAgY29uc3QgeyB4ICwgeSAsIGJveCAgfSA9IGdldENhbnZhc1Bvc2l0aW9uKGV2ZW50LCBjYW52YXMpO1xuICAgIGNvbnN0IHhPZmZzZXQgPSBwYWRkaW5ncy5sZWZ0ICsgKGJveCAmJiBib3JkZXJzLmxlZnQpO1xuICAgIGNvbnN0IHlPZmZzZXQgPSBwYWRkaW5ncy50b3AgKyAoYm94ICYmIGJvcmRlcnMudG9wKTtcbiAgICBsZXQgeyB3aWR0aCAsIGhlaWdodCAgfSA9IGNoYXJ0O1xuICAgIGlmIChib3JkZXJCb3gpIHtcbiAgICAgICAgd2lkdGggLT0gcGFkZGluZ3Mud2lkdGggKyBib3JkZXJzLndpZHRoO1xuICAgICAgICBoZWlnaHQgLT0gcGFkZGluZ3MuaGVpZ2h0ICsgYm9yZGVycy5oZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IE1hdGgucm91bmQoKHggLSB4T2Zmc2V0KSAvIHdpZHRoICogY2FudmFzLndpZHRoIC8gY3VycmVudERldmljZVBpeGVsUmF0aW8pLFxuICAgICAgICB5OiBNYXRoLnJvdW5kKCh5IC0geU9mZnNldCkgLyBoZWlnaHQgKiBjYW52YXMuaGVpZ2h0IC8gY3VycmVudERldmljZVBpeGVsUmF0aW8pXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldENvbnRhaW5lclNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgbGV0IG1heFdpZHRoLCBtYXhIZWlnaHQ7XG4gICAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQgfHwgaGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgIHdpZHRoID0gY2FudmFzLmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIHRoaXMgaXMgdGhlIGJvcmRlciBib3ggb2YgdGhlIGNvbnRhaW5lclxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNvbnRhaW5lcik7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJCb3JkZXIgPSBnZXRQb3NpdGlvbmVkU3R5bGUoY29udGFpbmVyU3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lclBhZGRpbmcgPSBnZXRQb3NpdGlvbmVkU3R5bGUoY29udGFpbmVyU3R5bGUsICdwYWRkaW5nJyk7XG4gICAgICAgICAgICB3aWR0aCA9IHJlY3Qud2lkdGggLSBjb250YWluZXJQYWRkaW5nLndpZHRoIC0gY29udGFpbmVyQm9yZGVyLndpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gcmVjdC5oZWlnaHQgLSBjb250YWluZXJQYWRkaW5nLmhlaWdodCAtIGNvbnRhaW5lckJvcmRlci5oZWlnaHQ7XG4gICAgICAgICAgICBtYXhXaWR0aCA9IHBhcnNlTWF4U3R5bGUoY29udGFpbmVyU3R5bGUubWF4V2lkdGgsIGNvbnRhaW5lciwgJ2NsaWVudFdpZHRoJyk7XG4gICAgICAgICAgICBtYXhIZWlnaHQgPSBwYXJzZU1heFN0eWxlKGNvbnRhaW5lclN0eWxlLm1heEhlaWdodCwgY29udGFpbmVyLCAnY2xpZW50SGVpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgbWF4V2lkdGg6IG1heFdpZHRoIHx8IElORklOSVRZLFxuICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodCB8fCBJTkZJTklUWVxuICAgIH07XG59XG5jb25zdCByb3VuZDEgPSAodik9Pk1hdGgucm91bmQodiAqIDEwKSAvIDEwO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIGdldE1heGltdW1TaXplKGNhbnZhcywgYmJXaWR0aCwgYmJIZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNhbnZhcyk7XG4gICAgY29uc3QgbWFyZ2lucyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ21hcmdpbicpO1xuICAgIGNvbnN0IG1heFdpZHRoID0gcGFyc2VNYXhTdHlsZShzdHlsZS5tYXhXaWR0aCwgY2FudmFzLCAnY2xpZW50V2lkdGgnKSB8fCBJTkZJTklUWTtcbiAgICBjb25zdCBtYXhIZWlnaHQgPSBwYXJzZU1heFN0eWxlKHN0eWxlLm1heEhlaWdodCwgY2FudmFzLCAnY2xpZW50SGVpZ2h0JykgfHwgSU5GSU5JVFk7XG4gICAgY29uc3QgY29udGFpbmVyU2l6ZSA9IGdldENvbnRhaW5lclNpemUoY2FudmFzLCBiYldpZHRoLCBiYkhlaWdodCk7XG4gICAgbGV0IHsgd2lkdGggLCBoZWlnaHQgIH0gPSBjb250YWluZXJTaXplO1xuICAgIGlmIChzdHlsZS5ib3hTaXppbmcgPT09ICdjb250ZW50LWJveCcpIHtcbiAgICAgICAgY29uc3QgYm9yZGVycyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5ncyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ3BhZGRpbmcnKTtcbiAgICAgICAgd2lkdGggLT0gcGFkZGluZ3Mud2lkdGggKyBib3JkZXJzLndpZHRoO1xuICAgICAgICBoZWlnaHQgLT0gcGFkZGluZ3MuaGVpZ2h0ICsgYm9yZGVycy5oZWlnaHQ7XG4gICAgfVxuICAgIHdpZHRoID0gTWF0aC5tYXgoMCwgd2lkdGggLSBtYXJnaW5zLndpZHRoKTtcbiAgICBoZWlnaHQgPSBNYXRoLm1heCgwLCBhc3BlY3RSYXRpbyA/IHdpZHRoIC8gYXNwZWN0UmF0aW8gOiBoZWlnaHQgLSBtYXJnaW5zLmhlaWdodCk7XG4gICAgd2lkdGggPSByb3VuZDEoTWF0aC5taW4od2lkdGgsIG1heFdpZHRoLCBjb250YWluZXJTaXplLm1heFdpZHRoKSk7XG4gICAgaGVpZ2h0ID0gcm91bmQxKE1hdGgubWluKGhlaWdodCwgbWF4SGVpZ2h0LCBjb250YWluZXJTaXplLm1heEhlaWdodCkpO1xuICAgIGlmICh3aWR0aCAmJiAhaGVpZ2h0KSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy80NjU5XG4gICAgICAgIC8vIElmIHRoZSBjYW52YXMgaGFzIHdpZHRoLCBidXQgbm8gaGVpZ2h0LCBkZWZhdWx0IHRvIGFzcGVjdFJhdGlvIG9mIDIgKGNhbnZhcyBkZWZhdWx0KVxuICAgICAgICBoZWlnaHQgPSByb3VuZDEod2lkdGggLyAyKTtcbiAgICB9XG4gICAgY29uc3QgbWFpbnRhaW5IZWlnaHQgPSBiYldpZHRoICE9PSB1bmRlZmluZWQgfHwgYmJIZWlnaHQgIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFpbnRhaW5IZWlnaHQgJiYgYXNwZWN0UmF0aW8gJiYgY29udGFpbmVyU2l6ZS5oZWlnaHQgJiYgaGVpZ2h0ID4gY29udGFpbmVyU2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgaGVpZ2h0ID0gY29udGFpbmVyU2l6ZS5oZWlnaHQ7XG4gICAgICAgIHdpZHRoID0gcm91bmQxKE1hdGguZmxvb3IoaGVpZ2h0ICogYXNwZWN0UmF0aW8pKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgIH07XG59XG4vKipcbiAqIEBwYXJhbSBjaGFydFxuICogQHBhcmFtIGZvcmNlUmF0aW9cbiAqIEBwYXJhbSBmb3JjZVN0eWxlXG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBjYW52YXMgY29udGV4dCBzaXplIG9yIHRyYW5zZm9ybWF0aW9uIGhhcyBjaGFuZ2VkLlxuICovIGZ1bmN0aW9uIHJldGluYVNjYWxlKGNoYXJ0LCBmb3JjZVJhdGlvLCBmb3JjZVN0eWxlKSB7XG4gICAgY29uc3QgcGl4ZWxSYXRpbyA9IGZvcmNlUmF0aW8gfHwgMTtcbiAgICBjb25zdCBkZXZpY2VIZWlnaHQgPSBNYXRoLmZsb29yKGNoYXJ0LmhlaWdodCAqIHBpeGVsUmF0aW8pO1xuICAgIGNvbnN0IGRldmljZVdpZHRoID0gTWF0aC5mbG9vcihjaGFydC53aWR0aCAqIHBpeGVsUmF0aW8pO1xuICAgIGNoYXJ0LmhlaWdodCA9IE1hdGguZmxvb3IoY2hhcnQuaGVpZ2h0KTtcbiAgICBjaGFydC53aWR0aCA9IE1hdGguZmxvb3IoY2hhcnQud2lkdGgpO1xuICAgIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgICAvLyBJZiBubyBzdHlsZSBoYXMgYmVlbiBzZXQgb24gdGhlIGNhbnZhcywgdGhlIHJlbmRlciBzaXplIGlzIHVzZWQgYXMgZGlzcGxheSBzaXplLFxuICAgIC8vIG1ha2luZyB0aGUgY2hhcnQgdmlzdWFsbHkgYmlnZ2VyLCBzbyBsZXQncyBlbmZvcmNlIGl0IHRvIHRoZSBcImNvcnJlY3RcIiB2YWx1ZXMuXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8zNTc1XG4gICAgaWYgKGNhbnZhcy5zdHlsZSAmJiAoZm9yY2VTdHlsZSB8fCAhY2FudmFzLnN0eWxlLmhlaWdodCAmJiAhY2FudmFzLnN0eWxlLndpZHRoKSkge1xuICAgICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gYCR7Y2hhcnQuaGVpZ2h0fXB4YDtcbiAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gYCR7Y2hhcnQud2lkdGh9cHhgO1xuICAgIH1cbiAgICBpZiAoY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gIT09IHBpeGVsUmF0aW8gfHwgY2FudmFzLmhlaWdodCAhPT0gZGV2aWNlSGVpZ2h0IHx8IGNhbnZhcy53aWR0aCAhPT0gZGV2aWNlV2lkdGgpIHtcbiAgICAgICAgY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gZGV2aWNlSGVpZ2h0O1xuICAgICAgICBjYW52YXMud2lkdGggPSBkZXZpY2VXaWR0aDtcbiAgICAgICAgY2hhcnQuY3R4LnNldFRyYW5zZm9ybShwaXhlbFJhdGlvLCAwLCAwLCBwaXhlbFJhdGlvLCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogRGV0ZWN0cyBzdXBwb3J0IGZvciBvcHRpb25zIG9iamVjdCBhcmd1bWVudCBpbiBhZGRFdmVudExpc3RlbmVyLlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L2FkZEV2ZW50TGlzdGVuZXIjU2FmZWx5X2RldGVjdGluZ19vcHRpb25fc3VwcG9ydFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHBhc3NpdmVTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgZ2V0IHBhc3NpdmUgKCkge1xuICAgICAgICAgICAgICAgIHBhc3NpdmVTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRpb25zKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRpb25zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgLy8gY29udGludWUgcmVnYXJkbGVzcyBvZiBlcnJvclxuICAgIH1cbiAgICByZXR1cm4gcGFzc2l2ZVN1cHBvcnRlZDtcbn0oKTtcbi8qKlxuICogVGhlIFwidXNlZFwiIHNpemUgaXMgdGhlIGZpbmFsIHZhbHVlIG9mIGEgZGltZW5zaW9uIHByb3BlcnR5IGFmdGVyIGFsbCBjYWxjdWxhdGlvbnMgaGF2ZVxuICogYmVlbiBwZXJmb3JtZWQuIFRoaXMgbWV0aG9kIHVzZXMgdGhlIGNvbXB1dGVkIHN0eWxlIG9mIGBlbGVtZW50YCBidXQgcmV0dXJucyB1bmRlZmluZWRcbiAqIGlmIHRoZSBjb21wdXRlZCBzdHlsZSBpcyBub3QgZXhwcmVzc2VkIGluIHBpeGVscy4gVGhhdCBjYW4gaGFwcGVuIGluIHNvbWUgY2FzZXMgd2hlcmVcbiAqIGBlbGVtZW50YCBoYXMgYSBzaXplIHJlbGF0aXZlIHRvIGl0cyBwYXJlbnQgYW5kIHRoaXMgbGFzdCBvbmUgaXMgbm90IHlldCBkaXNwbGF5ZWQsXG4gKiBmb3IgZXhhbXBsZSBiZWNhdXNlIG9mIGBkaXNwbGF5OiBub25lYCBvbiBhIHBhcmVudCBub2RlLlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdXNlZF92YWx1ZVxuICogQHJldHVybnMgU2l6ZSBpbiBwaXhlbHMgb3IgdW5kZWZpbmVkIGlmIHVua25vd24uXG4gKi8gZnVuY3Rpb24gcmVhZFVzZWRTaXplKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gICAgY29uc3QgdmFsdWUgPSBnZXRTdHlsZShlbGVtZW50LCBwcm9wZXJ0eSk7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKC9eKFxcZCspKFxcLlxcZCspP3B4JC8pO1xuICAgIHJldHVybiBtYXRjaGVzID8gK21hdGNoZXNbMV0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfcG9pbnRJbkxpbmUocDEsIHAyLCB0LCBtb2RlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcDEueCArIHQgKiAocDIueCAtIHAxLngpLFxuICAgICAgICB5OiBwMS55ICsgdCAqIChwMi55IC0gcDEueSlcbiAgICB9O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9zdGVwcGVkSW50ZXJwb2xhdGlvbihwMSwgcDIsIHQsIG1vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBwMS54ICsgdCAqIChwMi54IC0gcDEueCksXG4gICAgICAgIHk6IG1vZGUgPT09ICdtaWRkbGUnID8gdCA8IDAuNSA/IHAxLnkgOiBwMi55IDogbW9kZSA9PT0gJ2FmdGVyJyA/IHQgPCAxID8gcDEueSA6IHAyLnkgOiB0ID4gMCA/IHAyLnkgOiBwMS55XG4gICAgfTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYmV6aWVySW50ZXJwb2xhdGlvbihwMSwgcDIsIHQsIG1vZGUpIHtcbiAgICBjb25zdCBjcDEgPSB7XG4gICAgICAgIHg6IHAxLmNwMngsXG4gICAgICAgIHk6IHAxLmNwMnlcbiAgICB9O1xuICAgIGNvbnN0IGNwMiA9IHtcbiAgICAgICAgeDogcDIuY3AxeCxcbiAgICAgICAgeTogcDIuY3AxeVxuICAgIH07XG4gICAgY29uc3QgYSA9IF9wb2ludEluTGluZShwMSwgY3AxLCB0KTtcbiAgICBjb25zdCBiID0gX3BvaW50SW5MaW5lKGNwMSwgY3AyLCB0KTtcbiAgICBjb25zdCBjID0gX3BvaW50SW5MaW5lKGNwMiwgcDIsIHQpO1xuICAgIGNvbnN0IGQgPSBfcG9pbnRJbkxpbmUoYSwgYiwgdCk7XG4gICAgY29uc3QgZSA9IF9wb2ludEluTGluZShiLCBjLCB0KTtcbiAgICByZXR1cm4gX3BvaW50SW5MaW5lKGQsIGUsIHQpO1xufVxuXG5jb25zdCBnZXRSaWdodFRvTGVmdEFkYXB0ZXIgPSBmdW5jdGlvbihyZWN0WCwgd2lkdGgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4ICh4KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjdFggKyByZWN0WCArIHdpZHRoIC0geDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0V2lkdGggKHcpIHtcbiAgICAgICAgICAgIHdpZHRoID0gdztcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dEFsaWduIChhbGlnbikge1xuICAgICAgICAgICAgaWYgKGFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbGlnbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhbGlnbiA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgIH0sXG4gICAgICAgIHhQbHVzICh4LCB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHggLSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgbGVmdEZvckx0ciAoeCwgaXRlbVdpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4geCAtIGl0ZW1XaWR0aDtcbiAgICAgICAgfVxuICAgIH07XG59O1xuY29uc3QgZ2V0TGVmdFRvUmlnaHRBZGFwdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeCAoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFdpZHRoICh3KSB7fSxcbiAgICAgICAgdGV4dEFsaWduIChhbGlnbikge1xuICAgICAgICAgICAgcmV0dXJuIGFsaWduO1xuICAgICAgICB9LFxuICAgICAgICB4UGx1cyAoeCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB4ICsgdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGxlZnRGb3JMdHIgKHgsIF9pdGVtV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9XG4gICAgfTtcbn07XG5mdW5jdGlvbiBnZXRSdGxBZGFwdGVyKHJ0bCwgcmVjdFgsIHdpZHRoKSB7XG4gICAgcmV0dXJuIHJ0bCA/IGdldFJpZ2h0VG9MZWZ0QWRhcHRlcihyZWN0WCwgd2lkdGgpIDogZ2V0TGVmdFRvUmlnaHRBZGFwdGVyKCk7XG59XG5mdW5jdGlvbiBvdmVycmlkZVRleHREaXJlY3Rpb24oY3R4LCBkaXJlY3Rpb24pIHtcbiAgICBsZXQgc3R5bGUsIG9yaWdpbmFsO1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICdsdHInIHx8IGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgc3R5bGUgPSBjdHguY2FudmFzLnN0eWxlO1xuICAgICAgICBvcmlnaW5hbCA9IFtcbiAgICAgICAgICAgIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2RpcmVjdGlvbicpLFxuICAgICAgICAgICAgc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eSgnZGlyZWN0aW9uJylcbiAgICAgICAgXTtcbiAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoJ2RpcmVjdGlvbicsIGRpcmVjdGlvbiwgJ2ltcG9ydGFudCcpO1xuICAgICAgICBjdHgucHJldlRleHREaXJlY3Rpb24gPSBvcmlnaW5hbDtcbiAgICB9XG59XG5mdW5jdGlvbiByZXN0b3JlVGV4dERpcmVjdGlvbihjdHgsIG9yaWdpbmFsKSB7XG4gICAgaWYgKG9yaWdpbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVsZXRlIGN0eC5wcmV2VGV4dERpcmVjdGlvbjtcbiAgICAgICAgY3R4LmNhbnZhcy5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlyZWN0aW9uJywgb3JpZ2luYWxbMF0sIG9yaWdpbmFsWzFdKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Rm4ocHJvcGVydHkpIHtcbiAgICBpZiAocHJvcGVydHkgPT09ICdhbmdsZScpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJldHdlZW46IF9hbmdsZUJldHdlZW4sXG4gICAgICAgICAgICBjb21wYXJlOiBfYW5nbGVEaWZmLFxuICAgICAgICAgICAgbm9ybWFsaXplOiBfbm9ybWFsaXplQW5nbGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmV0d2VlbjogX2lzQmV0d2VlbixcbiAgICAgICAgY29tcGFyZTogKGEsIGIpPT5hIC0gYixcbiAgICAgICAgbm9ybWFsaXplOiAoeCk9PnhcbiAgICB9O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplU2VnbWVudCh7IHN0YXJ0ICwgZW5kICwgY291bnQgLCBsb29wICwgc3R5bGUgIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogc3RhcnQgJSBjb3VudCxcbiAgICAgICAgZW5kOiBlbmQgJSBjb3VudCxcbiAgICAgICAgbG9vcDogbG9vcCAmJiAoZW5kIC0gc3RhcnQgKyAxKSAlIGNvdW50ID09PSAwLFxuICAgICAgICBzdHlsZVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSAsIHN0YXJ0OiBzdGFydEJvdW5kICwgZW5kOiBlbmRCb3VuZCAgfSA9IGJvdW5kcztcbiAgICBjb25zdCB7IGJldHdlZW4gLCBub3JtYWxpemUgIH0gPSBwcm9wZXJ0eUZuKHByb3BlcnR5KTtcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IHsgc3RhcnQgLCBlbmQgLCBsb29wICB9ID0gc2VnbWVudDtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBpZiAobG9vcCkge1xuICAgICAgICBzdGFydCArPSBjb3VudDtcbiAgICAgICAgZW5kICs9IGNvdW50O1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpZiAoIWJldHdlZW4obm9ybWFsaXplKHBvaW50c1tzdGFydCAlIGNvdW50XVtwcm9wZXJ0eV0pLCBzdGFydEJvdW5kLCBlbmRCb3VuZCkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXJ0LS07XG4gICAgICAgICAgICBlbmQtLTtcbiAgICAgICAgfVxuICAgICAgICBzdGFydCAlPSBjb3VudDtcbiAgICAgICAgZW5kICU9IGNvdW50O1xuICAgIH1cbiAgICBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICAgICAgZW5kICs9IGNvdW50O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICAgICAgZW5kLFxuICAgICAgICBsb29wLFxuICAgICAgICBzdHlsZTogc2VnbWVudC5zdHlsZVxuICAgIH07XG59XG4gZnVuY3Rpb24gX2JvdW5kU2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcykge1xuICAgIGlmICghYm91bmRzKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBzZWdtZW50XG4gICAgICAgIF07XG4gICAgfVxuICAgIGNvbnN0IHsgcHJvcGVydHkgLCBzdGFydDogc3RhcnRCb3VuZCAsIGVuZDogZW5kQm91bmQgIH0gPSBib3VuZHM7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHsgY29tcGFyZSAsIGJldHdlZW4gLCBub3JtYWxpemUgIH0gPSBwcm9wZXJ0eUZuKHByb3BlcnR5KTtcbiAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICwgbG9vcCAsIHN0eWxlICB9ID0gZ2V0U2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcyk7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGluc2lkZSA9IGZhbHNlO1xuICAgIGxldCBzdWJTdGFydCA9IG51bGw7XG4gICAgbGV0IHZhbHVlLCBwb2ludCwgcHJldlZhbHVlO1xuICAgIGNvbnN0IHN0YXJ0SXNCZWZvcmUgPSAoKT0+YmV0d2VlbihzdGFydEJvdW5kLCBwcmV2VmFsdWUsIHZhbHVlKSAmJiBjb21wYXJlKHN0YXJ0Qm91bmQsIHByZXZWYWx1ZSkgIT09IDA7XG4gICAgY29uc3QgZW5kSXNCZWZvcmUgPSAoKT0+Y29tcGFyZShlbmRCb3VuZCwgdmFsdWUpID09PSAwIHx8IGJldHdlZW4oZW5kQm91bmQsIHByZXZWYWx1ZSwgdmFsdWUpO1xuICAgIGNvbnN0IHNob3VsZFN0YXJ0ID0gKCk9Pmluc2lkZSB8fCBzdGFydElzQmVmb3JlKCk7XG4gICAgY29uc3Qgc2hvdWxkU3RvcCA9ICgpPT4haW5zaWRlIHx8IGVuZElzQmVmb3JlKCk7XG4gICAgZm9yKGxldCBpID0gc3RhcnQsIHByZXYgPSBzdGFydDsgaSA8PSBlbmQ7ICsraSl7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzW2kgJSBjb3VudF07XG4gICAgICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IG5vcm1hbGl6ZShwb2ludFtwcm9wZXJ0eV0pO1xuICAgICAgICBpZiAodmFsdWUgPT09IHByZXZWYWx1ZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5zaWRlID0gYmV0d2Vlbih2YWx1ZSwgc3RhcnRCb3VuZCwgZW5kQm91bmQpO1xuICAgICAgICBpZiAoc3ViU3RhcnQgPT09IG51bGwgJiYgc2hvdWxkU3RhcnQoKSkge1xuICAgICAgICAgICAgc3ViU3RhcnQgPSBjb21wYXJlKHZhbHVlLCBzdGFydEJvdW5kKSA9PT0gMCA/IGkgOiBwcmV2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdWJTdGFydCAhPT0gbnVsbCAmJiBzaG91bGRTdG9wKCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5vcm1hbGl6ZVNlZ21lbnQoe1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBzdWJTdGFydCxcbiAgICAgICAgICAgICAgICBlbmQ6IGksXG4gICAgICAgICAgICAgICAgbG9vcCxcbiAgICAgICAgICAgICAgICBjb3VudCxcbiAgICAgICAgICAgICAgICBzdHlsZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgc3ViU3RhcnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHByZXYgPSBpO1xuICAgICAgICBwcmV2VmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHN1YlN0YXJ0ICE9PSBudWxsKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG5vcm1hbGl6ZVNlZ21lbnQoe1xuICAgICAgICAgICAgc3RhcnQ6IHN1YlN0YXJ0LFxuICAgICAgICAgICAgZW5kLFxuICAgICAgICAgICAgbG9vcCxcbiAgICAgICAgICAgIGNvdW50LFxuICAgICAgICAgICAgc3R5bGVcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIF9ib3VuZFNlZ21lbnRzKGxpbmUsIGJvdW5kcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBzdWIgPSBfYm91bmRTZWdtZW50KHNlZ21lbnRzW2ldLCBsaW5lLnBvaW50cywgYm91bmRzKTtcbiAgICAgICAgaWYgKHN1Yi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKC4uLnN1Yik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiBmdW5jdGlvbiBmaW5kU3RhcnRBbmRFbmQocG9pbnRzLCBjb3VudCwgbG9vcCwgc3BhbkdhcHMpIHtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBlbmQgPSBjb3VudCAtIDE7XG4gICAgaWYgKGxvb3AgJiYgIXNwYW5HYXBzKSB7XG4gICAgICAgIHdoaWxlKHN0YXJ0IDwgY291bnQgJiYgIXBvaW50c1tzdGFydF0uc2tpcCl7XG4gICAgICAgICAgICBzdGFydCsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdoaWxlKHN0YXJ0IDwgY291bnQgJiYgcG9pbnRzW3N0YXJ0XS5za2lwKXtcbiAgICAgICAgc3RhcnQrKztcbiAgICB9XG4gICAgc3RhcnQgJT0gY291bnQ7XG4gICAgaWYgKGxvb3ApIHtcbiAgICAgICAgZW5kICs9IHN0YXJ0O1xuICAgIH1cbiAgICB3aGlsZShlbmQgPiBzdGFydCAmJiBwb2ludHNbZW5kICUgY291bnRdLnNraXApe1xuICAgICAgICBlbmQtLTtcbiAgICB9XG4gICAgZW5kICU9IGNvdW50O1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmRcbiAgICB9O1xufVxuIGZ1bmN0aW9uIHNvbGlkU2VnbWVudHMocG9pbnRzLCBzdGFydCwgbWF4LCBsb29wKSB7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBsYXN0ID0gc3RhcnQ7XG4gICAgbGV0IHByZXYgPSBwb2ludHNbc3RhcnRdO1xuICAgIGxldCBlbmQ7XG4gICAgZm9yKGVuZCA9IHN0YXJ0ICsgMTsgZW5kIDw9IG1heDsgKytlbmQpe1xuICAgICAgICBjb25zdCBjdXIgPSBwb2ludHNbZW5kICUgY291bnRdO1xuICAgICAgICBpZiAoY3VyLnNraXAgfHwgY3VyLnN0b3ApIHtcbiAgICAgICAgICAgIGlmICghcHJldi5za2lwKSB7XG4gICAgICAgICAgICAgICAgbG9vcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0ICUgY291bnQsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogKGVuZCAtIDEpICUgY291bnQsXG4gICAgICAgICAgICAgICAgICAgIGxvb3BcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzdGFydCA9IGxhc3QgPSBjdXIuc3RvcCA/IGVuZCA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYXN0ID0gZW5kO1xuICAgICAgICAgICAgaWYgKHByZXYuc2tpcCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByZXYgPSBjdXI7XG4gICAgfVxuICAgIGlmIChsYXN0ICE9PSBudWxsKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIHN0YXJ0OiBzdGFydCAlIGNvdW50LFxuICAgICAgICAgICAgZW5kOiBsYXN0ICUgY291bnQsXG4gICAgICAgICAgICBsb29wXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIF9jb21wdXRlU2VnbWVudHMobGluZSwgc2VnbWVudE9wdGlvbnMpIHtcbiAgICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCBzcGFuR2FwcyA9IGxpbmUub3B0aW9ucy5zcGFuR2FwcztcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgaWYgKCFjb3VudCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IGxvb3AgPSAhIWxpbmUuX2xvb3A7XG4gICAgY29uc3QgeyBzdGFydCAsIGVuZCAgfSA9IGZpbmRTdGFydEFuZEVuZChwb2ludHMsIGNvdW50LCBsb29wLCBzcGFuR2Fwcyk7XG4gICAgaWYgKHNwYW5HYXBzID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBzcGxpdEJ5U3R5bGVzKGxpbmUsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICAgICAgbG9vcFxuICAgICAgICAgICAgfVxuICAgICAgICBdLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbiAgICB9XG4gICAgY29uc3QgbWF4ID0gZW5kIDwgc3RhcnQgPyBlbmQgKyBjb3VudCA6IGVuZDtcbiAgICBjb25zdCBjb21wbGV0ZUxvb3AgPSAhIWxpbmUuX2Z1bGxMb29wICYmIHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gY291bnQgLSAxO1xuICAgIHJldHVybiBzcGxpdEJ5U3R5bGVzKGxpbmUsIHNvbGlkU2VnbWVudHMocG9pbnRzLCBzdGFydCwgbWF4LCBjb21wbGV0ZUxvb3ApLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbn1cbiBmdW5jdGlvbiBzcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKSB7XG4gICAgaWYgKCFzZWdtZW50T3B0aW9ucyB8fCAhc2VnbWVudE9wdGlvbnMuc2V0Q29udGV4dCB8fCAhcG9pbnRzKSB7XG4gICAgICAgIHJldHVybiBzZWdtZW50cztcbiAgICB9XG4gICAgcmV0dXJuIGRvU3BsaXRCeVN0eWxlcyhsaW5lLCBzZWdtZW50cywgcG9pbnRzLCBzZWdtZW50T3B0aW9ucyk7XG59XG4gZnVuY3Rpb24gZG9TcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKSB7XG4gICAgY29uc3QgY2hhcnRDb250ZXh0ID0gbGluZS5fY2hhcnQuZ2V0Q29udGV4dCgpO1xuICAgIGNvbnN0IGJhc2VTdHlsZSA9IHJlYWRTdHlsZShsaW5lLm9wdGlvbnMpO1xuICAgIGNvbnN0IHsgX2RhdGFzZXRJbmRleDogZGF0YXNldEluZGV4ICwgb3B0aW9uczogeyBzcGFuR2FwcyAgfSAgfSA9IGxpbmU7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBwcmV2U3R5bGUgPSBiYXNlU3R5bGU7XG4gICAgbGV0IHN0YXJ0ID0gc2VnbWVudHNbMF0uc3RhcnQ7XG4gICAgbGV0IGkgPSBzdGFydDtcbiAgICBmdW5jdGlvbiBhZGRTdHlsZShzLCBlLCBsLCBzdCkge1xuICAgICAgICBjb25zdCBkaXIgPSBzcGFuR2FwcyA/IC0xIDogMTtcbiAgICAgICAgaWYgKHMgPT09IGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzICs9IGNvdW50O1xuICAgICAgICB3aGlsZShwb2ludHNbcyAlIGNvdW50XS5za2lwKXtcbiAgICAgICAgICAgIHMgLT0gZGlyO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlKHBvaW50c1tlICUgY291bnRdLnNraXApe1xuICAgICAgICAgICAgZSArPSBkaXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMgJSBjb3VudCAhPT0gZSAlIGNvdW50KSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHMgJSBjb3VudCxcbiAgICAgICAgICAgICAgICBlbmQ6IGUgJSBjb3VudCxcbiAgICAgICAgICAgICAgICBsb29wOiBsLFxuICAgICAgICAgICAgICAgIHN0eWxlOiBzdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcmV2U3R5bGUgPSBzdDtcbiAgICAgICAgICAgIHN0YXJ0ID0gZSAlIGNvdW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgIHN0YXJ0ID0gc3BhbkdhcHMgPyBzdGFydCA6IHNlZ21lbnQuc3RhcnQ7XG4gICAgICAgIGxldCBwcmV2ID0gcG9pbnRzW3N0YXJ0ICUgY291bnRdO1xuICAgICAgICBsZXQgc3R5bGU7XG4gICAgICAgIGZvcihpID0gc3RhcnQgKyAxOyBpIDw9IHNlZ21lbnQuZW5kOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgcHQgPSBwb2ludHNbaSAlIGNvdW50XTtcbiAgICAgICAgICAgIHN0eWxlID0gcmVhZFN0eWxlKHNlZ21lbnRPcHRpb25zLnNldENvbnRleHQoY3JlYXRlQ29udGV4dChjaGFydENvbnRleHQsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2VnbWVudCcsXG4gICAgICAgICAgICAgICAgcDA6IHByZXYsXG4gICAgICAgICAgICAgICAgcDE6IHB0LFxuICAgICAgICAgICAgICAgIHAwRGF0YUluZGV4OiAoaSAtIDEpICUgY291bnQsXG4gICAgICAgICAgICAgICAgcDFEYXRhSW5kZXg6IGkgJSBjb3VudCxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXhcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICBpZiAoc3R5bGVDaGFuZ2VkKHN0eWxlLCBwcmV2U3R5bGUpKSB7XG4gICAgICAgICAgICAgICAgYWRkU3R5bGUoc3RhcnQsIGkgLSAxLCBzZWdtZW50Lmxvb3AsIHByZXZTdHlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2ID0gcHQ7XG4gICAgICAgICAgICBwcmV2U3R5bGUgPSBzdHlsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnQgPCBpIC0gMSkge1xuICAgICAgICAgICAgYWRkU3R5bGUoc3RhcnQsIGkgLSAxLCBzZWdtZW50Lmxvb3AsIHByZXZTdHlsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHJlYWRTdHlsZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgYm9yZGVyQ2FwU3R5bGU6IG9wdGlvbnMuYm9yZGVyQ2FwU3R5bGUsXG4gICAgICAgIGJvcmRlckRhc2g6IG9wdGlvbnMuYm9yZGVyRGFzaCxcbiAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICBib3JkZXJKb2luU3R5bGU6IG9wdGlvbnMuYm9yZGVySm9pblN0eWxlLFxuICAgICAgICBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcbiAgICAgICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3JcbiAgICB9O1xufVxuZnVuY3Rpb24gc3R5bGVDaGFuZ2VkKHN0eWxlLCBwcmV2U3R5bGUpIHtcbiAgICBpZiAoIXByZXZTdHlsZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlID0gW107XG4gICAgY29uc3QgcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNhY2hlLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICAgICAgY2FjaGUucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhY2hlLmluZGV4T2YodmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0eWxlLCByZXBsYWNlcikgIT09IEpTT04uc3RyaW5naWZ5KHByZXZTdHlsZSwgcmVwbGFjZXIpO1xufVxuXG5leHBvcnQgeyB1bmNsaXBBcmVhIGFzICQsIF9ybG9va3VwQnlLZXkgYXMgQSwgX2xvb2t1cEJ5S2V5IGFzIEIsIF9pc1BvaW50SW5BcmVhIGFzIEMsIGdldEFuZ2xlRnJvbVBvaW50IGFzIEQsIHRvUGFkZGluZyBhcyBFLCBlYWNoIGFzIEYsIGdldE1heGltdW1TaXplIGFzIEcsIEhBTEZfUEkgYXMgSCwgX2dldFBhcmVudE5vZGUgYXMgSSwgcmVhZFVzZWRTaXplIGFzIEosIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgYXMgSywgdGhyb3R0bGVkIGFzIEwsIF9pc0RvbVN1cHBvcnRlZCBhcyBNLCBfZmFjdG9yaXplIGFzIE4sIGZpbml0ZU9yRGVmYXVsdCBhcyBPLCBQSSBhcyBQLCBjYWxsYmFjayBhcyBRLCBfYWRkR3JhY2UgYXMgUiwgX2xpbWl0VmFsdWUgYXMgUywgVEFVIGFzIFQsIHRvRGVncmVlcyBhcyBVLCBfbWVhc3VyZVRleHQgYXMgViwgX2ludDE2UmFuZ2UgYXMgVywgX2FsaWduUGl4ZWwgYXMgWCwgY2xpcEFyZWEgYXMgWSwgcmVuZGVyVGV4dCBhcyBaLCBfYXJyYXlVbmlxdWUgYXMgXywgcmVzb2x2ZSBhcyBhLCBmb250U3RyaW5nIGFzIGEkLCB0b0ZvbnQgYXMgYTAsIF90b0xlZnRSaWdodENlbnRlciBhcyBhMSwgX2FsaWduU3RhcnRFbmQgYXMgYTIsIG92ZXJyaWRlcyBhcyBhMywgbWVyZ2UgYXMgYTQsIF9jYXBpdGFsaXplIGFzIGE1LCBkZXNjcmlwdG9ycyBhcyBhNiwgaXNGdW5jdGlvbiBhcyBhNywgX2F0dGFjaENvbnRleHQgYXMgYTgsIF9jcmVhdGVSZXNvbHZlciBhcyBhOSwgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uIGFzIGFBLCBfdGV4dFggYXMgYUIsIHJlc3RvcmVUZXh0RGlyZWN0aW9uIGFzIGFDLCBkcmF3UG9pbnRMZWdlbmQgYXMgYUQsIGRpc3RhbmNlQmV0d2VlblBvaW50cyBhcyBhRSwgbm9vcCBhcyBhRiwgX3NldE1pbkFuZE1heEJ5S2V5IGFzIGFHLCBuaWNlTnVtIGFzIGFILCBhbG1vc3RXaG9sZSBhcyBhSSwgYWxtb3N0RXF1YWxzIGFzIGFKLCBfZGVjaW1hbFBsYWNlcyBhcyBhSywgVGlja3MgYXMgYUwsIGxvZzEwIGFzIGFNLCBfbG9uZ2VzdFRleHQgYXMgYU4sIF9maWx0ZXJCZXR3ZWVuIGFzIGFPLCBfbG9va3VwIGFzIGFQLCBpc1BhdHRlcm5PckdyYWRpZW50IGFzIGFRLCBnZXRIb3ZlckNvbG9yIGFzIGFSLCBjbG9uZSBhcyBhUywgX21lcmdlciBhcyBhVCwgX21lcmdlcklmIGFzIGFVLCBfZGVwcmVjYXRlZCBhcyBhViwgX3NwbGl0S2V5IGFzIGFXLCB0b0ZvbnRTdHJpbmcgYXMgYVgsIHNwbGluZUN1cnZlIGFzIGFZLCBzcGxpbmVDdXJ2ZU1vbm90b25lIGFzIGFaLCBnZXRTdHlsZSBhcyBhXywgX2Rlc2NyaXB0b3JzIGFzIGFhLCBtZXJnZUlmIGFzIGFiLCB1aWQgYXMgYWMsIGRlYm91bmNlIGFzIGFkLCByZXRpbmFTY2FsZSBhcyBhZSwgY2xlYXJDYW52YXMgYXMgYWYsIHNldHNFcXVhbCBhcyBhZywgX2VsZW1lbnRzRXF1YWwgYXMgYWgsIF9pc0NsaWNrRXZlbnQgYXMgYWksIF9pc0JldHdlZW4gYXMgYWosIF9yZWFkVmFsdWVUb1Byb3BzIGFzIGFrLCBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyBhcyBhbCwgX2NvbXB1dGVTZWdtZW50cyBhcyBhbSwgX2JvdW5kU2VnbWVudHMgYXMgYW4sIF9zdGVwcGVkSW50ZXJwb2xhdGlvbiBhcyBhbywgX2JlemllckludGVycG9sYXRpb24gYXMgYXAsIF9wb2ludEluTGluZSBhcyBhcSwgX3N0ZXBwZWRMaW5lVG8gYXMgYXIsIF9iZXppZXJDdXJ2ZVRvIGFzIGFzLCBkcmF3UG9pbnQgYXMgYXQsIGFkZFJvdW5kZWRSZWN0UGF0aCBhcyBhdSwgdG9UUkJMIGFzIGF2LCB0b1RSQkxDb3JuZXJzIGFzIGF3LCBfYm91bmRTZWdtZW50IGFzIGF4LCBfbm9ybWFsaXplQW5nbGUgYXMgYXksIGdldFJ0bEFkYXB0ZXIgYXMgYXosIGlzQXJyYXkgYXMgYiwgdG9MaW5lSGVpZ2h0IGFzIGIwLCBQSVRBVSBhcyBiMSwgSU5GSU5JVFkgYXMgYjIsIFJBRF9QRVJfREVHIGFzIGIzLCBRVUFSVEVSX1BJIGFzIGI0LCBUV09fVEhJUkRTX1BJIGFzIGI1LCBfYW5nbGVEaWZmIGFzIGI2LCBjb2xvciBhcyBjLCBkZWZhdWx0cyBhcyBkLCBlZmZlY3RzIGFzIGUsIHJlc29sdmVPYmplY3RLZXkgYXMgZiwgaXNOdW1iZXJGaW5pdGUgYXMgZywgZGVmaW5lZCBhcyBoLCBpc09iamVjdCBhcyBpLCBjcmVhdGVDb250ZXh0IGFzIGosIGlzTnVsbE9yVW5kZWYgYXMgaywgbGlzdGVuQXJyYXlFdmVudHMgYXMgbCwgdG9QZXJjZW50YWdlIGFzIG0sIHRvRGltZW5zaW9uIGFzIG4sIGZvcm1hdE51bWJlciBhcyBvLCBfYW5nbGVCZXR3ZWVuIGFzIHAsIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzIGFzIHEsIHJlcXVlc3RBbmltRnJhbWUgYXMgciwgc2lnbiBhcyBzLCB0b1JhZGlhbnMgYXMgdCwgdW5saXN0ZW5BcnJheUV2ZW50cyBhcyB1LCB2YWx1ZU9yRGVmYXVsdCBhcyB2LCBfc2NhbGVSYW5nZXNDaGFuZ2VkIGFzIHcsIGlzTnVtYmVyIGFzIHgsIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZSBhcyB5LCBnZXRSZWxhdGl2ZVBvc2l0aW9uIGFzIHogfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuc2VnbWVudC5qcy5tYXBcbiIsIi8qIVxuICogQ2hhcnQuanMgdjQuMy4wXG4gKiBodHRwczovL3d3dy5jaGFydGpzLm9yZ1xuICogKGMpIDIwMjMgQ2hhcnQuanMgQ29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZXF1ZXN0QW5pbUZyYW1lLCBhIGFzIHJlc29sdmUsIGUgYXMgZWZmZWN0cywgYyBhcyBjb2xvciwgaSBhcyBpc09iamVjdCwgZCBhcyBkZWZhdWx0cywgYiBhcyBpc0FycmF5LCB2IGFzIHZhbHVlT3JEZWZhdWx0LCB1IGFzIHVubGlzdGVuQXJyYXlFdmVudHMsIGwgYXMgbGlzdGVuQXJyYXlFdmVudHMsIGYgYXMgcmVzb2x2ZU9iamVjdEtleSwgZyBhcyBpc051bWJlckZpbml0ZSwgaCBhcyBkZWZpbmVkLCBzIGFzIHNpZ24sIGogYXMgY3JlYXRlQ29udGV4dCwgayBhcyBpc051bGxPclVuZGVmLCBfIGFzIF9hcnJheVVuaXF1ZSwgdCBhcyB0b1JhZGlhbnMsIG0gYXMgdG9QZXJjZW50YWdlLCBuIGFzIHRvRGltZW5zaW9uLCBUIGFzIFRBVSwgbyBhcyBmb3JtYXROdW1iZXIsIHAgYXMgX2FuZ2xlQmV0d2VlbiwgSCBhcyBIQUxGX1BJLCBQIGFzIFBJLCBxIGFzIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzLCB3IGFzIF9zY2FsZVJhbmdlc0NoYW5nZWQsIHggYXMgaXNOdW1iZXIsIHkgYXMgX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlLCB6IGFzIGdldFJlbGF0aXZlUG9zaXRpb24sIEEgYXMgX3Jsb29rdXBCeUtleSwgQiBhcyBfbG9va3VwQnlLZXksIEMgYXMgX2lzUG9pbnRJbkFyZWEsIEQgYXMgZ2V0QW5nbGVGcm9tUG9pbnQsIEUgYXMgdG9QYWRkaW5nLCBGIGFzIGVhY2gsIEcgYXMgZ2V0TWF4aW11bVNpemUsIEkgYXMgX2dldFBhcmVudE5vZGUsIEogYXMgcmVhZFVzZWRTaXplLCBLIGFzIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMsIEwgYXMgdGhyb3R0bGVkLCBNIGFzIF9pc0RvbVN1cHBvcnRlZCwgTiBhcyBfZmFjdG9yaXplLCBPIGFzIGZpbml0ZU9yRGVmYXVsdCwgUSBhcyBjYWxsYmFjaywgUiBhcyBfYWRkR3JhY2UsIFMgYXMgX2xpbWl0VmFsdWUsIFUgYXMgdG9EZWdyZWVzLCBWIGFzIF9tZWFzdXJlVGV4dCwgVyBhcyBfaW50MTZSYW5nZSwgWCBhcyBfYWxpZ25QaXhlbCwgWSBhcyBjbGlwQXJlYSwgWiBhcyByZW5kZXJUZXh0LCAkIGFzIHVuY2xpcEFyZWEsIGEwIGFzIHRvRm9udCwgYTEgYXMgX3RvTGVmdFJpZ2h0Q2VudGVyLCBhMiBhcyBfYWxpZ25TdGFydEVuZCwgYTMgYXMgb3ZlcnJpZGVzLCBhNCBhcyBtZXJnZSwgYTUgYXMgX2NhcGl0YWxpemUsIGE2IGFzIGRlc2NyaXB0b3JzLCBhNyBhcyBpc0Z1bmN0aW9uLCBhOCBhcyBfYXR0YWNoQ29udGV4dCwgYTkgYXMgX2NyZWF0ZVJlc29sdmVyLCBhYSBhcyBfZGVzY3JpcHRvcnMsIGFiIGFzIG1lcmdlSWYsIGFjIGFzIHVpZCwgYWQgYXMgZGVib3VuY2UsIGFlIGFzIHJldGluYVNjYWxlLCBhZiBhcyBjbGVhckNhbnZhcywgYWcgYXMgc2V0c0VxdWFsLCBhaCBhcyBfZWxlbWVudHNFcXVhbCwgYWkgYXMgX2lzQ2xpY2tFdmVudCwgYWogYXMgX2lzQmV0d2VlbiwgYWsgYXMgX3JlYWRWYWx1ZVRvUHJvcHMsIGFsIGFzIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzLCBhbSBhcyBfY29tcHV0ZVNlZ21lbnRzLCBhbiBhcyBfYm91bmRTZWdtZW50cywgYW8gYXMgX3N0ZXBwZWRJbnRlcnBvbGF0aW9uLCBhcCBhcyBfYmV6aWVySW50ZXJwb2xhdGlvbiwgYXEgYXMgX3BvaW50SW5MaW5lLCBhciBhcyBfc3RlcHBlZExpbmVUbywgYXMgYXMgX2JlemllckN1cnZlVG8sIGF0IGFzIGRyYXdQb2ludCwgYXUgYXMgYWRkUm91bmRlZFJlY3RQYXRoLCBhdiBhcyB0b1RSQkwsIGF3IGFzIHRvVFJCTENvcm5lcnMsIGF4IGFzIF9ib3VuZFNlZ21lbnQsIGF5IGFzIF9ub3JtYWxpemVBbmdsZSwgYXogYXMgZ2V0UnRsQWRhcHRlciwgYUEgYXMgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uLCBhQiBhcyBfdGV4dFgsIGFDIGFzIHJlc3RvcmVUZXh0RGlyZWN0aW9uLCBhRCBhcyBkcmF3UG9pbnRMZWdlbmQsIGFFIGFzIGRpc3RhbmNlQmV0d2VlblBvaW50cywgYUYgYXMgbm9vcCwgYUcgYXMgX3NldE1pbkFuZE1heEJ5S2V5LCBhSCBhcyBuaWNlTnVtLCBhSSBhcyBhbG1vc3RXaG9sZSwgYUogYXMgYWxtb3N0RXF1YWxzLCBhSyBhcyBfZGVjaW1hbFBsYWNlcywgYUwgYXMgVGlja3MsIGFNIGFzIGxvZzEwLCBhTiBhcyBfbG9uZ2VzdFRleHQsIGFPIGFzIF9maWx0ZXJCZXR3ZWVuLCBhUCBhcyBfbG9va3VwIH0gZnJvbSAnLi9jaHVua3MvaGVscGVycy5zZWdtZW50LmpzJztcbmltcG9ydCAnQGt1cmtsZS9jb2xvcic7XG5cbmNsYXNzIEFuaW1hdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2hhcnRzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2xhc3REYXRlID0gdW5kZWZpbmVkO1xuICAgIH1cbiBfbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgdHlwZSkge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBhbmltcy5saXN0ZW5lcnNbdHlwZV07XG4gICAgICAgIGNvbnN0IG51bVN0ZXBzID0gYW5pbXMuZHVyYXRpb247XG4gICAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKChmbik9PmZuKHtcbiAgICAgICAgICAgICAgICBjaGFydCxcbiAgICAgICAgICAgICAgICBpbml0aWFsOiBhbmltcy5pbml0aWFsLFxuICAgICAgICAgICAgICAgIG51bVN0ZXBzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGVwOiBNYXRoLm1pbihkYXRlIC0gYW5pbXMuc3RhcnQsIG51bVN0ZXBzKVxuICAgICAgICAgICAgfSkpO1xuICAgIH1cbiBfcmVmcmVzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVxdWVzdCA9IHJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csICgpPT57XG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3J1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiBfdXBkYXRlKGRhdGUgPSBEYXRlLm5vdygpKSB7XG4gICAgICAgIGxldCByZW1haW5pbmcgPSAwO1xuICAgICAgICB0aGlzLl9jaGFydHMuZm9yRWFjaCgoYW5pbXMsIGNoYXJ0KT0+e1xuICAgICAgICAgICAgaWYgKCFhbmltcy5ydW5uaW5nIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IGFuaW1zLml0ZW1zO1xuICAgICAgICAgICAgbGV0IGkgPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgbGV0IGRyYXcgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBpdGVtO1xuICAgICAgICAgICAgZm9yKDsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5fYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLl90b3RhbCA+IGFuaW1zLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltcy5kdXJhdGlvbiA9IGl0ZW0uX3RvdGFsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0udGljayhkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgZHJhdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXNbaV0gPSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRyYXcpIHtcbiAgICAgICAgICAgICAgICBjaGFydC5kcmF3KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgJ3Byb2dyZXNzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFuaW1zLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RpZnkoY2hhcnQsIGFuaW1zLCBkYXRlLCAnY29tcGxldGUnKTtcbiAgICAgICAgICAgICAgICBhbmltcy5pbml0aWFsID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1haW5pbmcgKz0gaXRlbXMubGVuZ3RoO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbGFzdERhdGUgPSBkYXRlO1xuICAgICAgICBpZiAocmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gX2dldEFuaW1zKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0cyA9IHRoaXMuX2NoYXJ0cztcbiAgICAgICAgbGV0IGFuaW1zID0gY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMpIHtcbiAgICAgICAgICAgIGFuaW1zID0ge1xuICAgICAgICAgICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluaXRpYWw6IHRydWUsXG4gICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczoge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogW10sXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzOiBbXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjaGFydHMuc2V0KGNoYXJ0LCBhbmltcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1zO1xuICAgIH1cbiBsaXN0ZW4oY2hhcnQsIGV2ZW50LCBjYikge1xuICAgICAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkubGlzdGVuZXJzW2V2ZW50XS5wdXNoKGNiKTtcbiAgICB9XG4gYWRkKGNoYXJ0LCBpdGVtcykge1xuICAgICAgICBpZiAoIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkuaXRlbXMucHVzaCguLi5pdGVtcyk7XG4gICAgfVxuIGhhcyhjaGFydCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QW5pbXMoY2hhcnQpLml0ZW1zLmxlbmd0aCA+IDA7XG4gICAgfVxuIHN0YXJ0KGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhbmltcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgYW5pbXMuc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICBhbmltcy5kdXJhdGlvbiA9IGFuaW1zLml0ZW1zLnJlZHVjZSgoYWNjLCBjdXIpPT5NYXRoLm1heChhY2MsIGN1ci5fZHVyYXRpb24pLCAwKTtcbiAgICAgICAgdGhpcy5fcmVmcmVzaCgpO1xuICAgIH1cbiAgICBydW5uaW5nKGNoYXJ0KSB7XG4gICAgICAgIGlmICghdGhpcy5fcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMgfHwgIWFuaW1zLnJ1bm5pbmcgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiBzdG9wKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gYW5pbXMuaXRlbXM7XG4gICAgICAgIGxldCBpID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgZm9yKDsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgaXRlbXNbaV0uY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgYW5pbXMuaXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgRGF0ZS5ub3coKSwgJ2NvbXBsZXRlJyk7XG4gICAgfVxuIHJlbW92ZShjaGFydCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hhcnRzLmRlbGV0ZShjaGFydCk7XG4gICAgfVxufVxudmFyIGFuaW1hdG9yID0gLyogI19fUFVSRV9fICovIG5ldyBBbmltYXRvcigpO1xuXG5jb25zdCB0cmFuc3BhcmVudCA9ICd0cmFuc3BhcmVudCc7XG5jb25zdCBpbnRlcnBvbGF0b3JzID0ge1xuICAgIGJvb2xlYW4gKGZyb20sIHRvLCBmYWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvciA+IDAuNSA/IHRvIDogZnJvbTtcbiAgICB9LFxuIGNvbG9yIChmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgICAgIGNvbnN0IGMwID0gY29sb3IoZnJvbSB8fCB0cmFuc3BhcmVudCk7XG4gICAgICAgIGNvbnN0IGMxID0gYzAudmFsaWQgJiYgY29sb3IodG8gfHwgdHJhbnNwYXJlbnQpO1xuICAgICAgICByZXR1cm4gYzEgJiYgYzEudmFsaWQgPyBjMS5taXgoYzAsIGZhY3RvcikuaGV4U3RyaW5nKCkgOiB0bztcbiAgICB9LFxuICAgIG51bWJlciAoZnJvbSwgdG8sIGZhY3Rvcikge1xuICAgICAgICByZXR1cm4gZnJvbSArICh0byAtIGZyb20pICogZmFjdG9yO1xuICAgIH1cbn07XG5jbGFzcyBBbmltYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNmZywgdGFyZ2V0LCBwcm9wLCB0byl7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRhcmdldFtwcm9wXTtcbiAgICAgICAgdG8gPSByZXNvbHZlKFtcbiAgICAgICAgICAgIGNmZy50byxcbiAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgY2ZnLmZyb21cbiAgICAgICAgXSk7XG4gICAgICAgIGNvbnN0IGZyb20gPSByZXNvbHZlKFtcbiAgICAgICAgICAgIGNmZy5mcm9tLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgdG9cbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2ZuID0gY2ZnLmZuIHx8IGludGVycG9sYXRvcnNbY2ZnLnR5cGUgfHwgdHlwZW9mIGZyb21dO1xuICAgICAgICB0aGlzLl9lYXNpbmcgPSBlZmZlY3RzW2NmZy5lYXNpbmddIHx8IGVmZmVjdHMubGluZWFyO1xuICAgICAgICB0aGlzLl9zdGFydCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSArIChjZmcuZGVsYXkgfHwgMCkpO1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IHRoaXMuX3RvdGFsID0gTWF0aC5mbG9vcihjZmcuZHVyYXRpb24pO1xuICAgICAgICB0aGlzLl9sb29wID0gISFjZmcubG9vcDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLl9wcm9wID0gcHJvcDtcbiAgICAgICAgdGhpcy5fZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMuX3RvID0gdG87XG4gICAgICAgIHRoaXMuX3Byb21pc2VzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gICAgfVxuICAgIHVwZGF0ZShjZmcsIHRvLCBkYXRlKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeShmYWxzZSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLl90YXJnZXRbdGhpcy5fcHJvcF07XG4gICAgICAgICAgICBjb25zdCBlbGFwc2VkID0gZGF0ZSAtIHRoaXMuX3N0YXJ0O1xuICAgICAgICAgICAgY29uc3QgcmVtYWluID0gdGhpcy5fZHVyYXRpb24gLSBlbGFwc2VkO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnQgPSBkYXRlO1xuICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBNYXRoLmZsb29yKE1hdGgubWF4KHJlbWFpbiwgY2ZnLmR1cmF0aW9uKSk7XG4gICAgICAgICAgICB0aGlzLl90b3RhbCArPSBlbGFwc2VkO1xuICAgICAgICAgICAgdGhpcy5fbG9vcCA9ICEhY2ZnLmxvb3A7XG4gICAgICAgICAgICB0aGlzLl90byA9IHJlc29sdmUoW1xuICAgICAgICAgICAgICAgIGNmZy50byxcbiAgICAgICAgICAgICAgICB0byxcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUsXG4gICAgICAgICAgICAgICAgY2ZnLmZyb21cbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgdGhpcy5fZnJvbSA9IHJlc29sdmUoW1xuICAgICAgICAgICAgICAgIGNmZy5mcm9tLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICAgICAgICB0b1xuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FuY2VsKCkge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLnRpY2soRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeShmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGljayhkYXRlKSB7XG4gICAgICAgIGNvbnN0IGVsYXBzZWQgPSBkYXRlIC0gdGhpcy5fc3RhcnQ7XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5fZHVyYXRpb247XG4gICAgICAgIGNvbnN0IHByb3AgPSB0aGlzLl9wcm9wO1xuICAgICAgICBjb25zdCBmcm9tID0gdGhpcy5fZnJvbTtcbiAgICAgICAgY29uc3QgbG9vcCA9IHRoaXMuX2xvb3A7XG4gICAgICAgIGNvbnN0IHRvID0gdGhpcy5fdG87XG4gICAgICAgIGxldCBmYWN0b3I7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZyb20gIT09IHRvICYmIChsb29wIHx8IGVsYXBzZWQgPCBkdXJhdGlvbik7XG4gICAgICAgIGlmICghdGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRbcHJvcF0gPSB0bztcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxhcHNlZCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IGZyb207XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZmFjdG9yID0gZWxhcHNlZCAvIGR1cmF0aW9uICUgMjtcbiAgICAgICAgZmFjdG9yID0gbG9vcCAmJiBmYWN0b3IgPiAxID8gMiAtIGZhY3RvciA6IGZhY3RvcjtcbiAgICAgICAgZmFjdG9yID0gdGhpcy5fZWFzaW5nKE1hdGgubWluKDEsIE1hdGgubWF4KDAsIGZhY3RvcikpKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gdGhpcy5fZm4oZnJvbSwgdG8sIGZhY3Rvcik7XG4gICAgfVxuICAgIHdhaXQoKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gdGhpcy5fcHJvbWlzZXMgfHwgKHRoaXMuX3Byb21pc2VzID0gW10pO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKT0+e1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgcmVzLFxuICAgICAgICAgICAgICAgIHJlalxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfbm90aWZ5KHJlc29sdmVkKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHJlc29sdmVkID8gJ3JlcycgOiAncmVqJztcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSB0aGlzLl9wcm9taXNlcyB8fCBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHByb21pc2VzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHByb21pc2VzW2ldW21ldGhvZF0oKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQW5pbWF0aW9ucyB7XG4gICAgY29uc3RydWN0b3IoY2hhcnQsIGNvbmZpZyl7XG4gICAgICAgIHRoaXMuX2NoYXJ0ID0gY2hhcnQ7XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuY29uZmlndXJlKGNvbmZpZyk7XG4gICAgfVxuICAgIGNvbmZpZ3VyZShjb25maWcpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IE9iamVjdC5rZXlzKGRlZmF1bHRzLmFuaW1hdGlvbik7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjb25maWcpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgIGNvbnN0IGNmZyA9IGNvbmZpZ1trZXldO1xuICAgICAgICAgICAgaWYgKCFpc09iamVjdChjZmcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIGFuaW1hdGlvbk9wdGlvbnMpe1xuICAgICAgICAgICAgICAgIHJlc29sdmVkW29wdGlvbl0gPSBjZmdbb3B0aW9uXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChpc0FycmF5KGNmZy5wcm9wZXJ0aWVzKSAmJiBjZmcucHJvcGVydGllcyB8fCBbXG4gICAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICBdKS5mb3JFYWNoKChwcm9wKT0+e1xuICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSBrZXkgfHwgIWFuaW1hdGVkUHJvcHMuaGFzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVkUHJvcHMuc2V0KHByb3AsIHJlc29sdmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuIF9hbmltYXRlT3B0aW9ucyh0YXJnZXQsIHZhbHVlcykge1xuICAgICAgICBjb25zdCBuZXdPcHRpb25zID0gdmFsdWVzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSByZXNvbHZlVGFyZ2V0T3B0aW9ucyh0YXJnZXQsIG5ld09wdGlvbnMpO1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gdGhpcy5fY3JlYXRlQW5pbWF0aW9ucyhvcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICAgICAgaWYgKG5ld09wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgICAgICAgYXdhaXRBbGwodGFyZ2V0Lm9wdGlvbnMuJGFuaW1hdGlvbnMsIG5ld09wdGlvbnMpLnRoZW4oKCk9PntcbiAgICAgICAgICAgICAgICB0YXJnZXQub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgICAgICAgICB9LCAoKT0+e1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuIF9jcmVhdGVBbmltYXRpb25zKHRhcmdldCwgdmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gW107XG4gICAgICAgIGNvbnN0IHJ1bm5pbmcgPSB0YXJnZXQuJGFuaW1hdGlvbnMgfHwgKHRhcmdldC4kYW5pbWF0aW9ucyA9IHt9KTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSBPYmplY3Qua2V5cyh2YWx1ZXMpO1xuICAgICAgICBjb25zdCBkYXRlID0gRGF0ZS5ub3coKTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvcihpID0gcHJvcHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgY29uc3QgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgICAgICAgaWYgKHByb3AuY2hhckF0KDApID09PSAnJCcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnb3B0aW9ucycpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zLnB1c2goLi4udGhpcy5fYW5pbWF0ZU9wdGlvbnModGFyZ2V0LCB2YWx1ZXMpKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW3Byb3BdO1xuICAgICAgICAgICAgbGV0IGFuaW1hdGlvbiA9IHJ1bm5pbmdbcHJvcF07XG4gICAgICAgICAgICBjb25zdCBjZmcgPSBhbmltYXRlZFByb3BzLmdldChwcm9wKTtcbiAgICAgICAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoY2ZnICYmIGFuaW1hdGlvbi5hY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udXBkYXRlKGNmZywgdmFsdWUsIGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjZmcgfHwgIWNmZy5kdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVubmluZ1twcm9wXSA9IGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oY2ZnLCB0YXJnZXQsIHByb3AsIHZhbHVlKTtcbiAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaChhbmltYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiB1cGRhdGUodGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3BlcnRpZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHZhbHVlcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IHRoaXMuX2NyZWF0ZUFuaW1hdGlvbnModGFyZ2V0LCB2YWx1ZXMpO1xuICAgICAgICBpZiAoYW5pbWF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFuaW1hdG9yLmFkZCh0aGlzLl9jaGFydCwgYW5pbWF0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGF3YWl0QWxsKGFuaW1hdGlvbnMsIHByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBydW5uaW5nID0gW107XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgYW5pbSA9IGFuaW1hdGlvbnNba2V5c1tpXV07XG4gICAgICAgIGlmIChhbmltICYmIGFuaW0uYWN0aXZlKCkpIHtcbiAgICAgICAgICAgIHJ1bm5pbmcucHVzaChhbmltLndhaXQoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHJ1bm5pbmcpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhcmdldE9wdGlvbnModGFyZ2V0LCBuZXdPcHRpb25zKSB7XG4gICAgaWYgKCFuZXdPcHRpb25zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG9wdGlvbnMgPSB0YXJnZXQub3B0aW9ucztcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBuZXdPcHRpb25zO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvcHRpb25zLiRzaGFyZWQpIHtcbiAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAgICAgICAgJHNoYXJlZDogZmFsc2UsXG4gICAgICAgICAgICAkYW5pbWF0aW9uczoge31cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBzY2FsZUNsaXAoc2NhbGUsIGFsbG93ZWRPdmVyZmxvdykge1xuICAgIGNvbnN0IG9wdHMgPSBzY2FsZSAmJiBzY2FsZS5vcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IHJldmVyc2UgPSBvcHRzLnJldmVyc2U7XG4gICAgY29uc3QgbWluID0gb3B0cy5taW4gPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gICAgY29uc3QgbWF4ID0gb3B0cy5tYXggPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHJldmVyc2UgPyBtYXggOiBtaW4sXG4gICAgICAgIGVuZDogcmV2ZXJzZSA/IG1pbiA6IG1heFxuICAgIH07XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xpcCh4U2NhbGUsIHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KSB7XG4gICAgaWYgKGFsbG93ZWRPdmVyZmxvdyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB4ID0gc2NhbGVDbGlwKHhTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgICBjb25zdCB5ID0gc2NhbGVDbGlwKHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHkuZW5kLFxuICAgICAgICByaWdodDogeC5lbmQsXG4gICAgICAgIGJvdHRvbTogeS5zdGFydCxcbiAgICAgICAgbGVmdDogeC5zdGFydFxuICAgIH07XG59XG5mdW5jdGlvbiB0b0NsaXAodmFsdWUpIHtcbiAgICBsZXQgdCwgciwgYiwgbDtcbiAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHQgPSB2YWx1ZS50b3A7XG4gICAgICAgIHIgPSB2YWx1ZS5yaWdodDtcbiAgICAgICAgYiA9IHZhbHVlLmJvdHRvbTtcbiAgICAgICAgbCA9IHZhbHVlLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdCA9IHIgPSBiID0gbCA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHQsXG4gICAgICAgIHJpZ2h0OiByLFxuICAgICAgICBib3R0b206IGIsXG4gICAgICAgIGxlZnQ6IGwsXG4gICAgICAgIGRpc2FibGVkOiB2YWx1ZSA9PT0gZmFsc2VcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIGZpbHRlclZpc2libGUpIHtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKGZpbHRlclZpc2libGUpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGtleXMucHVzaChtZXRhc2V0c1tpXS5pbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gYXBwbHlTdGFjayhzdGFjaywgdmFsdWUsIGRzSW5kZXgsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGtleXMgPSBzdGFjay5rZXlzO1xuICAgIGNvbnN0IHNpbmdsZU1vZGUgPSBvcHRpb25zLm1vZGUgPT09ICdzaW5nbGUnO1xuICAgIGxldCBpLCBpbGVuLCBkYXRhc2V0SW5kZXgsIG90aGVyVmFsdWU7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBkYXRhc2V0SW5kZXggPSAra2V5c1tpXTtcbiAgICAgICAgaWYgKGRhdGFzZXRJbmRleCA9PT0gZHNJbmRleCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvdGhlclZhbHVlID0gc3RhY2sudmFsdWVzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGlmIChpc051bWJlckZpbml0ZShvdGhlclZhbHVlKSAmJiAoc2luZ2xlTW9kZSB8fCB2YWx1ZSA9PT0gMCB8fCBzaWduKHZhbHVlKSA9PT0gc2lnbihvdGhlclZhbHVlKSkpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IG90aGVyVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY29udmVydE9iamVjdERhdGFUb0FycmF5KGRhdGEpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gICAgY29uc3QgYWRhdGEgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgIGxldCBpLCBpbGVuLCBrZXk7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBhZGF0YVtpXSA9IHtcbiAgICAgICAgICAgIHg6IGtleSxcbiAgICAgICAgICAgIHk6IGRhdGFba2V5XVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYWRhdGE7XG59XG5mdW5jdGlvbiBpc1N0YWNrZWQoc2NhbGUsIG1ldGEpIHtcbiAgICBjb25zdCBzdGFja2VkID0gc2NhbGUgJiYgc2NhbGUub3B0aW9ucy5zdGFja2VkO1xuICAgIHJldHVybiBzdGFja2VkIHx8IHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBnZXRTdGFja0tleShpbmRleFNjYWxlLCB2YWx1ZVNjYWxlLCBtZXRhKSB7XG4gICAgcmV0dXJuIGAke2luZGV4U2NhbGUuaWR9LiR7dmFsdWVTY2FsZS5pZH0uJHttZXRhLnN0YWNrIHx8IG1ldGEudHlwZX1gO1xufVxuZnVuY3Rpb24gZ2V0VXNlckJvdW5kcyhzY2FsZSkge1xuICAgIGNvbnN0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSBzY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiBtaW5EZWZpbmVkID8gbWluIDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLFxuICAgICAgICBtYXg6IG1heERlZmluZWQgPyBtYXggOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVTdGFjayhzdGFja3MsIHN0YWNrS2V5LCBpbmRleFZhbHVlKSB7XG4gICAgY29uc3Qgc3ViU3RhY2sgPSBzdGFja3Nbc3RhY2tLZXldIHx8IChzdGFja3Nbc3RhY2tLZXldID0ge30pO1xuICAgIHJldHVybiBzdWJTdGFja1tpbmRleFZhbHVlXSB8fCAoc3ViU3RhY2tbaW5kZXhWYWx1ZV0gPSB7fSk7XG59XG5mdW5jdGlvbiBnZXRMYXN0SW5kZXhJblN0YWNrKHN0YWNrLCB2U2NhbGUsIHBvc2l0aXZlLCB0eXBlKSB7XG4gICAgZm9yIChjb25zdCBtZXRhIG9mIHZTY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKS5yZXZlcnNlKCkpe1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHN0YWNrW21ldGEuaW5kZXhdO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgdmFsdWUgPiAwIHx8ICFwb3NpdGl2ZSAmJiB2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBtZXRhLmluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gdXBkYXRlU3RhY2tzKGNvbnRyb2xsZXIsIHBhcnNlZCkge1xuICAgIGNvbnN0IHsgY2hhcnQgLCBfY2FjaGVkTWV0YTogbWV0YSAgfSA9IGNvbnRyb2xsZXI7XG4gICAgY29uc3Qgc3RhY2tzID0gY2hhcnQuX3N0YWNrcyB8fCAoY2hhcnQuX3N0YWNrcyA9IHt9KTtcbiAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAsIGluZGV4OiBkYXRhc2V0SW5kZXggIH0gPSBtZXRhO1xuICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICBjb25zdCBrZXkgPSBnZXRTdGFja0tleShpU2NhbGUsIHZTY2FsZSwgbWV0YSk7XG4gICAgY29uc3QgaWxlbiA9IHBhcnNlZC5sZW5ndGg7XG4gICAgbGV0IHN0YWNrO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjb25zdCBpdGVtID0gcGFyc2VkW2ldO1xuICAgICAgICBjb25zdCB7IFtpQXhpc106IGluZGV4ICwgW3ZBeGlzXTogdmFsdWUgIH0gPSBpdGVtO1xuICAgICAgICBjb25zdCBpdGVtU3RhY2tzID0gaXRlbS5fc3RhY2tzIHx8IChpdGVtLl9zdGFja3MgPSB7fSk7XG4gICAgICAgIHN0YWNrID0gaXRlbVN0YWNrc1t2QXhpc10gPSBnZXRPckNyZWF0ZVN0YWNrKHN0YWNrcywga2V5LCBpbmRleCk7XG4gICAgICAgIHN0YWNrW2RhdGFzZXRJbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgc3RhY2suX3RvcCA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgdHJ1ZSwgbWV0YS50eXBlKTtcbiAgICAgICAgc3RhY2suX2JvdHRvbSA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgZmFsc2UsIG1ldGEudHlwZSk7XG4gICAgICAgIGNvbnN0IHZpc3VhbFZhbHVlcyA9IHN0YWNrLl92aXN1YWxWYWx1ZXMgfHwgKHN0YWNrLl92aXN1YWxWYWx1ZXMgPSB7fSk7XG4gICAgICAgIHZpc3VhbFZhbHVlc1tkYXRhc2V0SW5kZXhdID0gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCBheGlzKSB7XG4gICAgY29uc3Qgc2NhbGVzID0gY2hhcnQuc2NhbGVzO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzY2FsZXMpLmZpbHRlcigoa2V5KT0+c2NhbGVzW2tleV0uYXhpcyA9PT0gYXhpcykuc2hpZnQoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFzZXRDb250ZXh0KHBhcmVudCwgaW5kZXgpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgZGF0YXNldDogdW5kZWZpbmVkLFxuICAgICAgICBkYXRhc2V0SW5kZXg6IGluZGV4LFxuICAgICAgICBpbmRleCxcbiAgICAgICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgICAgICB0eXBlOiAnZGF0YXNldCdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFDb250ZXh0KHBhcmVudCwgaW5kZXgsIGVsZW1lbnQpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgZGF0YUluZGV4OiBpbmRleCxcbiAgICAgICAgcGFyc2VkOiB1bmRlZmluZWQsXG4gICAgICAgIHJhdzogdW5kZWZpbmVkLFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBpbmRleCxcbiAgICAgICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgICAgICB0eXBlOiAnZGF0YSdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFyU3RhY2tzKG1ldGEsIGl0ZW1zKSB7XG4gICAgY29uc3QgZGF0YXNldEluZGV4ID0gbWV0YS5jb250cm9sbGVyLmluZGV4O1xuICAgIGNvbnN0IGF4aXMgPSBtZXRhLnZTY2FsZSAmJiBtZXRhLnZTY2FsZS5heGlzO1xuICAgIGlmICghYXhpcykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGl0ZW1zID0gaXRlbXMgfHwgbWV0YS5fcGFyc2VkO1xuICAgIGZvciAoY29uc3QgcGFyc2VkIG9mIGl0ZW1zKXtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gcGFyc2VkLl9zdGFja3M7XG4gICAgICAgIGlmICghc3RhY2tzIHx8IHN0YWNrc1theGlzXSA9PT0gdW5kZWZpbmVkIHx8IHN0YWNrc1theGlzXVtkYXRhc2V0SW5kZXhdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc3RhY2tzW2F4aXNdW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGlmIChzdGFja3NbYXhpc10uX3Zpc3VhbFZhbHVlcyAhPT0gdW5kZWZpbmVkICYmIHN0YWNrc1theGlzXS5fdmlzdWFsVmFsdWVzW2RhdGFzZXRJbmRleF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGVsZXRlIHN0YWNrc1theGlzXS5fdmlzdWFsVmFsdWVzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBpc0RpcmVjdFVwZGF0ZU1vZGUgPSAobW9kZSk9Pm1vZGUgPT09ICdyZXNldCcgfHwgbW9kZSA9PT0gJ25vbmUnO1xuY29uc3QgY2xvbmVJZk5vdFNoYXJlZCA9IChjYWNoZWQsIHNoYXJlZCk9PnNoYXJlZCA/IGNhY2hlZCA6IE9iamVjdC5hc3NpZ24oe30sIGNhY2hlZCk7XG5jb25zdCBjcmVhdGVTdGFjayA9IChjYW5TdGFjaywgbWV0YSwgY2hhcnQpPT5jYW5TdGFjayAmJiAhbWV0YS5oaWRkZW4gJiYgbWV0YS5fc3RhY2tlZCAmJiB7XG4gICAgICAgIGtleXM6IGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCB0cnVlKSxcbiAgICAgICAgdmFsdWVzOiBudWxsXG4gICAgfTtcbmNsYXNzIERhdGFzZXRDb250cm9sbGVyIHtcbiBzdGF0aWMgZGVmYXVsdHMgPSB7fTtcbiBzdGF0aWMgZGF0YXNldEVsZW1lbnRUeXBlID0gbnVsbDtcbiBzdGF0aWMgZGF0YUVsZW1lbnRUeXBlID0gbnVsbDtcbiBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KXtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNoYXJ0O1xuICAgICAgICB0aGlzLl9jdHggPSBjaGFydC5jdHg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG4gICAgICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gICAgICAgIHRoaXMuX2NhY2hlZE1ldGEgPSB0aGlzLmdldE1ldGEoKTtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHRoaXMuX2NhY2hlZE1ldGEudHlwZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fcGFyc2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9vYmplY3REYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zaGFyZWRPcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9kcmF3U3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RyYXdDb3VudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNEZWNpbWF0aW9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgICAgIHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlID0gbmV3LnRhcmdldC5kYXRhc2V0RWxlbWVudFR5cGU7XG4gICAgICAgIHRoaXMuZGF0YUVsZW1lbnRUeXBlID0gbmV3LnRhcmdldC5kYXRhRWxlbWVudFR5cGU7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5saW5rU2NhbGVzKCk7XG4gICAgICAgIG1ldGEuX3N0YWNrZWQgPSBpc1N0YWNrZWQobWV0YS52U2NhbGUsIG1ldGEpO1xuICAgICAgICB0aGlzLmFkZEVsZW1lbnRzKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmlsbCAmJiAhdGhpcy5jaGFydC5pc1BsdWdpbkVuYWJsZWQoJ2ZpbGxlcicpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUcmllZCB0byB1c2UgdGhlICdmaWxsJyBvcHRpb24gd2l0aG91dCB0aGUgJ0ZpbGxlcicgcGx1Z2luIGVuYWJsZWQuIFBsZWFzZSBpbXBvcnQgYW5kIHJlZ2lzdGVyIHRoZSAnRmlsbGVyJyBwbHVnaW4gYW5kIG1ha2Ugc3VyZSBpdCBpcyBub3QgZGlzYWJsZWQgaW4gdGhlIG9wdGlvbnNcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlSW5kZXgoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmluZGV4ICE9PSBkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgICAgIGNsZWFyU3RhY2tzKHRoaXMuX2NhY2hlZE1ldGEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG4gICAgfVxuICAgIGxpbmtTY2FsZXMoKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICAgICAgY29uc3QgY2hvb3NlSWQgPSAoYXhpcywgeCwgeSwgcik9PmF4aXMgPT09ICd4JyA/IHggOiBheGlzID09PSAncicgPyByIDogeTtcbiAgICAgICAgY29uc3QgeGlkID0gbWV0YS54QXhpc0lEID0gdmFsdWVPckRlZmF1bHQoZGF0YXNldC54QXhpc0lELCBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsICd4JykpO1xuICAgICAgICBjb25zdCB5aWQgPSBtZXRhLnlBeGlzSUQgPSB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnlBeGlzSUQsIGdldEZpcnN0U2NhbGVJZChjaGFydCwgJ3knKSk7XG4gICAgICAgIGNvbnN0IHJpZCA9IG1ldGEuckF4aXNJRCA9IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQuckF4aXNJRCwgZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCAncicpKTtcbiAgICAgICAgY29uc3QgaW5kZXhBeGlzID0gbWV0YS5pbmRleEF4aXM7XG4gICAgICAgIGNvbnN0IGlpZCA9IG1ldGEuaUF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeGlkLCB5aWQsIHJpZCk7XG4gICAgICAgIGNvbnN0IHZpZCA9IG1ldGEudkF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeWlkLCB4aWQsIHJpZCk7XG4gICAgICAgIG1ldGEueFNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHhpZCk7XG4gICAgICAgIG1ldGEueVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHlpZCk7XG4gICAgICAgIG1ldGEuclNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHJpZCk7XG4gICAgICAgIG1ldGEuaVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKGlpZCk7XG4gICAgICAgIG1ldGEudlNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHZpZCk7XG4gICAgfVxuICAgIGdldERhdGFzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdGhpcy5pbmRleF07XG4gICAgfVxuICAgIGdldE1ldGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRoaXMuaW5kZXgpO1xuICAgIH1cbiBnZXRTY2FsZUZvcklkKHNjYWxlSUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnQuc2NhbGVzW3NjYWxlSURdO1xuICAgIH1cbiBfZ2V0T3RoZXJTY2FsZShzY2FsZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgcmV0dXJuIHNjYWxlID09PSBtZXRhLmlTY2FsZSA/IG1ldGEudlNjYWxlIDogbWV0YS5pU2NhbGU7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl91cGRhdGUoJ3Jlc2V0Jyk7XG4gICAgfVxuIF9kZXN0cm95KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGEpIHtcbiAgICAgICAgICAgIHVubGlzdGVuQXJyYXlFdmVudHModGhpcy5fZGF0YSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldGEuX3N0YWNrZWQpIHtcbiAgICAgICAgICAgIGNsZWFyU3RhY2tzKG1ldGEpO1xuICAgICAgICB9XG4gICAgfVxuIF9kYXRhQ2hlY2soKSB7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGRhdGFzZXQuZGF0YSB8fCAoZGF0YXNldC5kYXRhID0gW10pO1xuICAgICAgICBjb25zdCBfZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICAgIGlmIChpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGNvbnZlcnRPYmplY3REYXRhVG9BcnJheShkYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChfZGF0YSAhPT0gZGF0YSkge1xuICAgICAgICAgICAgaWYgKF9kYXRhKSB7XG4gICAgICAgICAgICAgICAgdW5saXN0ZW5BcnJheUV2ZW50cyhfZGF0YSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuQXJyYXlFdmVudHMoZGF0YSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkRWxlbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICB0aGlzLl9kYXRhQ2hlY2soKTtcbiAgICAgICAgaWYgKHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlKSB7XG4gICAgICAgICAgICBtZXRhLmRhdGFzZXQgPSBuZXcgdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBidWlsZE9yVXBkYXRlRWxlbWVudHMocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgICAgICBsZXQgc3RhY2tDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2RhdGFDaGVjaygpO1xuICAgICAgICBjb25zdCBvbGRTdGFja2VkID0gbWV0YS5fc3RhY2tlZDtcbiAgICAgICAgbWV0YS5fc3RhY2tlZCA9IGlzU3RhY2tlZChtZXRhLnZTY2FsZSwgbWV0YSk7XG4gICAgICAgIGlmIChtZXRhLnN0YWNrICE9PSBkYXRhc2V0LnN0YWNrKSB7XG4gICAgICAgICAgICBzdGFja0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgICAgICBtZXRhLnN0YWNrID0gZGF0YXNldC5zdGFjaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXN5bmNFbGVtZW50cyhyZXNldE5ld0VsZW1lbnRzKTtcbiAgICAgICAgaWYgKHN0YWNrQ2hhbmdlZCB8fCBvbGRTdGFja2VkICE9PSBtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgICAgICB1cGRhdGVTdGFja3ModGhpcywgbWV0YS5fcGFyc2VkKTtcbiAgICAgICAgfVxuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgICAgICBjb25zdCBzY29wZUtleXMgPSBjb25maWcuZGF0YXNldFNjb3BlS2V5cyh0aGlzLl90eXBlKTtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzLCB0cnVlKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB0aGlzLl9wYXJzaW5nID0gdGhpcy5vcHRpb25zLnBhcnNpbmc7XG4gICAgICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gICAgfVxuIHBhcnNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IF9jYWNoZWRNZXRhOiBtZXRhICwgX2RhdGE6IGRhdGEgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIF9zdGFja2VkICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgbGV0IHNvcnRlZCA9IHN0YXJ0ID09PSAwICYmIGNvdW50ID09PSBkYXRhLmxlbmd0aCA/IHRydWUgOiBtZXRhLl9zb3J0ZWQ7XG4gICAgICAgIGxldCBwcmV2ID0gc3RhcnQgPiAwICYmIG1ldGEuX3BhcnNlZFtzdGFydCAtIDFdO1xuICAgICAgICBsZXQgaSwgY3VyLCBwYXJzZWQ7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gZGF0YTtcbiAgICAgICAgICAgIG1ldGEuX3NvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBwYXJzZWQgPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkoZGF0YVtzdGFydF0pKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXNOb3RJbk9yZGVyQ29tcGFyZWRUb1ByZXYgPSAoKT0+Y3VyW2lBeGlzXSA9PT0gbnVsbCB8fCBwcmV2ICYmIGN1cltpQXhpc10gPCBwcmV2W2lBeGlzXTtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGNvdW50OyArK2kpe1xuICAgICAgICAgICAgICAgIG1ldGEuX3BhcnNlZFtpICsgc3RhcnRdID0gY3VyID0gcGFyc2VkW2ldO1xuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByZXYgPSBjdXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0YS5fc29ydGVkID0gc29ydGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfc3RhY2tlZCkge1xuICAgICAgICAgICAgdXBkYXRlU3RhY2tzKHRoaXMsIHBhcnNlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IGlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICAgICAgY29uc3Qgc2luZ2xlU2NhbGUgPSBpU2NhbGUgPT09IHZTY2FsZTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGluZGV4O1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgICAgICBbaUF4aXNdOiBzaW5nbGVTY2FsZSB8fCBpU2NhbGUucGFyc2UobGFiZWxzW2luZGV4XSwgaW5kZXgpLFxuICAgICAgICAgICAgICAgIFt2QXhpc106IHZTY2FsZS5wYXJzZShkYXRhW2luZGV4XSwgaW5kZXgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IHhTY2FsZSAsIHlTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgICAgIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICAgICAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgICAgICAgICBwYXJzZWRbaV0gPSB7XG4gICAgICAgICAgICAgICAgeDogeFNjYWxlLnBhcnNlKGl0ZW1bMF0sIGluZGV4KSxcbiAgICAgICAgICAgICAgICB5OiB5U2NhbGUucGFyc2UoaXRlbVsxXSwgaW5kZXgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCB7IHhBeGlzS2V5ID0neCcgLCB5QXhpc0tleSA9J3knICB9ID0gdGhpcy5fcGFyc2luZztcbiAgICAgICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgICAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgICAgICB4OiB4U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB4QXhpc0tleSksIGluZGV4KSxcbiAgICAgICAgICAgICAgICB5OiB5U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB5QXhpc0tleSksIGluZGV4KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBnZXRQYXJzZWQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZE1ldGEuX3BhcnNlZFtpbmRleF07XG4gICAgfVxuIGdldERhdGFFbGVtZW50KGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICAgIH1cbiBhcHBseVN0YWNrKHNjYWxlLCBwYXJzZWQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZWRbc2NhbGUuYXhpc107XG4gICAgICAgIGNvbnN0IHN0YWNrID0ge1xuICAgICAgICAgICAga2V5czogZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIHRydWUpLFxuICAgICAgICAgICAgdmFsdWVzOiBwYXJzZWQuX3N0YWNrc1tzY2FsZS5heGlzXS5fdmlzdWFsVmFsdWVzXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhcHBseVN0YWNrKHN0YWNrLCB2YWx1ZSwgbWV0YS5pbmRleCwge1xuICAgICAgICAgICAgbW9kZVxuICAgICAgICB9KTtcbiAgICB9XG4gdXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjaykge1xuICAgICAgICBjb25zdCBwYXJzZWRWYWx1ZSA9IHBhcnNlZFtzY2FsZS5heGlzXTtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VkVmFsdWUgPT09IG51bGwgPyBOYU4gOiBwYXJzZWRWYWx1ZTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gc3RhY2sgJiYgcGFyc2VkLl9zdGFja3Nbc2NhbGUuYXhpc107XG4gICAgICAgIGlmIChzdGFjayAmJiB2YWx1ZXMpIHtcbiAgICAgICAgICAgIHN0YWNrLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgICAgIHZhbHVlID0gYXBwbHlTdGFjayhzdGFjaywgcGFyc2VkVmFsdWUsIHRoaXMuX2NhY2hlZE1ldGEuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgdmFsdWUpO1xuICAgICAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIHZhbHVlKTtcbiAgICB9XG4gZ2V0TWluTWF4KHNjYWxlLCBjYW5TdGFjaykge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgX3BhcnNlZCA9IG1ldGEuX3BhcnNlZDtcbiAgICAgICAgY29uc3Qgc29ydGVkID0gbWV0YS5fc29ydGVkICYmIHNjYWxlID09PSBtZXRhLmlTY2FsZTtcbiAgICAgICAgY29uc3QgaWxlbiA9IF9wYXJzZWQubGVuZ3RoO1xuICAgICAgICBjb25zdCBvdGhlclNjYWxlID0gdGhpcy5fZ2V0T3RoZXJTY2FsZShzY2FsZSk7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gY3JlYXRlU3RhY2soY2FuU3RhY2ssIG1ldGEsIHRoaXMuY2hhcnQpO1xuICAgICAgICBjb25zdCByYW5nZSA9IHtcbiAgICAgICAgICAgIG1pbjogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICAgICAgbWF4OiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBtaW46IG90aGVyTWluICwgbWF4OiBvdGhlck1heCAgfSA9IGdldFVzZXJCb3VuZHMob3RoZXJTY2FsZSk7XG4gICAgICAgIGxldCBpLCBwYXJzZWQ7XG4gICAgICAgIGZ1bmN0aW9uIF9za2lwKCkge1xuICAgICAgICAgICAgcGFyc2VkID0gX3BhcnNlZFtpXTtcbiAgICAgICAgICAgIGNvbnN0IG90aGVyVmFsdWUgPSBwYXJzZWRbb3RoZXJTY2FsZS5heGlzXTtcbiAgICAgICAgICAgIHJldHVybiAhaXNOdW1iZXJGaW5pdGUocGFyc2VkW3NjYWxlLmF4aXNdKSB8fCBvdGhlck1pbiA+IG90aGVyVmFsdWUgfHwgb3RoZXJNYXggPCBvdGhlclZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpZiAoX3NraXAoKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKTtcbiAgICAgICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc29ydGVkKSB7XG4gICAgICAgICAgICBmb3IoaSA9IGlsZW4gLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICAgICAgaWYgKF9za2lwKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cbiAgICBnZXRBbGxQYXJzZWRWYWx1ZXMoc2NhbGUpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5fY2FjaGVkTWV0YS5fcGFyc2VkO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBwYXJzZWQubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VkW2ldW3NjYWxlLmF4aXNdO1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICAgICAgY29uc3QgdlNjYWxlID0gbWV0YS52U2NhbGU7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBpU2NhbGUgPyAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pIDogJycsXG4gICAgICAgICAgICB2YWx1ZTogdlNjYWxlID8gJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKSA6ICcnXG4gICAgICAgIH07XG4gICAgfVxuIF91cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy51cGRhdGUobW9kZSB8fCAnZGVmYXVsdCcpO1xuICAgICAgICBtZXRhLl9jbGlwID0gdG9DbGlwKHZhbHVlT3JEZWZhdWx0KHRoaXMub3B0aW9ucy5jbGlwLCBkZWZhdWx0Q2xpcChtZXRhLnhTY2FsZSwgbWV0YS55U2NhbGUsIHRoaXMuZ2V0TWF4T3ZlcmZsb3coKSkpKTtcbiAgICB9XG4gdXBkYXRlKG1vZGUpIHt9XG4gICAgZHJhdygpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fY3R4O1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICAgICAgY29uc3QgYXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gW107XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fZHJhd1N0YXJ0IHx8IDA7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5fZHJhd0NvdW50IHx8IGVsZW1lbnRzLmxlbmd0aCAtIHN0YXJ0O1xuICAgICAgICBjb25zdCBkcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRoaXMub3B0aW9ucy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGlmIChtZXRhLmRhdGFzZXQpIHtcbiAgICAgICAgICAgIG1ldGEuZGF0YXNldC5kcmF3KGN0eCwgYXJlYSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmhpZGRlbikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuYWN0aXZlICYmIGRyYXdBY3RpdmVFbGVtZW50c09uVG9wKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZHJhdyhjdHgsIGFyZWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGFjdGl2ZS5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBhY3RpdmVbaV0uZHJhdyhjdHgsIGFyZWEpO1xuICAgICAgICB9XG4gICAgfVxuIGdldFN0eWxlKGluZGV4LCBhY3RpdmUpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IGFjdGl2ZSA/ICdhY3RpdmUnIDogJ2RlZmF1bHQnO1xuICAgICAgICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZCAmJiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXQgPyB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSkgOiB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXggfHwgMCwgbW9kZSk7XG4gICAgfVxuIGdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgbW9kZSkge1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgICAgIGxldCBjb250ZXh0O1xuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuX2NhY2hlZE1ldGEuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgY29udGV4dCA9IGVsZW1lbnQuJGNvbnRleHQgfHwgKGVsZW1lbnQuJGNvbnRleHQgPSBjcmVhdGVEYXRhQ29udGV4dCh0aGlzLmdldENvbnRleHQoKSwgaW5kZXgsIGVsZW1lbnQpKTtcbiAgICAgICAgICAgIGNvbnRleHQucGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICAgICAgY29udGV4dC5yYXcgPSBkYXRhc2V0LmRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YUluZGV4ID0gaW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0ID0gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZURhdGFzZXRDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLmluZGV4KSk7XG4gICAgICAgICAgICBjb250ZXh0LmRhdGFzZXQgPSBkYXRhc2V0O1xuICAgICAgICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmFjdGl2ZSA9ICEhYWN0aXZlO1xuICAgICAgICBjb250ZXh0Lm1vZGUgPSBtb2RlO1xuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG4gcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhc2V0RWxlbWVudFR5cGUuaWQsIG1vZGUpO1xuICAgIH1cbiByZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhRWxlbWVudFR5cGUuaWQsIG1vZGUsIGluZGV4KTtcbiAgICB9XG4gX3Jlc29sdmVFbGVtZW50T3B0aW9ucyhlbGVtZW50VHlwZSwgbW9kZSA9ICdkZWZhdWx0JywgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gbW9kZSA9PT0gJ2FjdGl2ZSc7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkRGF0YU9wdHM7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gZWxlbWVudFR5cGUgKyAnLScgKyBtb2RlO1xuICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZVtjYWNoZUtleV07XG4gICAgICAgIGNvbnN0IHNoYXJpbmcgPSB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgJiYgZGVmaW5lZChpbmRleCk7XG4gICAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9uZUlmTm90U2hhcmVkKGNhY2hlZCwgc2hhcmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jaGFydC5jb25maWc7XG4gICAgICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0RWxlbWVudFNjb3BlS2V5cyh0aGlzLl90eXBlLCBlbGVtZW50VHlwZSk7XG4gICAgICAgIGNvbnN0IHByZWZpeGVzID0gYWN0aXZlID8gW1xuICAgICAgICAgICAgYCR7ZWxlbWVudFR5cGV9SG92ZXJgLFxuICAgICAgICAgICAgJ2hvdmVyJyxcbiAgICAgICAgICAgIGVsZW1lbnRUeXBlLFxuICAgICAgICAgICAgJydcbiAgICAgICAgXSA6IFtcbiAgICAgICAgICAgIGVsZW1lbnRUeXBlLFxuICAgICAgICAgICAgJydcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0cy5lbGVtZW50c1tlbGVtZW50VHlwZV0pO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gKCk9PnRoaXMuZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlLCBtb2RlKTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gY29uZmlnLnJlc29sdmVOYW1lZE9wdGlvbnMoc2NvcGVzLCBuYW1lcywgY29udGV4dCwgcHJlZml4ZXMpO1xuICAgICAgICBpZiAodmFsdWVzLiRzaGFyZWQpIHtcbiAgICAgICAgICAgIHZhbHVlcy4kc2hhcmVkID0gc2hhcmluZztcbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IE9iamVjdC5mcmVlemUoY2xvbmVJZk5vdFNoYXJlZCh2YWx1ZXMsIHNoYXJpbmcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cbiBfcmVzb2x2ZUFuaW1hdGlvbnMoaW5kZXgsIHRyYW5zaXRpb24sIGFjdGl2ZSkge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkRGF0YU9wdHM7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gYGFuaW1hdGlvbi0ke3RyYW5zaXRpb259YDtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGVbY2FjaGVLZXldO1xuICAgICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvcHRpb25zO1xuICAgICAgICBpZiAoY2hhcnQub3B0aW9ucy5hbmltYXRpb24gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNoYXJ0LmNvbmZpZztcbiAgICAgICAgICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzKHRoaXMuX3R5cGUsIHRyYW5zaXRpb24pO1xuICAgICAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCB0aGlzLmdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgdHJhbnNpdGlvbikpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9ucyhjaGFydCwgb3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9jYWNoZWFibGUpIHtcbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IE9iamVjdC5mcmVlemUoYW5pbWF0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuIGdldFNoYXJlZE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zaGFyZWRPcHRpb25zIHx8ICh0aGlzLl9zaGFyZWRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucykpO1xuICAgIH1cbiBpbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAhc2hhcmVkT3B0aW9ucyB8fCBpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkgfHwgdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgIH1cbiBfZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSkge1xuICAgICAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBjb25zdCBwcmV2aW91c2x5U2hhcmVkT3B0aW9ucyA9IHRoaXMuX3NoYXJlZE9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICAgICAgY29uc3QgaW5jbHVkZU9wdGlvbnMgPSB0aGlzLmluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpIHx8IHNoYXJlZE9wdGlvbnMgIT09IHByZXZpb3VzbHlTaGFyZWRPcHRpb25zO1xuICAgICAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNoYXJlZE9wdGlvbnMsXG4gICAgICAgICAgICBpbmNsdWRlT3B0aW9uc1xuICAgICAgICB9O1xuICAgIH1cbiB1cGRhdGVFbGVtZW50KGVsZW1lbnQsIGluZGV4LCBwcm9wZXJ0aWVzLCBtb2RlKSB7XG4gICAgICAgIGlmIChpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgbW9kZSkudXBkYXRlKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgfVxuIHVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgbmV3T3B0aW9ucykge1xuICAgICAgICBpZiAoc2hhcmVkT3B0aW9ucyAmJiAhaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpLnVwZGF0ZShzaGFyZWRPcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiBfc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsIG1vZGUsIGFjdGl2ZSkge1xuICAgICAgICBlbGVtZW50LmFjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZ2V0U3R5bGUoaW5kZXgsIGFjdGl2ZSk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCBtb2RlLCBhY3RpdmUpLnVwZGF0ZShlbGVtZW50LCB7XG4gICAgICAgICAgICBvcHRpb25zOiAhYWN0aXZlICYmIHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhvcHRpb25zKSB8fCBvcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW1vdmVIb3ZlclN0eWxlKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgfVxuICAgIHNldEhvdmVyU3R5bGUoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCBpbmRleCwgJ2FjdGl2ZScsIHRydWUpO1xuICAgIH1cbiBfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGUoKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXQ7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCB1bmRlZmluZWQsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gX3NldERhdGFzZXRIb3ZlclN0eWxlKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0O1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgdW5kZWZpbmVkLCAnYWN0aXZlJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gX3Jlc3luY0VsZW1lbnRzKHJlc2V0TmV3RWxlbWVudHMpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICBmb3IgKGNvbnN0IFttZXRob2QsIGFyZzEsIGFyZzJdIG9mIHRoaXMuX3N5bmNMaXN0KXtcbiAgICAgICAgICAgIHRoaXNbbWV0aG9kXShhcmcxLCBhcmcyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgICAgICBjb25zdCBudW1NZXRhID0gZWxlbWVudHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBudW1EYXRhID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gTWF0aC5taW4obnVtRGF0YSwgbnVtTWV0YSk7XG4gICAgICAgIGlmIChjb3VudCkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZSgwLCBjb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bURhdGEgPiBudW1NZXRhKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnNlcnRFbGVtZW50cyhudW1NZXRhLCBudW1EYXRhIC0gbnVtTWV0YSwgcmVzZXROZXdFbGVtZW50cyk7XG4gICAgICAgIH0gZWxzZSBpZiAobnVtRGF0YSA8IG51bU1ldGEpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUVsZW1lbnRzKG51bURhdGEsIG51bU1ldGEgLSBudW1EYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiBfaW5zZXJ0RWxlbWVudHMoc3RhcnQsIGNvdW50LCByZXNldE5ld0VsZW1lbnRzID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZGF0YSA9IG1ldGEuZGF0YTtcbiAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBjb3VudDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGNvbnN0IG1vdmUgPSAoYXJyKT0+e1xuICAgICAgICAgICAgYXJyLmxlbmd0aCArPSBjb3VudDtcbiAgICAgICAgICAgIGZvcihpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gZW5kOyBpLS0pe1xuICAgICAgICAgICAgICAgIGFycltpXSA9IGFycltpIC0gY291bnRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBtb3ZlKGRhdGEpO1xuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpe1xuICAgICAgICAgICAgZGF0YVtpXSA9IG5ldyB0aGlzLmRhdGFFbGVtZW50VHlwZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICAgICAgICBtb3ZlKG1ldGEuX3BhcnNlZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJzZShzdGFydCwgY291bnQpO1xuICAgICAgICBpZiAocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhkYXRhLCBzdGFydCwgY291bnQsICdyZXNldCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKGVsZW1lbnQsIHN0YXJ0LCBjb3VudCwgbW9kZSkge31cbiBfcmVtb3ZlRWxlbWVudHMoc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBpZiAodGhpcy5fcGFyc2luZykge1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlZCA9IG1ldGEuX3BhcnNlZC5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcbiAgICAgICAgICAgIGlmIChtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSwgcmVtb3ZlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWV0YS5kYXRhLnNwbGljZShzdGFydCwgY291bnQpO1xuICAgIH1cbiBfc3luYyhhcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9zeW5jTGlzdC5wdXNoKGFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgW21ldGhvZCwgYXJnMSwgYXJnMl0gPSBhcmdzO1xuICAgICAgICAgICAgdGhpc1ttZXRob2RdKGFyZzEsIGFyZzIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhcnQuX2RhdGFDaGFuZ2VzLnB1c2goW1xuICAgICAgICAgICAgdGhpcy5pbmRleCxcbiAgICAgICAgICAgIC4uLmFyZ3NcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFQdXNoKCkge1xuICAgICAgICBjb25zdCBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgJ19pbnNlcnRFbGVtZW50cycsXG4gICAgICAgICAgICB0aGlzLmdldERhdGFzZXQoKS5kYXRhLmxlbmd0aCAtIGNvdW50LFxuICAgICAgICAgICAgY291bnRcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFQb3AoKSB7XG4gICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgJ19yZW1vdmVFbGVtZW50cycsXG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRNZXRhLmRhdGEubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFTaGlmdCgpIHtcbiAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAnX3JlbW92ZUVsZW1lbnRzJyxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBfb25EYXRhU3BsaWNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBpZiAoY291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgICAgICdfcmVtb3ZlRWxlbWVudHMnLFxuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIGNvdW50XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgICAgICBpZiAobmV3Q291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgICAgICdfaW5zZXJ0RWxlbWVudHMnLFxuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIG5ld0NvdW50XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfb25EYXRhVW5zaGlmdCgpIHtcbiAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAnX2luc2VydEVsZW1lbnRzJyxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgIF0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIHR5cGUpIHtcbiAgICBpZiAoIXNjYWxlLl9jYWNoZS4kYmFyKSB7XG4gICAgICAgIGNvbnN0IHZpc2libGVNZXRhcyA9IHNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpO1xuICAgICAgICBsZXQgdmFsdWVzID0gW107XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSB2aXNpYmxlTWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodmlzaWJsZU1ldGFzW2ldLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHNjYWxlKSk7XG4gICAgICAgIH1cbiAgICAgICAgc2NhbGUuX2NhY2hlLiRiYXIgPSBfYXJyYXlVbmlxdWUodmFsdWVzLnNvcnQoKGEsIGIpPT5hIC0gYikpO1xuICAgIH1cbiAgICByZXR1cm4gc2NhbGUuX2NhY2hlLiRiYXI7XG59XG4gZnVuY3Rpb24gY29tcHV0ZU1pblNhbXBsZVNpemUobWV0YSkge1xuICAgIGNvbnN0IHNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgY29uc3QgdmFsdWVzID0gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIG1ldGEudHlwZSk7XG4gICAgbGV0IG1pbiA9IHNjYWxlLl9sZW5ndGg7XG4gICAgbGV0IGksIGlsZW4sIGN1cnIsIHByZXY7XG4gICAgY29uc3QgdXBkYXRlTWluQW5kUHJldiA9ICgpPT57XG4gICAgICAgIGlmIChjdXJyID09PSAzMjc2NyB8fCBjdXJyID09PSAtMzI3NjgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5lZChwcmV2KSkge1xuICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBNYXRoLmFicyhjdXJyIC0gcHJldikgfHwgbWluKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gY3VycjtcbiAgICB9O1xuICAgIGZvcihpID0gMCwgaWxlbiA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjdXJyID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZXNbaV0pO1xuICAgICAgICB1cGRhdGVNaW5BbmRQcmV2KCk7XG4gICAgfVxuICAgIHByZXYgPSB1bmRlZmluZWQ7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gc2NhbGUudGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgY3VyciA9IHNjYWxlLmdldFBpeGVsRm9yVGljayhpKTtcbiAgICAgICAgdXBkYXRlTWluQW5kUHJldigpO1xuICAgIH1cbiAgICByZXR1cm4gbWluO1xufVxuIGZ1bmN0aW9uIGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpIHtcbiAgICBjb25zdCB0aGlja25lc3MgPSBvcHRpb25zLmJhclRoaWNrbmVzcztcbiAgICBsZXQgc2l6ZSwgcmF0aW87XG4gICAgaWYgKGlzTnVsbE9yVW5kZWYodGhpY2tuZXNzKSkge1xuICAgICAgICBzaXplID0gcnVsZXIubWluICogb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gICAgICAgIHJhdGlvID0gb3B0aW9ucy5iYXJQZXJjZW50YWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSB0aGlja25lc3MgKiBzdGFja0NvdW50O1xuICAgICAgICByYXRpbyA9IDE7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNodW5rOiBzaXplIC8gc3RhY2tDb3VudCxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHN0YXJ0OiBydWxlci5waXhlbHNbaW5kZXhdIC0gc2l6ZSAvIDJcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KSB7XG4gICAgY29uc3QgcGl4ZWxzID0gcnVsZXIucGl4ZWxzO1xuICAgIGNvbnN0IGN1cnIgPSBwaXhlbHNbaW5kZXhdO1xuICAgIGxldCBwcmV2ID0gaW5kZXggPiAwID8gcGl4ZWxzW2luZGV4IC0gMV0gOiBudWxsO1xuICAgIGxldCBuZXh0ID0gaW5kZXggPCBwaXhlbHMubGVuZ3RoIC0gMSA/IHBpeGVsc1tpbmRleCArIDFdIDogbnVsbDtcbiAgICBjb25zdCBwZXJjZW50ID0gb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gICAgaWYgKHByZXYgPT09IG51bGwpIHtcbiAgICAgICAgcHJldiA9IGN1cnIgLSAobmV4dCA9PT0gbnVsbCA/IHJ1bGVyLmVuZCAtIHJ1bGVyLnN0YXJ0IDogbmV4dCAtIGN1cnIpO1xuICAgIH1cbiAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgICAgICBuZXh0ID0gY3VyciArIGN1cnIgLSBwcmV2O1xuICAgIH1cbiAgICBjb25zdCBzdGFydCA9IGN1cnIgLSAoY3VyciAtIE1hdGgubWluKHByZXYsIG5leHQpKSAvIDIgKiBwZXJjZW50O1xuICAgIGNvbnN0IHNpemUgPSBNYXRoLmFicyhuZXh0IC0gcHJldikgLyAyICogcGVyY2VudDtcbiAgICByZXR1cm4ge1xuICAgICAgICBjaHVuazogc2l6ZSAvIHN0YWNrQ291bnQsXG4gICAgICAgIHJhdGlvOiBvcHRpb25zLmJhclBlcmNlbnRhZ2UsXG4gICAgICAgIHN0YXJ0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlRmxvYXRCYXIoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSkge1xuICAgIGNvbnN0IHN0YXJ0VmFsdWUgPSB2U2NhbGUucGFyc2UoZW50cnlbMF0sIGkpO1xuICAgIGNvbnN0IGVuZFZhbHVlID0gdlNjYWxlLnBhcnNlKGVudHJ5WzFdLCBpKTtcbiAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG4gICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoc3RhcnRWYWx1ZSwgZW5kVmFsdWUpO1xuICAgIGxldCBiYXJTdGFydCA9IG1pbjtcbiAgICBsZXQgYmFyRW5kID0gbWF4O1xuICAgIGlmIChNYXRoLmFicyhtaW4pID4gTWF0aC5hYnMobWF4KSkge1xuICAgICAgICBiYXJTdGFydCA9IG1heDtcbiAgICAgICAgYmFyRW5kID0gbWluO1xuICAgIH1cbiAgICBpdGVtW3ZTY2FsZS5heGlzXSA9IGJhckVuZDtcbiAgICBpdGVtLl9jdXN0b20gPSB7XG4gICAgICAgIGJhclN0YXJ0LFxuICAgICAgICBiYXJFbmQsXG4gICAgICAgIHN0YXJ0OiBzdGFydFZhbHVlLFxuICAgICAgICBlbmQ6IGVuZFZhbHVlLFxuICAgICAgICBtaW4sXG4gICAgICAgIG1heFxuICAgIH07XG59XG5mdW5jdGlvbiBwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpIHtcbiAgICBpZiAoaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgcGFyc2VGbG9hdEJhcihlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtW3ZTY2FsZS5heGlzXSA9IHZTY2FsZS5wYXJzZShlbnRyeSwgaSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufVxuZnVuY3Rpb24gcGFyc2VBcnJheU9yUHJpbWl0aXZlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICAgIGNvbnN0IHZTY2FsZSA9IG1ldGEudlNjYWxlO1xuICAgIGNvbnN0IGxhYmVscyA9IGlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICBjb25zdCBzaW5nbGVTY2FsZSA9IGlTY2FsZSA9PT0gdlNjYWxlO1xuICAgIGNvbnN0IHBhcnNlZCA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBpdGVtLCBlbnRyeTtcbiAgICBmb3IoaSA9IHN0YXJ0LCBpbGVuID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGVudHJ5ID0gZGF0YVtpXTtcbiAgICAgICAgaXRlbSA9IHt9O1xuICAgICAgICBpdGVtW2lTY2FsZS5heGlzXSA9IHNpbmdsZVNjYWxlIHx8IGlTY2FsZS5wYXJzZShsYWJlbHNbaV0sIGkpO1xuICAgICAgICBwYXJzZWQucHVzaChwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cbmZ1bmN0aW9uIGlzRmxvYXRCYXIoY3VzdG9tKSB7XG4gICAgcmV0dXJuIGN1c3RvbSAmJiBjdXN0b20uYmFyU3RhcnQgIT09IHVuZGVmaW5lZCAmJiBjdXN0b20uYmFyRW5kICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkge1xuICAgIGlmIChzaXplICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBzaWduKHNpemUpO1xuICAgIH1cbiAgICByZXR1cm4gKHZTY2FsZS5pc0hvcml6b250YWwoKSA/IDEgOiAtMSkgKiAodlNjYWxlLm1pbiA+PSBhY3R1YWxCYXNlID8gMSA6IC0xKTtcbn1cbmZ1bmN0aW9uIGJvcmRlclByb3BzKHByb3BlcnRpZXMpIHtcbiAgICBsZXQgcmV2ZXJzZSwgc3RhcnQsIGVuZCwgdG9wLCBib3R0b207XG4gICAgaWYgKHByb3BlcnRpZXMuaG9yaXpvbnRhbCkge1xuICAgICAgICByZXZlcnNlID0gcHJvcGVydGllcy5iYXNlID4gcHJvcGVydGllcy54O1xuICAgICAgICBzdGFydCA9ICdsZWZ0JztcbiAgICAgICAgZW5kID0gJ3JpZ2h0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXZlcnNlID0gcHJvcGVydGllcy5iYXNlIDwgcHJvcGVydGllcy55O1xuICAgICAgICBzdGFydCA9ICdib3R0b20nO1xuICAgICAgICBlbmQgPSAndG9wJztcbiAgICB9XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgdG9wID0gJ2VuZCc7XG4gICAgICAgIGJvdHRvbSA9ICdzdGFydCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdG9wID0gJ3N0YXJ0JztcbiAgICAgICAgYm90dG9tID0gJ2VuZCc7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmQsXG4gICAgICAgIHJldmVyc2UsXG4gICAgICAgIHRvcCxcbiAgICAgICAgYm90dG9tXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KSB7XG4gICAgbGV0IGVkZ2UgPSBvcHRpb25zLmJvcmRlclNraXBwZWQ7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgaWYgKCFlZGdlKSB7XG4gICAgICAgIHByb3BlcnRpZXMuYm9yZGVyU2tpcHBlZCA9IHJlcztcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZWRnZSA9PT0gdHJ1ZSkge1xuICAgICAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSB7XG4gICAgICAgICAgICB0b3A6IHRydWUsXG4gICAgICAgICAgICByaWdodDogdHJ1ZSxcbiAgICAgICAgICAgIGJvdHRvbTogdHJ1ZSxcbiAgICAgICAgICAgIGxlZnQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICwgcmV2ZXJzZSAsIHRvcCAsIGJvdHRvbSAgfSA9IGJvcmRlclByb3BzKHByb3BlcnRpZXMpO1xuICAgIGlmIChlZGdlID09PSAnbWlkZGxlJyAmJiBzdGFjaykge1xuICAgICAgICBwcm9wZXJ0aWVzLmVuYWJsZUJvcmRlclJhZGl1cyA9IHRydWU7XG4gICAgICAgIGlmICgoc3RhY2suX3RvcCB8fCAwKSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIGVkZ2UgPSB0b3A7XG4gICAgICAgIH0gZWxzZSBpZiAoKHN0YWNrLl9ib3R0b20gfHwgMCkgPT09IGluZGV4KSB7XG4gICAgICAgICAgICBlZGdlID0gYm90dG9tO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzW3BhcnNlRWRnZShib3R0b20sIHN0YXJ0LCBlbmQsIHJldmVyc2UpXSA9IHRydWU7XG4gICAgICAgICAgICBlZGdlID0gdG9wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlc1twYXJzZUVkZ2UoZWRnZSwgc3RhcnQsIGVuZCwgcmV2ZXJzZSldID0gdHJ1ZTtcbiAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSByZXM7XG59XG5mdW5jdGlvbiBwYXJzZUVkZ2UoZWRnZSwgYSwgYiwgcmV2ZXJzZSkge1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIGVkZ2UgPSBzd2FwKGVkZ2UsIGEsIGIpO1xuICAgICAgICBlZGdlID0gc3RhcnRFbmQoZWRnZSwgYiwgYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWRnZSA9IHN0YXJ0RW5kKGVkZ2UsIGEsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZWRnZTtcbn1cbmZ1bmN0aW9uIHN3YXAob3JpZywgdjEsIHYyKSB7XG4gICAgcmV0dXJuIG9yaWcgPT09IHYxID8gdjIgOiBvcmlnID09PSB2MiA/IHYxIDogb3JpZztcbn1cbmZ1bmN0aW9uIHN0YXJ0RW5kKHYsIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gdiA9PT0gJ3N0YXJ0JyA/IHN0YXJ0IDogdiA9PT0gJ2VuZCcgPyBlbmQgOiB2O1xufVxuZnVuY3Rpb24gc2V0SW5mbGF0ZUFtb3VudChwcm9wZXJ0aWVzLCB7IGluZmxhdGVBbW91bnQgIH0sIHJhdGlvKSB7XG4gICAgcHJvcGVydGllcy5pbmZsYXRlQW1vdW50ID0gaW5mbGF0ZUFtb3VudCA9PT0gJ2F1dG8nID8gcmF0aW8gPT09IDEgPyAwLjMzIDogMCA6IGluZmxhdGVBbW91bnQ7XG59XG5jbGFzcyBCYXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdiYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAnYmFyJyxcbiAgICAgICAgY2F0ZWdvcnlQZXJjZW50YWdlOiAwLjgsXG4gICAgICAgIGJhclBlcmNlbnRhZ2U6IDAuOSxcbiAgICAgICAgZ3JvdXBlZDogdHJ1ZSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgICAgICdiYXNlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCdcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgX2luZGV4Xzoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjYXRlZ29yeScsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF92YWx1ZV86IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiBwYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gcGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHsgeEF4aXNLZXkgPSd4JyAsIHlBeGlzS2V5ID0neScgIH0gPSB0aGlzLl9wYXJzaW5nO1xuICAgICAgICBjb25zdCBpQXhpc0tleSA9IGlTY2FsZS5heGlzID09PSAneCcgPyB4QXhpc0tleSA6IHlBeGlzS2V5O1xuICAgICAgICBjb25zdCB2QXhpc0tleSA9IHZTY2FsZS5heGlzID09PSAneCcgPyB4QXhpc0tleSA6IHlBeGlzS2V5O1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGl0ZW0sIG9iajtcbiAgICAgICAgZm9yKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgb2JqID0gZGF0YVtpXTtcbiAgICAgICAgICAgIGl0ZW0gPSB7fTtcbiAgICAgICAgICAgIGl0ZW1baVNjYWxlLmF4aXNdID0gaVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkob2JqLCBpQXhpc0tleSksIGkpO1xuICAgICAgICAgICAgcGFyc2VkLnB1c2gocGFyc2VWYWx1ZShyZXNvbHZlT2JqZWN0S2V5KG9iaiwgdkF4aXNLZXkpLCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiB1cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spO1xuICAgICAgICBjb25zdCBjdXN0b20gPSBwYXJzZWQuX2N1c3RvbTtcbiAgICAgICAgaWYgKGN1c3RvbSAmJiBzY2FsZSA9PT0gdGhpcy5fY2FjaGVkTWV0YS52U2NhbGUpIHtcbiAgICAgICAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgY3VzdG9tLm1pbik7XG4gICAgICAgICAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIGN1c3RvbS5tYXgpO1xuICAgICAgICB9XG4gICAgfVxuIGdldE1heE92ZXJmbG93KCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGlzRmxvYXRCYXIoY3VzdG9tKSA/ICdbJyArIGN1c3RvbS5zdGFydCArICcsICcgKyBjdXN0b20uZW5kICsgJ10nIDogJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgbWV0YS5zdGFjayA9IHRoaXMuZ2V0RGF0YXNldCgpLnN0YWNrO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhtZXRhLmRhdGEsIDAsIG1ldGEuZGF0YS5sZW5ndGgsIG1vZGUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhiYXJzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCB7IGluZGV4ICwgX2NhY2hlZE1ldGE6IHsgdlNjYWxlICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYmFzZSA9IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKTtcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbCA9IHZTY2FsZS5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgcnVsZXIgPSB0aGlzLl9nZXRSdWxlcigpO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHZwaXhlbHMgPSByZXNldCB8fCBpc051bGxPclVuZGVmKHBhcnNlZFt2U2NhbGUuYXhpc10pID8ge1xuICAgICAgICAgICAgICAgIGJhc2UsXG4gICAgICAgICAgICAgICAgaGVhZDogYmFzZVxuICAgICAgICAgICAgfSA6IHRoaXMuX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKGkpO1xuICAgICAgICAgICAgY29uc3QgaXBpeGVscyA9IHRoaXMuX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGksIHJ1bGVyKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gKHBhcnNlZC5fc3RhY2tzIHx8IHt9KVt2U2NhbGUuYXhpc107XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIGhvcml6b250YWwsXG4gICAgICAgICAgICAgICAgYmFzZTogdnBpeGVscy5iYXNlLFxuICAgICAgICAgICAgICAgIGVuYWJsZUJvcmRlclJhZGl1czogIXN0YWNrIHx8IGlzRmxvYXRCYXIocGFyc2VkLl9jdXN0b20pIHx8IGluZGV4ID09PSBzdGFjay5fdG9wIHx8IGluZGV4ID09PSBzdGFjay5fYm90dG9tLFxuICAgICAgICAgICAgICAgIHg6IGhvcml6b250YWwgPyB2cGl4ZWxzLmhlYWQgOiBpcGl4ZWxzLmNlbnRlcixcbiAgICAgICAgICAgICAgICB5OiBob3Jpem9udGFsID8gaXBpeGVscy5jZW50ZXIgOiB2cGl4ZWxzLmhlYWQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBob3Jpem9udGFsID8gaXBpeGVscy5zaXplIDogTWF0aC5hYnModnBpeGVscy5zaXplKSxcbiAgICAgICAgICAgICAgICB3aWR0aDogaG9yaXpvbnRhbCA/IE1hdGguYWJzKHZwaXhlbHMuc2l6ZSkgOiBpcGl4ZWxzLnNpemVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBiYXJzW2ldLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gcHJvcGVydGllcy5vcHRpb25zIHx8IGJhcnNbaV0ub3B0aW9ucztcbiAgICAgICAgICAgIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KTtcbiAgICAgICAgICAgIHNldEluZmxhdGVBbW91bnQocHJvcGVydGllcywgb3B0aW9ucywgcnVsZXIucmF0aW8pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGJhcnNbaV0sIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgfVxuIF9nZXRTdGFja3MobGFzdCwgZGF0YUluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICB9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSBpU2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModGhpcy5fdHlwZSkuZmlsdGVyKChtZXRhKT0+bWV0YS5jb250cm9sbGVyLm9wdGlvbnMuZ3JvdXBlZCk7XG4gICAgICAgIGNvbnN0IHN0YWNrZWQgPSBpU2NhbGUub3B0aW9ucy5zdGFja2VkO1xuICAgICAgICBjb25zdCBzdGFja3MgPSBbXTtcbiAgICAgICAgY29uc3Qgc2tpcE51bGwgPSAobWV0YSk9PntcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IG1ldGEuY29udHJvbGxlci5nZXRQYXJzZWQoZGF0YUluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHBhcnNlZCAmJiBwYXJzZWRbbWV0YS52U2NhbGUuYXhpc107XG4gICAgICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZih2YWwpIHx8IGlzTmFOKHZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCBtZXRhIG9mIG1ldGFzZXRzKXtcbiAgICAgICAgICAgIGlmIChkYXRhSW5kZXggIT09IHVuZGVmaW5lZCAmJiBza2lwTnVsbChtZXRhKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YWNrZWQgPT09IGZhbHNlIHx8IHN0YWNrcy5pbmRleE9mKG1ldGEuc3RhY2spID09PSAtMSB8fCBzdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc3RhY2tzLnB1c2gobWV0YS5zdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWV0YS5pbmRleCA9PT0gbGFzdCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghc3RhY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3RhY2tzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhY2tzO1xuICAgIH1cbiBfZ2V0U3RhY2tDb3VudChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0U3RhY2tzKHVuZGVmaW5lZCwgaW5kZXgpLmxlbmd0aDtcbiAgICB9XG4gX2dldFN0YWNrSW5kZXgoZGF0YXNldEluZGV4LCBuYW1lLCBkYXRhSW5kZXgpIHtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gdGhpcy5fZ2V0U3RhY2tzKGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBuYW1lICE9PSB1bmRlZmluZWQgPyBzdGFja3MuaW5kZXhPZihuYW1lKSA6IC0xO1xuICAgICAgICByZXR1cm4gaW5kZXggPT09IC0xID8gc3RhY2tzLmxlbmd0aCAtIDEgOiBpbmRleDtcbiAgICB9XG4gX2dldFJ1bGVyKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgaVNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgICAgIGNvbnN0IHBpeGVscyA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YS5kYXRhLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBwaXhlbHMucHVzaChpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldFBhcnNlZChpKVtpU2NhbGUuYXhpc10sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYXJUaGlja25lc3MgPSBvcHRzLmJhclRoaWNrbmVzcztcbiAgICAgICAgY29uc3QgbWluID0gYmFyVGhpY2tuZXNzIHx8IGNvbXB1dGVNaW5TYW1wbGVTaXplKG1ldGEpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluLFxuICAgICAgICAgICAgcGl4ZWxzLFxuICAgICAgICAgICAgc3RhcnQ6IGlTY2FsZS5fc3RhcnRQaXhlbCxcbiAgICAgICAgICAgIGVuZDogaVNjYWxlLl9lbmRQaXhlbCxcbiAgICAgICAgICAgIHN0YWNrQ291bnQ6IHRoaXMuX2dldFN0YWNrQ291bnQoKSxcbiAgICAgICAgICAgIHNjYWxlOiBpU2NhbGUsXG4gICAgICAgICAgICBncm91cGVkOiBvcHRzLmdyb3VwZWQsXG4gICAgICAgICAgICByYXRpbzogYmFyVGhpY2tuZXNzID8gMSA6IG9wdHMuY2F0ZWdvcnlQZXJjZW50YWdlICogb3B0cy5iYXJQZXJjZW50YWdlXG4gICAgICAgIH07XG4gICAgfVxuIF9jYWxjdWxhdGVCYXJWYWx1ZVBpeGVscyhpbmRleCkge1xuICAgICAgICBjb25zdCB7IF9jYWNoZWRNZXRhOiB7IHZTY2FsZSAsIF9zdGFja2VkICwgaW5kZXg6IGRhdGFzZXRJbmRleCAgfSAsIG9wdGlvbnM6IHsgYmFzZTogYmFzZVZhbHVlICwgbWluQmFyTGVuZ3RoICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYWN0dWFsQmFzZSA9IGJhc2VWYWx1ZSB8fCAwO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgICAgICBjb25zdCBmbG9hdGluZyA9IGlzRmxvYXRCYXIoY3VzdG9tKTtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VkW3ZTY2FsZS5heGlzXTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgbGV0IGxlbmd0aCA9IF9zdGFja2VkID8gdGhpcy5hcHBseVN0YWNrKHZTY2FsZSwgcGFyc2VkLCBfc3RhY2tlZCkgOiB2YWx1ZTtcbiAgICAgICAgbGV0IGhlYWQsIHNpemU7XG4gICAgICAgIGlmIChsZW5ndGggIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBzdGFydCA9IGxlbmd0aCAtIHZhbHVlO1xuICAgICAgICAgICAgbGVuZ3RoID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZsb2F0aW5nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGN1c3RvbS5iYXJTdGFydDtcbiAgICAgICAgICAgIGxlbmd0aCA9IGN1c3RvbS5iYXJFbmQgLSBjdXN0b20uYmFyU3RhcnQ7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IDAgJiYgc2lnbih2YWx1ZSkgIT09IHNpZ24oY3VzdG9tLmJhckVuZCkpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydCArPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydFZhbHVlID0gIWlzTnVsbE9yVW5kZWYoYmFzZVZhbHVlKSAmJiAhZmxvYXRpbmcgPyBiYXNlVmFsdWUgOiBzdGFydDtcbiAgICAgICAgbGV0IGJhc2UgPSB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShzdGFydFZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICAgICAgICBoZWFkID0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnQgKyBsZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVhZCA9IGJhc2U7XG4gICAgICAgIH1cbiAgICAgICAgc2l6ZSA9IGhlYWQgLSBiYXNlO1xuICAgICAgICBpZiAoTWF0aC5hYnMoc2l6ZSkgPCBtaW5CYXJMZW5ndGgpIHtcbiAgICAgICAgICAgIHNpemUgPSBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkgKiBtaW5CYXJMZW5ndGg7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IGFjdHVhbEJhc2UpIHtcbiAgICAgICAgICAgICAgICBiYXNlIC09IHNpemUgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3RhcnRQaXhlbCA9IHZTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMCk7XG4gICAgICAgICAgICBjb25zdCBlbmRQaXhlbCA9IHZTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMSk7XG4gICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFBpeGVsLCBlbmRQaXhlbCk7XG4gICAgICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChzdGFydFBpeGVsLCBlbmRQaXhlbCk7XG4gICAgICAgICAgICBiYXNlID0gTWF0aC5tYXgoTWF0aC5taW4oYmFzZSwgbWF4KSwgbWluKTtcbiAgICAgICAgICAgIGhlYWQgPSBiYXNlICsgc2l6ZTtcbiAgICAgICAgICAgIGlmIChfc3RhY2tlZCAmJiAhZmxvYXRpbmcpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQuX3N0YWNrc1t2U2NhbGUuYXhpc10uX3Zpc3VhbFZhbHVlc1tkYXRhc2V0SW5kZXhdID0gdlNjYWxlLmdldFZhbHVlRm9yUGl4ZWwoaGVhZCkgLSB2U2NhbGUuZ2V0VmFsdWVGb3JQaXhlbChiYXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFzZSA9PT0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoYWN0dWFsQmFzZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbGZHcmlkID0gc2lnbihzaXplKSAqIHZTY2FsZS5nZXRMaW5lV2lkdGhGb3JWYWx1ZShhY3R1YWxCYXNlKSAvIDI7XG4gICAgICAgICAgICBiYXNlICs9IGhhbGZHcmlkO1xuICAgICAgICAgICAgc2l6ZSAtPSBoYWxmR3JpZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIGJhc2UsXG4gICAgICAgICAgICBoZWFkLFxuICAgICAgICAgICAgY2VudGVyOiBoZWFkICsgc2l6ZSAvIDJcbiAgICAgICAgfTtcbiAgICB9XG4gX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGluZGV4LCBydWxlcikge1xuICAgICAgICBjb25zdCBzY2FsZSA9IHJ1bGVyLnNjYWxlO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBza2lwTnVsbCA9IG9wdGlvbnMuc2tpcE51bGw7XG4gICAgICAgIGNvbnN0IG1heEJhclRoaWNrbmVzcyA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMubWF4QmFyVGhpY2tuZXNzLCBJbmZpbml0eSk7XG4gICAgICAgIGxldCBjZW50ZXIsIHNpemU7XG4gICAgICAgIGlmIChydWxlci5ncm91cGVkKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFja0NvdW50ID0gc2tpcE51bGwgPyB0aGlzLl9nZXRTdGFja0NvdW50KGluZGV4KSA6IHJ1bGVyLnN0YWNrQ291bnQ7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzID09PSAnZmxleCcgPyBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCkgOiBjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrSW5kZXggPSB0aGlzLl9nZXRTdGFja0luZGV4KHRoaXMuaW5kZXgsIHRoaXMuX2NhY2hlZE1ldGEuc3RhY2ssIHNraXBOdWxsID8gaW5kZXggOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgY2VudGVyID0gcmFuZ2Uuc3RhcnQgKyByYW5nZS5jaHVuayAqIHN0YWNrSW5kZXggKyByYW5nZS5jaHVuayAvIDI7XG4gICAgICAgICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCByYW5nZS5jaHVuayAqIHJhbmdlLnJhdGlvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNlbnRlciA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaW5kZXgpW3NjYWxlLmF4aXNdLCBpbmRleCk7XG4gICAgICAgICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCBydWxlci5taW4gKiBydWxlci5yYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhc2U6IGNlbnRlciAtIHNpemUgLyAyLFxuICAgICAgICAgICAgaGVhZDogY2VudGVyICsgc2l6ZSAvIDIsXG4gICAgICAgICAgICBjZW50ZXIsXG4gICAgICAgICAgICBzaXplXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgICAgICAgY29uc3QgcmVjdHMgPSBtZXRhLmRhdGE7XG4gICAgICAgIGNvbnN0IGlsZW4gPSByZWN0cy5sZW5ndGg7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yKDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRQYXJzZWQoaSlbdlNjYWxlLmF4aXNdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVjdHNbaV0uZHJhdyh0aGlzLl9jdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBCdWJibGVDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdidWJibGUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICBudW1iZXJzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1xuICAgICAgICAgICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcldpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ3JhZGl1cydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICB9XG4gcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBwYXJzZWRbaV0uX2N1c3RvbSA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpICsgc3RhcnQpLnJhZGl1cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBwYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gZGF0YVtzdGFydCArIGldO1xuICAgICAgICAgICAgcGFyc2VkW2ldLl9jdXN0b20gPSB2YWx1ZU9yRGVmYXVsdChpdGVtWzJdLCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSArIHN0YXJ0KS5yYWRpdXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwYXJzZWQubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGRhdGFbc3RhcnQgKyBpXTtcbiAgICAgICAgICAgIHBhcnNlZFtpXS5fY3VzdG9tID0gdmFsdWVPckRlZmF1bHQoaXRlbSAmJiBpdGVtLnIgJiYgK2l0ZW0uciwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkgKyBzdGFydCkucmFkaXVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICAgICAgbGV0IG1heCA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBkYXRhW2ldLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpKSAvIDIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXggPiAwICYmIG1heDtcbiAgICB9XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5jaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICAgICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IHggPSB4U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueCk7XG4gICAgICAgIGNvbnN0IHkgPSB5U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueSk7XG4gICAgICAgIGNvbnN0IHIgPSBwYXJzZWQuX2N1c3RvbTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbHNbaW5kZXhdIHx8ICcnLFxuICAgICAgICAgICAgdmFsdWU6ICcoJyArIHggKyAnLCAnICsgeSArIChyID8gJywgJyArIHIgOiAnJykgKyAnKSdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgMCwgcG9pbnRzLmxlbmd0aCwgbW9kZSk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgIH0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9ICFyZXNldCAmJiB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gcmVzZXQgPyBpU2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDAuNSkgOiBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdKTtcbiAgICAgICAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbdkF4aXNdKTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuc2tpcCA9IGlzTmFOKGlQaXhlbCkgfHwgaXNOYU4odlBpeGVsKTtcbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucy5yYWRpdXMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCwgbW9kZSkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBzdXBlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKTtcbiAgICAgICAgaWYgKHZhbHVlcy4kc2hhcmVkKSB7XG4gICAgICAgICAgICB2YWx1ZXMgPSBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZXMsIHtcbiAgICAgICAgICAgICAgICAkc2hhcmVkOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmFkaXVzID0gdmFsdWVzLnJhZGl1cztcbiAgICAgICAgaWYgKG1vZGUgIT09ICdhY3RpdmUnKSB7XG4gICAgICAgICAgICB2YWx1ZXMucmFkaXVzID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXMucmFkaXVzICs9IHZhbHVlT3JEZWZhdWx0KHBhcnNlZCAmJiBwYXJzZWQuX2N1c3RvbSwgcmFkaXVzKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFJhdGlvQW5kT2Zmc2V0KHJvdGF0aW9uLCBjaXJjdW1mZXJlbmNlLCBjdXRvdXQpIHtcbiAgICBsZXQgcmF0aW9YID0gMTtcbiAgICBsZXQgcmF0aW9ZID0gMTtcbiAgICBsZXQgb2Zmc2V0WCA9IDA7XG4gICAgbGV0IG9mZnNldFkgPSAwO1xuICAgIGlmIChjaXJjdW1mZXJlbmNlIDwgVEFVKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSByb3RhdGlvbjtcbiAgICAgICAgY29uc3QgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgY2lyY3VtZmVyZW5jZTtcbiAgICAgICAgY29uc3Qgc3RhcnRYID0gTWF0aC5jb3Moc3RhcnRBbmdsZSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0WSA9IE1hdGguc2luKHN0YXJ0QW5nbGUpO1xuICAgICAgICBjb25zdCBlbmRYID0gTWF0aC5jb3MoZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCBlbmRZID0gTWF0aC5zaW4oZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCBjYWxjTWF4ID0gKGFuZ2xlLCBhLCBiKT0+X2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRydWUpID8gMSA6IE1hdGgubWF4KGEsIGEgKiBjdXRvdXQsIGIsIGIgKiBjdXRvdXQpO1xuICAgICAgICBjb25zdCBjYWxjTWluID0gKGFuZ2xlLCBhLCBiKT0+X2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRydWUpID8gLTEgOiBNYXRoLm1pbihhLCBhICogY3V0b3V0LCBiLCBiICogY3V0b3V0KTtcbiAgICAgICAgY29uc3QgbWF4WCA9IGNhbGNNYXgoMCwgc3RhcnRYLCBlbmRYKTtcbiAgICAgICAgY29uc3QgbWF4WSA9IGNhbGNNYXgoSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICAgICAgY29uc3QgbWluWCA9IGNhbGNNaW4oUEksIHN0YXJ0WCwgZW5kWCk7XG4gICAgICAgIGNvbnN0IG1pblkgPSBjYWxjTWluKFBJICsgSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICAgICAgcmF0aW9YID0gKG1heFggLSBtaW5YKSAvIDI7XG4gICAgICAgIHJhdGlvWSA9IChtYXhZIC0gbWluWSkgLyAyO1xuICAgICAgICBvZmZzZXRYID0gLShtYXhYICsgbWluWCkgLyAyO1xuICAgICAgICBvZmZzZXRZID0gLShtYXhZICsgbWluWSkgLyAyO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByYXRpb1gsXG4gICAgICAgIHJhdGlvWSxcbiAgICAgICAgb2Zmc2V0WCxcbiAgICAgICAgb2Zmc2V0WVxuICAgIH07XG59XG5jbGFzcyBEb3VnaG51dENvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ2RvdWdobnV0JztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ2FyYycsXG4gICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgYW5pbWF0ZVJvdGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFuaW1hdGVTY2FsZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ2NpcmN1bWZlcmVuY2UnLFxuICAgICAgICAgICAgICAgICAgICAnZW5kQW5nbGUnLFxuICAgICAgICAgICAgICAgICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgICAgICAgICAgICAgICAnb3V0ZXJSYWRpdXMnLFxuICAgICAgICAgICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcldpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NwYWNpbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjdXRvdXQ6ICc1MCUnLFxuICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgY2lyY3VtZmVyZW5jZTogMzYwLFxuICAgICAgICByYWRpdXM6ICcxMDAlJyxcbiAgICAgICAgc3BhY2luZzogMCxcbiAgICAgICAgaW5kZXhBeGlzOiAncidcbiAgICB9O1xuICAgIHN0YXRpYyBkZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ3NwYWNpbmcnLFxuICAgICAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdzcGFjaW5nJyAmJiAhbmFtZS5zdGFydHNXaXRoKCdib3JkZXJEYXNoJykgJiYgIW5hbWUuc3RhcnRzV2l0aCgnaG92ZXJCb3JkZXJEYXNoJylcbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIGFzcGVjdFJhdGlvOiAxLFxuICAgICAgICBwbHVnaW5zOiB7XG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVMYWJlbHMgKGNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxhYmVscy5sZW5ndGggJiYgZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGxhYmVsczogeyBwb2ludFN0eWxlICwgY29sb3IgIH0gIH0gPSBjaGFydC5sZWdlbmQub3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5sYWJlbHMubWFwKChsYWJlbCwgaSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiBzdHlsZS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW46ICFjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ2xpY2sgKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICAgICAgICAgICAgICBsZWdlbmQuY2hhcnQudG9nZ2xlRGF0YVZpc2liaWxpdHkobGVnZW5kSXRlbS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5jaGFydC51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNoYXJ0LCBkYXRhc2V0SW5kZXgpe1xuICAgICAgICBzdXBlcihjaGFydCwgZGF0YXNldEluZGV4KTtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vZmZzZXRYID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGxpbmtTY2FsZXMoKSB7fVxuIHBhcnNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhc2V0KCkuZGF0YTtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBnZXR0ZXIgPSAoaSk9PitkYXRhW2ldO1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRhdGFbc3RhcnRdKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsga2V5ID0ndmFsdWUnICB9ID0gdGhpcy5fcGFyc2luZztcbiAgICAgICAgICAgICAgICBnZXR0ZXIgPSAoaSk9PityZXNvbHZlT2JqZWN0S2V5KGRhdGFbaV0sIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgICAgIGZvcihpID0gc3RhcnQsIGlsZW4gPSBzdGFydCArIGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgICAgICBtZXRhLl9wYXJzZWRbaV0gPSBnZXR0ZXIoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gX2dldFJvdGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdG9SYWRpYW5zKHRoaXMub3B0aW9ucy5yb3RhdGlvbiAtIDkwKTtcbiAgICB9XG4gX2dldENpcmN1bWZlcmVuY2UoKSB7XG4gICAgICAgIHJldHVybiB0b1JhZGlhbnModGhpcy5vcHRpb25zLmNpcmN1bWZlcmVuY2UpO1xuICAgIH1cbiBfZ2V0Um90YXRpb25FeHRlbnRzKCkge1xuICAgICAgICBsZXQgbWluID0gVEFVO1xuICAgICAgICBsZXQgbWF4ID0gLVRBVTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpICYmIHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSkudHlwZSA9PT0gdGhpcy5fdHlwZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXI7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm90YXRpb24gPSBjb250cm9sbGVyLl9nZXRSb3RhdGlvbigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSBjb250cm9sbGVyLl9nZXRDaXJjdW1mZXJlbmNlKCk7XG4gICAgICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCByb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCByb3RhdGlvbiArIGNpcmN1bWZlcmVuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByb3RhdGlvbjogbWluLFxuICAgICAgICAgICAgY2lyY3VtZmVyZW5jZTogbWF4IC0gbWluXG4gICAgICAgIH07XG4gICAgfVxuIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgeyBjaGFydEFyZWEgIH0gPSBjaGFydDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGFyY3MgPSBtZXRhLmRhdGE7XG4gICAgICAgIGNvbnN0IHNwYWNpbmcgPSB0aGlzLmdldE1heEJvcmRlcldpZHRoKCkgKyB0aGlzLmdldE1heE9mZnNldChhcmNzKSArIHRoaXMub3B0aW9ucy5zcGFjaW5nO1xuICAgICAgICBjb25zdCBtYXhTaXplID0gTWF0aC5tYXgoKE1hdGgubWluKGNoYXJ0QXJlYS53aWR0aCwgY2hhcnRBcmVhLmhlaWdodCkgLSBzcGFjaW5nKSAvIDIsIDApO1xuICAgICAgICBjb25zdCBjdXRvdXQgPSBNYXRoLm1pbih0b1BlcmNlbnRhZ2UodGhpcy5vcHRpb25zLmN1dG91dCwgbWF4U2l6ZSksIDEpO1xuICAgICAgICBjb25zdCBjaGFydFdlaWdodCA9IHRoaXMuX2dldFJpbmdXZWlnaHQodGhpcy5pbmRleCk7XG4gICAgICAgIGNvbnN0IHsgY2lyY3VtZmVyZW5jZSAsIHJvdGF0aW9uICB9ID0gdGhpcy5fZ2V0Um90YXRpb25FeHRlbnRzKCk7XG4gICAgICAgIGNvbnN0IHsgcmF0aW9YICwgcmF0aW9ZICwgb2Zmc2V0WCAsIG9mZnNldFkgIH0gPSBnZXRSYXRpb0FuZE9mZnNldChyb3RhdGlvbiwgY2lyY3VtZmVyZW5jZSwgY3V0b3V0KTtcbiAgICAgICAgY29uc3QgbWF4V2lkdGggPSAoY2hhcnRBcmVhLndpZHRoIC0gc3BhY2luZykgLyByYXRpb1g7XG4gICAgICAgIGNvbnN0IG1heEhlaWdodCA9IChjaGFydEFyZWEuaGVpZ2h0IC0gc3BhY2luZykgLyByYXRpb1k7XG4gICAgICAgIGNvbnN0IG1heFJhZGl1cyA9IE1hdGgubWF4KE1hdGgubWluKG1heFdpZHRoLCBtYXhIZWlnaHQpIC8gMiwgMCk7XG4gICAgICAgIGNvbnN0IG91dGVyUmFkaXVzID0gdG9EaW1lbnNpb24odGhpcy5vcHRpb25zLnJhZGl1cywgbWF4UmFkaXVzKTtcbiAgICAgICAgY29uc3QgaW5uZXJSYWRpdXMgPSBNYXRoLm1heChvdXRlclJhZGl1cyAqIGN1dG91dCwgMCk7XG4gICAgICAgIGNvbnN0IHJhZGl1c0xlbmd0aCA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIHRoaXMuX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKTtcbiAgICAgICAgdGhpcy5vZmZzZXRYID0gb2Zmc2V0WCAqIG91dGVyUmFkaXVzO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZICogb3V0ZXJSYWRpdXM7XG4gICAgICAgIG1ldGEudG90YWwgPSB0aGlzLmNhbGN1bGF0ZVRvdGFsKCk7XG4gICAgICAgIHRoaXMub3V0ZXJSYWRpdXMgPSBvdXRlclJhZGl1cyAtIHJhZGl1c0xlbmd0aCAqIHRoaXMuX2dldFJpbmdXZWlnaHRPZmZzZXQodGhpcy5pbmRleCk7XG4gICAgICAgIHRoaXMuaW5uZXJSYWRpdXMgPSBNYXRoLm1heCh0aGlzLm91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogY2hhcnRXZWlnaHQsIDApO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGFyY3MsIDAsIGFyY3MubGVuZ3RoLCBtb2RlKTtcbiAgICB9XG4gX2NpcmN1bWZlcmVuY2UoaSwgcmVzZXQpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSB0aGlzLl9nZXRDaXJjdW1mZXJlbmNlKCk7XG4gICAgICAgIGlmIChyZXNldCAmJiBvcHRzLmFuaW1hdGlvbi5hbmltYXRlUm90YXRlIHx8ICF0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpIHx8IG1ldGEuX3BhcnNlZFtpXSA9PT0gbnVsbCB8fCBtZXRhLmRhdGFbaV0uaGlkZGVuKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVDaXJjdW1mZXJlbmNlKG1ldGEuX3BhcnNlZFtpXSAqIGNpcmN1bWZlcmVuY2UgLyBUQVUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhhcmNzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyO1xuICAgICAgICBjb25zdCBjZW50ZXJZID0gKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDI7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVTY2FsZSA9IHJlc2V0ICYmIGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVNjYWxlO1xuICAgICAgICBjb25zdCBpbm5lclJhZGl1cyA9IGFuaW1hdGVTY2FsZSA/IDAgOiB0aGlzLmlubmVyUmFkaXVzO1xuICAgICAgICBjb25zdCBvdXRlclJhZGl1cyA9IGFuaW1hdGVTY2FsZSA/IDAgOiB0aGlzLm91dGVyUmFkaXVzO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBsZXQgc3RhcnRBbmdsZSA9IHRoaXMuX2dldFJvdGF0aW9uKCk7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBzdGFydDsgKytpKXtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGUgKz0gdGhpcy5fY2lyY3VtZmVyZW5jZShpLCByZXNldCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSl7XG4gICAgICAgICAgICBjb25zdCBjaXJjdW1mZXJlbmNlID0gdGhpcy5fY2lyY3VtZmVyZW5jZShpLCByZXNldCk7XG4gICAgICAgICAgICBjb25zdCBhcmMgPSBhcmNzW2ldO1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICB4OiBjZW50ZXJYICsgdGhpcy5vZmZzZXRYLFxuICAgICAgICAgICAgICAgIHk6IGNlbnRlclkgKyB0aGlzLm9mZnNldFksXG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZSxcbiAgICAgICAgICAgICAgICBlbmRBbmdsZTogc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2UsXG4gICAgICAgICAgICAgICAgY2lyY3VtZmVyZW5jZSxcbiAgICAgICAgICAgICAgICBvdXRlclJhZGl1cyxcbiAgICAgICAgICAgICAgICBpbm5lclJhZGl1c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIGFyYy5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhcnRBbmdsZSArPSBjaXJjdW1mZXJlbmNlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGFyYywgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FsY3VsYXRlVG90YWwoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBtZXRhRGF0YSA9IG1ldGEuZGF0YTtcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IG1ldGFEYXRhLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbWV0YS5fcGFyc2VkW2ldO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmICFpc05hTih2YWx1ZSkgJiYgdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSAmJiAhbWV0YURhdGFbaV0uaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgdG90YWwgKz0gTWF0aC5hYnModmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbDtcbiAgICB9XG4gICAgY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCB0b3RhbCA9IHRoaXMuX2NhY2hlZE1ldGEudG90YWw7XG4gICAgICAgIGlmICh0b3RhbCA+IDAgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFRBVSAqIChNYXRoLmFicyh2YWx1ZSkgLyB0b3RhbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0TnVtYmVyKG1ldGEuX3BhcnNlZFtpbmRleF0sIGNoYXJ0Lm9wdGlvbnMubG9jYWxlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbHNbaW5kZXhdIHx8ICcnLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0TWF4Qm9yZGVyV2lkdGgoYXJjcykge1xuICAgICAgICBsZXQgbWF4ID0gMDtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBsZXQgaSwgaWxlbiwgbWV0YSwgY29udHJvbGxlciwgb3B0aW9ucztcbiAgICAgICAgaWYgKCFhcmNzKSB7XG4gICAgICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgICAgICAgICBhcmNzID0gbWV0YS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyID0gbWV0YS5jb250cm9sbGVyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhcmNzKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBvcHRpb25zID0gY29udHJvbGxlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYm9yZGVyQWxpZ24gIT09ICdpbm5lcicpIHtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIG9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMCwgb3B0aW9ucy5ob3ZlckJvcmRlcldpZHRoIHx8IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxuICAgIGdldE1heE9mZnNldChhcmNzKSB7XG4gICAgICAgIGxldCBtYXggPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gYXJjcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKTtcbiAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgb3B0aW9ucy5vZmZzZXQgfHwgMCwgb3B0aW9ucy5ob3Zlck9mZnNldCB8fCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4O1xuICAgIH1cbiBfZ2V0UmluZ1dlaWdodE9mZnNldChkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgbGV0IHJpbmdXZWlnaHRPZmZzZXQgPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZGF0YXNldEluZGV4OyArK2kpe1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuICAgICAgICAgICAgICAgIHJpbmdXZWlnaHRPZmZzZXQgKz0gdGhpcy5fZ2V0UmluZ1dlaWdodChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmluZ1dlaWdodE9mZnNldDtcbiAgICB9XG4gX2dldFJpbmdXZWlnaHQoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCh2YWx1ZU9yRGVmYXVsdCh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS53ZWlnaHQsIDEpLCAwKTtcbiAgICB9XG4gX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRSaW5nV2VpZ2h0T2Zmc2V0KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHx8IDE7XG4gICAgfVxufVxuXG5jbGFzcyBMaW5lQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAnbGluZSc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6ICdsaW5lJyxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICAgICAgICBzaG93TGluZTogdHJ1ZSxcbiAgICAgICAgc3BhbkdhcHM6IGZhbHNlXG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgIF9pbmRleF86IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2F0ZWdvcnknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3ZhbHVlXzoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNEZWNpbWF0aW9uID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgeyBkYXRhc2V0OiBsaW5lICwgZGF0YTogcG9pbnRzID0gW10gLCBfZGF0YXNldCAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnNEaXNhYmxlZCA9IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZDtcbiAgICAgICAgbGV0IHsgc3RhcnQgLCBjb3VudCAgfSA9IF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKTtcbiAgICAgICAgdGhpcy5fZHJhd1N0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHRoaXMuX2RyYXdDb3VudCA9IGNvdW50O1xuICAgICAgICBpZiAoX3NjYWxlUmFuZ2VzQ2hhbmdlZChtZXRhKSkge1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICAgICAgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGxpbmUuX2NoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgbGluZS5fZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgbGluZS5fZGVjaW1hdGVkID0gISFfZGF0YXNldC5fZGVjaW1hdGVkO1xuICAgICAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKTtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSAwO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuc2VnbWVudCA9IHRoaXMub3B0aW9ucy5zZWdtZW50O1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQobGluZSwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBhbmltYXRlZDogIWFuaW1hdGlvbnNEaXNhYmxlZCxcbiAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgfSwgbW9kZSk7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgdlNjYWxlICwgX3N0YWNrZWQgLCBfZGF0YXNldCAgfSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHsgc2hhcmVkT3B0aW9ucyAsIGluY2x1ZGVPcHRpb25zICB9ID0gdGhpcy5fZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHsgc3BhbkdhcHMgLCBzZWdtZW50ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtYXhHYXBMZW5ndGggPSBpc051bWJlcihzcGFuR2FwcykgPyBzcGFuR2FwcyA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgY29uc3QgZGlyZWN0VXBkYXRlID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkIHx8IHJlc2V0IHx8IG1vZGUgPT09ICdub25lJztcbiAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBjb3VudDtcbiAgICAgICAgY29uc3QgcG9pbnRzQ291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgICAgICBsZXQgcHJldlBhcnNlZCA9IHN0YXJ0ID4gMCAmJiB0aGlzLmdldFBhcnNlZChzdGFydCAtIDEpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcG9pbnRzQ291bnQ7ICsraSl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBkaXJlY3RVcGRhdGUgPyBwb2ludCA6IHt9O1xuICAgICAgICAgICAgaWYgKGkgPCBzdGFydCB8fCBpID49IGVuZCkge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMuc2tpcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IG51bGxEYXRhID0gaXNOdWxsT3JVbmRlZihwYXJzZWRbdkF4aXNdKTtcbiAgICAgICAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW2lBeGlzXSwgaSk7XG4gICAgICAgICAgICBjb25zdCB2UGl4ZWwgPSBwcm9wZXJ0aWVzW3ZBeGlzXSA9IHJlc2V0IHx8IG51bGxEYXRhID8gdlNjYWxlLmdldEJhc2VQaXhlbCgpIDogdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoX3N0YWNrZWQgPyB0aGlzLmFwcGx5U3RhY2sodlNjYWxlLCBwYXJzZWQsIF9zdGFja2VkKSA6IHBhcnNlZFt2QXhpc10sIGkpO1xuICAgICAgICAgICAgcHJvcGVydGllcy5za2lwID0gaXNOYU4oaVBpeGVsKSB8fCBpc05hTih2UGl4ZWwpIHx8IG51bGxEYXRhO1xuICAgICAgICAgICAgcHJvcGVydGllcy5zdG9wID0gaSA+IDAgJiYgTWF0aC5hYnMocGFyc2VkW2lBeGlzXSAtIHByZXZQYXJzZWRbaUF4aXNdKSA+IG1heEdhcExlbmd0aDtcbiAgICAgICAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5wYXJzZWQgPSBwYXJzZWQ7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5yYXcgPSBfZGF0YXNldC5kYXRhW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGlyZWN0VXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KHBvaW50LCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZQYXJzZWQgPSBwYXJzZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gbWV0YS5kYXRhc2V0O1xuICAgICAgICBjb25zdCBib3JkZXIgPSBkYXRhc2V0Lm9wdGlvbnMgJiYgZGF0YXNldC5vcHRpb25zLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBib3JkZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlyc3RQb2ludCA9IGRhdGFbMF0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoMCkpO1xuICAgICAgICBjb25zdCBsYXN0UG9pbnQgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoZGF0YS5sZW5ndGggLSAxKSk7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChib3JkZXIsIGZpcnN0UG9pbnQsIGxhc3RQb2ludCkgLyAyO1xuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgbWV0YS5kYXRhc2V0LnVwZGF0ZUNvbnRyb2xQb2ludHModGhpcy5jaGFydC5jaGFydEFyZWEsIG1ldGEuaVNjYWxlLmF4aXMpO1xuICAgICAgICBzdXBlci5kcmF3KCk7XG4gICAgfVxufVxuXG5jbGFzcyBQb2xhckFyZWFDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdwb2xhckFyZWEnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAnYXJjJyxcbiAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICBhbmltYXRlUm90YXRlOiB0cnVlLFxuICAgICAgICAgICAgYW5pbWF0ZVNjYWxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgIG51bWJlcnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICdlbmRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAgICAgICAgICAgICAgICdvdXRlclJhZGl1cydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGluZGV4QXhpczogJ3InLFxuICAgICAgICBzdGFydEFuZ2xlOiAwXG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBhc3BlY3RSYXRpbzogMSxcbiAgICAgICAgcGx1Z2luczoge1xuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlTGFiZWxzIChjaGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGNoYXJ0LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5sYWJlbHMubGVuZ3RoICYmIGRhdGEuZGF0YXNldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBsYWJlbHM6IHsgcG9pbnRTdHlsZSAsIGNvbG9yICB9ICB9ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEubGFiZWxzLm1hcCgobGFiZWwsIGkpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YSgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBsYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udENvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogc3R5bGUuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiAhY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrIChlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kLmNoYXJ0LnRvZ2dsZURhdGFWaXNpYmlsaXR5KGxlZ2VuZEl0ZW0uaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBsZWdlbmQuY2hhcnQudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgIHI6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFkaWFsTGluZWFyJyxcbiAgICAgICAgICAgICAgICBhbmdsZUxpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICAgICAgICAgIGNpcmN1bGFyOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwb2ludExhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogMFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KXtcbiAgICAgICAgc3VwZXIoY2hhcnQsIGRhdGFzZXRJbmRleCk7XG4gICAgICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0TnVtYmVyKG1ldGEuX3BhcnNlZFtpbmRleF0uciwgY2hhcnQub3B0aW9ucy5sb2NhbGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUuYmluZCh0aGlzKShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBhcmNzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICB0aGlzLl91cGRhdGVSYWRpdXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhhcmNzLCAwLCBhcmNzLmxlbmd0aCwgbW9kZSk7XG4gICAgfVxuIGdldE1pbk1heCgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHJhbmdlID0ge1xuICAgICAgICAgICAgbWluOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgICBtYXg6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgICAgICB9O1xuICAgICAgICBtZXRhLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpPT57XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCkucjtcbiAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VkKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQgPCByYW5nZS5taW4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UubWluID0gcGFyc2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkID4gcmFuZ2UubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLm1heCA9IHBhcnNlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuIF91cGRhdGVSYWRpdXMoKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgY2hhcnRBcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgICAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICAgICAgY29uc3QgbWluU2l6ZSA9IE1hdGgubWluKGNoYXJ0QXJlYS5yaWdodCAtIGNoYXJ0QXJlYS5sZWZ0LCBjaGFydEFyZWEuYm90dG9tIC0gY2hhcnRBcmVhLnRvcCk7XG4gICAgICAgIGNvbnN0IG91dGVyUmFkaXVzID0gTWF0aC5tYXgobWluU2l6ZSAvIDIsIDApO1xuICAgICAgICBjb25zdCBpbm5lclJhZGl1cyA9IE1hdGgubWF4KG9wdHMuY3V0b3V0UGVyY2VudGFnZSA/IG91dGVyUmFkaXVzIC8gMTAwICogb3B0cy5jdXRvdXRQZXJjZW50YWdlIDogMSwgMCk7XG4gICAgICAgIGNvbnN0IHJhZGl1c0xlbmd0aCA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIGNoYXJ0LmdldFZpc2libGVEYXRhc2V0Q291bnQoKTtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogdGhpcy5pbmRleDtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IHRoaXMub3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGg7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKGFyY3MsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnJTY2FsZTtcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IHNjYWxlLnhDZW50ZXI7XG4gICAgICAgIGNvbnN0IGNlbnRlclkgPSBzY2FsZS55Q2VudGVyO1xuICAgICAgICBjb25zdCBkYXRhc2V0U3RhcnRBbmdsZSA9IHNjYWxlLmdldEluZGV4QW5nbGUoMCkgLSAwLjUgKiBQSTtcbiAgICAgICAgbGV0IGFuZ2xlID0gZGF0YXNldFN0YXJ0QW5nbGU7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBjb25zdCBkZWZhdWx0QW5nbGUgPSAzNjAgLyB0aGlzLmNvdW50VmlzaWJsZUVsZW1lbnRzKCk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IHN0YXJ0OyArK2kpe1xuICAgICAgICAgICAgYW5nbGUgKz0gdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBhcmMgPSBhcmNzW2ldO1xuICAgICAgICAgICAgbGV0IHN0YXJ0QW5nbGUgPSBhbmdsZTtcbiAgICAgICAgICAgIGxldCBlbmRBbmdsZSA9IGFuZ2xlICsgdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgICAgICAgICBsZXQgb3V0ZXJSYWRpdXMgPSBjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSA/IHNjYWxlLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMuZ2V0UGFyc2VkKGkpLnIpIDogMDtcbiAgICAgICAgICAgIGFuZ2xlID0gZW5kQW5nbGU7XG4gICAgICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0ZXJSYWRpdXMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uT3B0cy5hbmltYXRlUm90YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGUgPSBlbmRBbmdsZSA9IGRhdGFzZXRTdGFydEFuZ2xlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgeDogY2VudGVyWCxcbiAgICAgICAgICAgICAgICB5OiBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIGlubmVyUmFkaXVzOiAwLFxuICAgICAgICAgICAgICAgIG91dGVyUmFkaXVzLFxuICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGUsXG4gICAgICAgICAgICAgICAgZW5kQW5nbGUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIGFyYy5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGFyYywgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY291bnRWaXNpYmxlRWxlbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBtZXRhLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpPT57XG4gICAgICAgICAgICBpZiAoIWlzTmFOKHRoaXMuZ2V0UGFyc2VkKGluZGV4KS5yKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuIF9jb21wdXRlQW5nbGUoaW5kZXgsIG1vZGUsIGRlZmF1bHRBbmdsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpbmRleCkgPyB0b1JhZGlhbnModGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKS5hbmdsZSB8fCBkZWZhdWx0QW5nbGUpIDogMDtcbiAgICB9XG59XG5cbmNsYXNzIFBpZUNvbnRyb2xsZXIgZXh0ZW5kcyBEb3VnaG51dENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdwaWUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgY3V0b3V0OiAwLFxuICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgY2lyY3VtZmVyZW5jZTogMzYwLFxuICAgICAgICByYWRpdXM6ICcxMDAlJ1xuICAgIH07XG59XG5cbmNsYXNzIFJhZGFyQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAncmFkYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiAnbGluZScsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgICAgICAgaW5kZXhBeGlzOiAncicsXG4gICAgICAgIHNob3dMaW5lOiB0cnVlLFxuICAgICAgICBlbGVtZW50czoge1xuICAgICAgICAgICAgbGluZToge1xuICAgICAgICAgICAgICAgIGZpbGw6ICdzdGFydCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gc3RhdGljIG92ZXJyaWRlcyA9IHtcbiAgICAgICAgYXNwZWN0UmF0aW86IDEsXG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgcjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdyYWRpYWxMaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdlNjYWxlID0gdGhpcy5fY2FjaGVkTWV0YS52U2NhbGU7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiB2U2NhbGUuZ2V0TGFiZWxzKClbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWU6ICcnICsgdlNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW3ZTY2FsZS5heGlzXSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICByZXR1cm4gX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlLmJpbmQodGhpcykobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBtZXRhLmRhdGFzZXQ7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gbWV0YS5pU2NhbGUuZ2V0TGFiZWxzKCk7XG4gICAgICAgIGxpbmUucG9pbnRzID0gcG9pbnRzO1xuICAgICAgICBpZiAobW9kZSAhPT0gJ3Jlc2l6ZScpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICBfbG9vcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBfZnVsbExvb3A6IGxhYmVscy5sZW5ndGggPT09IHBvaW50cy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChsaW5lLCB1bmRlZmluZWQsIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCAwLCBwb2ludHMubGVuZ3RoLCBtb2RlKTtcbiAgICB9XG4gICAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnJTY2FsZTtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaSwgdGhpcy5nZXRQYXJzZWQoaSkucik7XG4gICAgICAgICAgICBjb25zdCB4ID0gcmVzZXQgPyBzY2FsZS54Q2VudGVyIDogcG9pbnRQb3NpdGlvbi54O1xuICAgICAgICAgICAgY29uc3QgeSA9IHJlc2V0ID8gc2NhbGUueUNlbnRlciA6IHBvaW50UG9zaXRpb24ueTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICB5LFxuICAgICAgICAgICAgICAgIGFuZ2xlOiBwb2ludFBvc2l0aW9uLmFuZ2xlLFxuICAgICAgICAgICAgICAgIHNraXA6IGlzTmFOKHgpIHx8IGlzTmFOKHkpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBTY2F0dGVyQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAnc2NhdHRlcic7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICAgICAgICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gICAgICAgIHNob3dMaW5lOiBmYWxzZSxcbiAgICAgICAgZmlsbDogZmFsc2VcbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIGludGVyYWN0aW9uOiB7XG4gICAgICAgICAgICBtb2RlOiAncG9pbnQnXG4gICAgICAgIH0sXG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgICAgIGNvbnN0IHsgeFNjYWxlICwgeVNjYWxlICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICBjb25zdCB4ID0geFNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkLngpO1xuICAgICAgICBjb25zdCB5ID0geVNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkLnkpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICAgICAgICB2YWx1ZTogJygnICsgeCArICcsICcgKyB5ICsgJyknXG4gICAgICAgIH07XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB7IGRhdGE6IHBvaW50cyA9IFtdICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uc0Rpc2FibGVkID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgICAgICBsZXQgeyBzdGFydCAsIGNvdW50ICB9ID0gX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMobWV0YSwgcG9pbnRzLCBhbmltYXRpb25zRGlzYWJsZWQpO1xuICAgICAgICB0aGlzLl9kcmF3U3RhcnQgPSBzdGFydDtcbiAgICAgICAgdGhpcy5fZHJhd0NvdW50ID0gY291bnQ7XG4gICAgICAgIGlmIChfc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpKSB7XG4gICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhc2V0OiBsaW5lICwgX2RhdGFzZXQgIH0gPSBtZXRhO1xuICAgICAgICAgICAgbGluZS5fY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICAgICAgbGluZS5fZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgIGxpbmUuX2RlY2ltYXRlZCA9ICEhX2RhdGFzZXQuX2RlY2ltYXRlZDtcbiAgICAgICAgICAgIGxpbmUucG9pbnRzID0gcG9pbnRzO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKTtcbiAgICAgICAgICAgIG9wdGlvbnMuc2VnbWVudCA9IHRoaXMub3B0aW9ucy5zZWdtZW50O1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGxpbmUsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgICAgIGFuaW1hdGVkOiAhYW5pbWF0aW9uc0Rpc2FibGVkLFxuICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgIH0sIG1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpO1xuICAgIH1cbiAgICBhZGRFbGVtZW50cygpIHtcbiAgICAgICAgY29uc3QgeyBzaG93TGluZSAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKCF0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSAmJiBzaG93TGluZSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUgPSB0aGlzLmNoYXJ0LnJlZ2lzdHJ5LmdldEVsZW1lbnQoJ2xpbmUnKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5hZGRFbGVtZW50cygpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgdlNjYWxlICwgX3N0YWNrZWQgLCBfZGF0YXNldCAgfSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGZpcnN0T3B0cyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICAgICAgY29uc3QgaW5jbHVkZU9wdGlvbnMgPSB0aGlzLmluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpO1xuICAgICAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCB7IHNwYW5HYXBzICwgc2VnbWVudCAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbWF4R2FwTGVuZ3RoID0gaXNOdW1iZXIoc3BhbkdhcHMpID8gc3BhbkdhcHMgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIGNvbnN0IGRpcmVjdFVwZGF0ZSA9IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZCB8fCByZXNldCB8fCBtb2RlID09PSAnbm9uZSc7XG4gICAgICAgIGxldCBwcmV2UGFyc2VkID0gc3RhcnQgPiAwICYmIHRoaXMuZ2V0UGFyc2VkKHN0YXJ0IC0gMSk7XG4gICAgICAgIGZvcihsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaSk7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gZGlyZWN0VXBkYXRlID8gcG9pbnQgOiB7fTtcbiAgICAgICAgICAgIGNvbnN0IG51bGxEYXRhID0gaXNOdWxsT3JVbmRlZihwYXJzZWRbdkF4aXNdKTtcbiAgICAgICAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW2lBeGlzXSwgaSk7XG4gICAgICAgICAgICBjb25zdCB2UGl4ZWwgPSBwcm9wZXJ0aWVzW3ZBeGlzXSA9IHJlc2V0IHx8IG51bGxEYXRhID8gdlNjYWxlLmdldEJhc2VQaXhlbCgpIDogdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoX3N0YWNrZWQgPyB0aGlzLmFwcGx5U3RhY2sodlNjYWxlLCBwYXJzZWQsIF9zdGFja2VkKSA6IHBhcnNlZFt2QXhpc10sIGkpO1xuICAgICAgICAgICAgcHJvcGVydGllcy5za2lwID0gaXNOYU4oaVBpeGVsKSB8fCBpc05hTih2UGl4ZWwpIHx8IG51bGxEYXRhO1xuICAgICAgICAgICAgcHJvcGVydGllcy5zdG9wID0gaSA+IDAgJiYgTWF0aC5hYnMocGFyc2VkW2lBeGlzXSAtIHByZXZQYXJzZWRbaUF4aXNdKSA+IG1heEdhcExlbmd0aDtcbiAgICAgICAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5wYXJzZWQgPSBwYXJzZWQ7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5yYXcgPSBfZGF0YXNldC5kYXRhW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGlyZWN0VXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KHBvaW50LCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZQYXJzZWQgPSBwYXJzZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVTaGFyZWRPcHRpb25zKHNoYXJlZE9wdGlvbnMsIG1vZGUsIGZpcnN0T3B0cyk7XG4gICAgfVxuIGdldE1heE92ZXJmbG93KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZGF0YSA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgICAgICAgIGxldCBtYXggPSAwO1xuICAgICAgICAgICAgZm9yKGxldCBpID0gZGF0YS5sZW5ndGggLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBkYXRhW2ldLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpKSAvIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1heCA+IDAgJiYgbWF4O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSBtZXRhLmRhdGFzZXQ7XG4gICAgICAgIGNvbnN0IGJvcmRlciA9IGRhdGFzZXQub3B0aW9ucyAmJiBkYXRhc2V0Lm9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMDtcbiAgICAgICAgaWYgKCFkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGJvcmRlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaXJzdFBvaW50ID0gZGF0YVswXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucygwKSk7XG4gICAgICAgIGNvbnN0IGxhc3RQb2ludCA9IGRhdGFbZGF0YS5sZW5ndGggLSAxXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhkYXRhLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KGJvcmRlciwgZmlyc3RQb2ludCwgbGFzdFBvaW50KSAvIDI7XG4gICAgfVxufVxuXG52YXIgY29udHJvbGxlcnMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5CYXJDb250cm9sbGVyOiBCYXJDb250cm9sbGVyLFxuQnViYmxlQ29udHJvbGxlcjogQnViYmxlQ29udHJvbGxlcixcbkRvdWdobnV0Q29udHJvbGxlcjogRG91Z2hudXRDb250cm9sbGVyLFxuTGluZUNvbnRyb2xsZXI6IExpbmVDb250cm9sbGVyLFxuUGllQ29udHJvbGxlcjogUGllQ29udHJvbGxlcixcblBvbGFyQXJlYUNvbnRyb2xsZXI6IFBvbGFyQXJlYUNvbnRyb2xsZXIsXG5SYWRhckNvbnRyb2xsZXI6IFJhZGFyQ29udHJvbGxlcixcblNjYXR0ZXJDb250cm9sbGVyOiBTY2F0dGVyQ29udHJvbGxlclxufSk7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydC5fYWRhcHRlcnNcbiAqIEBzaW5jZSAyLjguMFxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBhYnN0cmFjdCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZDogQ2hlY2sgdGhhdCBhIGNvbXBsZXRlIGRhdGUgYWRhcHRlciBpcyBwcm92aWRlZC4nKTtcbn1cbi8qKlxuICogRGF0ZSBhZGFwdGVyIChjdXJyZW50IHVzZWQgYnkgdGhlIHRpbWUgc2NhbGUpXG4gKiBAbmFtZXNwYWNlIENoYXJ0Ll9hZGFwdGVycy5fZGF0ZVxuICogQG1lbWJlcm9mIENoYXJ0Ll9hZGFwdGVyc1xuICogQHByaXZhdGVcbiAqLyBjbGFzcyBEYXRlQWRhcHRlckJhc2Uge1xuICAgIC8qKlxuICAgKiBPdmVycmlkZSBkZWZhdWx0IGRhdGUgYWRhcHRlciBtZXRob2RzLlxuICAgKiBBY2NlcHRzIHR5cGUgcGFyYW1ldGVyIHRvIGRlZmluZSBvcHRpb25zIHR5cGUuXG4gICAqIEBleGFtcGxlXG4gICAqIENoYXJ0Ll9hZGFwdGVycy5fZGF0ZS5vdmVycmlkZTx7bXlBZGFwdGVyT3B0aW9uOiBzdHJpbmd9Pih7XG4gICAqICAgaW5pdCgpIHtcbiAgICogICAgIGNvbnNvbGUubG9nKHRoaXMub3B0aW9ucy5teUFkYXB0ZXJPcHRpb24pO1xuICAgKiAgIH1cbiAgICogfSlcbiAgICovIHN0YXRpYyBvdmVycmlkZShtZW1iZXJzKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oRGF0ZUFkYXB0ZXJCYXNlLnByb3RvdHlwZSwgbWVtYmVycyk7XG4gICAgfVxuICAgIG9wdGlvbnM7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyl7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgICBpbml0KCkge31cbiAgICBmb3JtYXRzKCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG4gICAgcGFyc2UoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBmb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBhZGQoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBkaWZmKCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG4gICAgc3RhcnRPZigpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIGVuZE9mKCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG59XG52YXIgYWRhcHRlcnMgPSB7XG4gICAgX2RhdGU6IERhdGVBZGFwdGVyQmFzZVxufTtcblxuZnVuY3Rpb24gYmluYXJ5U2VhcmNoKG1ldGFzZXQsIGF4aXMsIHZhbHVlLCBpbnRlcnNlY3QpIHtcbiAgICBjb25zdCB7IGNvbnRyb2xsZXIgLCBkYXRhICwgX3NvcnRlZCAgfSA9IG1ldGFzZXQ7XG4gICAgY29uc3QgaVNjYWxlID0gY29udHJvbGxlci5fY2FjaGVkTWV0YS5pU2NhbGU7XG4gICAgaWYgKGlTY2FsZSAmJiBheGlzID09PSBpU2NhbGUuYXhpcyAmJiBheGlzICE9PSAncicgJiYgX3NvcnRlZCAmJiBkYXRhLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBsb29rdXBNZXRob2QgPSBpU2NhbGUuX3JldmVyc2VQaXhlbHMgPyBfcmxvb2t1cEJ5S2V5IDogX2xvb2t1cEJ5S2V5O1xuICAgICAgICBpZiAoIWludGVyc2VjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udHJvbGxlci5fc2hhcmVkT3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgZWwgPSBkYXRhWzBdO1xuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0eXBlb2YgZWwuZ2V0UmFuZ2UgPT09ICdmdW5jdGlvbicgJiYgZWwuZ2V0UmFuZ2UoYXhpcyk7XG4gICAgICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSAtIHJhbmdlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBsb29rdXBNZXRob2QoZGF0YSwgYXhpcywgdmFsdWUgKyByYW5nZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbG86IHN0YXJ0LmxvLFxuICAgICAgICAgICAgICAgICAgICBoaTogZW5kLmhpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBsbzogMCxcbiAgICAgICAgaGk6IGRhdGEubGVuZ3RoIC0gMVxuICAgIH07XG59XG4gZnVuY3Rpb24gZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgaGFuZGxlciwgaW50ZXJzZWN0KSB7XG4gICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltheGlzXTtcbiAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgY29uc3QgeyBpbmRleCAsIGRhdGEgIH0gPSBtZXRhc2V0c1tpXTtcbiAgICAgICAgY29uc3QgeyBsbyAsIGhpICB9ID0gYmluYXJ5U2VhcmNoKG1ldGFzZXRzW2ldLCBheGlzLCB2YWx1ZSwgaW50ZXJzZWN0KTtcbiAgICAgICAgZm9yKGxldCBqID0gbG87IGogPD0gaGk7ICsrail7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZGF0YVtqXTtcbiAgICAgICAgICAgIGlmICghZWxlbWVudC5za2lwKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcihlbGVtZW50LCBpbmRleCwgaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKGF4aXMpIHtcbiAgICBjb25zdCB1c2VYID0gYXhpcy5pbmRleE9mKCd4JykgIT09IC0xO1xuICAgIGNvbnN0IHVzZVkgPSBheGlzLmluZGV4T2YoJ3knKSAhPT0gLTE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHB0MSwgcHQyKSB7XG4gICAgICAgIGNvbnN0IGRlbHRhWCA9IHVzZVggPyBNYXRoLmFicyhwdDEueCAtIHB0Mi54KSA6IDA7XG4gICAgICAgIGNvbnN0IGRlbHRhWSA9IHVzZVkgPyBNYXRoLmFicyhwdDEueSAtIHB0Mi55KSA6IDA7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZGVsdGFYLCAyKSArIE1hdGgucG93KGRlbHRhWSwgMikpO1xuICAgIH07XG59XG4gZnVuY3Rpb24gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBpZiAoIWluY2x1ZGVJbnZpc2libGUgJiYgIWNoYXJ0LmlzUG9pbnRJbkFyZWEocG9zaXRpb24pKSB7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG4gICAgY29uc3QgZXZhbHVhdGlvbkZ1bmMgPSBmdW5jdGlvbihlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgICAgIGlmICghaW5jbHVkZUludmlzaWJsZSAmJiAhX2lzUG9pbnRJbkFyZWEoZWxlbWVudCwgY2hhcnQuY2hhcnRBcmVhLCAwKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgdXNlRmluYWxQb3NpdGlvbikpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMsIHRydWUpO1xuICAgIHJldHVybiBpdGVtcztcbn1cbiBmdW5jdGlvbiBnZXROZWFyZXN0UmFkaWFsSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgbGV0IGl0ZW1zID0gW107XG4gICAgZnVuY3Rpb24gZXZhbHVhdGlvbkZ1bmMoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgICAgICBjb25zdCB7IHN0YXJ0QW5nbGUgLCBlbmRBbmdsZSAgfSA9IGVsZW1lbnQuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgICAgICAgJ2VuZEFuZ2xlJ1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgeyBhbmdsZSAgfSA9IGdldEFuZ2xlRnJvbVBvaW50KGVsZW1lbnQsIHtcbiAgICAgICAgICAgIHg6IHBvc2l0aW9uLngsXG4gICAgICAgICAgICB5OiBwb3NpdGlvbi55XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoX2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUpKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMpO1xuICAgIHJldHVybiBpdGVtcztcbn1cbiBmdW5jdGlvbiBnZXROZWFyZXN0Q2FydGVzaWFuSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIHtcbiAgICBsZXQgaXRlbXMgPSBbXTtcbiAgICBjb25zdCBkaXN0YW5jZU1ldHJpYyA9IGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhheGlzKTtcbiAgICBsZXQgbWluRGlzdGFuY2UgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgZnVuY3Rpb24gZXZhbHVhdGlvbkZ1bmMoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgICAgICBjb25zdCBpblJhbmdlID0gZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBpZiAoaW50ZXJzZWN0ICYmICFpblJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2VudGVyID0gZWxlbWVudC5nZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgcG9pbnRJbkFyZWEgPSAhIWluY2x1ZGVJbnZpc2libGUgfHwgY2hhcnQuaXNQb2ludEluQXJlYShjZW50ZXIpO1xuICAgICAgICBpZiAoIXBvaW50SW5BcmVhICYmICFpblJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBkaXN0YW5jZU1ldHJpYyhwb3NpdGlvbiwgY2VudGVyKTtcbiAgICAgICAgaWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICAgIGl0ZW1zID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlID09PSBtaW5EaXN0YW5jZSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGV2YWx1YXRpb25GdW5jKTtcbiAgICByZXR1cm4gaXRlbXM7XG59XG4gZnVuY3Rpb24gZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSB7XG4gICAgaWYgKCFpbmNsdWRlSW52aXNpYmxlICYmICFjaGFydC5pc1BvaW50SW5BcmVhKHBvc2l0aW9uKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBheGlzID09PSAncicgJiYgIWludGVyc2VjdCA/IGdldE5lYXJlc3RSYWRpYWxJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIDogZ2V0TmVhcmVzdENhcnRlc2lhbkl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbn1cbiBmdW5jdGlvbiBnZXRBeGlzSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgIGNvbnN0IHJhbmdlTWV0aG9kID0gYXhpcyA9PT0gJ3gnID8gJ2luWFJhbmdlJyA6ICdpbllSYW5nZSc7XG4gICAgbGV0IGludGVyc2VjdHNJdGVtID0gZmFsc2U7XG4gICAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpPT57XG4gICAgICAgIGlmIChlbGVtZW50W3JhbmdlTWV0aG9kXShwb3NpdGlvbltheGlzXSwgdXNlRmluYWxQb3NpdGlvbikpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGludGVyc2VjdHNJdGVtID0gaW50ZXJzZWN0c0l0ZW0gfHwgZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGludGVyc2VjdCAmJiAhaW50ZXJzZWN0c0l0ZW0pIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG59XG4gdmFyIEludGVyYWN0aW9uID0ge1xuICAgIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyxcbiAgICBtb2Rlczoge1xuIGluZGV4IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3gnO1xuICAgICAgICAgICAgY29uc3QgaW5jbHVkZUludmlzaWJsZSA9IG9wdGlvbnMuaW5jbHVkZUludmlzaWJsZSB8fCBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3QgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIDogZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgZmFsc2UsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBbXTtcbiAgICAgICAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmZvckVhY2goKG1ldGEpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBpdGVtc1swXS5pbmRleDtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gbWV0YS5kYXRhW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCAmJiAhZWxlbWVudC5za2lwKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleDogbWV0YS5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgICAgICB9LFxuIGRhdGFzZXQgKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgICAgICAgY29uc3QgaW5jbHVkZUludmlzaWJsZSA9IG9wdGlvbnMuaW5jbHVkZUludmlzaWJsZSB8fCBmYWxzZTtcbiAgICAgICAgICAgIGxldCBpdGVtcyA9IG9wdGlvbnMuaW50ZXJzZWN0ID8gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSA6IGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGZhbHNlLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbiAgICAgICAgICAgIGlmIChpdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YXNldEluZGV4ID0gaXRlbXNbMF0uZGF0YXNldEluZGV4O1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmRhdGE7XG4gICAgICAgICAgICAgICAgaXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZGF0YVtpXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVtcztcbiAgICAgICAgfSxcbiBwb2ludCAoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG4gICAgICAgICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG4gICAgICAgIH0sXG4gbmVhcmVzdCAoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG4gICAgICAgICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIG9wdGlvbnMuaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbiAgICAgICAgfSxcbiB4IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIHJldHVybiBnZXRBeGlzSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCAneCcsIG9wdGlvbnMuaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgfSxcbiB5IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIHJldHVybiBnZXRBeGlzSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCAneScsIG9wdGlvbnMuaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmNvbnN0IFNUQVRJQ19QT1NJVElPTlMgPSBbXG4gICAgJ2xlZnQnLFxuICAgICd0b3AnLFxuICAgICdyaWdodCcsXG4gICAgJ2JvdHRvbSdcbl07XG5mdW5jdGlvbiBmaWx0ZXJCeVBvc2l0aW9uKGFycmF5LCBwb3NpdGlvbikge1xuICAgIHJldHVybiBhcnJheS5maWx0ZXIoKHYpPT52LnBvcyA9PT0gcG9zaXRpb24pO1xufVxuZnVuY3Rpb24gZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzKGFycmF5LCBheGlzKSB7XG4gICAgcmV0dXJuIGFycmF5LmZpbHRlcigodik9PlNUQVRJQ19QT1NJVElPTlMuaW5kZXhPZih2LnBvcykgPT09IC0xICYmIHYuYm94LmF4aXMgPT09IGF4aXMpO1xufVxuZnVuY3Rpb24gc29ydEJ5V2VpZ2h0KGFycmF5LCByZXZlcnNlKSB7XG4gICAgcmV0dXJuIGFycmF5LnNvcnQoKGEsIGIpPT57XG4gICAgICAgIGNvbnN0IHYwID0gcmV2ZXJzZSA/IGIgOiBhO1xuICAgICAgICBjb25zdCB2MSA9IHJldmVyc2UgPyBhIDogYjtcbiAgICAgICAgcmV0dXJuIHYwLndlaWdodCA9PT0gdjEud2VpZ2h0ID8gdjAuaW5kZXggLSB2MS5pbmRleCA6IHYwLndlaWdodCAtIHYxLndlaWdodDtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHdyYXBCb3hlcyhib3hlcykge1xuICAgIGNvbnN0IGxheW91dEJveGVzID0gW107XG4gICAgbGV0IGksIGlsZW4sIGJveCwgcG9zLCBzdGFjaywgc3RhY2tXZWlnaHQ7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gKGJveGVzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBib3ggPSBib3hlc1tpXTtcbiAgICAgICAgKHsgcG9zaXRpb246IHBvcyAsIG9wdGlvbnM6IHsgc3RhY2sgLCBzdGFja1dlaWdodCA9MSAgfSAgfSA9IGJveCk7XG4gICAgICAgIGxheW91dEJveGVzLnB1c2goe1xuICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICBib3gsXG4gICAgICAgICAgICBwb3MsXG4gICAgICAgICAgICBob3Jpem9udGFsOiBib3guaXNIb3Jpem9udGFsKCksXG4gICAgICAgICAgICB3ZWlnaHQ6IGJveC53ZWlnaHQsXG4gICAgICAgICAgICBzdGFjazogc3RhY2sgJiYgcG9zICsgc3RhY2ssXG4gICAgICAgICAgICBzdGFja1dlaWdodFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxheW91dEJveGVzO1xufVxuZnVuY3Rpb24gYnVpbGRTdGFja3MobGF5b3V0cykge1xuICAgIGNvbnN0IHN0YWNrcyA9IHt9O1xuICAgIGZvciAoY29uc3Qgd3JhcCBvZiBsYXlvdXRzKXtcbiAgICAgICAgY29uc3QgeyBzdGFjayAsIHBvcyAsIHN0YWNrV2VpZ2h0ICB9ID0gd3JhcDtcbiAgICAgICAgaWYgKCFzdGFjayB8fCAhU1RBVElDX1BPU0lUSU9OUy5pbmNsdWRlcyhwb3MpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfc3RhY2sgPSBzdGFja3Nbc3RhY2tdIHx8IChzdGFja3Nbc3RhY2tdID0ge1xuICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICBwbGFjZWQ6IDAsXG4gICAgICAgICAgICB3ZWlnaHQ6IDAsXG4gICAgICAgICAgICBzaXplOiAwXG4gICAgICAgIH0pO1xuICAgICAgICBfc3RhY2suY291bnQrKztcbiAgICAgICAgX3N0YWNrLndlaWdodCArPSBzdGFja1dlaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIHN0YWNrcztcbn1cbiBmdW5jdGlvbiBzZXRMYXlvdXREaW1zKGxheW91dHMsIHBhcmFtcykge1xuICAgIGNvbnN0IHN0YWNrcyA9IGJ1aWxkU3RhY2tzKGxheW91dHMpO1xuICAgIGNvbnN0IHsgdkJveE1heFdpZHRoICwgaEJveE1heEhlaWdodCAgfSA9IHBhcmFtcztcbiAgICBsZXQgaSwgaWxlbiwgbGF5b3V0O1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGxheW91dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgbGF5b3V0ID0gbGF5b3V0c1tpXTtcbiAgICAgICAgY29uc3QgeyBmdWxsU2l6ZSAgfSA9IGxheW91dC5ib3g7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja107XG4gICAgICAgIGNvbnN0IGZhY3RvciA9IHN0YWNrICYmIGxheW91dC5zdGFja1dlaWdodCAvIHN0YWNrLndlaWdodDtcbiAgICAgICAgaWYgKGxheW91dC5ob3Jpem9udGFsKSB7XG4gICAgICAgICAgICBsYXlvdXQud2lkdGggPSBmYWN0b3IgPyBmYWN0b3IgKiB2Qm94TWF4V2lkdGggOiBmdWxsU2l6ZSAmJiBwYXJhbXMuYXZhaWxhYmxlV2lkdGg7XG4gICAgICAgICAgICBsYXlvdXQuaGVpZ2h0ID0gaEJveE1heEhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxheW91dC53aWR0aCA9IHZCb3hNYXhXaWR0aDtcbiAgICAgICAgICAgIGxheW91dC5oZWlnaHQgPSBmYWN0b3IgPyBmYWN0b3IgKiBoQm94TWF4SGVpZ2h0IDogZnVsbFNpemUgJiYgcGFyYW1zLmF2YWlsYWJsZUhlaWdodDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RhY2tzO1xufVxuZnVuY3Rpb24gYnVpbGRMYXlvdXRCb3hlcyhib3hlcykge1xuICAgIGNvbnN0IGxheW91dEJveGVzID0gd3JhcEJveGVzKGJveGVzKTtcbiAgICBjb25zdCBmdWxsU2l6ZSA9IHNvcnRCeVdlaWdodChsYXlvdXRCb3hlcy5maWx0ZXIoKHdyYXApPT53cmFwLmJveC5mdWxsU2l6ZSksIHRydWUpO1xuICAgIGNvbnN0IGxlZnQgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2xlZnQnKSwgdHJ1ZSk7XG4gICAgY29uc3QgcmlnaHQgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ3JpZ2h0JykpO1xuICAgIGNvbnN0IHRvcCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAndG9wJyksIHRydWUpO1xuICAgIGNvbnN0IGJvdHRvbSA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnYm90dG9tJykpO1xuICAgIGNvbnN0IGNlbnRlckhvcml6b250YWwgPSBmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMobGF5b3V0Qm94ZXMsICd4Jyk7XG4gICAgY29uc3QgY2VudGVyVmVydGljYWwgPSBmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMobGF5b3V0Qm94ZXMsICd5Jyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZnVsbFNpemUsXG4gICAgICAgIGxlZnRBbmRUb3A6IGxlZnQuY29uY2F0KHRvcCksXG4gICAgICAgIHJpZ2h0QW5kQm90dG9tOiByaWdodC5jb25jYXQoY2VudGVyVmVydGljYWwpLmNvbmNhdChib3R0b20pLmNvbmNhdChjZW50ZXJIb3Jpem9udGFsKSxcbiAgICAgICAgY2hhcnRBcmVhOiBmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnY2hhcnRBcmVhJyksXG4gICAgICAgIHZlcnRpY2FsOiBsZWZ0LmNvbmNhdChyaWdodCkuY29uY2F0KGNlbnRlclZlcnRpY2FsKSxcbiAgICAgICAgaG9yaXpvbnRhbDogdG9wLmNvbmNhdChib3R0b20pLmNvbmNhdChjZW50ZXJIb3Jpem9udGFsKVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsIGEsIGIpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgobWF4UGFkZGluZ1thXSwgY2hhcnRBcmVhW2FdKSArIE1hdGgubWF4KG1heFBhZGRpbmdbYl0sIGNoYXJ0QXJlYVtiXSk7XG59XG5mdW5jdGlvbiB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIGJveFBhZGRpbmcpIHtcbiAgICBtYXhQYWRkaW5nLnRvcCA9IE1hdGgubWF4KG1heFBhZGRpbmcudG9wLCBib3hQYWRkaW5nLnRvcCk7XG4gICAgbWF4UGFkZGluZy5sZWZ0ID0gTWF0aC5tYXgobWF4UGFkZGluZy5sZWZ0LCBib3hQYWRkaW5nLmxlZnQpO1xuICAgIG1heFBhZGRpbmcuYm90dG9tID0gTWF0aC5tYXgobWF4UGFkZGluZy5ib3R0b20sIGJveFBhZGRpbmcuYm90dG9tKTtcbiAgICBtYXhQYWRkaW5nLnJpZ2h0ID0gTWF0aC5tYXgobWF4UGFkZGluZy5yaWdodCwgYm94UGFkZGluZy5yaWdodCk7XG59XG5mdW5jdGlvbiB1cGRhdGVEaW1zKGNoYXJ0QXJlYSwgcGFyYW1zLCBsYXlvdXQsIHN0YWNrcykge1xuICAgIGNvbnN0IHsgcG9zICwgYm94ICB9ID0gbGF5b3V0O1xuICAgIGNvbnN0IG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcbiAgICBpZiAoIWlzT2JqZWN0KHBvcykpIHtcbiAgICAgICAgaWYgKGxheW91dC5zaXplKSB7XG4gICAgICAgICAgICBjaGFydEFyZWFbcG9zXSAtPSBsYXlvdXQuc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFjayA9IHN0YWNrc1tsYXlvdXQuc3RhY2tdIHx8IHtcbiAgICAgICAgICAgIHNpemU6IDAsXG4gICAgICAgICAgICBjb3VudDogMVxuICAgICAgICB9O1xuICAgICAgICBzdGFjay5zaXplID0gTWF0aC5tYXgoc3RhY2suc2l6ZSwgbGF5b3V0Lmhvcml6b250YWwgPyBib3guaGVpZ2h0IDogYm94LndpZHRoKTtcbiAgICAgICAgbGF5b3V0LnNpemUgPSBzdGFjay5zaXplIC8gc3RhY2suY291bnQ7XG4gICAgICAgIGNoYXJ0QXJlYVtwb3NdICs9IGxheW91dC5zaXplO1xuICAgIH1cbiAgICBpZiAoYm94LmdldFBhZGRpbmcpIHtcbiAgICAgICAgdXBkYXRlTWF4UGFkZGluZyhtYXhQYWRkaW5nLCBib3guZ2V0UGFkZGluZygpKTtcbiAgICB9XG4gICAgY29uc3QgbmV3V2lkdGggPSBNYXRoLm1heCgwLCBwYXJhbXMub3V0ZXJXaWR0aCAtIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgJ2xlZnQnLCAncmlnaHQnKSk7XG4gICAgY29uc3QgbmV3SGVpZ2h0ID0gTWF0aC5tYXgoMCwgcGFyYW1zLm91dGVySGVpZ2h0IC0gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCAndG9wJywgJ2JvdHRvbScpKTtcbiAgICBjb25zdCB3aWR0aENoYW5nZWQgPSBuZXdXaWR0aCAhPT0gY2hhcnRBcmVhLnc7XG4gICAgY29uc3QgaGVpZ2h0Q2hhbmdlZCA9IG5ld0hlaWdodCAhPT0gY2hhcnRBcmVhLmg7XG4gICAgY2hhcnRBcmVhLncgPSBuZXdXaWR0aDtcbiAgICBjaGFydEFyZWEuaCA9IG5ld0hlaWdodDtcbiAgICByZXR1cm4gbGF5b3V0Lmhvcml6b250YWwgPyB7XG4gICAgICAgIHNhbWU6IHdpZHRoQ2hhbmdlZCxcbiAgICAgICAgb3RoZXI6IGhlaWdodENoYW5nZWRcbiAgICB9IDoge1xuICAgICAgICBzYW1lOiBoZWlnaHRDaGFuZ2VkLFxuICAgICAgICBvdGhlcjogd2lkdGhDaGFuZ2VkXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGhhbmRsZU1heFBhZGRpbmcoY2hhcnRBcmVhKSB7XG4gICAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVBvcyhwb3MpIHtcbiAgICAgICAgY29uc3QgY2hhbmdlID0gTWF0aC5tYXgobWF4UGFkZGluZ1twb3NdIC0gY2hhcnRBcmVhW3Bvc10sIDApO1xuICAgICAgICBjaGFydEFyZWFbcG9zXSArPSBjaGFuZ2U7XG4gICAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgfVxuICAgIGNoYXJ0QXJlYS55ICs9IHVwZGF0ZVBvcygndG9wJyk7XG4gICAgY2hhcnRBcmVhLnggKz0gdXBkYXRlUG9zKCdsZWZ0Jyk7XG4gICAgdXBkYXRlUG9zKCdyaWdodCcpO1xuICAgIHVwZGF0ZVBvcygnYm90dG9tJyk7XG59XG5mdW5jdGlvbiBnZXRNYXJnaW5zKGhvcml6b250YWwsIGNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcbiAgICBmdW5jdGlvbiBtYXJnaW5Gb3JQb3NpdGlvbnMocG9zaXRpb25zKSB7XG4gICAgICAgIGNvbnN0IG1hcmdpbiA9IHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogMFxuICAgICAgICB9O1xuICAgICAgICBwb3NpdGlvbnMuZm9yRWFjaCgocG9zKT0+e1xuICAgICAgICAgICAgbWFyZ2luW3Bvc10gPSBNYXRoLm1heChjaGFydEFyZWFbcG9zXSwgbWF4UGFkZGluZ1twb3NdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtYXJnaW47XG4gICAgfVxuICAgIHJldHVybiBob3Jpem9udGFsID8gbWFyZ2luRm9yUG9zaXRpb25zKFtcbiAgICAgICAgJ2xlZnQnLFxuICAgICAgICAncmlnaHQnXG4gICAgXSkgOiBtYXJnaW5Gb3JQb3NpdGlvbnMoW1xuICAgICAgICAndG9wJyxcbiAgICAgICAgJ2JvdHRvbSdcbiAgICBdKTtcbn1cbmZ1bmN0aW9uIGZpdEJveGVzKGJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSB7XG4gICAgY29uc3QgcmVmaXRCb3hlcyA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBsYXlvdXQsIGJveCwgcmVmaXQsIGNoYW5nZWQ7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gYm94ZXMubGVuZ3RoLCByZWZpdCA9IDA7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBsYXlvdXQgPSBib3hlc1tpXTtcbiAgICAgICAgYm94ID0gbGF5b3V0LmJveDtcbiAgICAgICAgYm94LnVwZGF0ZShsYXlvdXQud2lkdGggfHwgY2hhcnRBcmVhLncsIGxheW91dC5oZWlnaHQgfHwgY2hhcnRBcmVhLmgsIGdldE1hcmdpbnMobGF5b3V0Lmhvcml6b250YWwsIGNoYXJ0QXJlYSkpO1xuICAgICAgICBjb25zdCB7IHNhbWUgLCBvdGhlciAgfSA9IHVwZGF0ZURpbXMoY2hhcnRBcmVhLCBwYXJhbXMsIGxheW91dCwgc3RhY2tzKTtcbiAgICAgICAgcmVmaXQgfD0gc2FtZSAmJiByZWZpdEJveGVzLmxlbmd0aDtcbiAgICAgICAgY2hhbmdlZCA9IGNoYW5nZWQgfHwgb3RoZXI7XG4gICAgICAgIGlmICghYm94LmZ1bGxTaXplKSB7XG4gICAgICAgICAgICByZWZpdEJveGVzLnB1c2gobGF5b3V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVmaXQgJiYgZml0Qm94ZXMocmVmaXRCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykgfHwgY2hhbmdlZDtcbn1cbmZ1bmN0aW9uIHNldEJveERpbXMoYm94LCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBib3gudG9wID0gdG9wO1xuICAgIGJveC5sZWZ0ID0gbGVmdDtcbiAgICBib3gucmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG4gICAgYm94LmJvdHRvbSA9IHRvcCArIGhlaWdodDtcbiAgICBib3gud2lkdGggPSB3aWR0aDtcbiAgICBib3guaGVpZ2h0ID0gaGVpZ2h0O1xufVxuZnVuY3Rpb24gcGxhY2VCb3hlcyhib3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykge1xuICAgIGNvbnN0IHVzZXJQYWRkaW5nID0gcGFyYW1zLnBhZGRpbmc7XG4gICAgbGV0IHsgeCAsIHkgIH0gPSBjaGFydEFyZWE7XG4gICAgZm9yIChjb25zdCBsYXlvdXQgb2YgYm94ZXMpe1xuICAgICAgICBjb25zdCBib3ggPSBsYXlvdXQuYm94O1xuICAgICAgICBjb25zdCBzdGFjayA9IHN0YWNrc1tsYXlvdXQuc3RhY2tdIHx8IHtcbiAgICAgICAgICAgIGNvdW50OiAxLFxuICAgICAgICAgICAgcGxhY2VkOiAwLFxuICAgICAgICAgICAgd2VpZ2h0OiAxXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHdlaWdodCA9IGxheW91dC5zdGFja1dlaWdodCAvIHN0YWNrLndlaWdodCB8fCAxO1xuICAgICAgICBpZiAobGF5b3V0Lmhvcml6b250YWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gY2hhcnRBcmVhLncgKiB3ZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBzdGFjay5zaXplIHx8IGJveC5oZWlnaHQ7XG4gICAgICAgICAgICBpZiAoZGVmaW5lZChzdGFjay5zdGFydCkpIHtcbiAgICAgICAgICAgICAgICB5ID0gc3RhY2suc3RhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYm94LmZ1bGxTaXplKSB7XG4gICAgICAgICAgICAgICAgc2V0Qm94RGltcyhib3gsIHVzZXJQYWRkaW5nLmxlZnQsIHksIHBhcmFtcy5vdXRlcldpZHRoIC0gdXNlclBhZGRpbmcucmlnaHQgLSB1c2VyUGFkZGluZy5sZWZ0LCBoZWlnaHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRCb3hEaW1zKGJveCwgY2hhcnRBcmVhLmxlZnQgKyBzdGFjay5wbGFjZWQsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhY2suc3RhcnQgPSB5O1xuICAgICAgICAgICAgc3RhY2sucGxhY2VkICs9IHdpZHRoO1xuICAgICAgICAgICAgeSA9IGJveC5ib3R0b207XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBjaGFydEFyZWEuaCAqIHdlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gc3RhY2suc2l6ZSB8fCBib3gud2lkdGg7XG4gICAgICAgICAgICBpZiAoZGVmaW5lZChzdGFjay5zdGFydCkpIHtcbiAgICAgICAgICAgICAgICB4ID0gc3RhY2suc3RhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYm94LmZ1bGxTaXplKSB7XG4gICAgICAgICAgICAgICAgc2V0Qm94RGltcyhib3gsIHgsIHVzZXJQYWRkaW5nLnRvcCwgd2lkdGgsIHBhcmFtcy5vdXRlckhlaWdodCAtIHVzZXJQYWRkaW5nLmJvdHRvbSAtIHVzZXJQYWRkaW5nLnRvcCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldEJveERpbXMoYm94LCB4LCBjaGFydEFyZWEudG9wICsgc3RhY2sucGxhY2VkLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YWNrLnN0YXJ0ID0geDtcbiAgICAgICAgICAgIHN0YWNrLnBsYWNlZCArPSBoZWlnaHQ7XG4gICAgICAgICAgICB4ID0gYm94LnJpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoYXJ0QXJlYS54ID0geDtcbiAgICBjaGFydEFyZWEueSA9IHk7XG59XG52YXIgbGF5b3V0cyA9IHtcbiBhZGRCb3ggKGNoYXJ0LCBpdGVtKSB7XG4gICAgICAgIGlmICghY2hhcnQuYm94ZXMpIHtcbiAgICAgICAgICAgIGNoYXJ0LmJveGVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaXRlbS5mdWxsU2l6ZSA9IGl0ZW0uZnVsbFNpemUgfHwgZmFsc2U7XG4gICAgICAgIGl0ZW0ucG9zaXRpb24gPSBpdGVtLnBvc2l0aW9uIHx8ICd0b3AnO1xuICAgICAgICBpdGVtLndlaWdodCA9IGl0ZW0ud2VpZ2h0IHx8IDA7XG4gICAgICAgIGl0ZW0uX2xheWVycyA9IGl0ZW0uX2xheWVycyB8fCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB6OiAwLFxuICAgICAgICAgICAgICAgICAgICBkcmF3IChjaGFydEFyZWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZHJhdyhjaGFydEFyZWEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfTtcbiAgICAgICAgY2hhcnQuYm94ZXMucHVzaChpdGVtKTtcbiAgICB9LFxuIHJlbW92ZUJveCAoY2hhcnQsIGxheW91dEl0ZW0pIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBjaGFydC5ib3hlcyA/IGNoYXJ0LmJveGVzLmluZGV4T2YobGF5b3V0SXRlbSkgOiAtMTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgY2hhcnQuYm94ZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH0sXG4gY29uZmlndXJlIChjaGFydCwgaXRlbSwgb3B0aW9ucykge1xuICAgICAgICBpdGVtLmZ1bGxTaXplID0gb3B0aW9ucy5mdWxsU2l6ZTtcbiAgICAgICAgaXRlbS5wb3NpdGlvbiA9IG9wdGlvbnMucG9zaXRpb247XG4gICAgICAgIGl0ZW0ud2VpZ2h0ID0gb3B0aW9ucy53ZWlnaHQ7XG4gICAgfSxcbiB1cGRhdGUgKGNoYXJ0LCB3aWR0aCwgaGVpZ2h0LCBtaW5QYWRkaW5nKSB7XG4gICAgICAgIGlmICghY2hhcnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKGNoYXJ0Lm9wdGlvbnMubGF5b3V0LnBhZGRpbmcpO1xuICAgICAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IE1hdGgubWF4KHdpZHRoIC0gcGFkZGluZy53aWR0aCwgMCk7XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZUhlaWdodCA9IE1hdGgubWF4KGhlaWdodCAtIHBhZGRpbmcuaGVpZ2h0LCAwKTtcbiAgICAgICAgY29uc3QgYm94ZXMgPSBidWlsZExheW91dEJveGVzKGNoYXJ0LmJveGVzKTtcbiAgICAgICAgY29uc3QgdmVydGljYWxCb3hlcyA9IGJveGVzLnZlcnRpY2FsO1xuICAgICAgICBjb25zdCBob3Jpem9udGFsQm94ZXMgPSBib3hlcy5ob3Jpem9udGFsO1xuICAgICAgICBlYWNoKGNoYXJ0LmJveGVzLCAoYm94KT0+e1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBib3guYmVmb3JlTGF5b3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgYm94LmJlZm9yZUxheW91dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdmlzaWJsZVZlcnRpY2FsQm94Q291bnQgPSB2ZXJ0aWNhbEJveGVzLnJlZHVjZSgodG90YWwsIHdyYXApPT53cmFwLmJveC5vcHRpb25zICYmIHdyYXAuYm94Lm9wdGlvbnMuZGlzcGxheSA9PT0gZmFsc2UgPyB0b3RhbCA6IHRvdGFsICsgMSwgMCkgfHwgMTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgICAgICBvdXRlcldpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIG91dGVySGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgICAgYXZhaWxhYmxlV2lkdGgsXG4gICAgICAgICAgICBhdmFpbGFibGVIZWlnaHQsXG4gICAgICAgICAgICB2Qm94TWF4V2lkdGg6IGF2YWlsYWJsZVdpZHRoIC8gMiAvIHZpc2libGVWZXJ0aWNhbEJveENvdW50LFxuICAgICAgICAgICAgaEJveE1heEhlaWdodDogYXZhaWxhYmxlSGVpZ2h0IC8gMlxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbWF4UGFkZGluZyA9IE9iamVjdC5hc3NpZ24oe30sIHBhZGRpbmcpO1xuICAgICAgICB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIHRvUGFkZGluZyhtaW5QYWRkaW5nKSk7XG4gICAgICAgIGNvbnN0IGNoYXJ0QXJlYSA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgbWF4UGFkZGluZyxcbiAgICAgICAgICAgIHc6IGF2YWlsYWJsZVdpZHRoLFxuICAgICAgICAgICAgaDogYXZhaWxhYmxlSGVpZ2h0LFxuICAgICAgICAgICAgeDogcGFkZGluZy5sZWZ0LFxuICAgICAgICAgICAgeTogcGFkZGluZy50b3BcbiAgICAgICAgfSwgcGFkZGluZyk7XG4gICAgICAgIGNvbnN0IHN0YWNrcyA9IHNldExheW91dERpbXModmVydGljYWxCb3hlcy5jb25jYXQoaG9yaXpvbnRhbEJveGVzKSwgcGFyYW1zKTtcbiAgICAgICAgZml0Qm94ZXMoYm94ZXMuZnVsbFNpemUsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgICAgICBmaXRCb3hlcyh2ZXJ0aWNhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICAgICAgaWYgKGZpdEJveGVzKGhvcml6b250YWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykpIHtcbiAgICAgICAgICAgIGZpdEJveGVzKHZlcnRpY2FsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgICAgICB9XG4gICAgICAgIGhhbmRsZU1heFBhZGRpbmcoY2hhcnRBcmVhKTtcbiAgICAgICAgcGxhY2VCb3hlcyhib3hlcy5sZWZ0QW5kVG9wLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICAgICAgY2hhcnRBcmVhLnggKz0gY2hhcnRBcmVhLnc7XG4gICAgICAgIGNoYXJ0QXJlYS55ICs9IGNoYXJ0QXJlYS5oO1xuICAgICAgICBwbGFjZUJveGVzKGJveGVzLnJpZ2h0QW5kQm90dG9tLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICAgICAgY2hhcnQuY2hhcnRBcmVhID0ge1xuICAgICAgICAgICAgbGVmdDogY2hhcnRBcmVhLmxlZnQsXG4gICAgICAgICAgICB0b3A6IGNoYXJ0QXJlYS50b3AsXG4gICAgICAgICAgICByaWdodDogY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEudyxcbiAgICAgICAgICAgIGJvdHRvbTogY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5oLFxuICAgICAgICAgICAgaGVpZ2h0OiBjaGFydEFyZWEuaCxcbiAgICAgICAgICAgIHdpZHRoOiBjaGFydEFyZWEud1xuICAgICAgICB9O1xuICAgICAgICBlYWNoKGJveGVzLmNoYXJ0QXJlYSwgKGxheW91dCk9PntcbiAgICAgICAgICAgIGNvbnN0IGJveCA9IGxheW91dC5ib3g7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGJveCwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICAgICAgICAgIGJveC51cGRhdGUoY2hhcnRBcmVhLncsIGNoYXJ0QXJlYS5oLCB7XG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuY2xhc3MgQmFzZVBsYXRmb3JtIHtcbiBhY3F1aXJlQ29udGV4dChjYW52YXMsIGFzcGVjdFJhdGlvKSB7fVxuIHJlbGVhc2VDb250ZXh0KGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiBhZGRFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge31cbiByZW1vdmVFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge31cbiBnZXREZXZpY2VQaXhlbFJhdGlvKCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gZ2V0TWF4aW11bVNpemUoZWxlbWVudCwgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgICAgICAgd2lkdGggPSBNYXRoLm1heCgwLCB3aWR0aCB8fCBlbGVtZW50LndpZHRoKTtcbiAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IHx8IGVsZW1lbnQuaGVpZ2h0O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGgubWF4KDAsIGFzcGVjdFJhdGlvID8gTWF0aC5mbG9vcih3aWR0aCAvIGFzcGVjdFJhdGlvKSA6IGhlaWdodClcbiAgICAgICAgfTtcbiAgICB9XG4gaXNBdHRhY2hlZChjYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuIHVwZGF0ZUNvbmZpZyhjb25maWcpIHtcbiAgICB9XG59XG5cbmNsYXNzIEJhc2ljUGxhdGZvcm0gZXh0ZW5kcyBCYXNlUGxhdGZvcm0ge1xuICAgIGFjcXVpcmVDb250ZXh0KGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gJiYgaXRlbS5nZXRDb250ZXh0ICYmIGl0ZW0uZ2V0Q29udGV4dCgnMmQnKSB8fCBudWxsO1xuICAgIH1cbiAgICB1cGRhdGVDb25maWcoY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5vcHRpb25zLmFuaW1hdGlvbiA9IGZhbHNlO1xuICAgIH1cbn1cblxuY29uc3QgRVhQQU5ET19LRVkgPSAnJGNoYXJ0anMnO1xuIGNvbnN0IEVWRU5UX1RZUEVTID0ge1xuICAgIHRvdWNoc3RhcnQ6ICdtb3VzZWRvd24nLFxuICAgIHRvdWNobW92ZTogJ21vdXNlbW92ZScsXG4gICAgdG91Y2hlbmQ6ICdtb3VzZXVwJyxcbiAgICBwb2ludGVyZW50ZXI6ICdtb3VzZWVudGVyJyxcbiAgICBwb2ludGVyZG93bjogJ21vdXNlZG93bicsXG4gICAgcG9pbnRlcm1vdmU6ICdtb3VzZW1vdmUnLFxuICAgIHBvaW50ZXJ1cDogJ21vdXNldXAnLFxuICAgIHBvaW50ZXJsZWF2ZTogJ21vdXNlb3V0JyxcbiAgICBwb2ludGVyb3V0OiAnbW91c2VvdXQnXG59O1xuY29uc3QgaXNOdWxsT3JFbXB0eSA9ICh2YWx1ZSk9PnZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSAnJztcbiBmdW5jdGlvbiBpbml0Q2FudmFzKGNhbnZhcywgYXNwZWN0UmF0aW8pIHtcbiAgICBjb25zdCBzdHlsZSA9IGNhbnZhcy5zdHlsZTtcbiAgICBjb25zdCByZW5kZXJIZWlnaHQgPSBjYW52YXMuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcbiAgICBjb25zdCByZW5kZXJXaWR0aCA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyk7XG4gICAgY2FudmFzW0VYUEFORE9fS0VZXSA9IHtcbiAgICAgICAgaW5pdGlhbDoge1xuICAgICAgICAgICAgaGVpZ2h0OiByZW5kZXJIZWlnaHQsXG4gICAgICAgICAgICB3aWR0aDogcmVuZGVyV2lkdGgsXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IHN0eWxlLmRpc3BsYXksXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzdHlsZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgd2lkdGg6IHN0eWxlLndpZHRoXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHN0eWxlLmRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5IHx8ICdibG9jayc7XG4gICAgc3R5bGUuYm94U2l6aW5nID0gc3R5bGUuYm94U2l6aW5nIHx8ICdib3JkZXItYm94JztcbiAgICBpZiAoaXNOdWxsT3JFbXB0eShyZW5kZXJXaWR0aCkpIHtcbiAgICAgICAgY29uc3QgZGlzcGxheVdpZHRoID0gcmVhZFVzZWRTaXplKGNhbnZhcywgJ3dpZHRoJyk7XG4gICAgICAgIGlmIChkaXNwbGF5V2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gZGlzcGxheVdpZHRoO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc051bGxPckVtcHR5KHJlbmRlckhlaWdodCkpIHtcbiAgICAgICAgaWYgKGNhbnZhcy5zdHlsZS5oZWlnaHQgPT09ICcnKSB7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzLndpZHRoIC8gKGFzcGVjdFJhdGlvIHx8IDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGlzcGxheUhlaWdodCA9IHJlYWRVc2VkU2l6ZShjYW52YXMsICdoZWlnaHQnKTtcbiAgICAgICAgICAgIGlmIChkaXNwbGF5SGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gZGlzcGxheUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2FudmFzO1xufVxuY29uc3QgZXZlbnRMaXN0ZW5lck9wdGlvbnMgPSBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zID8ge1xuICAgIHBhc3NpdmU6IHRydWVcbn0gOiBmYWxzZTtcbmZ1bmN0aW9uIGFkZExpc3RlbmVyKG5vZGUsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBjaGFydC5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZnJvbU5hdGl2ZUV2ZW50KGV2ZW50LCBjaGFydCkge1xuICAgIGNvbnN0IHR5cGUgPSBFVkVOVF9UWVBFU1tldmVudC50eXBlXSB8fCBldmVudC50eXBlO1xuICAgIGNvbnN0IHsgeCAsIHkgIH0gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGV2ZW50LCBjaGFydCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZSxcbiAgICAgICAgY2hhcnQsXG4gICAgICAgIG5hdGl2ZTogZXZlbnQsXG4gICAgICAgIHg6IHggIT09IHVuZGVmaW5lZCA/IHggOiBudWxsLFxuICAgICAgICB5OiB5ICE9PSB1bmRlZmluZWQgPyB5IDogbnVsbFxuICAgIH07XG59XG5mdW5jdGlvbiBub2RlTGlzdENvbnRhaW5zKG5vZGVMaXN0LCBjYW52YXMpIHtcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygbm9kZUxpc3Qpe1xuICAgICAgICBpZiAobm9kZSA9PT0gY2FudmFzIHx8IG5vZGUuY29udGFpbnMoY2FudmFzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVBdHRhY2hPYnNlcnZlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoZW50cmllcyk9PntcbiAgICAgICAgbGV0IHRyaWdnZXIgPSBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKXtcbiAgICAgICAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyIHx8IG5vZGVMaXN0Q29udGFpbnMoZW50cnkuYWRkZWROb2RlcywgY2FudmFzKTtcbiAgICAgICAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyICYmICFub2RlTGlzdENvbnRhaW5zKGVudHJ5LnJlbW92ZWROb2RlcywgY2FudmFzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJpZ2dlcikge1xuICAgICAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHtcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ic2VydmVyO1xufVxuZnVuY3Rpb24gY3JlYXRlRGV0YWNoT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpPT57XG4gICAgICAgIGxldCB0cmlnZ2VyID0gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcyl7XG4gICAgICAgICAgICB0cmlnZ2VyID0gdHJpZ2dlciB8fCBub2RlTGlzdENvbnRhaW5zKGVudHJ5LnJlbW92ZWROb2RlcywgY2FudmFzKTtcbiAgICAgICAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyICYmICFub2RlTGlzdENvbnRhaW5zKGVudHJ5LmFkZGVkTm9kZXMsIGNhbnZhcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCB7XG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYnNlcnZlcjtcbn1cbmNvbnN0IGRycExpc3RlbmluZ0NoYXJ0cyA9IG5ldyBNYXAoKTtcbmxldCBvbGREZXZpY2VQaXhlbFJhdGlvID0gMDtcbmZ1bmN0aW9uIG9uV2luZG93UmVzaXplKCkge1xuICAgIGNvbnN0IGRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIGlmIChkcHIgPT09IG9sZERldmljZVBpeGVsUmF0aW8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvbGREZXZpY2VQaXhlbFJhdGlvID0gZHByO1xuICAgIGRycExpc3RlbmluZ0NoYXJ0cy5mb3JFYWNoKChyZXNpemUsIGNoYXJ0KT0+e1xuICAgICAgICBpZiAoY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gIT09IGRwcikge1xuICAgICAgICAgICAgcmVzaXplKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0LCByZXNpemUpIHtcbiAgICBpZiAoIWRycExpc3RlbmluZ0NoYXJ0cy5zaXplKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG4gICAgfVxuICAgIGRycExpc3RlbmluZ0NoYXJ0cy5zZXQoY2hhcnQsIHJlc2l6ZSk7XG59XG5mdW5jdGlvbiB1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0KSB7XG4gICAgZHJwTGlzdGVuaW5nQ2hhcnRzLmRlbGV0ZShjaGFydCk7XG4gICAgaWYgKCFkcnBMaXN0ZW5pbmdDaGFydHMuc2l6ZSkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlc2l6ZU9ic2VydmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgICBjb25zdCBjb250YWluZXIgPSBjYW52YXMgJiYgX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlc2l6ZSA9IHRocm90dGxlZCgod2lkdGgsIGhlaWdodCk9PntcbiAgICAgICAgY29uc3QgdyA9IGNvbnRhaW5lci5jbGllbnRXaWR0aDtcbiAgICAgICAgbGlzdGVuZXIod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGlmICh3IDwgY29udGFpbmVyLmNsaWVudFdpZHRoKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgICB9XG4gICAgfSwgd2luZG93KTtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cmllcyk9PntcbiAgICAgICAgY29uc3QgZW50cnkgPSBlbnRyaWVzWzBdO1xuICAgICAgICBjb25zdCB3aWR0aCA9IGVudHJ5LmNvbnRlbnRSZWN0LndpZHRoO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBlbnRyeS5jb250ZW50UmVjdC5oZWlnaHQ7XG4gICAgICAgIGlmICh3aWR0aCA9PT0gMCAmJiBoZWlnaHQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShjb250YWluZXIpO1xuICAgIGxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0LCByZXNpemUpO1xuICAgIHJldHVybiBvYnNlcnZlcjtcbn1cbmZ1bmN0aW9uIHJlbGVhc2VPYnNlcnZlcihjaGFydCwgdHlwZSwgb2JzZXJ2ZXIpIHtcbiAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ3Jlc2l6ZScpIHtcbiAgICAgICAgdW5saXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUHJveHlBbmRMaXN0ZW4oY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICAgIGNvbnN0IHByb3h5ID0gdGhyb3R0bGVkKChldmVudCk9PntcbiAgICAgICAgaWYgKGNoYXJ0LmN0eCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGlzdGVuZXIoZnJvbU5hdGl2ZUV2ZW50KGV2ZW50LCBjaGFydCkpO1xuICAgICAgICB9XG4gICAgfSwgY2hhcnQpO1xuICAgIGFkZExpc3RlbmVyKGNhbnZhcywgdHlwZSwgcHJveHkpO1xuICAgIHJldHVybiBwcm94eTtcbn1cbiBjbGFzcyBEb21QbGF0Zm9ybSBleHRlbmRzIEJhc2VQbGF0Zm9ybSB7XG4gYWNxdWlyZUNvbnRleHQoY2FudmFzLCBhc3BlY3RSYXRpbykge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzICYmIGNhbnZhcy5nZXRDb250ZXh0ICYmIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0LmNhbnZhcyA9PT0gY2FudmFzKSB7XG4gICAgICAgICAgICBpbml0Q2FudmFzKGNhbnZhcywgYXNwZWN0UmF0aW8pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuIHJlbGVhc2VDb250ZXh0KGNvbnRleHQpIHtcbiAgICAgICAgY29uc3QgY2FudmFzID0gY29udGV4dC5jYW52YXM7XG4gICAgICAgIGlmICghY2FudmFzW0VYUEFORE9fS0VZXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluaXRpYWwgPSBjYW52YXNbRVhQQU5ET19LRVldLmluaXRpYWw7XG4gICAgICAgIFtcbiAgICAgICAgICAgICdoZWlnaHQnLFxuICAgICAgICAgICAgJ3dpZHRoJ1xuICAgICAgICBdLmZvckVhY2goKHByb3ApPT57XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGluaXRpYWxbcHJvcF07XG4gICAgICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjYW52YXMucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKHByb3AsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gaW5pdGlhbC5zdHlsZSB8fCB7fTtcbiAgICAgICAgT2JqZWN0LmtleXMoc3R5bGUpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgIGNhbnZhcy5zdHlsZVtrZXldID0gc3R5bGVba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhcy53aWR0aDtcbiAgICAgICAgZGVsZXRlIGNhbnZhc1tFWFBBTkRPX0tFWV07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiBhZGRFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUpO1xuICAgICAgICBjb25zdCBwcm94aWVzID0gY2hhcnQuJHByb3hpZXMgfHwgKGNoYXJ0LiRwcm94aWVzID0ge30pO1xuICAgICAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgICAgICAgIGF0dGFjaDogY3JlYXRlQXR0YWNoT2JzZXJ2ZXIsXG4gICAgICAgICAgICBkZXRhY2g6IGNyZWF0ZURldGFjaE9ic2VydmVyLFxuICAgICAgICAgICAgcmVzaXplOiBjcmVhdGVSZXNpemVPYnNlcnZlclxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbdHlwZV0gfHwgY3JlYXRlUHJveHlBbmRMaXN0ZW47XG4gICAgICAgIHByb3hpZXNbdHlwZV0gPSBoYW5kbGVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgfVxuIHJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUpIHtcbiAgICAgICAgY29uc3QgcHJveGllcyA9IGNoYXJ0LiRwcm94aWVzIHx8IChjaGFydC4kcHJveGllcyA9IHt9KTtcbiAgICAgICAgY29uc3QgcHJveHkgPSBwcm94aWVzW3R5cGVdO1xuICAgICAgICBpZiAoIXByb3h5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFuZGxlcnMgPSB7XG4gICAgICAgICAgICBhdHRhY2g6IHJlbGVhc2VPYnNlcnZlcixcbiAgICAgICAgICAgIGRldGFjaDogcmVsZWFzZU9ic2VydmVyLFxuICAgICAgICAgICAgcmVzaXplOiByZWxlYXNlT2JzZXJ2ZXJcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW3R5cGVdIHx8IHJlbW92ZUxpc3RlbmVyO1xuICAgICAgICBoYW5kbGVyKGNoYXJ0LCB0eXBlLCBwcm94eSk7XG4gICAgICAgIHByb3hpZXNbdHlwZV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldERldmljZVBpeGVsUmF0aW8oKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICB9XG4gZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbykge1xuICAgICAgICByZXR1cm4gZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbyk7XG4gICAgfVxuIGlzQXR0YWNoZWQoY2FudmFzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IF9nZXRQYXJlbnROb2RlKGNhbnZhcyk7XG4gICAgICAgIHJldHVybiAhIShjb250YWluZXIgJiYgY29udGFpbmVyLmlzQ29ubmVjdGVkKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9kZXRlY3RQbGF0Zm9ybShjYW52YXMpIHtcbiAgICBpZiAoIV9pc0RvbVN1cHBvcnRlZCgpIHx8IHR5cGVvZiBPZmZzY3JlZW5DYW52YXMgIT09ICd1bmRlZmluZWQnICYmIGNhbnZhcyBpbnN0YW5jZW9mIE9mZnNjcmVlbkNhbnZhcykge1xuICAgICAgICByZXR1cm4gQmFzaWNQbGF0Zm9ybTtcbiAgICB9XG4gICAgcmV0dXJuIERvbVBsYXRmb3JtO1xufVxuXG5jbGFzcyBFbGVtZW50IHtcbiAgICBzdGF0aWMgZGVmYXVsdHMgPSB7fTtcbiAgICBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHVuZGVmaW5lZDtcbiAgICB4O1xuICAgIHk7XG4gICAgYWN0aXZlID0gZmFsc2U7XG4gICAgb3B0aW9ucztcbiAgICAkYW5pbWF0aW9ucztcbiAgICB0b29sdGlwUG9zaXRpb24odXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCB7IHggLCB5ICB9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICB9O1xuICAgIH1cbiAgICBoYXNWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGlzTnVtYmVyKHRoaXMueCkgJiYgaXNOdW1iZXIodGhpcy55KTtcbiAgICB9XG4gICAgZ2V0UHJvcHMocHJvcHMsIGZpbmFsKSB7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy4kYW5pbWF0aW9ucztcbiAgICAgICAgaWYgKCFmaW5hbCB8fCAhYW5pbXMpIHtcbiAgICAgICAgICAgIC8vIGxldCdzIG5vdCBjcmVhdGUgYW4gb2JqZWN0LCBpZiBub3QgbmVlZGVkXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXQgPSB7fTtcbiAgICAgICAgcHJvcHMuZm9yRWFjaCgocHJvcCk9PntcbiAgICAgICAgICAgIHJldFtwcm9wXSA9IGFuaW1zW3Byb3BdICYmIGFuaW1zW3Byb3BdLmFjdGl2ZSgpID8gYW5pbXNbcHJvcF0uX3RvIDogdGhpc1twcm9wXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhdXRvU2tpcChzY2FsZSwgdGlja3MpIHtcbiAgICBjb25zdCB0aWNrT3B0cyA9IHNjYWxlLm9wdGlvbnMudGlja3M7XG4gICAgY29uc3QgZGV0ZXJtaW5lZE1heFRpY2tzID0gZGV0ZXJtaW5lTWF4VGlja3Moc2NhbGUpO1xuICAgIGNvbnN0IHRpY2tzTGltaXQgPSBNYXRoLm1pbih0aWNrT3B0cy5tYXhUaWNrc0xpbWl0IHx8IGRldGVybWluZWRNYXhUaWNrcywgZGV0ZXJtaW5lZE1heFRpY2tzKTtcbiAgICBjb25zdCBtYWpvckluZGljZXMgPSB0aWNrT3B0cy5tYWpvci5lbmFibGVkID8gZ2V0TWFqb3JJbmRpY2VzKHRpY2tzKSA6IFtdO1xuICAgIGNvbnN0IG51bU1ham9ySW5kaWNlcyA9IG1ham9ySW5kaWNlcy5sZW5ndGg7XG4gICAgY29uc3QgZmlyc3QgPSBtYWpvckluZGljZXNbMF07XG4gICAgY29uc3QgbGFzdCA9IG1ham9ySW5kaWNlc1tudW1NYWpvckluZGljZXMgLSAxXTtcbiAgICBjb25zdCBuZXdUaWNrcyA9IFtdO1xuICAgIGlmIChudW1NYWpvckluZGljZXMgPiB0aWNrc0xpbWl0KSB7XG4gICAgICAgIHNraXBNYWpvcnModGlja3MsIG5ld1RpY2tzLCBtYWpvckluZGljZXMsIG51bU1ham9ySW5kaWNlcyAvIHRpY2tzTGltaXQpO1xuICAgICAgICByZXR1cm4gbmV3VGlja3M7XG4gICAgfVxuICAgIGNvbnN0IHNwYWNpbmcgPSBjYWxjdWxhdGVTcGFjaW5nKG1ham9ySW5kaWNlcywgdGlja3MsIHRpY2tzTGltaXQpO1xuICAgIGlmIChudW1NYWpvckluZGljZXMgPiAwKSB7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBjb25zdCBhdmdNYWpvclNwYWNpbmcgPSBudW1NYWpvckluZGljZXMgPiAxID8gTWF0aC5yb3VuZCgobGFzdCAtIGZpcnN0KSAvIChudW1NYWpvckluZGljZXMgLSAxKSkgOiBudWxsO1xuICAgICAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgaXNOdWxsT3JVbmRlZihhdmdNYWpvclNwYWNpbmcpID8gMCA6IGZpcnN0IC0gYXZnTWFqb3JTcGFjaW5nLCBmaXJzdCk7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IG51bU1ham9ySW5kaWNlcyAtIDE7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIG1ham9ySW5kaWNlc1tpXSwgbWFqb3JJbmRpY2VzW2kgKyAxXSk7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIGxhc3QsIGlzTnVsbE9yVW5kZWYoYXZnTWFqb3JTcGFjaW5nKSA/IHRpY2tzLmxlbmd0aCA6IGxhc3QgKyBhdmdNYWpvclNwYWNpbmcpO1xuICAgICAgICByZXR1cm4gbmV3VGlja3M7XG4gICAgfVxuICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nKTtcbiAgICByZXR1cm4gbmV3VGlja3M7XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVNYXhUaWNrcyhzY2FsZSkge1xuICAgIGNvbnN0IG9mZnNldCA9IHNjYWxlLm9wdGlvbnMub2Zmc2V0O1xuICAgIGNvbnN0IHRpY2tMZW5ndGggPSBzY2FsZS5fdGlja1NpemUoKTtcbiAgICBjb25zdCBtYXhTY2FsZSA9IHNjYWxlLl9sZW5ndGggLyB0aWNrTGVuZ3RoICsgKG9mZnNldCA/IDAgOiAxKTtcbiAgICBjb25zdCBtYXhDaGFydCA9IHNjYWxlLl9tYXhMZW5ndGggLyB0aWNrTGVuZ3RoO1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgubWluKG1heFNjYWxlLCBtYXhDaGFydCkpO1xufVxuIGZ1bmN0aW9uIGNhbGN1bGF0ZVNwYWNpbmcobWFqb3JJbmRpY2VzLCB0aWNrcywgdGlja3NMaW1pdCkge1xuICAgIGNvbnN0IGV2ZW5NYWpvclNwYWNpbmcgPSBnZXRFdmVuU3BhY2luZyhtYWpvckluZGljZXMpO1xuICAgIGNvbnN0IHNwYWNpbmcgPSB0aWNrcy5sZW5ndGggLyB0aWNrc0xpbWl0O1xuICAgIGlmICghZXZlbk1ham9yU3BhY2luZykge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoc3BhY2luZywgMSk7XG4gICAgfVxuICAgIGNvbnN0IGZhY3RvcnMgPSBfZmFjdG9yaXplKGV2ZW5NYWpvclNwYWNpbmcpO1xuICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSBmYWN0b3JzLmxlbmd0aCAtIDE7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICBjb25zdCBmYWN0b3IgPSBmYWN0b3JzW2ldO1xuICAgICAgICBpZiAoZmFjdG9yID4gc3BhY2luZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhY3RvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gTWF0aC5tYXgoc3BhY2luZywgMSk7XG59XG4gZnVuY3Rpb24gZ2V0TWFqb3JJbmRpY2VzKHRpY2tzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgaWYgKHRpY2tzW2ldLm1ham9yKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIHNraXBNYWpvcnModGlja3MsIG5ld1RpY2tzLCBtYWpvckluZGljZXMsIHNwYWNpbmcpIHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGxldCBuZXh0ID0gbWFqb3JJbmRpY2VzWzBdO1xuICAgIGxldCBpO1xuICAgIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyk7XG4gICAgZm9yKGkgPSAwOyBpIDwgdGlja3MubGVuZ3RoOyBpKyspe1xuICAgICAgICBpZiAoaSA9PT0gbmV4dCkge1xuICAgICAgICAgICAgbmV3VGlja3MucHVzaCh0aWNrc1tpXSk7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgbmV4dCA9IG1ham9ySW5kaWNlc1tjb3VudCAqIHNwYWNpbmddO1xuICAgICAgICB9XG4gICAgfVxufVxuIGZ1bmN0aW9uIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBtYWpvclN0YXJ0LCBtYWpvckVuZCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdmFsdWVPckRlZmF1bHQobWFqb3JTdGFydCwgMCk7XG4gICAgY29uc3QgZW5kID0gTWF0aC5taW4odmFsdWVPckRlZmF1bHQobWFqb3JFbmQsIHRpY2tzLmxlbmd0aCksIHRpY2tzLmxlbmd0aCk7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBsZXQgbGVuZ3RoLCBpLCBuZXh0O1xuICAgIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyk7XG4gICAgaWYgKG1ham9yRW5kKSB7XG4gICAgICAgIGxlbmd0aCA9IG1ham9yRW5kIC0gbWFqb3JTdGFydDtcbiAgICAgICAgc3BhY2luZyA9IGxlbmd0aCAvIE1hdGguZmxvb3IobGVuZ3RoIC8gc3BhY2luZyk7XG4gICAgfVxuICAgIG5leHQgPSBzdGFydDtcbiAgICB3aGlsZShuZXh0IDwgMCl7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICAgIG5leHQgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgY291bnQgKiBzcGFjaW5nKTtcbiAgICB9XG4gICAgZm9yKGkgPSBNYXRoLm1heChzdGFydCwgMCk7IGkgPCBlbmQ7IGkrKyl7XG4gICAgICAgIGlmIChpID09PSBuZXh0KSB7XG4gICAgICAgICAgICBuZXdUaWNrcy5wdXNoKHRpY2tzW2ldKTtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICBuZXh0ID0gTWF0aC5yb3VuZChzdGFydCArIGNvdW50ICogc3BhY2luZyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gZ2V0RXZlblNwYWNpbmcoYXJyKSB7XG4gICAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcbiAgICBsZXQgaSwgZGlmZjtcbiAgICBpZiAobGVuIDwgMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvcihkaWZmID0gYXJyWzBdLCBpID0gMTsgaSA8IGxlbjsgKytpKXtcbiAgICAgICAgaWYgKGFycltpXSAtIGFycltpIC0gMV0gIT09IGRpZmYpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGlmZjtcbn1cblxuY29uc3QgcmV2ZXJzZUFsaWduID0gKGFsaWduKT0+YWxpZ24gPT09ICdsZWZ0JyA/ICdyaWdodCcgOiBhbGlnbiA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6IGFsaWduO1xuY29uc3Qgb2Zmc2V0RnJvbUVkZ2UgPSAoc2NhbGUsIGVkZ2UsIG9mZnNldCk9PmVkZ2UgPT09ICd0b3AnIHx8IGVkZ2UgPT09ICdsZWZ0JyA/IHNjYWxlW2VkZ2VdICsgb2Zmc2V0IDogc2NhbGVbZWRnZV0gLSBvZmZzZXQ7XG5jb25zdCBnZXRUaWNrc0xpbWl0ID0gKHRpY2tzTGVuZ3RoLCBtYXhUaWNrc0xpbWl0KT0+TWF0aC5taW4obWF4VGlja3NMaW1pdCB8fCB0aWNrc0xlbmd0aCwgdGlja3NMZW5ndGgpO1xuIGZ1bmN0aW9uIHNhbXBsZShhcnIsIG51bUl0ZW1zKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3QgaW5jcmVtZW50ID0gYXJyLmxlbmd0aCAvIG51bUl0ZW1zO1xuICAgIGNvbnN0IGxlbiA9IGFyci5sZW5ndGg7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvcig7IGkgPCBsZW47IGkgKz0gaW5jcmVtZW50KXtcbiAgICAgICAgcmVzdWx0LnB1c2goYXJyW01hdGguZmxvb3IoaSldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiBmdW5jdGlvbiBnZXRQaXhlbEZvckdyaWRMaW5lKHNjYWxlLCBpbmRleCwgb2Zmc2V0R3JpZExpbmVzKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gc2NhbGUudGlja3MubGVuZ3RoO1xuICAgIGNvbnN0IHZhbGlkSW5kZXggPSBNYXRoLm1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgY29uc3Qgc3RhcnQgPSBzY2FsZS5fc3RhcnRQaXhlbDtcbiAgICBjb25zdCBlbmQgPSBzY2FsZS5fZW5kUGl4ZWw7XG4gICAgY29uc3QgZXBzaWxvbiA9IDFlLTY7XG4gICAgbGV0IGxpbmVWYWx1ZSA9IHNjYWxlLmdldFBpeGVsRm9yVGljayh2YWxpZEluZGV4KTtcbiAgICBsZXQgb2Zmc2V0O1xuICAgIGlmIChvZmZzZXRHcmlkTGluZXMpIHtcbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gTWF0aC5tYXgobGluZVZhbHVlIC0gc3RhcnQsIGVuZCAtIGxpbmVWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIG9mZnNldCA9IChzY2FsZS5nZXRQaXhlbEZvclRpY2soMSkgLSBsaW5lVmFsdWUpIC8gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9mZnNldCA9IChsaW5lVmFsdWUgLSBzY2FsZS5nZXRQaXhlbEZvclRpY2sodmFsaWRJbmRleCAtIDEpKSAvIDI7XG4gICAgICAgIH1cbiAgICAgICAgbGluZVZhbHVlICs9IHZhbGlkSW5kZXggPCBpbmRleCA/IG9mZnNldCA6IC1vZmZzZXQ7XG4gICAgICAgIGlmIChsaW5lVmFsdWUgPCBzdGFydCAtIGVwc2lsb24gfHwgbGluZVZhbHVlID4gZW5kICsgZXBzaWxvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaW5lVmFsdWU7XG59XG4gZnVuY3Rpb24gZ2FyYmFnZUNvbGxlY3QoY2FjaGVzLCBsZW5ndGgpIHtcbiAgICBlYWNoKGNhY2hlcywgKGNhY2hlKT0+e1xuICAgICAgICBjb25zdCBnYyA9IGNhY2hlLmdjO1xuICAgICAgICBjb25zdCBnY0xlbiA9IGdjLmxlbmd0aCAvIDI7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBpZiAoZ2NMZW4gPiBsZW5ndGgpIHtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGdjTGVuOyArK2kpe1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjYWNoZS5kYXRhW2djW2ldXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdjLnNwbGljZSgwLCBnY0xlbik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiBmdW5jdGlvbiBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuZHJhd1RpY2tzID8gb3B0aW9ucy50aWNrTGVuZ3RoIDogMDtcbn1cbiBmdW5jdGlvbiBnZXRUaXRsZUhlaWdodChvcHRpb25zLCBmYWxsYmFjaykge1xuICAgIGlmICghb3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCBmb250ID0gdG9Gb250KG9wdGlvbnMuZm9udCwgZmFsbGJhY2spO1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICBjb25zdCBsaW5lcyA9IGlzQXJyYXkob3B0aW9ucy50ZXh0KSA/IG9wdGlvbnMudGV4dC5sZW5ndGggOiAxO1xuICAgIHJldHVybiBsaW5lcyAqIGZvbnQubGluZUhlaWdodCArIHBhZGRpbmcuaGVpZ2h0O1xufVxuZnVuY3Rpb24gY3JlYXRlU2NhbGVDb250ZXh0KHBhcmVudCwgc2NhbGUpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgc2NhbGUsXG4gICAgICAgIHR5cGU6ICdzY2FsZSdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRpY2tDb250ZXh0KHBhcmVudCwgaW5kZXgsIHRpY2spIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgdGljayxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIHR5cGU6ICd0aWNrJ1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdGl0bGVBbGlnbihhbGlnbiwgcG9zaXRpb24sIHJldmVyc2UpIHtcbiAgICAgbGV0IHJldCA9IF90b0xlZnRSaWdodENlbnRlcihhbGlnbik7XG4gICAgaWYgKHJldmVyc2UgJiYgcG9zaXRpb24gIT09ICdyaWdodCcgfHwgIXJldmVyc2UgJiYgcG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgcmV0ID0gcmV2ZXJzZUFsaWduKHJldCk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiB0aXRsZUFyZ3Moc2NhbGUsIG9mZnNldCwgcG9zaXRpb24sIGFsaWduKSB7XG4gICAgY29uc3QgeyB0b3AgLCBsZWZ0ICwgYm90dG9tICwgcmlnaHQgLCBjaGFydCAgfSA9IHNjYWxlO1xuICAgIGNvbnN0IHsgY2hhcnRBcmVhICwgc2NhbGVzICB9ID0gY2hhcnQ7XG4gICAgbGV0IHJvdGF0aW9uID0gMDtcbiAgICBsZXQgbWF4V2lkdGgsIHRpdGxlWCwgdGl0bGVZO1xuICAgIGNvbnN0IGhlaWdodCA9IGJvdHRvbSAtIHRvcDtcbiAgICBjb25zdCB3aWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgICBpZiAoc2NhbGUuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgdGl0bGVYID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGxlZnQsIHJpZ2h0KTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgICAgIHRpdGxlWSA9IHNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkgKyBoZWlnaHQgLSBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICB0aXRsZVkgPSAoY2hhcnRBcmVhLmJvdHRvbSArIGNoYXJ0QXJlYS50b3ApIC8gMiArIGhlaWdodCAtIG9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpdGxlWSA9IG9mZnNldEZyb21FZGdlKHNjYWxlLCBwb3NpdGlvbiwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBtYXhXaWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgdGl0bGVYID0gc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSAtIHdpZHRoICsgb2Zmc2V0O1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgdGl0bGVYID0gKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDIgLSB3aWR0aCArIG9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpdGxlWCA9IG9mZnNldEZyb21FZGdlKHNjYWxlLCBwb3NpdGlvbiwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICB0aXRsZVkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgYm90dG9tLCB0b3ApO1xuICAgICAgICByb3RhdGlvbiA9IHBvc2l0aW9uID09PSAnbGVmdCcgPyAtSEFMRl9QSSA6IEhBTEZfUEk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHRpdGxlWCxcbiAgICAgICAgdGl0bGVZLFxuICAgICAgICBtYXhXaWR0aCxcbiAgICAgICAgcm90YXRpb25cbiAgICB9O1xufVxuY2xhc3MgU2NhbGUgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihjZmcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAgdGhpcy5pZCA9IGNmZy5pZDtcbiAgICAgICAgIHRoaXMudHlwZSA9IGNmZy50eXBlO1xuICAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5jdHggPSBjZmcuY3R4O1xuICAgICAgICAgdGhpcy5jaGFydCA9IGNmZy5jaGFydDtcbiAgICAgICAgIHRoaXMudG9wID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmxlZnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLnJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9tYXJnaW5zID0ge1xuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgIH07XG4gICAgICAgICB0aGlzLm1heFdpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5tYXhIZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLnBhZGRpbmdUb3AgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLnBhZGRpbmdMZWZ0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5wYWRkaW5nUmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmF4aXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmxhYmVsUm90YXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWluID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1heCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcmFuZ2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLnRpY2tzID0gW107XG4gICAgICAgICB0aGlzLl9ncmlkTGluZUl0ZW1zID0gbnVsbDtcbiAgICAgICAgIHRoaXMuX2xhYmVsSXRlbXMgPSBudWxsO1xuICAgICAgICAgdGhpcy5fbGFiZWxTaXplcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX21heExlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX2xvbmdlc3RUZXh0Q2FjaGUgPSB7fTtcbiAgICAgICAgIHRoaXMuX3N0YXJ0UGl4ZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9lbmRQaXhlbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZVBpeGVscyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl91c2VyTWF4ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl91c2VyTWluID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zdWdnZXN0ZWRNYXggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3N1Z2dlc3RlZE1pbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdGlja3NMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9ib3JkZXJWYWx1ZSA9IDA7XG4gICAgICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgICAgIHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gaW5pdChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIHRoaXMuYXhpcyA9IG9wdGlvbnMuYXhpcztcbiAgICAgICAgdGhpcy5fdXNlck1pbiA9IHRoaXMucGFyc2Uob3B0aW9ucy5taW4pO1xuICAgICAgICB0aGlzLl91c2VyTWF4ID0gdGhpcy5wYXJzZShvcHRpb25zLm1heCk7XG4gICAgICAgIHRoaXMuX3N1Z2dlc3RlZE1pbiA9IHRoaXMucGFyc2Uob3B0aW9ucy5zdWdnZXN0ZWRNaW4pO1xuICAgICAgICB0aGlzLl9zdWdnZXN0ZWRNYXggPSB0aGlzLnBhcnNlKG9wdGlvbnMuc3VnZ2VzdGVkTWF4KTtcbiAgICB9XG4gcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gcmF3O1xuICAgIH1cbiBnZXRVc2VyQm91bmRzKCkge1xuICAgICAgICBsZXQgeyBfdXNlck1pbiAsIF91c2VyTWF4ICwgX3N1Z2dlc3RlZE1pbiAsIF9zdWdnZXN0ZWRNYXggIH0gPSB0aGlzO1xuICAgICAgICBfdXNlck1pbiA9IGZpbml0ZU9yRGVmYXVsdChfdXNlck1pbiwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICAgICAgX3VzZXJNYXggPSBmaW5pdGVPckRlZmF1bHQoX3VzZXJNYXgsIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7XG4gICAgICAgIF9zdWdnZXN0ZWRNaW4gPSBmaW5pdGVPckRlZmF1bHQoX3N1Z2dlc3RlZE1pbiwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICAgICAgX3N1Z2dlc3RlZE1heCA9IGZpbml0ZU9yRGVmYXVsdChfc3VnZ2VzdGVkTWF4LCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluOiBmaW5pdGVPckRlZmF1bHQoX3VzZXJNaW4sIF9zdWdnZXN0ZWRNaW4pLFxuICAgICAgICAgICAgbWF4OiBmaW5pdGVPckRlZmF1bHQoX3VzZXJNYXgsIF9zdWdnZXN0ZWRNYXgpLFxuICAgICAgICAgICAgbWluRGVmaW5lZDogaXNOdW1iZXJGaW5pdGUoX3VzZXJNaW4pLFxuICAgICAgICAgICAgbWF4RGVmaW5lZDogaXNOdW1iZXJGaW5pdGUoX3VzZXJNYXgpXG4gICAgICAgIH07XG4gICAgfVxuIGdldE1pbk1heChjYW5TdGFjaykge1xuICAgICAgICBsZXQgeyBtaW4gLCBtYXggLCBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgICAgICBsZXQgcmFuZ2U7XG4gICAgICAgIGlmIChtaW5EZWZpbmVkICYmIG1heERlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbWluLFxuICAgICAgICAgICAgICAgIG1heFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhcyA9IHRoaXMuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoKTtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IG1ldGFzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICByYW5nZSA9IG1ldGFzW2ldLmNvbnRyb2xsZXIuZ2V0TWluTWF4KHRoaXMsIGNhblN0YWNrKTtcbiAgICAgICAgICAgIGlmICghbWluRGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgcmFuZ2UubWluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgcmFuZ2UubWF4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtaW4gPSBtYXhEZWZpbmVkICYmIG1pbiA+IG1heCA/IG1heCA6IG1pbjtcbiAgICAgICAgbWF4ID0gbWluRGVmaW5lZCAmJiBtaW4gPiBtYXggPyBtaW4gOiBtYXg7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IGZpbml0ZU9yRGVmYXVsdChtaW4sIGZpbml0ZU9yRGVmYXVsdChtYXgsIG1pbikpLFxuICAgICAgICAgICAgbWF4OiBmaW5pdGVPckRlZmF1bHQobWF4LCBmaW5pdGVPckRlZmF1bHQobWluLCBtYXgpKVxuICAgICAgICB9O1xuICAgIH1cbiBnZXRQYWRkaW5nKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogdGhpcy5wYWRkaW5nTGVmdCB8fCAwLFxuICAgICAgICAgICAgdG9wOiB0aGlzLnBhZGRpbmdUb3AgfHwgMCxcbiAgICAgICAgICAgIHJpZ2h0OiB0aGlzLnBhZGRpbmdSaWdodCB8fCAwLFxuICAgICAgICAgICAgYm90dG9tOiB0aGlzLnBhZGRpbmdCb3R0b20gfHwgMFxuICAgICAgICB9O1xuICAgIH1cbiBnZXRUaWNrcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlja3M7XG4gICAgfVxuIGdldExhYmVscygpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuY2hhcnQuZGF0YTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5sYWJlbHMgfHwgKHRoaXMuaXNIb3Jpem9udGFsKCkgPyBkYXRhLnhMYWJlbHMgOiBkYXRhLnlMYWJlbHMpIHx8IGRhdGEubGFiZWxzIHx8IFtdO1xuICAgIH1cbiBnZXRMYWJlbEl0ZW1zKGNoYXJ0QXJlYSA9IHRoaXMuY2hhcnQuY2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5fbGFiZWxJdGVtcyB8fCAodGhpcy5fbGFiZWxJdGVtcyA9IHRoaXMuX2NvbXB1dGVMYWJlbEl0ZW1zKGNoYXJ0QXJlYSkpO1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuICAgIGJlZm9yZUxheW91dCgpIHtcbiAgICAgICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBiZWZvcmVVcGRhdGUoKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVVcGRhdGUsIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuIHVwZGF0ZShtYXhXaWR0aCwgbWF4SGVpZ2h0LCBtYXJnaW5zKSB7XG4gICAgICAgIGNvbnN0IHsgYmVnaW5BdFplcm8gLCBncmFjZSAsIHRpY2tzOiB0aWNrT3B0cyAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2FtcGxlU2l6ZSA9IHRpY2tPcHRzLnNhbXBsZVNpemU7XG4gICAgICAgIHRoaXMuYmVmb3JlVXBkYXRlKCk7XG4gICAgICAgIHRoaXMubWF4V2lkdGggPSBtYXhXaWR0aDtcbiAgICAgICAgdGhpcy5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgICAgIHRoaXMuX21hcmdpbnMgPSBtYXJnaW5zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgfSwgbWFyZ2lucyk7XG4gICAgICAgIHRoaXMudGlja3MgPSBudWxsO1xuICAgICAgICB0aGlzLl9sYWJlbFNpemVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZ3JpZExpbmVJdGVtcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2xhYmVsSXRlbXMgPSBudWxsO1xuICAgICAgICB0aGlzLmJlZm9yZVNldERpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5zZXREaW1lbnNpb25zKCk7XG4gICAgICAgIHRoaXMuYWZ0ZXJTZXREaW1lbnNpb25zKCk7XG4gICAgICAgIHRoaXMuX21heExlbmd0aCA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyB0aGlzLndpZHRoICsgbWFyZ2lucy5sZWZ0ICsgbWFyZ2lucy5yaWdodCA6IHRoaXMuaGVpZ2h0ICsgbWFyZ2lucy50b3AgKyBtYXJnaW5zLmJvdHRvbTtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhTGltaXRzQ2FjaGVkKSB7XG4gICAgICAgICAgICB0aGlzLmJlZm9yZURhdGFMaW1pdHMoKTtcbiAgICAgICAgICAgIHRoaXMuZGV0ZXJtaW5lRGF0YUxpbWl0cygpO1xuICAgICAgICAgICAgdGhpcy5hZnRlckRhdGFMaW1pdHMoKTtcbiAgICAgICAgICAgIHRoaXMuX3JhbmdlID0gX2FkZEdyYWNlKHRoaXMsIGdyYWNlLCBiZWdpbkF0WmVybyk7XG4gICAgICAgICAgICB0aGlzLl9kYXRhTGltaXRzQ2FjaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJlZm9yZUJ1aWxkVGlja3MoKTtcbiAgICAgICAgdGhpcy50aWNrcyA9IHRoaXMuYnVpbGRUaWNrcygpIHx8IFtdO1xuICAgICAgICB0aGlzLmFmdGVyQnVpbGRUaWNrcygpO1xuICAgICAgICBjb25zdCBzYW1wbGluZ0VuYWJsZWQgPSBzYW1wbGVTaXplIDwgdGhpcy50aWNrcy5sZW5ndGg7XG4gICAgICAgIHRoaXMuX2NvbnZlcnRUaWNrc1RvTGFiZWxzKHNhbXBsaW5nRW5hYmxlZCA/IHNhbXBsZSh0aGlzLnRpY2tzLCBzYW1wbGVTaXplKSA6IHRoaXMudGlja3MpO1xuICAgICAgICB0aGlzLmNvbmZpZ3VyZSgpO1xuICAgICAgICB0aGlzLmJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCk7XG4gICAgICAgIHRoaXMuYWZ0ZXJDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCk7XG4gICAgICAgIGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmICh0aWNrT3B0cy5hdXRvU2tpcCB8fCB0aWNrT3B0cy5zb3VyY2UgPT09ICdhdXRvJykpIHtcbiAgICAgICAgICAgIHRoaXMudGlja3MgPSBhdXRvU2tpcCh0aGlzLCB0aGlzLnRpY2tzKTtcbiAgICAgICAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5hZnRlckF1dG9Ta2lwKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNhbXBsaW5nRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5fY29udmVydFRpY2tzVG9MYWJlbHModGhpcy50aWNrcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iZWZvcmVGaXQoKTtcbiAgICAgICAgdGhpcy5maXQoKTtcbiAgICAgICAgdGhpcy5hZnRlckZpdCgpO1xuICAgICAgICB0aGlzLmFmdGVyVXBkYXRlKCk7XG4gICAgfVxuIGNvbmZpZ3VyZSgpIHtcbiAgICAgICAgbGV0IHJldmVyc2VQaXhlbHMgPSB0aGlzLm9wdGlvbnMucmV2ZXJzZTtcbiAgICAgICAgbGV0IHN0YXJ0UGl4ZWwsIGVuZFBpeGVsO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgc3RhcnRQaXhlbCA9IHRoaXMubGVmdDtcbiAgICAgICAgICAgIGVuZFBpeGVsID0gdGhpcy5yaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0UGl4ZWwgPSB0aGlzLnRvcDtcbiAgICAgICAgICAgIGVuZFBpeGVsID0gdGhpcy5ib3R0b207XG4gICAgICAgICAgICByZXZlcnNlUGl4ZWxzID0gIXJldmVyc2VQaXhlbHM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhcnRQaXhlbCA9IHN0YXJ0UGl4ZWw7XG4gICAgICAgIHRoaXMuX2VuZFBpeGVsID0gZW5kUGl4ZWw7XG4gICAgICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSByZXZlcnNlUGl4ZWxzO1xuICAgICAgICB0aGlzLl9sZW5ndGggPSBlbmRQaXhlbCAtIHN0YXJ0UGl4ZWw7XG4gICAgICAgIHRoaXMuX2FsaWduVG9QaXhlbHMgPSB0aGlzLm9wdGlvbnMuYWxpZ25Ub1BpeGVscztcbiAgICB9XG4gICAgYWZ0ZXJVcGRhdGUoKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclVwZGF0ZSwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgYmVmb3JlU2V0RGltZW5zaW9ucygpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVNldERpbWVuc2lvbnMsIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIHNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgICAgICAgIHRoaXMubGVmdCA9IDA7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0ID0gdGhpcy53aWR0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLnRvcCA9IDA7XG4gICAgICAgICAgICB0aGlzLmJvdHRvbSA9IHRoaXMuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFkZGluZ0xlZnQgPSAwO1xuICAgICAgICB0aGlzLnBhZGRpbmdUb3AgPSAwO1xuICAgICAgICB0aGlzLnBhZGRpbmdSaWdodCA9IDA7XG4gICAgICAgIHRoaXMucGFkZGluZ0JvdHRvbSA9IDA7XG4gICAgfVxuICAgIGFmdGVyU2V0RGltZW5zaW9ucygpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyU2V0RGltZW5zaW9ucywgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgX2NhbGxIb29rcyhuYW1lKSB7XG4gICAgICAgIHRoaXMuY2hhcnQubm90aWZ5UGx1Z2lucyhuYW1lLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9uc1tuYW1lXSwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgYmVmb3JlRGF0YUxpbWl0cygpIHtcbiAgICAgICAgdGhpcy5fY2FsbEhvb2tzKCdiZWZvcmVEYXRhTGltaXRzJyk7XG4gICAgfVxuICAgIGRldGVybWluZURhdGFMaW1pdHMoKSB7fVxuICAgIGFmdGVyRGF0YUxpbWl0cygpIHtcbiAgICAgICAgdGhpcy5fY2FsbEhvb2tzKCdhZnRlckRhdGFMaW1pdHMnKTtcbiAgICB9XG4gICAgYmVmb3JlQnVpbGRUaWNrcygpIHtcbiAgICAgICAgdGhpcy5fY2FsbEhvb2tzKCdiZWZvcmVCdWlsZFRpY2tzJyk7XG4gICAgfVxuIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgYWZ0ZXJCdWlsZFRpY2tzKCkge1xuICAgICAgICB0aGlzLl9jYWxsSG9va3MoJ2FmdGVyQnVpbGRUaWNrcycpO1xuICAgIH1cbiAgICBiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24oKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24sIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuIGdlbmVyYXRlVGlja0xhYmVscyh0aWNrcykge1xuICAgICAgICBjb25zdCB0aWNrT3B0cyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICAgICAgbGV0IGksIGlsZW4sIHRpY2s7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgICAgICB0aWNrID0gdGlja3NbaV07XG4gICAgICAgICAgICB0aWNrLmxhYmVsID0gY2FsbGJhY2sodGlja09wdHMuY2FsbGJhY2ssIFtcbiAgICAgICAgICAgICAgICB0aWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgdGlja3NcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24sIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG4gICAgICAgIGNvbnN0IG51bVRpY2tzID0gZ2V0VGlja3NMaW1pdCh0aGlzLnRpY2tzLmxlbmd0aCwgb3B0aW9ucy50aWNrcy5tYXhUaWNrc0xpbWl0KTtcbiAgICAgICAgY29uc3QgbWluUm90YXRpb24gPSB0aWNrT3B0cy5taW5Sb3RhdGlvbiB8fCAwO1xuICAgICAgICBjb25zdCBtYXhSb3RhdGlvbiA9IHRpY2tPcHRzLm1heFJvdGF0aW9uO1xuICAgICAgICBsZXQgbGFiZWxSb3RhdGlvbiA9IG1pblJvdGF0aW9uO1xuICAgICAgICBsZXQgdGlja1dpZHRoLCBtYXhIZWlnaHQsIG1heExhYmVsRGlhZ29uYWw7XG4gICAgICAgIGlmICghdGhpcy5faXNWaXNpYmxlKCkgfHwgIXRpY2tPcHRzLmRpc3BsYXkgfHwgbWluUm90YXRpb24gPj0gbWF4Um90YXRpb24gfHwgbnVtVGlja3MgPD0gMSB8fCAhdGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgdGhpcy5sYWJlbFJvdGF0aW9uID0gbWluUm90YXRpb247XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICAgICAgY29uc3QgbWF4TGFiZWxXaWR0aCA9IGxhYmVsU2l6ZXMud2lkZXN0LndpZHRoO1xuICAgICAgICBjb25zdCBtYXhMYWJlbEhlaWdodCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IG1heFdpZHRoID0gX2xpbWl0VmFsdWUodGhpcy5jaGFydC53aWR0aCAtIG1heExhYmVsV2lkdGgsIDAsIHRoaXMubWF4V2lkdGgpO1xuICAgICAgICB0aWNrV2lkdGggPSBvcHRpb25zLm9mZnNldCA/IHRoaXMubWF4V2lkdGggLyBudW1UaWNrcyA6IG1heFdpZHRoIC8gKG51bVRpY2tzIC0gMSk7XG4gICAgICAgIGlmIChtYXhMYWJlbFdpZHRoICsgNiA+IHRpY2tXaWR0aCkge1xuICAgICAgICAgICAgdGlja1dpZHRoID0gbWF4V2lkdGggLyAobnVtVGlja3MgLSAob3B0aW9ucy5vZmZzZXQgPyAwLjUgOiAxKSk7XG4gICAgICAgICAgICBtYXhIZWlnaHQgPSB0aGlzLm1heEhlaWdodCAtIGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMuZ3JpZCkgLSB0aWNrT3B0cy5wYWRkaW5nIC0gZ2V0VGl0bGVIZWlnaHQob3B0aW9ucy50aXRsZSwgdGhpcy5jaGFydC5vcHRpb25zLmZvbnQpO1xuICAgICAgICAgICAgbWF4TGFiZWxEaWFnb25hbCA9IE1hdGguc3FydChtYXhMYWJlbFdpZHRoICogbWF4TGFiZWxXaWR0aCArIG1heExhYmVsSGVpZ2h0ICogbWF4TGFiZWxIZWlnaHQpO1xuICAgICAgICAgICAgbGFiZWxSb3RhdGlvbiA9IHRvRGVncmVlcyhNYXRoLm1pbihNYXRoLmFzaW4oX2xpbWl0VmFsdWUoKGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyA2KSAvIHRpY2tXaWR0aCwgLTEsIDEpKSwgTWF0aC5hc2luKF9saW1pdFZhbHVlKG1heEhlaWdodCAvIG1heExhYmVsRGlhZ29uYWwsIC0xLCAxKSkgLSBNYXRoLmFzaW4oX2xpbWl0VmFsdWUobWF4TGFiZWxIZWlnaHQgLyBtYXhMYWJlbERpYWdvbmFsLCAtMSwgMSkpKSk7XG4gICAgICAgICAgICBsYWJlbFJvdGF0aW9uID0gTWF0aC5tYXgobWluUm90YXRpb24sIE1hdGgubWluKG1heFJvdGF0aW9uLCBsYWJlbFJvdGF0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYWJlbFJvdGF0aW9uID0gbGFiZWxSb3RhdGlvbjtcbiAgICB9XG4gICAgYWZ0ZXJDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJDYWxjdWxhdGVMYWJlbFJvdGF0aW9uLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBhZnRlckF1dG9Ta2lwKCkge31cbiAgICBiZWZvcmVGaXQoKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVGaXQsIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGZpdCgpIHtcbiAgICAgICAgY29uc3QgbWluU2l6ZSA9IHtcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAwXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHsgY2hhcnQgLCBvcHRpb25zOiB7IHRpY2tzOiB0aWNrT3B0cyAsIHRpdGxlOiB0aXRsZU9wdHMgLCBncmlkOiBncmlkT3B0cyAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGRpc3BsYXkgPSB0aGlzLl9pc1Zpc2libGUoKTtcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICAgICAgaWYgKGRpc3BsYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gZ2V0VGl0bGVIZWlnaHQodGl0bGVPcHRzLCBjaGFydC5vcHRpb25zLmZvbnQpO1xuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIG1pblNpemUud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICAgICAgICAgIG1pblNpemUuaGVpZ2h0ID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZE9wdHMpICsgdGl0bGVIZWlnaHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1pblNpemUuaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQ7XG4gICAgICAgICAgICAgICAgbWluU2l6ZS53aWR0aCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWRPcHRzKSArIHRpdGxlSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgdGhpcy50aWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGZpcnN0ICwgbGFzdCAsIHdpZGVzdCAsIGhpZ2hlc3QgIH0gPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlja1BhZGRpbmcgPSB0aWNrT3B0cy5wYWRkaW5nICogMjtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmdsZVJhZGlhbnMgPSB0b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb3MgPSBNYXRoLmNvcyhhbmdsZVJhZGlhbnMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpbiA9IE1hdGguc2luKGFuZ2xlUmFkaWFucyk7XG4gICAgICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYWJlbEhlaWdodCA9IHRpY2tPcHRzLm1pcnJvciA/IDAgOiBzaW4gKiB3aWRlc3Qud2lkdGggKyBjb3MgKiBoaWdoZXN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgbWluU2l6ZS5oZWlnaHQgPSBNYXRoLm1pbih0aGlzLm1heEhlaWdodCwgbWluU2l6ZS5oZWlnaHQgKyBsYWJlbEhlaWdodCArIHRpY2tQYWRkaW5nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYWJlbFdpZHRoID0gdGlja09wdHMubWlycm9yID8gMCA6IGNvcyAqIHdpZGVzdC53aWR0aCArIHNpbiAqIGhpZ2hlc3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBtaW5TaXplLndpZHRoID0gTWF0aC5taW4odGhpcy5tYXhXaWR0aCwgbWluU2l6ZS53aWR0aCArIGxhYmVsV2lkdGggKyB0aWNrUGFkZGluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGN1bGF0ZVBhZGRpbmcoZmlyc3QsIGxhc3QsIHNpbiwgY29zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oYW5kbGVNYXJnaW5zKCk7XG4gICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLl9sZW5ndGggPSBjaGFydC53aWR0aCAtIHRoaXMuX21hcmdpbnMubGVmdCAtIHRoaXMuX21hcmdpbnMucmlnaHQ7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IG1pblNpemUuaGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IG1pblNpemUud2lkdGg7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuX2xlbmd0aCA9IGNoYXJ0LmhlaWdodCAtIHRoaXMuX21hcmdpbnMudG9wIC0gdGhpcy5fbWFyZ2lucy5ib3R0b207XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2NhbGN1bGF0ZVBhZGRpbmcoZmlyc3QsIGxhc3QsIHNpbiwgY29zKSB7XG4gICAgICAgIGNvbnN0IHsgdGlja3M6IHsgYWxpZ24gLCBwYWRkaW5nICB9ICwgcG9zaXRpb24gIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGlzUm90YXRlZCA9IHRoaXMubGFiZWxSb3RhdGlvbiAhPT0gMDtcbiAgICAgICAgY29uc3QgbGFiZWxzQmVsb3dUaWNrcyA9IHBvc2l0aW9uICE9PSAndG9wJyAmJiB0aGlzLmF4aXMgPT09ICd4JztcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldExlZnQgPSB0aGlzLmdldFBpeGVsRm9yVGljaygwKSAtIHRoaXMubGVmdDtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldFJpZ2h0ID0gdGhpcy5yaWdodCAtIHRoaXMuZ2V0UGl4ZWxGb3JUaWNrKHRoaXMudGlja3MubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBsZXQgcGFkZGluZ0xlZnQgPSAwO1xuICAgICAgICAgICAgbGV0IHBhZGRpbmdSaWdodCA9IDA7XG4gICAgICAgICAgICBpZiAoaXNSb3RhdGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxhYmVsc0JlbG93VGlja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQgPSBjb3MgKiBmaXJzdC53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0ID0gc2luICogbGFzdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQgPSBzaW4gKiBmaXJzdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodCA9IGNvcyAqIGxhc3Qud2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodCA9IGxhc3Qud2lkdGg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnZW5kJykge1xuICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gZmlyc3Qud2lkdGg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFsaWduICE9PSAnaW5uZXInKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQgPSBmaXJzdC53aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0ID0gbGFzdC53aWR0aCAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBhZGRpbmdMZWZ0ID0gTWF0aC5tYXgoKHBhZGRpbmdMZWZ0IC0gb2Zmc2V0TGVmdCArIHBhZGRpbmcpICogdGhpcy53aWR0aCAvICh0aGlzLndpZHRoIC0gb2Zmc2V0TGVmdCksIDApO1xuICAgICAgICAgICAgdGhpcy5wYWRkaW5nUmlnaHQgPSBNYXRoLm1heCgocGFkZGluZ1JpZ2h0IC0gb2Zmc2V0UmlnaHQgKyBwYWRkaW5nKSAqIHRoaXMud2lkdGggLyAodGhpcy53aWR0aCAtIG9mZnNldFJpZ2h0KSwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGFkZGluZ1RvcCA9IGxhc3QuaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGxldCBwYWRkaW5nQm90dG9tID0gZmlyc3QuaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGlmIChhbGlnbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICAgICAgICAgIHBhZGRpbmdUb3AgPSAwO1xuICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b20gPSBmaXJzdC5oZWlnaHQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnZW5kJykge1xuICAgICAgICAgICAgICAgIHBhZGRpbmdUb3AgPSBsYXN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nQm90dG9tID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGFkZGluZ1RvcCA9IHBhZGRpbmdUb3AgKyBwYWRkaW5nO1xuICAgICAgICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gcGFkZGluZ0JvdHRvbSArIHBhZGRpbmc7XG4gICAgICAgIH1cbiAgICB9XG4gX2hhbmRsZU1hcmdpbnMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9tYXJnaW5zKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXJnaW5zLmxlZnQgPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdMZWZ0LCB0aGlzLl9tYXJnaW5zLmxlZnQpO1xuICAgICAgICAgICAgdGhpcy5fbWFyZ2lucy50b3AgPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdUb3AsIHRoaXMuX21hcmdpbnMudG9wKTtcbiAgICAgICAgICAgIHRoaXMuX21hcmdpbnMucmlnaHQgPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdSaWdodCwgdGhpcy5fbWFyZ2lucy5yaWdodCk7XG4gICAgICAgICAgICB0aGlzLl9tYXJnaW5zLmJvdHRvbSA9IE1hdGgubWF4KHRoaXMucGFkZGluZ0JvdHRvbSwgdGhpcy5fbWFyZ2lucy5ib3R0b20pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFmdGVyRml0KCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJGaXQsIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgY29uc3QgeyBheGlzICwgcG9zaXRpb24gIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nIHx8IGF4aXMgPT09ICd4JztcbiAgICB9XG4gaXNGdWxsU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5mdWxsU2l6ZTtcbiAgICB9XG4gX2NvbnZlcnRUaWNrc1RvTGFiZWxzKHRpY2tzKSB7XG4gICAgICAgIHRoaXMuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uKCk7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKTtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZih0aWNrc1tpXS5sYWJlbCkpIHtcbiAgICAgICAgICAgICAgICB0aWNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgaWxlbi0tO1xuICAgICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uKCk7XG4gICAgfVxuIF9nZXRMYWJlbFNpemVzKCkge1xuICAgICAgICBsZXQgbGFiZWxTaXplcyA9IHRoaXMuX2xhYmVsU2l6ZXM7XG4gICAgICAgIGlmICghbGFiZWxTaXplcykge1xuICAgICAgICAgICAgY29uc3Qgc2FtcGxlU2l6ZSA9IHRoaXMub3B0aW9ucy50aWNrcy5zYW1wbGVTaXplO1xuICAgICAgICAgICAgbGV0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgICAgIGlmIChzYW1wbGVTaXplIDwgdGlja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGlja3MgPSBzYW1wbGUodGlja3MsIHNhbXBsZVNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbGFiZWxTaXplcyA9IGxhYmVsU2l6ZXMgPSB0aGlzLl9jb21wdXRlTGFiZWxTaXplcyh0aWNrcywgdGlja3MubGVuZ3RoLCB0aGlzLm9wdGlvbnMudGlja3MubWF4VGlja3NMaW1pdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxhYmVsU2l6ZXM7XG4gICAgfVxuIF9jb21wdXRlTGFiZWxTaXplcyh0aWNrcywgbGVuZ3RoLCBtYXhUaWNrc0xpbWl0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4ICwgX2xvbmdlc3RUZXh0Q2FjaGU6IGNhY2hlcyAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHdpZHRocyA9IFtdO1xuICAgICAgICBjb25zdCBoZWlnaHRzID0gW107XG4gICAgICAgIGNvbnN0IGluY3JlbWVudCA9IE1hdGguZmxvb3IobGVuZ3RoIC8gZ2V0VGlja3NMaW1pdChsZW5ndGgsIG1heFRpY2tzTGltaXQpKTtcbiAgICAgICAgbGV0IHdpZGVzdExhYmVsU2l6ZSA9IDA7XG4gICAgICAgIGxldCBoaWdoZXN0TGFiZWxTaXplID0gMDtcbiAgICAgICAgbGV0IGksIGosIGpsZW4sIGxhYmVsLCB0aWNrRm9udCwgZm9udFN0cmluZywgY2FjaGUsIGxpbmVIZWlnaHQsIHdpZHRoLCBoZWlnaHQsIG5lc3RlZExhYmVsO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gaW5jcmVtZW50KXtcbiAgICAgICAgICAgIGxhYmVsID0gdGlja3NbaV0ubGFiZWw7XG4gICAgICAgICAgICB0aWNrRm9udCA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaSk7XG4gICAgICAgICAgICBjdHguZm9udCA9IGZvbnRTdHJpbmcgPSB0aWNrRm9udC5zdHJpbmc7XG4gICAgICAgICAgICBjYWNoZSA9IGNhY2hlc1tmb250U3RyaW5nXSA9IGNhY2hlc1tmb250U3RyaW5nXSB8fCB7XG4gICAgICAgICAgICAgICAgZGF0YToge30sXG4gICAgICAgICAgICAgICAgZ2M6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGluZUhlaWdodCA9IHRpY2tGb250LmxpbmVIZWlnaHQ7XG4gICAgICAgICAgICB3aWR0aCA9IGhlaWdodCA9IDA7XG4gICAgICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYobGFiZWwpICYmICFpc0FycmF5KGxhYmVsKSkge1xuICAgICAgICAgICAgICAgIHdpZHRoID0gX21lYXN1cmVUZXh0KGN0eCwgY2FjaGUuZGF0YSwgY2FjaGUuZ2MsIHdpZHRoLCBsYWJlbCk7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gbGluZUhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShsYWJlbCkpIHtcbiAgICAgICAgICAgICAgICBmb3IoaiA9IDAsIGpsZW4gPSBsYWJlbC5sZW5ndGg7IGogPCBqbGVuOyArK2ope1xuICAgICAgICAgICAgICAgICAgICBuZXN0ZWRMYWJlbCA9ICBsYWJlbFtqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKG5lc3RlZExhYmVsKSAmJiAhaXNBcnJheShuZXN0ZWRMYWJlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gX21lYXN1cmVUZXh0KGN0eCwgY2FjaGUuZGF0YSwgY2FjaGUuZ2MsIHdpZHRoLCBuZXN0ZWRMYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpZHRocy5wdXNoKHdpZHRoKTtcbiAgICAgICAgICAgIGhlaWdodHMucHVzaChoZWlnaHQpO1xuICAgICAgICAgICAgd2lkZXN0TGFiZWxTaXplID0gTWF0aC5tYXgod2lkdGgsIHdpZGVzdExhYmVsU2l6ZSk7XG4gICAgICAgICAgICBoaWdoZXN0TGFiZWxTaXplID0gTWF0aC5tYXgoaGVpZ2h0LCBoaWdoZXN0TGFiZWxTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBnYXJiYWdlQ29sbGVjdChjYWNoZXMsIGxlbmd0aCk7XG4gICAgICAgIGNvbnN0IHdpZGVzdCA9IHdpZHRocy5pbmRleE9mKHdpZGVzdExhYmVsU2l6ZSk7XG4gICAgICAgIGNvbnN0IGhpZ2hlc3QgPSBoZWlnaHRzLmluZGV4T2YoaGlnaGVzdExhYmVsU2l6ZSk7XG4gICAgICAgIGNvbnN0IHZhbHVlQXQgPSAoaWR4KT0+KHtcbiAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGhzW2lkeF0gfHwgMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodHNbaWR4XSB8fCAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpcnN0OiB2YWx1ZUF0KDApLFxuICAgICAgICAgICAgbGFzdDogdmFsdWVBdChsZW5ndGggLSAxKSxcbiAgICAgICAgICAgIHdpZGVzdDogdmFsdWVBdCh3aWRlc3QpLFxuICAgICAgICAgICAgaGlnaGVzdDogdmFsdWVBdChoaWdoZXN0KSxcbiAgICAgICAgICAgIHdpZHRocyxcbiAgICAgICAgICAgIGhlaWdodHNcbiAgICAgICAgfTtcbiAgICB9XG4gZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuIGdldFBpeGVsRm9yVmFsdWUodmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHt9XG4gZ2V0UGl4ZWxGb3JUaWNrKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRpY2tzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgICB9XG4gZ2V0UGl4ZWxGb3JEZWNpbWFsKGRlY2ltYWwpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JldmVyc2VQaXhlbHMpIHtcbiAgICAgICAgICAgIGRlY2ltYWwgPSAxIC0gZGVjaW1hbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwaXhlbCA9IHRoaXMuX3N0YXJ0UGl4ZWwgKyBkZWNpbWFsICogdGhpcy5fbGVuZ3RoO1xuICAgICAgICByZXR1cm4gX2ludDE2UmFuZ2UodGhpcy5fYWxpZ25Ub1BpeGVscyA/IF9hbGlnblBpeGVsKHRoaXMuY2hhcnQsIHBpeGVsLCAwKSA6IHBpeGVsKTtcbiAgICB9XG4gZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIGNvbnN0IGRlY2ltYWwgPSAocGl4ZWwgLSB0aGlzLl9zdGFydFBpeGVsKSAvIHRoaXMuX2xlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JldmVyc2VQaXhlbHMgPyAxIC0gZGVjaW1hbCA6IGRlY2ltYWw7XG4gICAgfVxuIGdldEJhc2VQaXhlbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldEJhc2VWYWx1ZSgpKTtcbiAgICB9XG4gZ2V0QmFzZVZhbHVlKCkge1xuICAgICAgICBjb25zdCB7IG1pbiAsIG1heCAgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBtaW4gPCAwICYmIG1heCA8IDAgPyBtYXggOiBtaW4gPiAwICYmIG1heCA+IDAgPyBtaW4gOiAwO1xuICAgIH1cbiBnZXRDb250ZXh0KGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcyB8fCBbXTtcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpY2sgPSB0aWNrc1tpbmRleF07XG4gICAgICAgICAgICByZXR1cm4gdGljay4kY29udGV4dCB8fCAodGljay4kY29udGV4dCA9IGNyZWF0ZVRpY2tDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgdGljaykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLiRjb250ZXh0IHx8ICh0aGlzLiRjb250ZXh0ID0gY3JlYXRlU2NhbGVDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzKSk7XG4gICAgfVxuIF90aWNrU2l6ZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uVGlja3MgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGNvbnN0IHJvdCA9IHRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICBjb25zdCBjb3MgPSBNYXRoLmFicyhNYXRoLmNvcyhyb3QpKTtcbiAgICAgICAgY29uc3Qgc2luID0gTWF0aC5hYnMoTWF0aC5zaW4ocm90KSk7XG4gICAgICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSBvcHRpb25UaWNrcy5hdXRvU2tpcFBhZGRpbmcgfHwgMDtcbiAgICAgICAgY29uc3QgdyA9IGxhYmVsU2l6ZXMgPyBsYWJlbFNpemVzLndpZGVzdC53aWR0aCArIHBhZGRpbmcgOiAwO1xuICAgICAgICBjb25zdCBoID0gbGFiZWxTaXplcyA/IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyBwYWRkaW5nIDogMDtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNIb3Jpem9udGFsKCkgPyBoICogY29zID4gdyAqIHNpbiA/IHcgLyBjb3MgOiBoIC8gc2luIDogaCAqIHNpbiA8IHcgKiBjb3MgPyBoIC8gY29zIDogdyAvIHNpbjtcbiAgICB9XG4gX2lzVmlzaWJsZSgpIHtcbiAgICAgICAgY29uc3QgZGlzcGxheSA9IHRoaXMub3B0aW9ucy5kaXNwbGF5O1xuICAgICAgICBpZiAoZGlzcGxheSAhPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICByZXR1cm4gISFkaXNwbGF5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCkubGVuZ3RoID4gMDtcbiAgICB9XG4gX2NvbXB1dGVHcmlkTGluZUl0ZW1zKGNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCBheGlzID0gdGhpcy5heGlzO1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgZ3JpZCAsIHBvc2l0aW9uICwgYm9yZGVyICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gZ3JpZC5vZmZzZXQ7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgY29uc3QgdGlja3NMZW5ndGggPSB0aWNrcy5sZW5ndGggKyAob2Zmc2V0ID8gMSA6IDApO1xuICAgICAgICBjb25zdCB0bCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWQpO1xuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgICAgICBjb25zdCBib3JkZXJPcHRzID0gYm9yZGVyLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBjb25zdCBheGlzV2lkdGggPSBib3JkZXJPcHRzLmRpc3BsYXkgPyBib3JkZXJPcHRzLndpZHRoIDogMDtcbiAgICAgICAgY29uc3QgYXhpc0hhbGZXaWR0aCA9IGF4aXNXaWR0aCAvIDI7XG4gICAgICAgIGNvbnN0IGFsaWduQm9yZGVyVmFsdWUgPSBmdW5jdGlvbihwaXhlbCkge1xuICAgICAgICAgICAgcmV0dXJuIF9hbGlnblBpeGVsKGNoYXJ0LCBwaXhlbCwgYXhpc1dpZHRoKTtcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGJvcmRlclZhbHVlLCBpLCBsaW5lVmFsdWUsIGFsaWduZWRMaW5lVmFsdWU7XG4gICAgICAgIGxldCB0eDEsIHR5MSwgdHgyLCB0eTIsIHgxLCB5MSwgeDIsIHkyO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5ib3R0b20pO1xuICAgICAgICAgICAgdHkxID0gdGhpcy5ib3R0b20gLSB0bDtcbiAgICAgICAgICAgIHR5MiA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHkxID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEudG9wKSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB5MiA9IGNoYXJ0QXJlYS5ib3R0b207XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy50b3ApO1xuICAgICAgICAgICAgeTEgPSBjaGFydEFyZWEudG9wO1xuICAgICAgICAgICAgeTIgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5ib3R0b20pIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHR5MSA9IGJvcmRlclZhbHVlICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHR5MiA9IHRoaXMudG9wICsgdGw7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMucmlnaHQpO1xuICAgICAgICAgICAgdHgxID0gdGhpcy5yaWdodCAtIHRsO1xuICAgICAgICAgICAgdHgyID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgeDEgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5sZWZ0KSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB4MiA9IGNoYXJ0QXJlYS5yaWdodDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMubGVmdCk7XG4gICAgICAgICAgICB4MSA9IGNoYXJ0QXJlYS5sZWZ0O1xuICAgICAgICAgICAgeDIgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5yaWdodCkgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHgxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHgyID0gdGhpcy5sZWZ0ICsgdGw7XG4gICAgICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyICsgMC41KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5MSA9IGNoYXJ0QXJlYS50b3A7XG4gICAgICAgICAgICB5MiA9IGNoYXJ0QXJlYS5ib3R0b207XG4gICAgICAgICAgICB0eTEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eTIgPSB0eTEgKyB0bDtcbiAgICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneScpIHtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUoKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHR4MSA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHR4MiA9IHR4MSAtIHRsO1xuICAgICAgICAgICAgeDEgPSBjaGFydEFyZWEubGVmdDtcbiAgICAgICAgICAgIHgyID0gY2hhcnRBcmVhLnJpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpbWl0ID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy50aWNrcy5tYXhUaWNrc0xpbWl0LCB0aWNrc0xlbmd0aCk7XG4gICAgICAgIGNvbnN0IHN0ZXAgPSBNYXRoLm1heCgxLCBNYXRoLmNlaWwodGlja3NMZW5ndGggLyBsaW1pdCkpO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCB0aWNrc0xlbmd0aDsgaSArPSBzdGVwKXtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmdldENvbnRleHQoaSk7XG4gICAgICAgICAgICBjb25zdCBvcHRzQXRJbmRleCA9IGdyaWQuc2V0Q29udGV4dChjb250ZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4Qm9yZGVyID0gYm9yZGVyLnNldENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICBjb25zdCBsaW5lV2lkdGggPSBvcHRzQXRJbmRleC5saW5lV2lkdGg7XG4gICAgICAgICAgICBjb25zdCBsaW5lQ29sb3IgPSBvcHRzQXRJbmRleC5jb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IGJvcmRlckRhc2ggPSBvcHRzQXRJbmRleEJvcmRlci5kYXNoIHx8IFtdO1xuICAgICAgICAgICAgY29uc3QgYm9yZGVyRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4Qm9yZGVyLmRhc2hPZmZzZXQ7XG4gICAgICAgICAgICBjb25zdCB0aWNrV2lkdGggPSBvcHRzQXRJbmRleC50aWNrV2lkdGg7XG4gICAgICAgICAgICBjb25zdCB0aWNrQ29sb3IgPSBvcHRzQXRJbmRleC50aWNrQ29sb3I7XG4gICAgICAgICAgICBjb25zdCB0aWNrQm9yZGVyRGFzaCA9IG9wdHNBdEluZGV4LnRpY2tCb3JkZXJEYXNoIHx8IFtdO1xuICAgICAgICAgICAgY29uc3QgdGlja0JvcmRlckRhc2hPZmZzZXQgPSBvcHRzQXRJbmRleC50aWNrQm9yZGVyRGFzaE9mZnNldDtcbiAgICAgICAgICAgIGxpbmVWYWx1ZSA9IGdldFBpeGVsRm9yR3JpZExpbmUodGhpcywgaSwgb2Zmc2V0KTtcbiAgICAgICAgICAgIGlmIChsaW5lVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWxpZ25lZExpbmVWYWx1ZSA9IF9hbGlnblBpeGVsKGNoYXJ0LCBsaW5lVmFsdWUsIGxpbmVXaWR0aCk7XG4gICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgdHgxID0gdHgyID0geDEgPSB4MiA9IGFsaWduZWRMaW5lVmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHR5MSA9IHR5MiA9IHkxID0geTIgPSBhbGlnbmVkTGluZVZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHgxLFxuICAgICAgICAgICAgICAgIHR5MSxcbiAgICAgICAgICAgICAgICB0eDIsXG4gICAgICAgICAgICAgICAgdHkyLFxuICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgIHkxLFxuICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgIHkyLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBsaW5lV2lkdGgsXG4gICAgICAgICAgICAgICAgY29sb3I6IGxpbmVDb2xvcixcbiAgICAgICAgICAgICAgICBib3JkZXJEYXNoLFxuICAgICAgICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgICAgICAgICAgdGlja1dpZHRoLFxuICAgICAgICAgICAgICAgIHRpY2tDb2xvcixcbiAgICAgICAgICAgICAgICB0aWNrQm9yZGVyRGFzaCxcbiAgICAgICAgICAgICAgICB0aWNrQm9yZGVyRGFzaE9mZnNldFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGlja3NMZW5ndGggPSB0aWNrc0xlbmd0aDtcbiAgICAgICAgdGhpcy5fYm9yZGVyVmFsdWUgPSBib3JkZXJWYWx1ZTtcbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cbiBfY29tcHV0ZUxhYmVsSXRlbXMoY2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IGF4aXMgPSB0aGlzLmF4aXM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgcG9zaXRpb24gLCB0aWNrczogb3B0aW9uVGlja3MgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgIGNvbnN0IHsgYWxpZ24gLCBjcm9zc0FsaWduICwgcGFkZGluZyAsIG1pcnJvciAgfSA9IG9wdGlvblRpY2tzO1xuICAgICAgICBjb25zdCB0bCA9IGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMuZ3JpZCk7XG4gICAgICAgIGNvbnN0IHRpY2tBbmRQYWRkaW5nID0gdGwgKyBwYWRkaW5nO1xuICAgICAgICBjb25zdCBoVGlja0FuZFBhZGRpbmcgPSBtaXJyb3IgPyAtcGFkZGluZyA6IHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICBjb25zdCByb3RhdGlvbiA9IC10b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIHRpY2ssIGxhYmVsLCB4LCB5LCB0ZXh0QWxpZ24sIHBpeGVsLCBmb250LCBsaW5lSGVpZ2h0LCBsaW5lQ291bnQsIHRleHRPZmZzZXQ7XG4gICAgICAgIGxldCB0ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgICAgICAgeSA9IHRoaXMuYm90dG9tIC0gaFRpY2tBbmRQYWRkaW5nO1xuICAgICAgICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgeSA9IHRoaXMudG9wICsgaFRpY2tBbmRQYWRkaW5nO1xuICAgICAgICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHJldCA9IHRoaXMuX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpO1xuICAgICAgICAgICAgdGV4dEFsaWduID0gcmV0LnRleHRBbGlnbjtcbiAgICAgICAgICAgIHggPSByZXQueDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgY29uc3QgcmV0ID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCk7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSByZXQudGV4dEFsaWduO1xuICAgICAgICAgICAgeCA9IHJldC54O1xuICAgICAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIHkgPSAoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMiArIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgICAgICAgICB5ID0gdGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpICsgdGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgeCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyIC0gdGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKS50ZXh0QWxpZ247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgICAgICAgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgICAgICAgICAgdGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnZW5kJykge1xuICAgICAgICAgICAgICAgIHRleHRCYXNlbGluZSA9ICdib3R0b20nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aWNrID0gdGlja3NbaV07XG4gICAgICAgICAgICBsYWJlbCA9IHRpY2subGFiZWw7XG4gICAgICAgICAgICBjb25zdCBvcHRzQXRJbmRleCA9IG9wdGlvblRpY2tzLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGkpKTtcbiAgICAgICAgICAgIHBpeGVsID0gdGhpcy5nZXRQaXhlbEZvclRpY2soaSkgKyBvcHRpb25UaWNrcy5sYWJlbE9mZnNldDtcbiAgICAgICAgICAgIGZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKGkpO1xuICAgICAgICAgICAgbGluZUhlaWdodCA9IGZvbnQubGluZUhlaWdodDtcbiAgICAgICAgICAgIGxpbmVDb3VudCA9IGlzQXJyYXkobGFiZWwpID8gbGFiZWwubGVuZ3RoIDogMTtcbiAgICAgICAgICAgIGNvbnN0IGhhbGZDb3VudCA9IGxpbmVDb3VudCAvIDI7XG4gICAgICAgICAgICBjb25zdCBjb2xvciA9IG9wdHNBdEluZGV4LmNvbG9yO1xuICAgICAgICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSBvcHRzQXRJbmRleC50ZXh0U3Ryb2tlQ29sb3I7XG4gICAgICAgICAgICBjb25zdCBzdHJva2VXaWR0aCA9IG9wdHNBdEluZGV4LnRleHRTdHJva2VXaWR0aDtcbiAgICAgICAgICAgIGxldCB0aWNrVGV4dEFsaWduID0gdGV4dEFsaWduO1xuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIHggPSBwaXhlbDtcbiAgICAgICAgICAgICAgICBpZiAodGV4dEFsaWduID09PSAnaW5uZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBpbGVuIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGlja1RleHRBbGlnbiA9ICF0aGlzLm9wdGlvbnMucmV2ZXJzZSA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGlja1RleHRBbGlnbiA9ICF0aGlzLm9wdGlvbnMucmV2ZXJzZSA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrVGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInIHx8IHJvdGF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxpbmVDb3VudCAqIGxpbmVIZWlnaHQgKyBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IC1sYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC8gMiAtIGhhbGZDb3VudCAqIGxpbmVIZWlnaHQgKyBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IC1sYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInIHx8IHJvdGF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC8gMiAtIGhhbGZDb3VudCAqIGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCAtIGxpbmVDb3VudCAqIGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ICo9IC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocm90YXRpb24gIT09IDAgJiYgIW9wdHNBdEluZGV4LnNob3dMYWJlbEJhY2tkcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gbGluZUhlaWdodCAvIDIgKiBNYXRoLnNpbihyb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB5ID0gcGl4ZWw7XG4gICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9ICgxIC0gbGluZUNvdW50KSAqIGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGJhY2tkcm9wO1xuICAgICAgICAgICAgaWYgKG9wdHNBdEluZGV4LnNob3dMYWJlbEJhY2tkcm9wKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFiZWxQYWRkaW5nID0gdG9QYWRkaW5nKG9wdHNBdEluZGV4LmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gbGFiZWxTaXplcy5oZWlnaHRzW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gbGFiZWxTaXplcy53aWR0aHNbaV07XG4gICAgICAgICAgICAgICAgbGV0IHRvcCA9IHRleHRPZmZzZXQgLSBsYWJlbFBhZGRpbmcudG9wO1xuICAgICAgICAgICAgICAgIGxldCBsZWZ0ID0gMCAtIGxhYmVsUGFkZGluZy5sZWZ0O1xuICAgICAgICAgICAgICAgIHN3aXRjaCh0ZXh0QmFzZWxpbmUpe1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtaWRkbGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wIC09IGhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCAtPSBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3dpdGNoKHRleHRBbGlnbil7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0IC09IHdpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0IC09IHdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJhY2tkcm9wID0ge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArIGxhYmVsUGFkZGluZy53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyBsYWJlbFBhZGRpbmcuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogb3B0c0F0SW5kZXguYmFja2Ryb3BDb2xvclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgICAgICBmb250LFxuICAgICAgICAgICAgICAgIHRleHRPZmZzZXQsXG4gICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiB0aWNrVGV4dEFsaWduLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0QmFzZWxpbmUsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgICAgICAgICAgeVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG4gICAgX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKSB7XG4gICAgICAgIGNvbnN0IHsgcG9zaXRpb24gLCB0aWNrcyAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgcm90YXRpb24gPSAtdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgICAgIGlmIChyb3RhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgIGlmICh0aWNrcy5hbGlnbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICAgICAgYWxpZ24gPSAnbGVmdCc7XG4gICAgICAgIH0gZWxzZSBpZiAodGlja3MuYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICBhbGlnbiA9ICdyaWdodCc7XG4gICAgICAgIH0gZWxzZSBpZiAodGlja3MuYWxpZ24gPT09ICdpbm5lcicpIHtcbiAgICAgICAgICAgIGFsaWduID0gJ2lubmVyJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxpZ247XG4gICAgfVxuICAgIF9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKSB7XG4gICAgICAgIGNvbnN0IHsgcG9zaXRpb24gLCB0aWNrczogeyBjcm9zc0FsaWduICwgbWlycm9yICwgcGFkZGluZyAgfSAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICAgICAgY29uc3QgdGlja0FuZFBhZGRpbmcgPSB0bCArIHBhZGRpbmc7XG4gICAgICAgIGNvbnN0IHdpZGVzdCA9IGxhYmVsU2l6ZXMud2lkZXN0LndpZHRoO1xuICAgICAgICBsZXQgdGV4dEFsaWduO1xuICAgICAgICBsZXQgeDtcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIGlmIChtaXJyb3IpIHtcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5yaWdodCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgICAgICAgICAgeCArPSB3aWRlc3QgLyAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gd2lkZXN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMucmlnaHQgLSB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgICAgICAgICAgeCAtPSB3aWRlc3QgLyAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICAgICAgeCA9IHRoaXMubGVmdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIGlmIChtaXJyb3IpIHtcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5sZWZ0ICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgICAgICAgICAgeCAtPSB3aWRlc3QgLyAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICAgICAgeCAtPSB3aWRlc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5sZWZ0ICsgdGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgICAgICAgICAgeCArPSB3aWRlc3QgLyAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgIHggPSB0aGlzLnJpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRleHRBbGlnbixcbiAgICAgICAgICAgIHhcbiAgICAgICAgfTtcbiAgICB9XG4gX2NvbXB1dGVMYWJlbEFyZWEoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudGlja3MubWlycm9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbjtcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgfHwgcG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMubGVmdCxcbiAgICAgICAgICAgICAgICBib3R0b206IGNoYXJ0LmhlaWdodCxcbiAgICAgICAgICAgICAgICByaWdodDogdGhpcy5yaWdodFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b3A6IHRoaXMudG9wLFxuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgYm90dG9tOiB0aGlzLmJvdHRvbSxcbiAgICAgICAgICAgICAgICByaWdodDogY2hhcnQud2lkdGhcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd0JhY2tncm91bmQoKSB7XG4gICAgICAgIGNvbnN0IHsgY3R4ICwgb3B0aW9uczogeyBiYWNrZ3JvdW5kQ29sb3IgIH0gLCBsZWZ0ICwgdG9wICwgd2lkdGggLCBoZWlnaHQgIH0gPSB0aGlzO1xuICAgICAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRMaW5lV2lkdGhGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBncmlkID0gdGhpcy5vcHRpb25zLmdyaWQ7XG4gICAgICAgIGlmICghdGhpcy5faXNWaXNpYmxlKCkgfHwgIWdyaWQuZGlzcGxheSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRpY2tzLmZpbmRJbmRleCgodCk9PnQudmFsdWUgPT09IHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdHMgPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGluZGV4KSk7XG4gICAgICAgICAgICByZXR1cm4gb3B0cy5saW5lV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuIGRyYXdHcmlkKGNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCBncmlkID0gdGhpcy5vcHRpb25zLmdyaWQ7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuX2dyaWRMaW5lSXRlbXMgfHwgKHRoaXMuX2dyaWRMaW5lSXRlbXMgPSB0aGlzLl9jb21wdXRlR3JpZExpbmVJdGVtcyhjaGFydEFyZWEpKTtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGNvbnN0IGRyYXdMaW5lID0gKHAxLCBwMiwgc3R5bGUpPT57XG4gICAgICAgICAgICBpZiAoIXN0eWxlLndpZHRoIHx8ICFzdHlsZS5jb2xvcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHgubGluZVdpZHRoID0gc3R5bGUud2lkdGg7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBzdHlsZS5jb2xvcjtcbiAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChzdHlsZS5ib3JkZXJEYXNoIHx8IFtdKTtcbiAgICAgICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IHN0eWxlLmJvcmRlckRhc2hPZmZzZXQ7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHAxLngsIHAxLnkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhwMi54LCBwMi55KTtcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChncmlkLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIGlmIChncmlkLmRyYXdPbkNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgICAgICAgICBkcmF3TGluZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBpdGVtLngxLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogaXRlbS55MVxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBpdGVtLngyLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogaXRlbS55MlxuICAgICAgICAgICAgICAgICAgICB9LCBpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdyaWQuZHJhd1RpY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdMaW5lKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGl0ZW0udHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogaXRlbS50eTFcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogaXRlbS50eDIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBpdGVtLnR5MlxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogaXRlbS50aWNrQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogaXRlbS50aWNrV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJEYXNoOiBpdGVtLnRpY2tCb3JkZXJEYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogaXRlbS50aWNrQm9yZGVyRGFzaE9mZnNldFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd0JvcmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBjaGFydCAsIGN0eCAsIG9wdGlvbnM6IHsgYm9yZGVyICwgZ3JpZCAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGJvcmRlck9wdHMgPSBib3JkZXIuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IGF4aXNXaWR0aCA9IGJvcmRlci5kaXNwbGF5ID8gYm9yZGVyT3B0cy53aWR0aCA6IDA7XG4gICAgICAgIGlmICghYXhpc1dpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFzdExpbmVXaWR0aCA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoMCkpLmxpbmVXaWR0aDtcbiAgICAgICAgY29uc3QgYm9yZGVyVmFsdWUgPSB0aGlzLl9ib3JkZXJWYWx1ZTtcbiAgICAgICAgbGV0IHgxLCB4MiwgeTEsIHkyO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgeDEgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy5sZWZ0LCBheGlzV2lkdGgpIC0gYXhpc1dpZHRoIC8gMjtcbiAgICAgICAgICAgIHgyID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMucmlnaHQsIGxhc3RMaW5lV2lkdGgpICsgbGFzdExpbmVXaWR0aCAvIDI7XG4gICAgICAgICAgICB5MSA9IHkyID0gYm9yZGVyVmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB5MSA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLnRvcCwgYXhpc1dpZHRoKSAtIGF4aXNXaWR0aCAvIDI7XG4gICAgICAgICAgICB5MiA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLmJvdHRvbSwgbGFzdExpbmVXaWR0aCkgKyBsYXN0TGluZVdpZHRoIC8gMjtcbiAgICAgICAgICAgIHgxID0geDIgPSBib3JkZXJWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gYm9yZGVyT3B0cy53aWR0aDtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gYm9yZGVyT3B0cy5jb2xvcjtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHgxLCB5MSk7XG4gICAgICAgIGN0eC5saW5lVG8oeDIsIHkyKTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiBkcmF3TGFiZWxzKGNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCBvcHRpb25UaWNrcyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICAgICAgaWYgKCFvcHRpb25UaWNrcy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IGFyZWEgPSB0aGlzLl9jb21wdXRlTGFiZWxBcmVhKCk7XG4gICAgICAgIGlmIChhcmVhKSB7XG4gICAgICAgICAgICBjbGlwQXJlYShjdHgsIGFyZWEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5nZXRMYWJlbEl0ZW1zKGNoYXJ0QXJlYSk7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcyl7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJUZXh0T3B0aW9ucyA9IGl0ZW0ub3B0aW9ucztcbiAgICAgICAgICAgIGNvbnN0IHRpY2tGb250ID0gaXRlbS5mb250O1xuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBpdGVtLmxhYmVsO1xuICAgICAgICAgICAgY29uc3QgeSA9IGl0ZW0udGV4dE9mZnNldDtcbiAgICAgICAgICAgIHJlbmRlclRleHQoY3R4LCBsYWJlbCwgMCwgeSwgdGlja0ZvbnQsIHJlbmRlclRleHRPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJlYSkge1xuICAgICAgICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgICAgICB9XG4gICAgfVxuIGRyYXdUaXRsZSgpIHtcbiAgICAgICAgY29uc3QgeyBjdHggLCBvcHRpb25zOiB7IHBvc2l0aW9uICwgdGl0bGUgLCByZXZlcnNlICB9ICB9ID0gdGhpcztcbiAgICAgICAgaWYgKCF0aXRsZS5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZm9udCA9IHRvRm9udCh0aXRsZS5mb250KTtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZS5wYWRkaW5nKTtcbiAgICAgICAgY29uc3QgYWxpZ24gPSB0aXRsZS5hbGlnbjtcbiAgICAgICAgbGV0IG9mZnNldCA9IGZvbnQubGluZUhlaWdodCAvIDI7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgcG9zaXRpb24gPT09ICdjZW50ZXInIHx8IGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IHBhZGRpbmcuYm90dG9tO1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkodGl0bGUudGV4dCkpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gZm9udC5saW5lSGVpZ2h0ICogKHRpdGxlLnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvZmZzZXQgKz0gcGFkZGluZy50b3A7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB0aXRsZVggLCB0aXRsZVkgLCBtYXhXaWR0aCAsIHJvdGF0aW9uICB9ID0gdGl0bGVBcmdzKHRoaXMsIG9mZnNldCwgcG9zaXRpb24sIGFsaWduKTtcbiAgICAgICAgcmVuZGVyVGV4dChjdHgsIHRpdGxlLnRleHQsIDAsIDAsIGZvbnQsIHtcbiAgICAgICAgICAgIGNvbG9yOiB0aXRsZS5jb2xvcixcbiAgICAgICAgICAgIG1heFdpZHRoLFxuICAgICAgICAgICAgcm90YXRpb24sXG4gICAgICAgICAgICB0ZXh0QWxpZ246IHRpdGxlQWxpZ24oYWxpZ24sIHBvc2l0aW9uLCByZXZlcnNlKSxcbiAgICAgICAgICAgIHRleHRCYXNlbGluZTogJ21pZGRsZScsXG4gICAgICAgICAgICB0cmFuc2xhdGlvbjogW1xuICAgICAgICAgICAgICAgIHRpdGxlWCxcbiAgICAgICAgICAgICAgICB0aXRsZVlcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRyYXcoY2hhcnRBcmVhKSB7XG4gICAgICAgIGlmICghdGhpcy5faXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKCk7XG4gICAgICAgIHRoaXMuZHJhd0dyaWQoY2hhcnRBcmVhKTtcbiAgICAgICAgdGhpcy5kcmF3Qm9yZGVyKCk7XG4gICAgICAgIHRoaXMuZHJhd1RpdGxlKCk7XG4gICAgICAgIHRoaXMuZHJhd0xhYmVscyhjaGFydEFyZWEpO1xuICAgIH1cbiBfbGF5ZXJzKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB0eiA9IG9wdHMudGlja3MgJiYgb3B0cy50aWNrcy56IHx8IDA7XG4gICAgICAgIGNvbnN0IGd6ID0gdmFsdWVPckRlZmF1bHQob3B0cy5ncmlkICYmIG9wdHMuZ3JpZC56LCAtMSk7XG4gICAgICAgIGNvbnN0IGJ6ID0gdmFsdWVPckRlZmF1bHQob3B0cy5ib3JkZXIgJiYgb3B0cy5ib3JkZXIueiwgMCk7XG4gICAgICAgIGlmICghdGhpcy5faXNWaXNpYmxlKCkgfHwgdGhpcy5kcmF3ICE9PSBTY2FsZS5wcm90b3R5cGUuZHJhdykge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHo6IHR6LFxuICAgICAgICAgICAgICAgICAgICBkcmF3OiAoY2hhcnRBcmVhKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3KGNoYXJ0QXJlYSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgejogZ3osXG4gICAgICAgICAgICAgICAgZHJhdzogKGNoYXJ0QXJlYSk9PntcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3QmFja2dyb3VuZCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdHcmlkKGNoYXJ0QXJlYSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd1RpdGxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB6OiBieixcbiAgICAgICAgICAgICAgICBkcmF3OiAoKT0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdCb3JkZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHo6IHR6LFxuICAgICAgICAgICAgICAgIGRyYXc6IChjaGFydEFyZWEpPT57XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0xhYmVscyhjaGFydEFyZWEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICB9XG4gZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModHlwZSkge1xuICAgICAgICBjb25zdCBtZXRhcyA9IHRoaXMuY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgICAgICBjb25zdCBheGlzSUQgPSB0aGlzLmF4aXMgKyAnQXhpc0lEJztcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBtZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IG1ldGFzW2ldO1xuICAgICAgICAgICAgaWYgKG1ldGFbYXhpc0lEXSA9PT0gdGhpcy5pZCAmJiAoIXR5cGUgfHwgbWV0YS50eXBlID09PSB0eXBlKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG1ldGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuIF9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnMudGlja3Muc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaW5kZXgpKTtcbiAgICAgICAgcmV0dXJuIHRvRm9udChvcHRzLmZvbnQpO1xuICAgIH1cbiBfbWF4RGlnaXRzKCkge1xuICAgICAgICBjb25zdCBmb250U2l6ZSA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoMCkubGluZUhlaWdodDtcbiAgICAgICAgcmV0dXJuICh0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCA6IHRoaXMuaGVpZ2h0KSAvIGZvbnRTaXplO1xuICAgIH1cbn1cblxuY2xhc3MgVHlwZWRSZWdpc3RyeSB7XG4gICAgY29uc3RydWN0b3IodHlwZSwgc2NvcGUsIG92ZXJyaWRlKXtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLm92ZXJyaWRlID0gb3ZlcnJpZGU7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBpc0ZvclR5cGUodHlwZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mLmNhbGwodGhpcy50eXBlLnByb3RvdHlwZSwgdHlwZS5wcm90b3R5cGUpO1xuICAgIH1cbiByZWdpc3RlcihpdGVtKSB7XG4gICAgICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGl0ZW0pO1xuICAgICAgICBsZXQgcGFyZW50U2NvcGU7XG4gICAgICAgIGlmIChpc0lDaGFydENvbXBvbmVudChwcm90bykpIHtcbiAgICAgICAgICAgIHBhcmVudFNjb3BlID0gdGhpcy5yZWdpc3Rlcihwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgICAgICBjb25zdCBpZCA9IGl0ZW0uaWQ7XG4gICAgICAgIGNvbnN0IHNjb3BlID0gdGhpcy5zY29wZSArICcuJyArIGlkO1xuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsYXNzIGRvZXMgbm90IGhhdmUgaWQ6ICcgKyBpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWQgaW4gaXRlbXMpIHtcbiAgICAgICAgICAgIHJldHVybiBzY29wZTtcbiAgICAgICAgfVxuICAgICAgICBpdGVtc1tpZF0gPSBpdGVtO1xuICAgICAgICByZWdpc3RlckRlZmF1bHRzKGl0ZW0sIHNjb3BlLCBwYXJlbnRTY29wZSk7XG4gICAgICAgIGlmICh0aGlzLm92ZXJyaWRlKSB7XG4gICAgICAgICAgICBkZWZhdWx0cy5vdmVycmlkZShpdGVtLmlkLCBpdGVtLm92ZXJyaWRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH1cbiBnZXQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXNbaWRdO1xuICAgIH1cbiB1bnJlZ2lzdGVyKGl0ZW0pIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgICAgICBjb25zdCBpZCA9IGl0ZW0uaWQ7XG4gICAgICAgIGNvbnN0IHNjb3BlID0gdGhpcy5zY29wZTtcbiAgICAgICAgaWYgKGlkIGluIGl0ZW1zKSB7XG4gICAgICAgICAgICBkZWxldGUgaXRlbXNbaWRdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY29wZSAmJiBpZCBpbiBkZWZhdWx0c1tzY29wZV0pIHtcbiAgICAgICAgICAgIGRlbGV0ZSBkZWZhdWx0c1tzY29wZV1baWRdO1xuICAgICAgICAgICAgaWYgKHRoaXMub3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgb3ZlcnJpZGVzW2lkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdHMoaXRlbSwgc2NvcGUsIHBhcmVudFNjb3BlKSB7XG4gICAgY29uc3QgaXRlbURlZmF1bHRzID0gbWVyZ2UoT2JqZWN0LmNyZWF0ZShudWxsKSwgW1xuICAgICAgICBwYXJlbnRTY29wZSA/IGRlZmF1bHRzLmdldChwYXJlbnRTY29wZSkgOiB7fSxcbiAgICAgICAgZGVmYXVsdHMuZ2V0KHNjb3BlKSxcbiAgICAgICAgaXRlbS5kZWZhdWx0c1xuICAgIF0pO1xuICAgIGRlZmF1bHRzLnNldChzY29wZSwgaXRlbURlZmF1bHRzKTtcbiAgICBpZiAoaXRlbS5kZWZhdWx0Um91dGVzKSB7XG4gICAgICAgIHJvdXRlRGVmYXVsdHMoc2NvcGUsIGl0ZW0uZGVmYXVsdFJvdXRlcyk7XG4gICAgfVxuICAgIGlmIChpdGVtLmRlc2NyaXB0b3JzKSB7XG4gICAgICAgIGRlZmF1bHRzLmRlc2NyaWJlKHNjb3BlLCBpdGVtLmRlc2NyaXB0b3JzKTtcbiAgICB9XG59XG5mdW5jdGlvbiByb3V0ZURlZmF1bHRzKHNjb3BlLCByb3V0ZXMpIHtcbiAgICBPYmplY3Qua2V5cyhyb3V0ZXMpLmZvckVhY2goKHByb3BlcnR5KT0+e1xuICAgICAgICBjb25zdCBwcm9wZXJ0eVBhcnRzID0gcHJvcGVydHkuc3BsaXQoJy4nKTtcbiAgICAgICAgY29uc3Qgc291cmNlTmFtZSA9IHByb3BlcnR5UGFydHMucG9wKCk7XG4gICAgICAgIGNvbnN0IHNvdXJjZVNjb3BlID0gW1xuICAgICAgICAgICAgc2NvcGVcbiAgICAgICAgXS5jb25jYXQocHJvcGVydHlQYXJ0cykuam9pbignLicpO1xuICAgICAgICBjb25zdCBwYXJ0cyA9IHJvdXRlc1twcm9wZXJ0eV0uc3BsaXQoJy4nKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0TmFtZSA9IHBhcnRzLnBvcCgpO1xuICAgICAgICBjb25zdCB0YXJnZXRTY29wZSA9IHBhcnRzLmpvaW4oJy4nKTtcbiAgICAgICAgZGVmYXVsdHMucm91dGUoc291cmNlU2NvcGUsIHNvdXJjZU5hbWUsIHRhcmdldFNjb3BlLCB0YXJnZXROYW1lKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGlzSUNoYXJ0Q29tcG9uZW50KHByb3RvKSB7XG4gICAgcmV0dXJuICdpZCcgaW4gcHJvdG8gJiYgJ2RlZmF1bHRzJyBpbiBwcm90bztcbn1cblxuY2xhc3MgUmVnaXN0cnkge1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMuY29udHJvbGxlcnMgPSBuZXcgVHlwZWRSZWdpc3RyeShEYXRhc2V0Q29udHJvbGxlciwgJ2RhdGFzZXRzJywgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBuZXcgVHlwZWRSZWdpc3RyeShFbGVtZW50LCAnZWxlbWVudHMnKTtcbiAgICAgICAgdGhpcy5wbHVnaW5zID0gbmV3IFR5cGVkUmVnaXN0cnkoT2JqZWN0LCAncGx1Z2lucycpO1xuICAgICAgICB0aGlzLnNjYWxlcyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KFNjYWxlLCAnc2NhbGVzJyk7XG4gICAgICAgIHRoaXMuX3R5cGVkUmVnaXN0cmllcyA9IFtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnMsXG4gICAgICAgICAgICB0aGlzLnNjYWxlcyxcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHNcbiAgICAgICAgXTtcbiAgICB9XG4gYWRkKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzKTtcbiAgICB9XG4gICAgcmVtb3ZlKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MpO1xuICAgIH1cbiBhZGRDb250cm9sbGVycyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5jb250cm9sbGVycyk7XG4gICAgfVxuIGFkZEVsZW1lbnRzKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLmVsZW1lbnRzKTtcbiAgICB9XG4gYWRkUGx1Z2lucyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5wbHVnaW5zKTtcbiAgICB9XG4gYWRkU2NhbGVzKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLnNjYWxlcyk7XG4gICAgfVxuIGdldENvbnRyb2xsZXIoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5jb250cm9sbGVycywgJ2NvbnRyb2xsZXInKTtcbiAgICB9XG4gZ2V0RWxlbWVudChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLmVsZW1lbnRzLCAnZWxlbWVudCcpO1xuICAgIH1cbiBnZXRQbHVnaW4oaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5wbHVnaW5zLCAncGx1Z2luJyk7XG4gICAgfVxuIGdldFNjYWxlKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMuc2NhbGVzLCAnc2NhbGUnKTtcbiAgICB9XG4gcmVtb3ZlQ29udHJvbGxlcnMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5jb250cm9sbGVycyk7XG4gICAgfVxuIHJlbW92ZUVsZW1lbnRzKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMuZWxlbWVudHMpO1xuICAgIH1cbiByZW1vdmVQbHVnaW5zKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMucGx1Z2lucyk7XG4gICAgfVxuIHJlbW92ZVNjYWxlcyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLnNjYWxlcyk7XG4gICAgfVxuIF9lYWNoKG1ldGhvZCwgYXJncywgdHlwZWRSZWdpc3RyeSkge1xuICAgICAgICBbXG4gICAgICAgICAgICAuLi5hcmdzXG4gICAgICAgIF0uZm9yRWFjaCgoYXJnKT0+e1xuICAgICAgICAgICAgY29uc3QgcmVnID0gdHlwZWRSZWdpc3RyeSB8fCB0aGlzLl9nZXRSZWdpc3RyeUZvclR5cGUoYXJnKTtcbiAgICAgICAgICAgIGlmICh0eXBlZFJlZ2lzdHJ5IHx8IHJlZy5pc0ZvclR5cGUoYXJnKSB8fCByZWcgPT09IHRoaXMucGx1Z2lucyAmJiBhcmcuaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9leGVjKG1ldGhvZCwgcmVnLCBhcmcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlYWNoKGFyZywgKGl0ZW0pPT57XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1SZWcgPSB0eXBlZFJlZ2lzdHJ5IHx8IHRoaXMuX2dldFJlZ2lzdHJ5Rm9yVHlwZShpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXhlYyhtZXRob2QsIGl0ZW1SZWcsIGl0ZW0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gX2V4ZWMobWV0aG9kLCByZWdpc3RyeSwgY29tcG9uZW50KSB7XG4gICAgICAgIGNvbnN0IGNhbWVsTWV0aG9kID0gX2NhcGl0YWxpemUobWV0aG9kKTtcbiAgICAgICAgY2FsbGJhY2soY29tcG9uZW50WydiZWZvcmUnICsgY2FtZWxNZXRob2RdLCBbXSwgY29tcG9uZW50KTtcbiAgICAgICAgcmVnaXN0cnlbbWV0aG9kXShjb21wb25lbnQpO1xuICAgICAgICBjYWxsYmFjayhjb21wb25lbnRbJ2FmdGVyJyArIGNhbWVsTWV0aG9kXSwgW10sIGNvbXBvbmVudCk7XG4gICAgfVxuIF9nZXRSZWdpc3RyeUZvclR5cGUodHlwZSkge1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5fdHlwZWRSZWdpc3RyaWVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IHJlZyA9IHRoaXMuX3R5cGVkUmVnaXN0cmllc1tpXTtcbiAgICAgICAgICAgIGlmIChyZWcuaXNGb3JUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wbHVnaW5zO1xuICAgIH1cbiBfZ2V0KGlkLCB0eXBlZFJlZ2lzdHJ5LCB0eXBlKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0eXBlZFJlZ2lzdHJ5LmdldChpZCk7XG4gICAgICAgIGlmIChpdGVtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgaWQgKyAnXCIgaXMgbm90IGEgcmVnaXN0ZXJlZCAnICsgdHlwZSArICcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxufVxudmFyIHJlZ2lzdHJ5ID0gLyogI19fUFVSRV9fICovIG5ldyBSZWdpc3RyeSgpO1xuXG5jbGFzcyBQbHVnaW5TZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLl9pbml0ID0gW107XG4gICAgfVxuIG5vdGlmeShjaGFydCwgaG9vaywgYXJncywgZmlsdGVyKSB7XG4gICAgICAgIGlmIChob29rID09PSAnYmVmb3JlSW5pdCcpIHtcbiAgICAgICAgICAgIHRoaXMuX2luaXQgPSB0aGlzLl9jcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkodGhpcy5faW5pdCwgY2hhcnQsICdpbnN0YWxsJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVzY3JpcHRvcnMgPSBmaWx0ZXIgPyB0aGlzLl9kZXNjcmlwdG9ycyhjaGFydCkuZmlsdGVyKGZpbHRlcikgOiB0aGlzLl9kZXNjcmlwdG9ycyhjaGFydCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX25vdGlmeShkZXNjcmlwdG9ycywgY2hhcnQsIGhvb2ssIGFyZ3MpO1xuICAgICAgICBpZiAoaG9vayA9PT0gJ2FmdGVyRGVzdHJveScpIHtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeShkZXNjcmlwdG9ycywgY2hhcnQsICdzdG9wJyk7XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkodGhpcy5faW5pdCwgY2hhcnQsICd1bmluc3RhbGwnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiBfbm90aWZ5KGRlc2NyaXB0b3JzLCBjaGFydCwgaG9vaywgYXJncykge1xuICAgICAgICBhcmdzID0gYXJncyB8fCB7fTtcbiAgICAgICAgZm9yIChjb25zdCBkZXNjcmlwdG9yIG9mIGRlc2NyaXB0b3JzKXtcbiAgICAgICAgICAgIGNvbnN0IHBsdWdpbiA9IGRlc2NyaXB0b3IucGx1Z2luO1xuICAgICAgICAgICAgY29uc3QgbWV0aG9kID0gcGx1Z2luW2hvb2tdO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gW1xuICAgICAgICAgICAgICAgIGNoYXJ0LFxuICAgICAgICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci5vcHRpb25zXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKG1ldGhvZCwgcGFyYW1zLCBwbHVnaW4pID09PSBmYWxzZSAmJiBhcmdzLmNhbmNlbGFibGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGludmFsaWRhdGUoKSB7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZih0aGlzLl9jYWNoZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX29sZENhY2hlID0gdGhpcy5fY2FjaGU7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiBfZGVzY3JpcHRvcnMoY2hhcnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NhY2hlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVzY3JpcHRvcnMgPSB0aGlzLl9jYWNoZSA9IHRoaXMuX2NyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0KTtcbiAgICAgICAgdGhpcy5fbm90aWZ5U3RhdGVDaGFuZ2VzKGNoYXJ0KTtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3JzO1xuICAgIH1cbiAgICBfY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIGFsbCkge1xuICAgICAgICBjb25zdCBjb25maWcgPSBjaGFydCAmJiBjaGFydC5jb25maWc7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB2YWx1ZU9yRGVmYXVsdChjb25maWcub3B0aW9ucyAmJiBjb25maWcub3B0aW9ucy5wbHVnaW5zLCB7fSk7XG4gICAgICAgIGNvbnN0IHBsdWdpbnMgPSBhbGxQbHVnaW5zKGNvbmZpZyk7XG4gICAgICAgIHJldHVybiBvcHRpb25zID09PSBmYWxzZSAmJiAhYWxsID8gW10gOiBjcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgcGx1Z2lucywgb3B0aW9ucywgYWxsKTtcbiAgICB9XG4gX25vdGlmeVN0YXRlQ2hhbmdlcyhjaGFydCkge1xuICAgICAgICBjb25zdCBwcmV2aW91c0Rlc2NyaXB0b3JzID0gdGhpcy5fb2xkQ2FjaGUgfHwgW107XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gdGhpcy5fY2FjaGU7XG4gICAgICAgIGNvbnN0IGRpZmYgPSAoYSwgYik9PmEuZmlsdGVyKCh4KT0+IWIuc29tZSgoeSk9PngucGx1Z2luLmlkID09PSB5LnBsdWdpbi5pZCkpO1xuICAgICAgICB0aGlzLl9ub3RpZnkoZGlmZihwcmV2aW91c0Rlc2NyaXB0b3JzLCBkZXNjcmlwdG9ycyksIGNoYXJ0LCAnc3RvcCcpO1xuICAgICAgICB0aGlzLl9ub3RpZnkoZGlmZihkZXNjcmlwdG9ycywgcHJldmlvdXNEZXNjcmlwdG9ycyksIGNoYXJ0LCAnc3RhcnQnKTtcbiAgICB9XG59XG4gZnVuY3Rpb24gYWxsUGx1Z2lucyhjb25maWcpIHtcbiAgICBjb25zdCBsb2NhbElkcyA9IHt9O1xuICAgIGNvbnN0IHBsdWdpbnMgPSBbXTtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocmVnaXN0cnkucGx1Z2lucy5pdGVtcyk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspe1xuICAgICAgICBwbHVnaW5zLnB1c2gocmVnaXN0cnkuZ2V0UGx1Z2luKGtleXNbaV0pKTtcbiAgICB9XG4gICAgY29uc3QgbG9jYWwgPSBjb25maWcucGx1Z2lucyB8fCBbXTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgbG9jYWwubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBwbHVnaW4gPSBsb2NhbFtpXTtcbiAgICAgICAgaWYgKHBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID09PSAtMSkge1xuICAgICAgICAgICAgcGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgICAgICAgICBsb2NhbElkc1twbHVnaW4uaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwbHVnaW5zLFxuICAgICAgICBsb2NhbElkc1xuICAgIH07XG59XG5mdW5jdGlvbiBnZXRPcHRzKG9wdGlvbnMsIGFsbCkge1xuICAgIGlmICghYWxsICYmIG9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucyA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufVxuZnVuY3Rpb24gY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHsgcGx1Z2lucyAsIGxvY2FsSWRzICB9LCBvcHRpb25zLCBhbGwpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBjb250ZXh0ID0gY2hhcnQuZ2V0Q29udGV4dCgpO1xuICAgIGZvciAoY29uc3QgcGx1Z2luIG9mIHBsdWdpbnMpe1xuICAgICAgICBjb25zdCBpZCA9IHBsdWdpbi5pZDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IGdldE9wdHMob3B0aW9uc1tpZF0sIGFsbCk7XG4gICAgICAgIGlmIChvcHRzID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICBwbHVnaW4sXG4gICAgICAgICAgICBvcHRpb25zOiBwbHVnaW5PcHRzKGNoYXJ0LmNvbmZpZywge1xuICAgICAgICAgICAgICAgIHBsdWdpbixcbiAgICAgICAgICAgICAgICBsb2NhbDogbG9jYWxJZHNbaWRdXG4gICAgICAgICAgICB9LCBvcHRzLCBjb250ZXh0KVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHBsdWdpbk9wdHMoY29uZmlnLCB7IHBsdWdpbiAsIGxvY2FsICB9LCBvcHRzLCBjb250ZXh0KSB7XG4gICAgY29uc3Qga2V5cyA9IGNvbmZpZy5wbHVnaW5TY29wZUtleXMocGx1Z2luKTtcbiAgICBjb25zdCBzY29wZXMgPSBjb25maWcuZ2V0T3B0aW9uU2NvcGVzKG9wdHMsIGtleXMpO1xuICAgIGlmIChsb2NhbCAmJiBwbHVnaW4uZGVmYXVsdHMpIHtcbiAgICAgICAgc2NvcGVzLnB1c2gocGx1Z2luLmRlZmF1bHRzKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZy5jcmVhdGVSZXNvbHZlcihzY29wZXMsIGNvbnRleHQsIFtcbiAgICAgICAgJydcbiAgICBdLCB7XG4gICAgICAgIHNjcmlwdGFibGU6IGZhbHNlLFxuICAgICAgICBpbmRleGFibGU6IGZhbHNlLFxuICAgICAgICBhbGxLZXlzOiB0cnVlXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEluZGV4QXhpcyh0eXBlLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZGF0YXNldERlZmF1bHRzID0gZGVmYXVsdHMuZGF0YXNldHNbdHlwZV0gfHwge307XG4gICAgY29uc3QgZGF0YXNldE9wdGlvbnMgPSAob3B0aW9ucy5kYXRhc2V0cyB8fCB7fSlbdHlwZV0gfHwge307XG4gICAgcmV0dXJuIGRhdGFzZXRPcHRpb25zLmluZGV4QXhpcyB8fCBvcHRpb25zLmluZGV4QXhpcyB8fCBkYXRhc2V0RGVmYXVsdHMuaW5kZXhBeGlzIHx8ICd4Jztcbn1cbmZ1bmN0aW9uIGdldEF4aXNGcm9tRGVmYXVsdFNjYWxlSUQoaWQsIGluZGV4QXhpcykge1xuICAgIGxldCBheGlzID0gaWQ7XG4gICAgaWYgKGlkID09PSAnX2luZGV4XycpIHtcbiAgICAgICAgYXhpcyA9IGluZGV4QXhpcztcbiAgICB9IGVsc2UgaWYgKGlkID09PSAnX3ZhbHVlXycpIHtcbiAgICAgICAgYXhpcyA9IGluZGV4QXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xuICAgIH1cbiAgICByZXR1cm4gYXhpcztcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRTY2FsZUlERnJvbUF4aXMoYXhpcywgaW5kZXhBeGlzKSB7XG4gICAgcmV0dXJuIGF4aXMgPT09IGluZGV4QXhpcyA/ICdfaW5kZXhfJyA6ICdfdmFsdWVfJztcbn1cbmZ1bmN0aW9uIGlkTWF0Y2hlc0F4aXMoaWQpIHtcbiAgICBpZiAoaWQgPT09ICd4JyB8fCBpZCA9PT0gJ3knIHx8IGlkID09PSAncicpIHtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGF4aXNGcm9tUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICByZXR1cm4gJ3gnO1xuICAgIH1cbiAgICBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyB8fCBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICByZXR1cm4gJ3knO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGVybWluZUF4aXMoaWQsIC4uLnNjYWxlT3B0aW9ucykge1xuICAgIGlmIChpZE1hdGNoZXNBeGlzKGlkKSkge1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfVxuICAgIGZvciAoY29uc3Qgb3B0cyBvZiBzY2FsZU9wdGlvbnMpe1xuICAgICAgICBjb25zdCBheGlzID0gb3B0cy5heGlzIHx8IGF4aXNGcm9tUG9zaXRpb24ob3B0cy5wb3NpdGlvbikgfHwgaWQubGVuZ3RoID4gMSAmJiBpZE1hdGNoZXNBeGlzKGlkWzBdLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICBpZiAoYXhpcykge1xuICAgICAgICAgICAgcmV0dXJuIGF4aXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZGV0ZXJtaW5lIHR5cGUgb2YgJyR7aWR9JyBheGlzLiBQbGVhc2UgcHJvdmlkZSAnYXhpcycgb3IgJ3Bvc2l0aW9uJyBvcHRpb24uYCk7XG59XG5mdW5jdGlvbiBnZXRBeGlzRnJvbURhdGFzZXQoaWQsIGF4aXMsIGRhdGFzZXQpIHtcbiAgICBpZiAoZGF0YXNldFtheGlzICsgJ0F4aXNJRCddID09PSBpZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXhpc1xuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJldHJpZXZlQXhpc0Zyb21EYXRhc2V0cyhpZCwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZy5kYXRhICYmIGNvbmZpZy5kYXRhLmRhdGFzZXRzKSB7XG4gICAgICAgIGNvbnN0IGJvdW5kRHMgPSBjb25maWcuZGF0YS5kYXRhc2V0cy5maWx0ZXIoKGQpPT5kLnhBeGlzSUQgPT09IGlkIHx8IGQueUF4aXNJRCA9PT0gaWQpO1xuICAgICAgICBpZiAoYm91bmREcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRBeGlzRnJvbURhdGFzZXQoaWQsICd4JywgYm91bmREc1swXSkgfHwgZ2V0QXhpc0Zyb21EYXRhc2V0KGlkLCAneScsIGJvdW5kRHNbMF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7fTtcbn1cbmZ1bmN0aW9uIG1lcmdlU2NhbGVDb25maWcoY29uZmlnLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY2hhcnREZWZhdWx0cyA9IG92ZXJyaWRlc1tjb25maWcudHlwZV0gfHwge1xuICAgICAgICBzY2FsZXM6IHt9XG4gICAgfTtcbiAgICBjb25zdCBjb25maWdTY2FsZXMgPSBvcHRpb25zLnNjYWxlcyB8fCB7fTtcbiAgICBjb25zdCBjaGFydEluZGV4QXhpcyA9IGdldEluZGV4QXhpcyhjb25maWcudHlwZSwgb3B0aW9ucyk7XG4gICAgY29uc3Qgc2NhbGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBPYmplY3Qua2V5cyhjb25maWdTY2FsZXMpLmZvckVhY2goKGlkKT0+e1xuICAgICAgICBjb25zdCBzY2FsZUNvbmYgPSBjb25maWdTY2FsZXNbaWRdO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHNjYWxlQ29uZikpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGBJbnZhbGlkIHNjYWxlIGNvbmZpZ3VyYXRpb24gZm9yIHNjYWxlOiAke2lkfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2FsZUNvbmYuX3Byb3h5KSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKGBJZ25vcmluZyByZXNvbHZlciBwYXNzZWQgYXMgb3B0aW9ucyBmb3Igc2NhbGU6ICR7aWR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXhpcyA9IGRldGVybWluZUF4aXMoaWQsIHNjYWxlQ29uZiwgcmV0cmlldmVBeGlzRnJvbURhdGFzZXRzKGlkLCBjb25maWcpLCBkZWZhdWx0cy5zY2FsZXNbc2NhbGVDb25mLnR5cGVdKTtcbiAgICAgICAgY29uc3QgZGVmYXVsdElkID0gZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyhheGlzLCBjaGFydEluZGV4QXhpcyk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRTY2FsZU9wdGlvbnMgPSBjaGFydERlZmF1bHRzLnNjYWxlcyB8fCB7fTtcbiAgICAgICAgc2NhbGVzW2lkXSA9IG1lcmdlSWYoT2JqZWN0LmNyZWF0ZShudWxsKSwgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGF4aXNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzY2FsZUNvbmYsXG4gICAgICAgICAgICBkZWZhdWx0U2NhbGVPcHRpb25zW2F4aXNdLFxuICAgICAgICAgICAgZGVmYXVsdFNjYWxlT3B0aW9uc1tkZWZhdWx0SWRdXG4gICAgICAgIF0pO1xuICAgIH0pO1xuICAgIGNvbmZpZy5kYXRhLmRhdGFzZXRzLmZvckVhY2goKGRhdGFzZXQpPT57XG4gICAgICAgIGNvbnN0IHR5cGUgPSBkYXRhc2V0LnR5cGUgfHwgY29uZmlnLnR5cGU7XG4gICAgICAgIGNvbnN0IGluZGV4QXhpcyA9IGRhdGFzZXQuaW5kZXhBeGlzIHx8IGdldEluZGV4QXhpcyh0eXBlLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgZGF0YXNldERlZmF1bHRzID0gb3ZlcnJpZGVzW3R5cGVdIHx8IHt9O1xuICAgICAgICBjb25zdCBkZWZhdWx0U2NhbGVPcHRpb25zID0gZGF0YXNldERlZmF1bHRzLnNjYWxlcyB8fCB7fTtcbiAgICAgICAgT2JqZWN0LmtleXMoZGVmYXVsdFNjYWxlT3B0aW9ucykuZm9yRWFjaCgoZGVmYXVsdElEKT0+e1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IGdldEF4aXNGcm9tRGVmYXVsdFNjYWxlSUQoZGVmYXVsdElELCBpbmRleEF4aXMpO1xuICAgICAgICAgICAgY29uc3QgaWQgPSBkYXRhc2V0W2F4aXMgKyAnQXhpc0lEJ10gfHwgYXhpcztcbiAgICAgICAgICAgIHNjYWxlc1tpZF0gPSBzY2FsZXNbaWRdIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICBtZXJnZUlmKHNjYWxlc1tpZF0sIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGF4aXNcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbmZpZ1NjYWxlc1tpZF0sXG4gICAgICAgICAgICAgICAgZGVmYXVsdFNjYWxlT3B0aW9uc1tkZWZhdWx0SURdXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgT2JqZWN0LmtleXMoc2NhbGVzKS5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgIGNvbnN0IHNjYWxlID0gc2NhbGVzW2tleV07XG4gICAgICAgIG1lcmdlSWYoc2NhbGUsIFtcbiAgICAgICAgICAgIGRlZmF1bHRzLnNjYWxlc1tzY2FsZS50eXBlXSxcbiAgICAgICAgICAgIGRlZmF1bHRzLnNjYWxlXG4gICAgICAgIF0pO1xuICAgIH0pO1xuICAgIHJldHVybiBzY2FsZXM7XG59XG5mdW5jdGlvbiBpbml0T3B0aW9ucyhjb25maWcpIHtcbiAgICBjb25zdCBvcHRpb25zID0gY29uZmlnLm9wdGlvbnMgfHwgKGNvbmZpZy5vcHRpb25zID0ge30pO1xuICAgIG9wdGlvbnMucGx1Z2lucyA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMucGx1Z2lucywge30pO1xuICAgIG9wdGlvbnMuc2NhbGVzID0gbWVyZ2VTY2FsZUNvbmZpZyhjb25maWcsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gaW5pdERhdGEoZGF0YSkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuZGF0YXNldHMgPSBkYXRhLmRhdGFzZXRzIHx8IFtdO1xuICAgIGRhdGEubGFiZWxzID0gZGF0YS5sYWJlbHMgfHwgW107XG4gICAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiBpbml0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBjb25maWcuZGF0YSA9IGluaXREYXRhKGNvbmZpZy5kYXRhKTtcbiAgICBpbml0T3B0aW9ucyhjb25maWcpO1xuICAgIHJldHVybiBjb25maWc7XG59XG5jb25zdCBrZXlDYWNoZSA9IG5ldyBNYXAoKTtcbmNvbnN0IGtleXNDYWNoZWQgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBjYWNoZWRLZXlzKGNhY2hlS2V5LCBnZW5lcmF0ZSkge1xuICAgIGxldCBrZXlzID0ga2V5Q2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICBpZiAoIWtleXMpIHtcbiAgICAgICAga2V5cyA9IGdlbmVyYXRlKCk7XG4gICAgICAgIGtleUNhY2hlLnNldChjYWNoZUtleSwga2V5cyk7XG4gICAgICAgIGtleXNDYWNoZWQuYWRkKGtleXMpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbn1cbmNvbnN0IGFkZElmRm91bmQgPSAoc2V0LCBvYmosIGtleSk9PntcbiAgICBjb25zdCBvcHRzID0gcmVzb2x2ZU9iamVjdEtleShvYmosIGtleSk7XG4gICAgaWYgKG9wdHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXQuYWRkKG9wdHMpO1xuICAgIH1cbn07XG5jbGFzcyBDb25maWcge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyl7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGluaXRDb25maWcoY29uZmlnKTtcbiAgICAgICAgdGhpcy5fc2NvcGVDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZXJDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgZ2V0IHBsYXRmb3JtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLnBsYXRmb3JtO1xuICAgIH1cbiAgICBnZXQgdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy50eXBlO1xuICAgIH1cbiAgICBzZXQgdHlwZSh0eXBlKSB7XG4gICAgICAgIHRoaXMuX2NvbmZpZy50eXBlID0gdHlwZTtcbiAgICB9XG4gICAgZ2V0IGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcuZGF0YTtcbiAgICB9XG4gICAgc2V0IGRhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLl9jb25maWcuZGF0YSA9IGluaXREYXRhKGRhdGEpO1xuICAgIH1cbiAgICBnZXQgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5vcHRpb25zO1xuICAgIH1cbiAgICBzZXQgb3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IHBsdWdpbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcucGx1Z2lucztcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLl9jb25maWc7XG4gICAgICAgIHRoaXMuY2xlYXJDYWNoZSgpO1xuICAgICAgICBpbml0T3B0aW9ucyhjb25maWcpO1xuICAgIH1cbiAgICBjbGVhckNhY2hlKCkge1xuICAgICAgICB0aGlzLl9zY29wZUNhY2hlLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVyQ2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gZGF0YXNldFNjb3BlS2V5cyhkYXRhc2V0VHlwZSkge1xuICAgICAgICByZXR1cm4gY2FjaGVkS2V5cyhkYXRhc2V0VHlwZSwgKCk9PltcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfWAsXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSk7XG4gICAgfVxuIGRhdGFzZXRBbmltYXRpb25TY29wZUtleXMoZGF0YXNldFR5cGUsIHRyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZEtleXMoYCR7ZGF0YXNldFR5cGV9LnRyYW5zaXRpb24uJHt0cmFuc2l0aW9ufWAsICgpPT5bXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX0udHJhbnNpdGlvbnMuJHt0cmFuc2l0aW9ufWAsXG4gICAgICAgICAgICAgICAgICAgIGB0cmFuc2l0aW9ucy4ke3RyYW5zaXRpb259YFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xuICAgIH1cbiBkYXRhc2V0RWxlbWVudFNjb3BlS2V5cyhkYXRhc2V0VHlwZSwgZWxlbWVudFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZEtleXMoYCR7ZGF0YXNldFR5cGV9LSR7ZWxlbWVudFR5cGV9YCwgKCk9PltcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfS5lbGVtZW50cy4ke2VsZW1lbnRUeXBlfWAsXG4gICAgICAgICAgICAgICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfWAsXG4gICAgICAgICAgICAgICAgICAgIGBlbGVtZW50cy4ke2VsZW1lbnRUeXBlfWAsXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSk7XG4gICAgfVxuIHBsdWdpblNjb3BlS2V5cyhwbHVnaW4pIHtcbiAgICAgICAgY29uc3QgaWQgPSBwbHVnaW4uaWQ7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLnR5cGU7XG4gICAgICAgIHJldHVybiBjYWNoZWRLZXlzKGAke3R5cGV9LXBsdWdpbi0ke2lkfWAsICgpPT5bXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBgcGx1Z2lucy4ke2lkfWAsXG4gICAgICAgICAgICAgICAgICAgIC4uLnBsdWdpbi5hZGRpdGlvbmFsT3B0aW9uU2NvcGVzIHx8IFtdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSk7XG4gICAgfVxuIF9jYWNoZWRTY29wZXMobWFpblNjb3BlLCByZXNldENhY2hlKSB7XG4gICAgICAgIGNvbnN0IF9zY29wZUNhY2hlID0gdGhpcy5fc2NvcGVDYWNoZTtcbiAgICAgICAgbGV0IGNhY2hlID0gX3Njb3BlQ2FjaGUuZ2V0KG1haW5TY29wZSk7XG4gICAgICAgIGlmICghY2FjaGUgfHwgcmVzZXRDYWNoZSkge1xuICAgICAgICAgICAgY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBfc2NvcGVDYWNoZS5zZXQobWFpblNjb3BlLCBjYWNoZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhY2hlO1xuICAgIH1cbiBnZXRPcHRpb25TY29wZXMobWFpblNjb3BlLCBrZXlMaXN0cywgcmVzZXRDYWNoZSkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgLCB0eXBlICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZWRTY29wZXMobWFpblNjb3BlLCByZXNldENhY2hlKTtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGtleUxpc3RzKTtcbiAgICAgICAgaWYgKGNhY2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY29wZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIGtleUxpc3RzLmZvckVhY2goKGtleXMpPT57XG4gICAgICAgICAgICBpZiAobWFpblNjb3BlKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVzLmFkZChtYWluU2NvcGUpO1xuICAgICAgICAgICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KT0+YWRkSWZGb3VuZChzY29wZXMsIG1haW5TY29wZSwga2V5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXlzLmZvckVhY2goKGtleSk9PmFkZElmRm91bmQoc2NvcGVzLCBvcHRpb25zLCBrZXkpKTtcbiAgICAgICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KT0+YWRkSWZGb3VuZChzY29wZXMsIG92ZXJyaWRlc1t0eXBlXSB8fCB7fSwga2V5KSk7XG4gICAgICAgICAgICBrZXlzLmZvckVhY2goKGtleSk9PmFkZElmRm91bmQoc2NvcGVzLCBkZWZhdWx0cywga2V5KSk7XG4gICAgICAgICAgICBrZXlzLmZvckVhY2goKGtleSk9PmFkZElmRm91bmQoc2NvcGVzLCBkZXNjcmlwdG9ycywga2V5KSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBhcnJheSA9IEFycmF5LmZyb20oc2NvcGVzKTtcbiAgICAgICAgaWYgKGFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgYXJyYXkucHVzaChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoa2V5c0NhY2hlZC5oYXMoa2V5TGlzdHMpKSB7XG4gICAgICAgICAgICBjYWNoZS5zZXQoa2V5TGlzdHMsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuIGNoYXJ0T3B0aW9uU2NvcGVzKCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgLCB0eXBlICB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICBvdmVycmlkZXNbdHlwZV0gfHwge30sXG4gICAgICAgICAgICBkZWZhdWx0cy5kYXRhc2V0c1t0eXBlXSB8fCB7fSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVmYXVsdHMsXG4gICAgICAgICAgICBkZXNjcmlwdG9yc1xuICAgICAgICBdO1xuICAgIH1cbiByZXNvbHZlTmFtZWRPcHRpb25zKHNjb3BlcywgbmFtZXMsIGNvbnRleHQsIHByZWZpeGVzID0gW1xuICAgICAgICAnJ1xuICAgIF0pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgICAgJHNoYXJlZDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB7IHJlc29sdmVyICwgc3ViUHJlZml4ZXMgIH0gPSBnZXRSZXNvbHZlcih0aGlzLl9yZXNvbHZlckNhY2hlLCBzY29wZXMsIHByZWZpeGVzKTtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSByZXNvbHZlcjtcbiAgICAgICAgaWYgKG5lZWRDb250ZXh0KHJlc29sdmVyLCBuYW1lcykpIHtcbiAgICAgICAgICAgIHJlc3VsdC4kc2hhcmVkID0gZmFsc2U7XG4gICAgICAgICAgICBjb250ZXh0ID0gaXNGdW5jdGlvbihjb250ZXh0KSA/IGNvbnRleHQoKSA6IGNvbnRleHQ7XG4gICAgICAgICAgICBjb25zdCBzdWJSZXNvbHZlciA9IHRoaXMuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBjb250ZXh0LCBzdWJQcmVmaXhlcyk7XG4gICAgICAgICAgICBvcHRpb25zID0gX2F0dGFjaENvbnRleHQocmVzb2x2ZXIsIGNvbnRleHQsIHN1YlJlc29sdmVyKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHByb3Agb2YgbmFtZXMpe1xuICAgICAgICAgICAgcmVzdWx0W3Byb3BdID0gb3B0aW9uc1twcm9wXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiBjcmVhdGVSZXNvbHZlcihzY29wZXMsIGNvbnRleHQsIHByZWZpeGVzID0gW1xuICAgICAgICAnJ1xuICAgIF0sIGRlc2NyaXB0b3JEZWZhdWx0cykge1xuICAgICAgICBjb25zdCB7IHJlc29sdmVyICB9ID0gZ2V0UmVzb2x2ZXIodGhpcy5fcmVzb2x2ZXJDYWNoZSwgc2NvcGVzLCBwcmVmaXhlcyk7XG4gICAgICAgIHJldHVybiBpc09iamVjdChjb250ZXh0KSA/IF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBjb250ZXh0LCB1bmRlZmluZWQsIGRlc2NyaXB0b3JEZWZhdWx0cykgOiByZXNvbHZlcjtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRSZXNvbHZlcihyZXNvbHZlckNhY2hlLCBzY29wZXMsIHByZWZpeGVzKSB7XG4gICAgbGV0IGNhY2hlID0gcmVzb2x2ZXJDYWNoZS5nZXQoc2NvcGVzKTtcbiAgICBpZiAoIWNhY2hlKSB7XG4gICAgICAgIGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICByZXNvbHZlckNhY2hlLnNldChzY29wZXMsIGNhY2hlKTtcbiAgICB9XG4gICAgY29uc3QgY2FjaGVLZXkgPSBwcmVmaXhlcy5qb2luKCk7XG4gICAgbGV0IGNhY2hlZCA9IGNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgaWYgKCFjYWNoZWQpIHtcbiAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBfY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBwcmVmaXhlcyk7XG4gICAgICAgIGNhY2hlZCA9IHtcbiAgICAgICAgICAgIHJlc29sdmVyLFxuICAgICAgICAgICAgc3ViUHJlZml4ZXM6IHByZWZpeGVzLmZpbHRlcigocCk9PiFwLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2hvdmVyJykpXG4gICAgICAgIH07XG4gICAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgY2FjaGVkKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlZDtcbn1cbmNvbnN0IGhhc0Z1bmN0aW9uID0gKHZhbHVlKT0+aXNPYmplY3QodmFsdWUpICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKS5yZWR1Y2UoKGFjYywga2V5KT0+YWNjIHx8IGlzRnVuY3Rpb24odmFsdWVba2V5XSksIGZhbHNlKTtcbmZ1bmN0aW9uIG5lZWRDb250ZXh0KHByb3h5LCBuYW1lcykge1xuICAgIGNvbnN0IHsgaXNTY3JpcHRhYmxlICwgaXNJbmRleGFibGUgIH0gPSBfZGVzY3JpcHRvcnMocHJveHkpO1xuICAgIGZvciAoY29uc3QgcHJvcCBvZiBuYW1lcyl7XG4gICAgICAgIGNvbnN0IHNjcmlwdGFibGUgPSBpc1NjcmlwdGFibGUocHJvcCk7XG4gICAgICAgIGNvbnN0IGluZGV4YWJsZSA9IGlzSW5kZXhhYmxlKHByb3ApO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IChpbmRleGFibGUgfHwgc2NyaXB0YWJsZSkgJiYgcHJveHlbcHJvcF07XG4gICAgICAgIGlmIChzY3JpcHRhYmxlICYmIChpc0Z1bmN0aW9uKHZhbHVlKSB8fCBoYXNGdW5jdGlvbih2YWx1ZSkpIHx8IGluZGV4YWJsZSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgdmVyc2lvbiA9IFwiNC4zLjBcIjtcblxuY29uc3QgS05PV05fUE9TSVRJT05TID0gW1xuICAgICd0b3AnLFxuICAgICdib3R0b20nLFxuICAgICdsZWZ0JyxcbiAgICAncmlnaHQnLFxuICAgICdjaGFydEFyZWEnXG5dO1xuZnVuY3Rpb24gcG9zaXRpb25Jc0hvcml6b250YWwocG9zaXRpb24sIGF4aXMpIHtcbiAgICByZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJyB8fCBLTk9XTl9QT1NJVElPTlMuaW5kZXhPZihwb3NpdGlvbikgPT09IC0xICYmIGF4aXMgPT09ICd4Jztcbn1cbmZ1bmN0aW9uIGNvbXBhcmUyTGV2ZWwobDEsIGwyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGFbbDFdID09PSBiW2wxXSA/IGFbbDJdIC0gYltsMl0gOiBhW2wxXSAtIGJbbDFdO1xuICAgIH07XG59XG5mdW5jdGlvbiBvbkFuaW1hdGlvbnNDb21wbGV0ZShjb250ZXh0KSB7XG4gICAgY29uc3QgY2hhcnQgPSBjb250ZXh0LmNoYXJ0O1xuICAgIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmFuaW1hdGlvbjtcbiAgICBjaGFydC5ub3RpZnlQbHVnaW5zKCdhZnRlclJlbmRlcicpO1xuICAgIGNhbGxiYWNrKGFuaW1hdGlvbk9wdGlvbnMgJiYgYW5pbWF0aW9uT3B0aW9ucy5vbkNvbXBsZXRlLCBbXG4gICAgICAgIGNvbnRleHRcbiAgICBdLCBjaGFydCk7XG59XG5mdW5jdGlvbiBvbkFuaW1hdGlvblByb2dyZXNzKGNvbnRleHQpIHtcbiAgICBjb25zdCBjaGFydCA9IGNvbnRleHQuY2hhcnQ7XG4gICAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uO1xuICAgIGNhbGxiYWNrKGFuaW1hdGlvbk9wdGlvbnMgJiYgYW5pbWF0aW9uT3B0aW9ucy5vblByb2dyZXNzLCBbXG4gICAgICAgIGNvbnRleHRcbiAgICBdLCBjaGFydCk7XG59XG4gZnVuY3Rpb24gZ2V0Q2FudmFzKGl0ZW0pIHtcbiAgICBpZiAoX2lzRG9tU3VwcG9ydGVkKCkgJiYgdHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGl0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtKTtcbiAgICB9IGVsc2UgaWYgKGl0ZW0gJiYgaXRlbS5sZW5ndGgpIHtcbiAgICAgICAgaXRlbSA9IGl0ZW1bMF07XG4gICAgfVxuICAgIGlmIChpdGVtICYmIGl0ZW0uY2FudmFzKSB7XG4gICAgICAgIGl0ZW0gPSBpdGVtLmNhbnZhcztcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG59XG5jb25zdCBpbnN0YW5jZXMgPSB7fTtcbmNvbnN0IGdldENoYXJ0ID0gKGtleSk9PntcbiAgICBjb25zdCBjYW52YXMgPSBnZXRDYW52YXMoa2V5KTtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhpbnN0YW5jZXMpLmZpbHRlcigoYyk9PmMuY2FudmFzID09PSBjYW52YXMpLnBvcCgpO1xufTtcbmZ1bmN0aW9uIG1vdmVOdW1lcmljS2V5cyhvYmosIHN0YXJ0LCBtb3ZlKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cyl7XG4gICAgICAgIGNvbnN0IGludEtleSA9ICtrZXk7XG4gICAgICAgIGlmIChpbnRLZXkgPj0gc3RhcnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgICAgICBkZWxldGUgb2JqW2tleV07XG4gICAgICAgICAgICBpZiAobW92ZSA+IDAgfHwgaW50S2V5ID4gc3RhcnQpIHtcbiAgICAgICAgICAgICAgICBvYmpbaW50S2V5ICsgbW92ZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiBmdW5jdGlvbiBkZXRlcm1pbmVMYXN0RXZlbnQoZSwgbGFzdEV2ZW50LCBpbkNoYXJ0QXJlYSwgaXNDbGljaykge1xuICAgIGlmICghaW5DaGFydEFyZWEgfHwgZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaXNDbGljaykge1xuICAgICAgICByZXR1cm4gbGFzdEV2ZW50O1xuICAgIH1cbiAgICByZXR1cm4gZTtcbn1cbmZ1bmN0aW9uIGdldERhdGFzZXRBcmVhKG1ldGEpIHtcbiAgICBjb25zdCB7IHhTY2FsZSAsIHlTY2FsZSAgfSA9IG1ldGE7XG4gICAgaWYgKHhTY2FsZSAmJiB5U2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IHhTY2FsZS5sZWZ0LFxuICAgICAgICAgICAgcmlnaHQ6IHhTY2FsZS5yaWdodCxcbiAgICAgICAgICAgIHRvcDogeVNjYWxlLnRvcCxcbiAgICAgICAgICAgIGJvdHRvbTogeVNjYWxlLmJvdHRvbVxuICAgICAgICB9O1xuICAgIH1cbn1cbmNsYXNzIENoYXJ0IHtcbiAgICBzdGF0aWMgZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBzdGF0aWMgaW5zdGFuY2VzID0gaW5zdGFuY2VzO1xuICAgIHN0YXRpYyBvdmVycmlkZXMgPSBvdmVycmlkZXM7XG4gICAgc3RhdGljIHJlZ2lzdHJ5ID0gcmVnaXN0cnk7XG4gICAgc3RhdGljIHZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIHN0YXRpYyBnZXRDaGFydCA9IGdldENoYXJ0O1xuICAgIHN0YXRpYyByZWdpc3RlciguLi5pdGVtcykge1xuICAgICAgICByZWdpc3RyeS5hZGQoLi4uaXRlbXMpO1xuICAgICAgICBpbnZhbGlkYXRlUGx1Z2lucygpO1xuICAgIH1cbiAgICBzdGF0aWMgdW5yZWdpc3RlciguLi5pdGVtcykge1xuICAgICAgICByZWdpc3RyeS5yZW1vdmUoLi4uaXRlbXMpO1xuICAgICAgICBpbnZhbGlkYXRlUGx1Z2lucygpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihpdGVtLCB1c2VyQ29uZmlnKXtcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWcgPSBuZXcgQ29uZmlnKHVzZXJDb25maWcpO1xuICAgICAgICBjb25zdCBpbml0aWFsQ2FudmFzID0gZ2V0Q2FudmFzKGl0ZW0pO1xuICAgICAgICBjb25zdCBleGlzdGluZ0NoYXJ0ID0gZ2V0Q2hhcnQoaW5pdGlhbENhbnZhcyk7XG4gICAgICAgIGlmIChleGlzdGluZ0NoYXJ0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbnZhcyBpcyBhbHJlYWR5IGluIHVzZS4gQ2hhcnQgd2l0aCBJRCBcXCcnICsgZXhpc3RpbmdDaGFydC5pZCArICdcXCcnICsgJyBtdXN0IGJlIGRlc3Ryb3llZCBiZWZvcmUgdGhlIGNhbnZhcyB3aXRoIElEIFxcJycgKyBleGlzdGluZ0NoYXJ0LmNhbnZhcy5pZCArICdcXCcgY2FuIGJlIHJldXNlZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKGNvbmZpZy5jaGFydE9wdGlvblNjb3BlcygpLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIHRoaXMucGxhdGZvcm0gPSBuZXcgKGNvbmZpZy5wbGF0Zm9ybSB8fCBfZGV0ZWN0UGxhdGZvcm0oaW5pdGlhbENhbnZhcykpKCk7XG4gICAgICAgIHRoaXMucGxhdGZvcm0udXBkYXRlQ29uZmlnKGNvbmZpZyk7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnBsYXRmb3JtLmFjcXVpcmVDb250ZXh0KGluaXRpYWxDYW52YXMsIG9wdGlvbnMuYXNwZWN0UmF0aW8pO1xuICAgICAgICBjb25zdCBjYW52YXMgPSBjb250ZXh0ICYmIGNvbnRleHQuY2FudmFzO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBjYW52YXMgJiYgY2FudmFzLmhlaWdodDtcbiAgICAgICAgY29uc3Qgd2lkdGggPSBjYW52YXMgJiYgY2FudmFzLndpZHRoO1xuICAgICAgICB0aGlzLmlkID0gdWlkKCk7XG4gICAgICAgIHRoaXMuY3R4ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9hc3BlY3RSYXRpbyA9IHRoaXMuYXNwZWN0UmF0aW87XG4gICAgICAgIHRoaXMuX2xheWVycyA9IFtdO1xuICAgICAgICB0aGlzLl9tZXRhc2V0cyA9IFtdO1xuICAgICAgICB0aGlzLl9zdGFja3MgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYm94ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jaGFydEFyZWEgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IFtdO1xuICAgICAgICB0aGlzLl9sYXN0RXZlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgICAgICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc29ydGVkTWV0YXNldHMgPSBbXTtcbiAgICAgICAgdGhpcy5zY2FsZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fcGx1Z2lucyA9IG5ldyBQbHVnaW5TZXJ2aWNlKCk7XG4gICAgICAgIHRoaXMuJHByb3hpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5faGlkZGVuSW5kaWNlcyA9IHt9O1xuICAgICAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbnNEaXNhYmxlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZG9SZXNpemUgPSBkZWJvdW5jZSgobW9kZSk9PnRoaXMudXBkYXRlKG1vZGUpLCBvcHRpb25zLnJlc2l6ZURlbGF5IHx8IDApO1xuICAgICAgICB0aGlzLl9kYXRhQ2hhbmdlcyA9IFtdO1xuICAgICAgICBpbnN0YW5jZXNbdGhpcy5pZF0gPSB0aGlzO1xuICAgICAgICBpZiAoIWNvbnRleHQgfHwgIWNhbnZhcykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgY2hhcnQ6IGNhbid0IGFjcXVpcmUgY29udGV4dCBmcm9tIHRoZSBnaXZlbiBpdGVtXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGFuaW1hdG9yLmxpc3Rlbih0aGlzLCAnY29tcGxldGUnLCBvbkFuaW1hdGlvbnNDb21wbGV0ZSk7XG4gICAgICAgIGFuaW1hdG9yLmxpc3Rlbih0aGlzLCAncHJvZ3Jlc3MnLCBvbkFuaW1hdGlvblByb2dyZXNzKTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZSgpO1xuICAgICAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgYXNwZWN0UmF0aW8oKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9uczogeyBhc3BlY3RSYXRpbyAsIG1haW50YWluQXNwZWN0UmF0aW8gIH0gLCB3aWR0aCAsIGhlaWdodCAsIF9hc3BlY3RSYXRpbyAgfSA9IHRoaXM7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZihhc3BlY3RSYXRpbykpIHtcbiAgICAgICAgICAgIHJldHVybiBhc3BlY3RSYXRpbztcbiAgICAgICAgfVxuICAgICAgICBpZiAobWFpbnRhaW5Bc3BlY3RSYXRpbyAmJiBfYXNwZWN0UmF0aW8pIHtcbiAgICAgICAgICAgIHJldHVybiBfYXNwZWN0UmF0aW87XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlaWdodCA/IHdpZHRoIC8gaGVpZ2h0IDogbnVsbDtcbiAgICB9XG4gICAgZ2V0IGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5kYXRhO1xuICAgIH1cbiAgICBzZXQgZGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgICBnZXQgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gICAgfVxuICAgIHNldCBvcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jb25maWcub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGdldCByZWdpc3RyeSgpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdHJ5O1xuICAgIH1cbiBfaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVJbml0Jyk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldGluYVNjYWxlKHRoaXMsIHRoaXMub3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckluaXQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICBjbGVhckNhbnZhcyh0aGlzLmNhbnZhcywgdGhpcy5jdHgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgYW5pbWF0b3Iuc3RvcCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuIHJlc2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGlmICghYW5pbWF0b3IucnVubmluZyh0aGlzKSkge1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplQmVmb3JlRHJhdyA9IHtcbiAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgICAgICBjb25zdCBhc3BlY3RSYXRpbyA9IG9wdGlvbnMubWFpbnRhaW5Bc3BlY3RSYXRpbyAmJiB0aGlzLmFzcGVjdFJhdGlvO1xuICAgICAgICBjb25zdCBuZXdTaXplID0gdGhpcy5wbGF0Zm9ybS5nZXRNYXhpbXVtU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKTtcbiAgICAgICAgY29uc3QgbmV3UmF0aW8gPSBvcHRpb25zLmRldmljZVBpeGVsUmF0aW8gfHwgdGhpcy5wbGF0Zm9ybS5nZXREZXZpY2VQaXhlbFJhdGlvKCk7XG4gICAgICAgIGNvbnN0IG1vZGUgPSB0aGlzLndpZHRoID8gJ3Jlc2l6ZScgOiAnYXR0YWNoJztcbiAgICAgICAgdGhpcy53aWR0aCA9IG5ld1NpemUud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gbmV3U2l6ZS5oZWlnaHQ7XG4gICAgICAgIHRoaXMuX2FzcGVjdFJhdGlvID0gdGhpcy5hc3BlY3RSYXRpbztcbiAgICAgICAgaWYgKCFyZXRpbmFTY2FsZSh0aGlzLCBuZXdSYXRpbywgdHJ1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ3Jlc2l6ZScsIHtcbiAgICAgICAgICAgIHNpemU6IG5ld1NpemVcbiAgICAgICAgfSk7XG4gICAgICAgIGNhbGxiYWNrKG9wdGlvbnMub25SZXNpemUsIFtcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBuZXdTaXplXG4gICAgICAgIF0sIHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RvUmVzaXplKG1vZGUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbnN1cmVTY2FsZXNIYXZlSURzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzY2FsZXNPcHRpb25zID0gb3B0aW9ucy5zY2FsZXMgfHwge307XG4gICAgICAgIGVhY2goc2NhbGVzT3B0aW9ucywgKGF4aXNPcHRpb25zLCBheGlzSUQpPT57XG4gICAgICAgICAgICBheGlzT3B0aW9ucy5pZCA9IGF4aXNJRDtcbiAgICAgICAgfSk7XG4gICAgfVxuIGJ1aWxkT3JVcGRhdGVTY2FsZXMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNjYWxlT3B0cyA9IG9wdGlvbnMuc2NhbGVzO1xuICAgICAgICBjb25zdCBzY2FsZXMgPSB0aGlzLnNjYWxlcztcbiAgICAgICAgY29uc3QgdXBkYXRlZCA9IE9iamVjdC5rZXlzKHNjYWxlcykucmVkdWNlKChvYmosIGlkKT0+e1xuICAgICAgICAgICAgb2JqW2lkXSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSwge30pO1xuICAgICAgICBsZXQgaXRlbXMgPSBbXTtcbiAgICAgICAgaWYgKHNjYWxlT3B0cykge1xuICAgICAgICAgICAgaXRlbXMgPSBpdGVtcy5jb25jYXQoT2JqZWN0LmtleXMoc2NhbGVPcHRzKS5tYXAoKGlkKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlT3B0aW9ucyA9IHNjYWxlT3B0c1tpZF07XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpcyA9IGRldGVybWluZUF4aXMoaWQsIHNjYWxlT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNSYWRpYWwgPSBheGlzID09PSAncic7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gYXhpcyA9PT0gJ3gnO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHNjYWxlT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgZHBvc2l0aW9uOiBpc1JhZGlhbCA/ICdjaGFydEFyZWEnIDogaXNIb3Jpem9udGFsID8gJ2JvdHRvbScgOiAnbGVmdCcsXG4gICAgICAgICAgICAgICAgICAgIGR0eXBlOiBpc1JhZGlhbCA/ICdyYWRpYWxMaW5lYXInIDogaXNIb3Jpem9udGFsID8gJ2NhdGVnb3J5JyA6ICdsaW5lYXInXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlYWNoKGl0ZW1zLCAoaXRlbSk9PntcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlT3B0aW9ucyA9IGl0ZW0ub3B0aW9ucztcbiAgICAgICAgICAgIGNvbnN0IGlkID0gc2NhbGVPcHRpb25zLmlkO1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IGRldGVybWluZUF4aXMoaWQsIHNjYWxlT3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBzY2FsZVR5cGUgPSB2YWx1ZU9yRGVmYXVsdChzY2FsZU9wdGlvbnMudHlwZSwgaXRlbS5kdHlwZSk7XG4gICAgICAgICAgICBpZiAoc2NhbGVPcHRpb25zLnBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb25Jc0hvcml6b250YWwoc2NhbGVPcHRpb25zLnBvc2l0aW9uLCBheGlzKSAhPT0gcG9zaXRpb25Jc0hvcml6b250YWwoaXRlbS5kcG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgc2NhbGVPcHRpb25zLnBvc2l0aW9uID0gaXRlbS5kcG9zaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cGRhdGVkW2lkXSA9IHRydWU7XG4gICAgICAgICAgICBsZXQgc2NhbGUgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGlkIGluIHNjYWxlcyAmJiBzY2FsZXNbaWRdLnR5cGUgPT09IHNjYWxlVHlwZSkge1xuICAgICAgICAgICAgICAgIHNjYWxlID0gc2NhbGVzW2lkXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NhbGVDbGFzcyA9IHJlZ2lzdHJ5LmdldFNjYWxlKHNjYWxlVHlwZSk7XG4gICAgICAgICAgICAgICAgc2NhbGUgPSBuZXcgc2NhbGVDbGFzcyh7XG4gICAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBzY2FsZVR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGN0eDogdGhpcy5jdHgsXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0OiB0aGlzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2NhbGVzW3NjYWxlLmlkXSA9IHNjYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2NhbGUuaW5pdChzY2FsZU9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICAgICAgZWFjaCh1cGRhdGVkLCAoaGFzVXBkYXRlZCwgaWQpPT57XG4gICAgICAgICAgICBpZiAoIWhhc1VwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgc2NhbGVzW2lkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGVhY2goc2NhbGVzLCAoc2NhbGUpPT57XG4gICAgICAgICAgICBsYXlvdXRzLmNvbmZpZ3VyZSh0aGlzLCBzY2FsZSwgc2NhbGUub3B0aW9ucyk7XG4gICAgICAgICAgICBsYXlvdXRzLmFkZEJveCh0aGlzLCBzY2FsZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiBfdXBkYXRlTWV0YXNldHMoKSB7XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fbWV0YXNldHM7XG4gICAgICAgIGNvbnN0IG51bURhdGEgPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBudW1NZXRhID0gbWV0YXNldHMubGVuZ3RoO1xuICAgICAgICBtZXRhc2V0cy5zb3J0KChhLCBiKT0+YS5pbmRleCAtIGIuaW5kZXgpO1xuICAgICAgICBpZiAobnVtTWV0YSA+IG51bURhdGEpIHtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IG51bURhdGE7IGkgPCBudW1NZXRhOyArK2kpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGFzZXRzLnNwbGljZShudW1EYXRhLCBudW1NZXRhIC0gbnVtRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc29ydGVkTWV0YXNldHMgPSBtZXRhc2V0cy5zbGljZSgwKS5zb3J0KGNvbXBhcmUyTGV2ZWwoJ29yZGVyJywgJ2luZGV4JykpO1xuICAgIH1cbiBfcmVtb3ZlVW5yZWZlcmVuY2VkTWV0YXNldHMoKSB7XG4gICAgICAgIGNvbnN0IHsgX21ldGFzZXRzOiBtZXRhc2V0cyAsIGRhdGE6IHsgZGF0YXNldHMgIH0gIH0gPSB0aGlzO1xuICAgICAgICBpZiAobWV0YXNldHMubGVuZ3RoID4gZGF0YXNldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fc3RhY2tzO1xuICAgICAgICB9XG4gICAgICAgIG1ldGFzZXRzLmZvckVhY2goKG1ldGEsIGluZGV4KT0+e1xuICAgICAgICAgICAgaWYgKGRhdGFzZXRzLmZpbHRlcigoeCk9PnggPT09IG1ldGEuX2RhdGFzZXQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBidWlsZE9yVXBkYXRlQ29udHJvbGxlcnMoKSB7XG4gICAgICAgIGNvbnN0IG5ld0NvbnRyb2xsZXJzID0gW107XG4gICAgICAgIGNvbnN0IGRhdGFzZXRzID0gdGhpcy5kYXRhLmRhdGFzZXRzO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgdGhpcy5fcmVtb3ZlVW5yZWZlcmVuY2VkTWV0YXNldHMoKTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFzZXQgPSBkYXRhc2V0c1tpXTtcbiAgICAgICAgICAgIGxldCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBkYXRhc2V0LnR5cGUgfHwgdGhpcy5jb25maWcudHlwZTtcbiAgICAgICAgICAgIGlmIChtZXRhLnR5cGUgJiYgbWV0YS50eXBlICE9PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgICAgIG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0YS50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIG1ldGEuaW5kZXhBeGlzID0gZGF0YXNldC5pbmRleEF4aXMgfHwgZ2V0SW5kZXhBeGlzKHR5cGUsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICBtZXRhLm9yZGVyID0gZGF0YXNldC5vcmRlciB8fCAwO1xuICAgICAgICAgICAgbWV0YS5pbmRleCA9IGk7XG4gICAgICAgICAgICBtZXRhLmxhYmVsID0gJycgKyBkYXRhc2V0LmxhYmVsO1xuICAgICAgICAgICAgbWV0YS52aXNpYmxlID0gdGhpcy5pc0RhdGFzZXRWaXNpYmxlKGkpO1xuICAgICAgICAgICAgaWYgKG1ldGEuY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIG1ldGEuY29udHJvbGxlci51cGRhdGVJbmRleChpKTtcbiAgICAgICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXIubGlua1NjYWxlcygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBDb250cm9sbGVyQ2xhc3MgPSByZWdpc3RyeS5nZXRDb250cm9sbGVyKHR5cGUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YXNldEVsZW1lbnRUeXBlICwgZGF0YUVsZW1lbnRUeXBlICB9ID0gZGVmYXVsdHMuZGF0YXNldHNbdHlwZV07XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihDb250cm9sbGVyQ2xhc3MsIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiByZWdpc3RyeS5nZXRFbGVtZW50KGRhdGFFbGVtZW50VHlwZSksXG4gICAgICAgICAgICAgICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogZGF0YXNldEVsZW1lbnRUeXBlICYmIHJlZ2lzdHJ5LmdldEVsZW1lbnQoZGF0YXNldEVsZW1lbnRUeXBlKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1ldGEuY29udHJvbGxlciA9IG5ldyBDb250cm9sbGVyQ2xhc3ModGhpcywgaSk7XG4gICAgICAgICAgICAgICAgbmV3Q29udHJvbGxlcnMucHVzaChtZXRhLmNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZU1ldGFzZXRzKCk7XG4gICAgICAgIHJldHVybiBuZXdDb250cm9sbGVycztcbiAgICB9XG4gX3Jlc2V0RWxlbWVudHMoKSB7XG4gICAgICAgIGVhY2godGhpcy5kYXRhLmRhdGFzZXRzLCAoZGF0YXNldCwgZGF0YXNldEluZGV4KT0+e1xuICAgICAgICAgICAgdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXIucmVzZXQoKTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgfVxuIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl9yZXNldEVsZW1lbnRzKCk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygncmVzZXQnKTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgICAgIGNvbmZpZy51cGRhdGUoKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoY29uZmlnLmNoYXJ0T3B0aW9uU2NvcGVzKCksIHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY29uc3QgYW5pbXNEaXNhYmxlZCA9IHRoaXMuX2FuaW1hdGlvbnNEaXNhYmxlZCA9ICFvcHRpb25zLmFuaW1hdGlvbjtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2NhbGVzKCk7XG4gICAgICAgIHRoaXMuX2NoZWNrRXZlbnRCaW5kaW5ncygpO1xuICAgICAgICB0aGlzLl91cGRhdGVIaWRkZW5JbmRpY2VzKCk7XG4gICAgICAgIHRoaXMuX3BsdWdpbnMuaW52YWxpZGF0ZSgpO1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVVcGRhdGUnLCB7XG4gICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdDb250cm9sbGVycyA9IHRoaXMuYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRWxlbWVudHNVcGRhdGUnKTtcbiAgICAgICAgbGV0IG1pblBhZGRpbmcgPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgICAgICBjb25zdCB7IGNvbnRyb2xsZXIgIH0gPSB0aGlzLmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgY29uc3QgcmVzZXQgPSAhYW5pbXNEaXNhYmxlZCAmJiBuZXdDb250cm9sbGVycy5pbmRleE9mKGNvbnRyb2xsZXIpID09PSAtMTtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuYnVpbGRPclVwZGF0ZUVsZW1lbnRzKHJlc2V0KTtcbiAgICAgICAgICAgIG1pblBhZGRpbmcgPSBNYXRoLm1heCgrY29udHJvbGxlci5nZXRNYXhPdmVyZmxvdygpLCBtaW5QYWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBtaW5QYWRkaW5nID0gdGhpcy5fbWluUGFkZGluZyA9IG9wdGlvbnMubGF5b3V0LmF1dG9QYWRkaW5nID8gbWluUGFkZGluZyA6IDA7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUxheW91dChtaW5QYWRkaW5nKTtcbiAgICAgICAgaWYgKCFhbmltc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICBlYWNoKG5ld0NvbnRyb2xsZXJzLCAoY29udHJvbGxlcik9PntcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnJlc2V0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cGRhdGVEYXRhc2V0cyhtb2RlKTtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlclVwZGF0ZScsIHtcbiAgICAgICAgICAgIG1vZGVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2xheWVycy5zb3J0KGNvbXBhcmUyTGV2ZWwoJ3onLCAnX2lkeCcpKTtcbiAgICAgICAgY29uc3QgeyBfYWN0aXZlICwgX2xhc3RFdmVudCAgfSA9IHRoaXM7XG4gICAgICAgIGlmIChfbGFzdEV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudEhhbmRsZXIoX2xhc3RFdmVudCwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoX2FjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKF9hY3RpdmUsIF9hY3RpdmUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuIF91cGRhdGVTY2FsZXMoKSB7XG4gICAgICAgIGVhY2godGhpcy5zY2FsZXMsIChzY2FsZSk9PntcbiAgICAgICAgICAgIGxheW91dHMucmVtb3ZlQm94KHRoaXMsIHNjYWxlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZW5zdXJlU2NhbGVzSGF2ZUlEcygpO1xuICAgICAgICB0aGlzLmJ1aWxkT3JVcGRhdGVTY2FsZXMoKTtcbiAgICB9XG4gX2NoZWNrRXZlbnRCaW5kaW5ncygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgZXhpc3RpbmdFdmVudHMgPSBuZXcgU2V0KE9iamVjdC5rZXlzKHRoaXMuX2xpc3RlbmVycykpO1xuICAgICAgICBjb25zdCBuZXdFdmVudHMgPSBuZXcgU2V0KG9wdGlvbnMuZXZlbnRzKTtcbiAgICAgICAgaWYgKCFzZXRzRXF1YWwoZXhpc3RpbmdFdmVudHMsIG5ld0V2ZW50cykgfHwgISF0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzICE9PSBvcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgICAgICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XG4gICAgICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgICAgICAgfVxuICAgIH1cbiBfdXBkYXRlSGlkZGVuSW5kaWNlcygpIHtcbiAgICAgICAgY29uc3QgeyBfaGlkZGVuSW5kaWNlcyAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGNoYW5nZXMgPSB0aGlzLl9nZXRVbmlmb3JtRGF0YUNoYW5nZXMoKSB8fCBbXTtcbiAgICAgICAgZm9yIChjb25zdCB7IG1ldGhvZCAsIHN0YXJ0ICwgY291bnQgIH0gb2YgY2hhbmdlcyl7XG4gICAgICAgICAgICBjb25zdCBtb3ZlID0gbWV0aG9kID09PSAnX3JlbW92ZUVsZW1lbnRzJyA/IC1jb3VudCA6IGNvdW50O1xuICAgICAgICAgICAgbW92ZU51bWVyaWNLZXlzKF9oaWRkZW5JbmRpY2VzLCBzdGFydCwgbW92ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gX2dldFVuaWZvcm1EYXRhQ2hhbmdlcygpIHtcbiAgICAgICAgY29uc3QgX2RhdGFDaGFuZ2VzID0gdGhpcy5fZGF0YUNoYW5nZXM7XG4gICAgICAgIGlmICghX2RhdGFDaGFuZ2VzIHx8ICFfZGF0YUNoYW5nZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGF0YUNoYW5nZXMgPSBbXTtcbiAgICAgICAgY29uc3QgZGF0YXNldENvdW50ID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbWFrZVNldCA9IChpZHgpPT5uZXcgU2V0KF9kYXRhQ2hhbmdlcy5maWx0ZXIoKGMpPT5jWzBdID09PSBpZHgpLm1hcCgoYywgaSk9PmkgKyAnLCcgKyBjLnNwbGljZSgxKS5qb2luKCcsJykpKTtcbiAgICAgICAgY29uc3QgY2hhbmdlU2V0ID0gbWFrZVNldCgwKTtcbiAgICAgICAgZm9yKGxldCBpID0gMTsgaSA8IGRhdGFzZXRDb3VudDsgaSsrKXtcbiAgICAgICAgICAgIGlmICghc2V0c0VxdWFsKGNoYW5nZVNldCwgbWFrZVNldChpKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oY2hhbmdlU2V0KS5tYXAoKGMpPT5jLnNwbGl0KCcsJykpLm1hcCgoYSk9Pih7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBhWzFdLFxuICAgICAgICAgICAgICAgIHN0YXJ0OiArYVsyXSxcbiAgICAgICAgICAgICAgICBjb3VudDogK2FbM11cbiAgICAgICAgICAgIH0pKTtcbiAgICB9XG4gX3VwZGF0ZUxheW91dChtaW5QYWRkaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUxheW91dCcsIHtcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGF5b3V0cy51cGRhdGUodGhpcywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIG1pblBhZGRpbmcpO1xuICAgICAgICBjb25zdCBhcmVhID0gdGhpcy5jaGFydEFyZWE7XG4gICAgICAgIGNvbnN0IG5vQXJlYSA9IGFyZWEud2lkdGggPD0gMCB8fCBhcmVhLmhlaWdodCA8PSAwO1xuICAgICAgICB0aGlzLl9sYXllcnMgPSBbXTtcbiAgICAgICAgZWFjaCh0aGlzLmJveGVzLCAoYm94KT0+e1xuICAgICAgICAgICAgaWYgKG5vQXJlYSAmJiBib3gucG9zaXRpb24gPT09ICdjaGFydEFyZWEnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJveC5jb25maWd1cmUpIHtcbiAgICAgICAgICAgICAgICBib3guY29uZmlndXJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9sYXllcnMucHVzaCguLi5ib3guX2xheWVycygpKTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIHRoaXMuX2xheWVycy5mb3JFYWNoKChpdGVtLCBpbmRleCk9PntcbiAgICAgICAgICAgIGl0ZW0uX2lkeCA9IGluZGV4O1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckxheW91dCcpO1xuICAgIH1cbiBfdXBkYXRlRGF0YXNldHMobW9kZSkge1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0c1VwZGF0ZScsIHtcbiAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRoaXMuZ2V0RGF0YXNldE1ldGEoaSkuY29udHJvbGxlci5jb25maWd1cmUoKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVEYXRhc2V0KGksIGlzRnVuY3Rpb24obW9kZSkgPyBtb2RlKHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXg6IGlcbiAgICAgICAgICAgIH0pIDogbW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRhdGFzZXRzVXBkYXRlJywge1xuICAgICAgICAgICAgbW9kZVxuICAgICAgICB9KTtcbiAgICB9XG4gX3VwZGF0ZURhdGFzZXQoaW5kZXgsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgbWV0YSxcbiAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldFVwZGF0ZScsIGFyZ3MpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG1ldGEuY29udHJvbGxlci5fdXBkYXRlKG1vZGUpO1xuICAgICAgICBhcmdzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRhdGFzZXRVcGRhdGUnLCBhcmdzKTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVSZW5kZXInLCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbmltYXRvci5oYXModGhpcykpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dGFjaGVkICYmICFhbmltYXRvci5ydW5uaW5nKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0b3Iuc3RhcnQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICAgICAgICAgIG9uQW5pbWF0aW9uc0NvbXBsZXRlKHtcbiAgICAgICAgICAgICAgICBjaGFydDogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZHJhdygpIHtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGlmICh0aGlzLl9yZXNpemVCZWZvcmVEcmF3KSB7XG4gICAgICAgICAgICBjb25zdCB7IHdpZHRoICwgaGVpZ2h0ICB9ID0gdGhpcy5fcmVzaXplQmVmb3JlRHJhdztcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgaWYgKHRoaXMud2lkdGggPD0gMCB8fCB0aGlzLmhlaWdodCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRHJhdycsIHtcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGF5ZXJzID0gdGhpcy5fbGF5ZXJzO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoICYmIGxheWVyc1tpXS56IDw9IDA7ICsraSl7XG4gICAgICAgICAgICBsYXllcnNbaV0uZHJhdyh0aGlzLmNoYXJ0QXJlYSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZHJhd0RhdGFzZXRzKCk7XG4gICAgICAgIGZvcig7IGkgPCBsYXllcnMubGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgbGF5ZXJzW2ldLmRyYXcodGhpcy5jaGFydEFyZWEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEcmF3Jyk7XG4gICAgfVxuIF9nZXRTb3J0ZWREYXRhc2V0TWV0YXMoZmlsdGVyVmlzaWJsZSkge1xuICAgICAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuX3NvcnRlZE1ldGFzZXRzO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gbWV0YXNldHNbaV07XG4gICAgICAgICAgICBpZiAoIWZpbHRlclZpc2libGUgfHwgbWV0YS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobWV0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFNvcnRlZERhdGFzZXRNZXRhcyh0cnVlKTtcbiAgICB9XG4gX2RyYXdEYXRhc2V0cygpIHtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldHNEcmF3Jywge1xuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgICAgICBmb3IobGV0IGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICB0aGlzLl9kcmF3RGF0YXNldChtZXRhc2V0c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRhdGFzZXRzRHJhdycpO1xuICAgIH1cbiBfZHJhd0RhdGFzZXQobWV0YSkge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3QgY2xpcCA9IG1ldGEuX2NsaXA7XG4gICAgICAgIGNvbnN0IHVzZUNsaXAgPSAhY2xpcC5kaXNhYmxlZDtcbiAgICAgICAgY29uc3QgYXJlYSA9IGdldERhdGFzZXRBcmVhKG1ldGEpIHx8IHRoaXMuY2hhcnRBcmVhO1xuICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgbWV0YSxcbiAgICAgICAgICAgIGluZGV4OiBtZXRhLmluZGV4LFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0RHJhdycsIGFyZ3MpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1c2VDbGlwKSB7XG4gICAgICAgICAgICBjbGlwQXJlYShjdHgsIHtcbiAgICAgICAgICAgICAgICBsZWZ0OiBjbGlwLmxlZnQgPT09IGZhbHNlID8gMCA6IGFyZWEubGVmdCAtIGNsaXAubGVmdCxcbiAgICAgICAgICAgICAgICByaWdodDogY2xpcC5yaWdodCA9PT0gZmFsc2UgPyB0aGlzLndpZHRoIDogYXJlYS5yaWdodCArIGNsaXAucmlnaHQsXG4gICAgICAgICAgICAgICAgdG9wOiBjbGlwLnRvcCA9PT0gZmFsc2UgPyAwIDogYXJlYS50b3AgLSBjbGlwLnRvcCxcbiAgICAgICAgICAgICAgICBib3R0b206IGNsaXAuYm90dG9tID09PSBmYWxzZSA/IHRoaXMuaGVpZ2h0IDogYXJlYS5ib3R0b20gKyBjbGlwLmJvdHRvbVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbWV0YS5jb250cm9sbGVyLmRyYXcoKTtcbiAgICAgICAgaWYgKHVzZUNsaXApIHtcbiAgICAgICAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICAgICAgfVxuICAgICAgICBhcmdzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRhdGFzZXREcmF3JywgYXJncyk7XG4gICAgfVxuIGlzUG9pbnRJbkFyZWEocG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIF9pc1BvaW50SW5BcmVhKHBvaW50LCB0aGlzLmNoYXJ0QXJlYSwgdGhpcy5fbWluUGFkZGluZyk7XG4gICAgfVxuICAgIGdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgbW9kZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCBtZXRob2QgPSBJbnRlcmFjdGlvbi5tb2Rlc1ttb2RlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXRob2QodGhpcywgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBnZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgICAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuX21ldGFzZXRzO1xuICAgICAgICBsZXQgbWV0YSA9IG1ldGFzZXRzLmZpbHRlcigoeCk9PnggJiYgeC5fZGF0YXNldCA9PT0gZGF0YXNldCkucG9wKCk7XG4gICAgICAgIGlmICghbWV0YSkge1xuICAgICAgICAgICAgbWV0YSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgICAgIGRhdGFzZXQ6IG51bGwsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogbnVsbCxcbiAgICAgICAgICAgICAgICBoaWRkZW46IG51bGwsXG4gICAgICAgICAgICAgICAgeEF4aXNJRDogbnVsbCxcbiAgICAgICAgICAgICAgICB5QXhpc0lEOiBudWxsLFxuICAgICAgICAgICAgICAgIG9yZGVyOiBkYXRhc2V0ICYmIGRhdGFzZXQub3JkZXIgfHwgMCxcbiAgICAgICAgICAgICAgICBpbmRleDogZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgIF9kYXRhc2V0OiBkYXRhc2V0LFxuICAgICAgICAgICAgICAgIF9wYXJzZWQ6IFtdLFxuICAgICAgICAgICAgICAgIF9zb3J0ZWQ6IGZhbHNlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbWV0YXNldHMucHVzaChtZXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWV0YTtcbiAgICB9XG4gICAgZ2V0Q29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGNvbnRleHQgfHwgKHRoaXMuJGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwsIHtcbiAgICAgICAgICAgIGNoYXJ0OiB0aGlzLFxuICAgICAgICAgICAgdHlwZTogJ2NoYXJ0J1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGdldFZpc2libGVEYXRhc2V0Q291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKS5sZW5ndGg7XG4gICAgfVxuICAgIGlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICAgICAgaWYgKCFkYXRhc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBtZXRhLmhpZGRlbiA9PT0gJ2Jvb2xlYW4nID8gIW1ldGEuaGlkZGVuIDogIWRhdGFzZXQuaGlkZGVuO1xuICAgIH1cbiAgICBzZXREYXRhc2V0VmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIHZpc2libGUpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgICAgbWV0YS5oaWRkZW4gPSAhdmlzaWJsZTtcbiAgICB9XG4gICAgdG9nZ2xlRGF0YVZpc2liaWxpdHkoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5faGlkZGVuSW5kaWNlc1tpbmRleF0gPSAhdGhpcy5faGlkZGVuSW5kaWNlc1tpbmRleF07XG4gICAgfVxuICAgIGdldERhdGFWaXNpYmlsaXR5KGluZGV4KSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5faGlkZGVuSW5kaWNlc1tpbmRleF07XG4gICAgfVxuIF91cGRhdGVWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4LCB2aXNpYmxlKSB7XG4gICAgICAgIGNvbnN0IG1vZGUgPSB2aXNpYmxlID8gJ3Nob3cnIDogJ2hpZGUnO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICBjb25zdCBhbmltcyA9IG1ldGEuY29udHJvbGxlci5fcmVzb2x2ZUFuaW1hdGlvbnModW5kZWZpbmVkLCBtb2RlKTtcbiAgICAgICAgaWYgKGRlZmluZWQoZGF0YUluZGV4KSkge1xuICAgICAgICAgICAgbWV0YS5kYXRhW2RhdGFJbmRleF0uaGlkZGVuID0gIXZpc2libGU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXREYXRhc2V0VmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIHZpc2libGUpO1xuICAgICAgICAgICAgYW5pbXMudXBkYXRlKG1ldGEsIHtcbiAgICAgICAgICAgICAgICB2aXNpYmxlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKChjdHgpPT5jdHguZGF0YXNldEluZGV4ID09PSBkYXRhc2V0SW5kZXggPyBtb2RlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoaWRlKGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIGZhbHNlKTtcbiAgICB9XG4gICAgc2hvdyhkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCkge1xuICAgICAgICB0aGlzLl91cGRhdGVWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4LCB0cnVlKTtcbiAgICB9XG4gX2Rlc3Ryb3lEYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX21ldGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGlmIChtZXRhICYmIG1ldGEuY29udHJvbGxlcikge1xuICAgICAgICAgICAgbWV0YS5jb250cm9sbGVyLl9kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMuX21ldGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgfVxuICAgIF9zdG9wKCkge1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIGFuaW1hdG9yLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEZXN0cm95Jyk7XG4gICAgICAgIGNvbnN0IHsgY2FudmFzICwgY3R4ICB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5fc3RvcCgpO1xuICAgICAgICB0aGlzLmNvbmZpZy5jbGVhckNhY2hlKCk7XG4gICAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XG4gICAgICAgICAgICBjbGVhckNhbnZhcyhjYW52YXMsIGN0eCk7XG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtLnJlbGVhc2VDb250ZXh0KGN0eCk7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmN0eCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIGluc3RhbmNlc1t0aGlzLmlkXTtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRlc3Ryb3knKTtcbiAgICB9XG4gICAgdG9CYXNlNjRJbWFnZSguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhcy50b0RhdGFVUkwoLi4uYXJncyk7XG4gICAgfVxuIGJpbmRFdmVudHMoKSB7XG4gICAgICAgIHRoaXMuYmluZFVzZXJFdmVudHMoKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRSZXNwb25zaXZlRXZlbnRzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiBiaW5kVXNlckV2ZW50cygpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICAgICAgICBjb25zdCBwbGF0Zm9ybSA9IHRoaXMucGxhdGZvcm07XG4gICAgICAgIGNvbnN0IF9hZGQgPSAodHlwZSwgbGlzdGVuZXIpPT57XG4gICAgICAgICAgICBwbGF0Zm9ybS5hZGRFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIGxpc3RlbmVyc1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBsaXN0ZW5lciA9IChlLCB4LCB5KT0+e1xuICAgICAgICAgICAgZS5vZmZzZXRYID0geDtcbiAgICAgICAgICAgIGUub2Zmc2V0WSA9IHk7XG4gICAgICAgICAgICB0aGlzLl9ldmVudEhhbmRsZXIoZSk7XG4gICAgICAgIH07XG4gICAgICAgIGVhY2godGhpcy5vcHRpb25zLmV2ZW50cywgKHR5cGUpPT5fYWRkKHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgfVxuIGJpbmRSZXNwb25zaXZlRXZlbnRzKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzO1xuICAgICAgICBjb25zdCBwbGF0Zm9ybSA9IHRoaXMucGxhdGZvcm07XG4gICAgICAgIGNvbnN0IF9hZGQgPSAodHlwZSwgbGlzdGVuZXIpPT57XG4gICAgICAgICAgICBwbGF0Zm9ybS5hZGRFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIGxpc3RlbmVyc1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBfcmVtb3ZlID0gKHR5cGUsIGxpc3RlbmVyKT0+e1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1t0eXBlXSkge1xuICAgICAgICAgICAgICAgIHBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsaXN0ZW5lcnNbdHlwZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKHdpZHRoLCBoZWlnaHQpPT57XG4gICAgICAgICAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGRldGFjaGVkO1xuICAgICAgICBjb25zdCBhdHRhY2hlZCA9ICgpPT57XG4gICAgICAgICAgICBfcmVtb3ZlKCdhdHRhY2gnLCBhdHRhY2hlZCk7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICAgICAgICBfYWRkKCdyZXNpemUnLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICBfYWRkKCdkZXRhY2gnLCBkZXRhY2hlZCk7XG4gICAgICAgIH07XG4gICAgICAgIGRldGFjaGVkID0gKCk9PntcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF9yZW1vdmUoJ3Jlc2l6ZScsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMuX3N0b3AoKTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZSgwLCAwKTtcbiAgICAgICAgICAgIF9hZGQoJ2F0dGFjaCcsIGF0dGFjaGVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHBsYXRmb3JtLmlzQXR0YWNoZWQodGhpcy5jYW52YXMpKSB7XG4gICAgICAgICAgICBhdHRhY2hlZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGV0YWNoZWQoKTtcbiAgICAgICAgfVxuICAgIH1cbiB1bmJpbmRFdmVudHMoKSB7XG4gICAgICAgIGVhY2godGhpcy5fbGlzdGVuZXJzLCAobGlzdGVuZXIsIHR5cGUpPT57XG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gICAgICAgIGVhY2godGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycywgKGxpc3RlbmVyLCB0eXBlKT0+e1xuICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHVwZGF0ZUhvdmVyU3R5bGUoaXRlbXMsIG1vZGUsIGVuYWJsZWQpIHtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gZW5hYmxlZCA/ICdzZXQnIDogJ3JlbW92ZSc7XG4gICAgICAgIGxldCBtZXRhLCBpdGVtLCBpLCBpbGVuO1xuICAgICAgICBpZiAobW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgICBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpdGVtc1swXS5kYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgbWV0YS5jb250cm9sbGVyWydfJyArIHByZWZpeCArICdEYXRhc2V0SG92ZXJTdHlsZSddKCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBpdGVtICYmIHRoaXMuZ2V0RGF0YXNldE1ldGEoaXRlbS5kYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXI7XG4gICAgICAgICAgICBpZiAoY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJbcHJlZml4ICsgJ0hvdmVyU3R5bGUnXShpdGVtLmVsZW1lbnQsIGl0ZW0uZGF0YXNldEluZGV4LCBpdGVtLmluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiBnZXRBY3RpdmVFbGVtZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgICB9XG4gc2V0QWN0aXZlRWxlbWVudHMoYWN0aXZlRWxlbWVudHMpIHtcbiAgICAgICAgY29uc3QgbGFzdEFjdGl2ZSA9IHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gYWN0aXZlRWxlbWVudHMubWFwKCh7IGRhdGFzZXRJbmRleCAsIGluZGV4ICB9KT0+e1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgICAgICAgIGlmICghbWV0YSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZGF0YXNldCBmb3VuZCBhdCBpbmRleCAnICsgZGF0YXNldEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IG1ldGEuZGF0YVtpbmRleF0sXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjaGFuZ2VkID0gIV9lbGVtZW50c0VxdWFsKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgICAgICB0aGlzLl9sYXN0RXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlSG92ZXJTdHlsZXMoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICAgICAgfVxuICAgIH1cbiBub3RpZnlQbHVnaW5zKGhvb2ssIGFyZ3MsIGZpbHRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGx1Z2lucy5ub3RpZnkodGhpcywgaG9vaywgYXJncywgZmlsdGVyKTtcbiAgICB9XG4gaXNQbHVnaW5FbmFibGVkKHBsdWdpbklkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wbHVnaW5zLl9jYWNoZS5maWx0ZXIoKHApPT5wLnBsdWdpbi5pZCA9PT0gcGx1Z2luSWQpLmxlbmd0aCA9PT0gMTtcbiAgICB9XG4gX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSwgcmVwbGF5KSB7XG4gICAgICAgIGNvbnN0IGhvdmVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucy5ob3ZlcjtcbiAgICAgICAgY29uc3QgZGlmZiA9IChhLCBiKT0+YS5maWx0ZXIoKHgpPT4hYi5zb21lKCh5KT0+eC5kYXRhc2V0SW5kZXggPT09IHkuZGF0YXNldEluZGV4ICYmIHguaW5kZXggPT09IHkuaW5kZXgpKTtcbiAgICAgICAgY29uc3QgZGVhY3RpdmF0ZWQgPSBkaWZmKGxhc3RBY3RpdmUsIGFjdGl2ZSk7XG4gICAgICAgIGNvbnN0IGFjdGl2YXRlZCA9IHJlcGxheSA/IGFjdGl2ZSA6IGRpZmYoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICAgICAgaWYgKGRlYWN0aXZhdGVkLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVIb3ZlclN0eWxlKGRlYWN0aXZhdGVkLCBob3Zlck9wdGlvbnMubW9kZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3RpdmF0ZWQubGVuZ3RoICYmIGhvdmVyT3B0aW9ucy5tb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUhvdmVyU3R5bGUoYWN0aXZhdGVkLCBob3Zlck9wdGlvbnMubW9kZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gX2V2ZW50SGFuZGxlcihlLCByZXBsYXkpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgIGV2ZW50OiBlLFxuICAgICAgICAgICAgcmVwbGF5LFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGluQ2hhcnRBcmVhOiB0aGlzLmlzUG9pbnRJbkFyZWEoZSlcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXZlbnRGaWx0ZXIgPSAocGx1Z2luKT0+KHBsdWdpbi5vcHRpb25zLmV2ZW50cyB8fCB0aGlzLm9wdGlvbnMuZXZlbnRzKS5pbmNsdWRlcyhlLm5hdGl2ZS50eXBlKTtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRXZlbnQnLCBhcmdzLCBldmVudEZpbHRlcikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhbmdlZCA9IHRoaXMuX2hhbmRsZUV2ZW50KGUsIHJlcGxheSwgYXJncy5pbkNoYXJ0QXJlYSk7XG4gICAgICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRXZlbnQnLCBhcmdzLCBldmVudEZpbHRlcik7XG4gICAgICAgIGlmIChjaGFuZ2VkIHx8IGFyZ3MuY2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gX2hhbmRsZUV2ZW50KGUsIHJlcGxheSwgaW5DaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3QgeyBfYWN0aXZlOiBsYXN0QWN0aXZlID0gW10gLCBvcHRpb25zICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgdXNlRmluYWxQb3NpdGlvbiA9IHJlcGxheTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5fZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgaW5DaGFydEFyZWEsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCBpc0NsaWNrID0gX2lzQ2xpY2tFdmVudChlKTtcbiAgICAgICAgY29uc3QgbGFzdEV2ZW50ID0gZGV0ZXJtaW5lTGFzdEV2ZW50KGUsIHRoaXMuX2xhc3RFdmVudCwgaW5DaGFydEFyZWEsIGlzQ2xpY2spO1xuICAgICAgICBpZiAoaW5DaGFydEFyZWEpIHtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RFdmVudCA9IG51bGw7XG4gICAgICAgICAgICBjYWxsYmFjayhvcHRpb25zLm9uSG92ZXIsIFtcbiAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgIGFjdGl2ZSxcbiAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgICAgIGlmIChpc0NsaWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sob3B0aW9ucy5vbkNsaWNrLCBbXG4gICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICAgICAgaWYgKGNoYW5nZWQgfHwgcmVwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhhY3RpdmUsIGxhc3RBY3RpdmUsIHJlcGxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gbGFzdEV2ZW50O1xuICAgICAgICByZXR1cm4gY2hhbmdlZDtcbiAgICB9XG4gX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIGluQ2hhcnRBcmVhLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWluQ2hhcnRBcmVhKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFzdEFjdGl2ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBob3Zlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuaG92ZXI7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgaG92ZXJPcHRpb25zLm1vZGUsIGhvdmVyT3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxufVxuZnVuY3Rpb24gaW52YWxpZGF0ZVBsdWdpbnMoKSB7XG4gICAgcmV0dXJuIGVhY2goQ2hhcnQuaW5zdGFuY2VzLCAoY2hhcnQpPT5jaGFydC5fcGx1Z2lucy5pbnZhbGlkYXRlKCkpO1xufVxuXG5mdW5jdGlvbiBjbGlwQXJjKGN0eCwgZWxlbWVudCwgZW5kQW5nbGUpIHtcbiAgICBjb25zdCB7IHN0YXJ0QW5nbGUgLCBwaXhlbE1hcmdpbiAsIHggLCB5ICwgb3V0ZXJSYWRpdXMgLCBpbm5lclJhZGl1cyAgfSA9IGVsZW1lbnQ7XG4gICAgbGV0IGFuZ2xlTWFyZ2luID0gcGl4ZWxNYXJnaW4gLyBvdXRlclJhZGl1cztcbiAgICAvLyBEcmF3IGFuIGlubmVyIGJvcmRlciBieSBjbGlwcGluZyB0aGUgYXJjIGFuZCBkcmF3aW5nIGEgZG91YmxlLXdpZHRoIGJvcmRlclxuICAgIC8vIEVubGFyZ2UgdGhlIGNsaXBwaW5nIGFyYyBieSAwLjMzIHBpeGVscyB0byBlbGltaW5hdGUgZ2xpdGNoZXMgYmV0d2VlbiBib3JkZXJzXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmMoeCwgeSwgb3V0ZXJSYWRpdXMsIHN0YXJ0QW5nbGUgLSBhbmdsZU1hcmdpbiwgZW5kQW5nbGUgKyBhbmdsZU1hcmdpbik7XG4gICAgaWYgKGlubmVyUmFkaXVzID4gcGl4ZWxNYXJnaW4pIHtcbiAgICAgICAgYW5nbGVNYXJnaW4gPSBwaXhlbE1hcmdpbiAvIGlubmVyUmFkaXVzO1xuICAgICAgICBjdHguYXJjKHgsIHksIGlubmVyUmFkaXVzLCBlbmRBbmdsZSArIGFuZ2xlTWFyZ2luLCBzdGFydEFuZ2xlIC0gYW5nbGVNYXJnaW4sIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgcGl4ZWxNYXJnaW4sIGVuZEFuZ2xlICsgSEFMRl9QSSwgc3RhcnRBbmdsZSAtIEhBTEZfUEkpO1xuICAgIH1cbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LmNsaXAoKTtcbn1cbmZ1bmN0aW9uIHRvUmFkaXVzQ29ybmVycyh2YWx1ZSkge1xuICAgIHJldHVybiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwgW1xuICAgICAgICAnb3V0ZXJTdGFydCcsXG4gICAgICAgICdvdXRlckVuZCcsXG4gICAgICAgICdpbm5lclN0YXJ0JyxcbiAgICAgICAgJ2lubmVyRW5kJ1xuICAgIF0pO1xufVxuLyoqXG4gKiBQYXJzZSBib3JkZXIgcmFkaXVzIGZyb20gdGhlIHByb3ZpZGVkIG9wdGlvbnNcbiAqLyBmdW5jdGlvbiBwYXJzZUJvcmRlclJhZGl1cyQxKGFyYywgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBhbmdsZURlbHRhKSB7XG4gICAgY29uc3QgbyA9IHRvUmFkaXVzQ29ybmVycyhhcmMub3B0aW9ucy5ib3JkZXJSYWRpdXMpO1xuICAgIGNvbnN0IGhhbGZUaGlja25lc3MgPSAob3V0ZXJSYWRpdXMgLSBpbm5lclJhZGl1cykgLyAyO1xuICAgIGNvbnN0IGlubmVyTGltaXQgPSBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCBhbmdsZURlbHRhICogaW5uZXJSYWRpdXMgLyAyKTtcbiAgICAvLyBPdXRlciBsaW1pdHMgYXJlIGNvbXBsaWNhdGVkLiBXZSB3YW50IHRvIGNvbXB1dGUgdGhlIGF2YWlsYWJsZSBhbmd1bGFyIGRpc3RhbmNlIGF0XG4gICAgLy8gYSByYWRpdXMgb2Ygb3V0ZXJSYWRpdXMgLSBib3JkZXJSYWRpdXMgYmVjYXVzZSBmb3Igc21hbGwgYW5ndWxhciBkaXN0YW5jZXMsIHRoaXMgdGVybSBsaW1pdHMuXG4gICAgLy8gV2UgY29tcHV0ZSBhdCByID0gb3V0ZXJSYWRpdXMgLSBib3JkZXJSYWRpdXMgYmVjYXVzZSB0aGlzIGNpcmNsZSBkZWZpbmVzIHRoZSBjZW50ZXIgb2YgdGhlIGJvcmRlciBjb3JuZXJzLlxuICAgIC8vXG4gICAgLy8gSWYgdGhlIGJvcmRlclJhZGl1cyBpcyBsYXJnZSwgdGhhdCB2YWx1ZSBjYW4gYmVjb21lIG5lZ2F0aXZlLlxuICAgIC8vIFRoaXMgY2F1c2VzIHRoZSBvdXRlciBib3JkZXJzIHRvIGxvc2UgdGhlaXIgcmFkaXVzIGVudGlyZWx5LCB3aGljaCBpcyByYXRoZXIgdW5leHBlY3RlZC4gVG8gc29sdmUgdGhhdCwgaWYgYm9yZGVyUmFkaXVzID4gb3V0ZXJSYWRpdXNcbiAgICAvLyB3ZSBrbm93IHRoYXQgdGhlIHRoaWNrbmVzcyB0ZXJtIHdpbGwgZG9taW5hdGUgYW5kIGNvbXB1dGUgdGhlIGxpbWl0cyBhdCB0aGF0IHBvaW50XG4gICAgY29uc3QgY29tcHV0ZU91dGVyTGltaXQgPSAodmFsKT0+e1xuICAgICAgICBjb25zdCBvdXRlckFyY0xpbWl0ID0gKG91dGVyUmFkaXVzIC0gTWF0aC5taW4oaGFsZlRoaWNrbmVzcywgdmFsKSkgKiBhbmdsZURlbHRhIC8gMjtcbiAgICAgICAgcmV0dXJuIF9saW1pdFZhbHVlKHZhbCwgMCwgTWF0aC5taW4oaGFsZlRoaWNrbmVzcywgb3V0ZXJBcmNMaW1pdCkpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb3V0ZXJTdGFydDogY29tcHV0ZU91dGVyTGltaXQoby5vdXRlclN0YXJ0KSxcbiAgICAgICAgb3V0ZXJFbmQ6IGNvbXB1dGVPdXRlckxpbWl0KG8ub3V0ZXJFbmQpLFxuICAgICAgICBpbm5lclN0YXJ0OiBfbGltaXRWYWx1ZShvLmlubmVyU3RhcnQsIDAsIGlubmVyTGltaXQpLFxuICAgICAgICBpbm5lckVuZDogX2xpbWl0VmFsdWUoby5pbm5lckVuZCwgMCwgaW5uZXJMaW1pdClcbiAgICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0IChyLCDwnZyDKSB0byAoeCwgeSlcbiAqLyBmdW5jdGlvbiByVGhldGFUb1hZKHIsIHRoZXRhLCB4LCB5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogeCArIHIgKiBNYXRoLmNvcyh0aGV0YSksXG4gICAgICAgIHk6IHkgKyByICogTWF0aC5zaW4odGhldGEpXG4gICAgfTtcbn1cbi8qKlxuICogUGF0aCB0aGUgYXJjLCByZXNwZWN0aW5nIGJvcmRlciByYWRpdXMgYnkgc2VwYXJhdGluZyBpbnRvIGxlZnQgYW5kIHJpZ2h0IGhhbHZlcy5cbiAqXG4gKiAgIFN0YXJ0ICAgICAgRW5kXG4gKlxuICogICAgMS0tLT5hLS0tPjIgICAgT3V0ZXJcbiAqICAgLyAgICAgICAgICAgXFxcbiAqICAgOCAgICAgICAgICAgM1xuICogICB8ICAgICAgICAgICB8XG4gKiAgIHwgICAgICAgICAgIHxcbiAqICAgNyAgICAgICAgICAgNFxuICogICBcXCAgICAgICAgICAgL1xuICogICAgNjwtLS1iPC0tLTUgICAgSW5uZXJcbiAqLyBmdW5jdGlvbiBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmQsIGNpcmN1bGFyKSB7XG4gICAgY29uc3QgeyB4ICwgeSAsIHN0YXJ0QW5nbGU6IHN0YXJ0ICwgcGl4ZWxNYXJnaW4gLCBpbm5lclJhZGl1czogaW5uZXJSICB9ID0gZWxlbWVudDtcbiAgICBjb25zdCBvdXRlclJhZGl1cyA9IE1hdGgubWF4KGVsZW1lbnQub3V0ZXJSYWRpdXMgKyBzcGFjaW5nICsgb2Zmc2V0IC0gcGl4ZWxNYXJnaW4sIDApO1xuICAgIGNvbnN0IGlubmVyUmFkaXVzID0gaW5uZXJSID4gMCA/IGlubmVyUiArIHNwYWNpbmcgKyBvZmZzZXQgKyBwaXhlbE1hcmdpbiA6IDA7XG4gICAgbGV0IHNwYWNpbmdPZmZzZXQgPSAwO1xuICAgIGNvbnN0IGFscGhhID0gZW5kIC0gc3RhcnQ7XG4gICAgaWYgKHNwYWNpbmcpIHtcbiAgICAgICAgLy8gV2hlbiBzcGFjaW5nIGlzIHByZXNlbnQsIGl0IGlzIHRoZSBzYW1lIGZvciBhbGwgaXRlbXNcbiAgICAgICAgLy8gU28gd2UgYWRqdXN0IHRoZSBzdGFydCBhbmQgZW5kIGFuZ2xlIG9mIHRoZSBhcmMgc3VjaCB0aGF0XG4gICAgICAgIC8vIHRoZSBkaXN0YW5jZSBpcyB0aGUgc2FtZSBhcyBpdCB3b3VsZCBiZSB3aXRob3V0IHRoZSBzcGFjaW5nXG4gICAgICAgIGNvbnN0IG5vU3BhY2luZ0lubmVyUmFkaXVzID0gaW5uZXJSID4gMCA/IGlubmVyUiAtIHNwYWNpbmcgOiAwO1xuICAgICAgICBjb25zdCBub1NwYWNpbmdPdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzID4gMCA/IG91dGVyUmFkaXVzIC0gc3BhY2luZyA6IDA7XG4gICAgICAgIGNvbnN0IGF2Tm9nU3BhY2luZ1JhZGl1cyA9IChub1NwYWNpbmdJbm5lclJhZGl1cyArIG5vU3BhY2luZ091dGVyUmFkaXVzKSAvIDI7XG4gICAgICAgIGNvbnN0IGFkanVzdGVkQW5nbGUgPSBhdk5vZ1NwYWNpbmdSYWRpdXMgIT09IDAgPyBhbHBoYSAqIGF2Tm9nU3BhY2luZ1JhZGl1cyAvIChhdk5vZ1NwYWNpbmdSYWRpdXMgKyBzcGFjaW5nKSA6IGFscGhhO1xuICAgICAgICBzcGFjaW5nT2Zmc2V0ID0gKGFscGhhIC0gYWRqdXN0ZWRBbmdsZSkgLyAyO1xuICAgIH1cbiAgICBjb25zdCBiZXRhID0gTWF0aC5tYXgoMC4wMDEsIGFscGhhICogb3V0ZXJSYWRpdXMgLSBvZmZzZXQgLyBQSSkgLyBvdXRlclJhZGl1cztcbiAgICBjb25zdCBhbmdsZU9mZnNldCA9IChhbHBoYSAtIGJldGEpIC8gMjtcbiAgICBjb25zdCBzdGFydEFuZ2xlID0gc3RhcnQgKyBhbmdsZU9mZnNldCArIHNwYWNpbmdPZmZzZXQ7XG4gICAgY29uc3QgZW5kQW5nbGUgPSBlbmQgLSBhbmdsZU9mZnNldCAtIHNwYWNpbmdPZmZzZXQ7XG4gICAgY29uc3QgeyBvdXRlclN0YXJ0ICwgb3V0ZXJFbmQgLCBpbm5lclN0YXJ0ICwgaW5uZXJFbmQgIH0gPSBwYXJzZUJvcmRlclJhZGl1cyQxKGVsZW1lbnQsIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgZW5kQW5nbGUgLSBzdGFydEFuZ2xlKTtcbiAgICBjb25zdCBvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMgPSBvdXRlclJhZGl1cyAtIG91dGVyU3RhcnQ7XG4gICAgY29uc3Qgb3V0ZXJFbmRBZGp1c3RlZFJhZGl1cyA9IG91dGVyUmFkaXVzIC0gb3V0ZXJFbmQ7XG4gICAgY29uc3Qgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUgPSBzdGFydEFuZ2xlICsgb3V0ZXJTdGFydCAvIG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cztcbiAgICBjb25zdCBvdXRlckVuZEFkanVzdGVkQW5nbGUgPSBlbmRBbmdsZSAtIG91dGVyRW5kIC8gb3V0ZXJFbmRBZGp1c3RlZFJhZGl1cztcbiAgICBjb25zdCBpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMgPSBpbm5lclJhZGl1cyArIGlubmVyU3RhcnQ7XG4gICAgY29uc3QgaW5uZXJFbmRBZGp1c3RlZFJhZGl1cyA9IGlubmVyUmFkaXVzICsgaW5uZXJFbmQ7XG4gICAgY29uc3QgaW5uZXJTdGFydEFkanVzdGVkQW5nbGUgPSBzdGFydEFuZ2xlICsgaW5uZXJTdGFydCAvIGlubmVyU3RhcnRBZGp1c3RlZFJhZGl1cztcbiAgICBjb25zdCBpbm5lckVuZEFkanVzdGVkQW5nbGUgPSBlbmRBbmdsZSAtIGlubmVyRW5kIC8gaW5uZXJFbmRBZGp1c3RlZFJhZGl1cztcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgaWYgKGNpcmN1bGFyKSB7XG4gICAgICAgIC8vIFRoZSBmaXJzdCBhcmMgc2VnbWVudHMgZnJvbSBwb2ludCAxIHRvIHBvaW50IGEgdG8gcG9pbnQgMlxuICAgICAgICBjb25zdCBvdXRlck1pZEFkanVzdGVkQW5nbGUgPSAob3V0ZXJTdGFydEFkanVzdGVkQW5nbGUgKyBvdXRlckVuZEFkanVzdGVkQW5nbGUpIC8gMjtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUsIG91dGVyTWlkQWRqdXN0ZWRBbmdsZSk7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgb3V0ZXJSYWRpdXMsIG91dGVyTWlkQWRqdXN0ZWRBbmdsZSwgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlKTtcbiAgICAgICAgLy8gVGhlIGNvcm5lciBzZWdtZW50IGZyb20gcG9pbnQgMiB0byBwb2ludCAzXG4gICAgICAgIGlmIChvdXRlckVuZCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKG91dGVyRW5kQWRqdXN0ZWRSYWRpdXMsIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgICAgICAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBvdXRlckVuZCwgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlLCBlbmRBbmdsZSArIEhBTEZfUEkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBsaW5lIGZyb20gcG9pbnQgMyB0byBwb2ludCA0XG4gICAgICAgIGNvbnN0IHA0ID0gclRoZXRhVG9YWShpbm5lckVuZEFkanVzdGVkUmFkaXVzLCBlbmRBbmdsZSwgeCwgeSk7XG4gICAgICAgIGN0eC5saW5lVG8ocDQueCwgcDQueSk7XG4gICAgICAgIC8vIFRoZSBjb3JuZXIgc2VnbWVudCBmcm9tIHBvaW50IDQgdG8gcG9pbnQgNVxuICAgICAgICBpZiAoaW5uZXJFbmQgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwQ2VudGVyID0gclRoZXRhVG9YWShpbm5lckVuZEFkanVzdGVkUmFkaXVzLCBpbm5lckVuZEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgICAgICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgaW5uZXJFbmQsIGVuZEFuZ2xlICsgSEFMRl9QSSwgaW5uZXJFbmRBZGp1c3RlZEFuZ2xlICsgTWF0aC5QSSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGlubmVyIGFyYyBmcm9tIHBvaW50IDUgdG8gcG9pbnQgYiB0byBwb2ludCA2XG4gICAgICAgIGNvbnN0IGlubmVyTWlkQWRqdXN0ZWRBbmdsZSA9IChlbmRBbmdsZSAtIGlubmVyRW5kIC8gaW5uZXJSYWRpdXMgKyAoc3RhcnRBbmdsZSArIGlubmVyU3RhcnQgLyBpbm5lclJhZGl1cykpIC8gMjtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBpbm5lclJhZGl1cywgZW5kQW5nbGUgLSBpbm5lckVuZCAvIGlubmVyUmFkaXVzLCBpbm5lck1pZEFkanVzdGVkQW5nbGUsIHRydWUpO1xuICAgICAgICBjdHguYXJjKHgsIHksIGlubmVyUmFkaXVzLCBpbm5lck1pZEFkanVzdGVkQW5nbGUsIHN0YXJ0QW5nbGUgKyBpbm5lclN0YXJ0IC8gaW5uZXJSYWRpdXMsIHRydWUpO1xuICAgICAgICAvLyBUaGUgY29ybmVyIHNlZ21lbnQgZnJvbSBwb2ludCA2IHRvIHBvaW50IDdcbiAgICAgICAgaWYgKGlubmVyU3RhcnQgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwQ2VudGVyID0gclRoZXRhVG9YWShpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMsIGlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIGlubmVyU3RhcnQsIGlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlICsgTWF0aC5QSSwgc3RhcnRBbmdsZSAtIEhBTEZfUEkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBsaW5lIGZyb20gcG9pbnQgNyB0byBwb2ludCA4XG4gICAgICAgIGNvbnN0IHA4ID0gclRoZXRhVG9YWShvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMsIHN0YXJ0QW5nbGUsIHgsIHkpO1xuICAgICAgICBjdHgubGluZVRvKHA4LngsIHA4LnkpO1xuICAgICAgICAvLyBUaGUgY29ybmVyIHNlZ21lbnQgZnJvbSBwb2ludCA4IHRvIHBvaW50IDFcbiAgICAgICAgaWYgKG91dGVyU3RhcnQgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwQ2VudGVyID0gclRoZXRhVG9YWShvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMsIG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIG91dGVyU3RhcnQsIHN0YXJ0QW5nbGUgLSBIQUxGX1BJLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgICAgICBjb25zdCBvdXRlclN0YXJ0WCA9IE1hdGguY29zKG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlKSAqIG91dGVyUmFkaXVzICsgeDtcbiAgICAgICAgY29uc3Qgb3V0ZXJTdGFydFkgPSBNYXRoLnNpbihvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSkgKiBvdXRlclJhZGl1cyArIHk7XG4gICAgICAgIGN0eC5saW5lVG8ob3V0ZXJTdGFydFgsIG91dGVyU3RhcnRZKTtcbiAgICAgICAgY29uc3Qgb3V0ZXJFbmRYID0gTWF0aC5jb3Mob3V0ZXJFbmRBZGp1c3RlZEFuZ2xlKSAqIG91dGVyUmFkaXVzICsgeDtcbiAgICAgICAgY29uc3Qgb3V0ZXJFbmRZID0gTWF0aC5zaW4ob3V0ZXJFbmRBZGp1c3RlZEFuZ2xlKSAqIG91dGVyUmFkaXVzICsgeTtcbiAgICAgICAgY3R4LmxpbmVUbyhvdXRlckVuZFgsIG91dGVyRW5kWSk7XG4gICAgfVxuICAgIGN0eC5jbG9zZVBhdGgoKTtcbn1cbmZ1bmN0aW9uIGRyYXdBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGNpcmN1bGFyKSB7XG4gICAgY29uc3QgeyBmdWxsQ2lyY2xlcyAsIHN0YXJ0QW5nbGUgLCBjaXJjdW1mZXJlbmNlICB9ID0gZWxlbWVudDtcbiAgICBsZXQgZW5kQW5nbGUgPSBlbGVtZW50LmVuZEFuZ2xlO1xuICAgIGlmIChmdWxsQ2lyY2xlcykge1xuICAgICAgICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSwgY2lyY3VsYXIpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZnVsbENpcmNsZXM7ICsraSl7XG4gICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNOYU4oY2lyY3VtZmVyZW5jZSkpIHtcbiAgICAgICAgICAgIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIChjaXJjdW1mZXJlbmNlICUgVEFVIHx8IFRBVSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUsIGNpcmN1bGFyKTtcbiAgICBjdHguZmlsbCgpO1xuICAgIHJldHVybiBlbmRBbmdsZTtcbn1cbmZ1bmN0aW9uIGRyYXdCb3JkZXIoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGNpcmN1bGFyKSB7XG4gICAgY29uc3QgeyBmdWxsQ2lyY2xlcyAsIHN0YXJ0QW5nbGUgLCBjaXJjdW1mZXJlbmNlICwgb3B0aW9ucyAgfSA9IGVsZW1lbnQ7XG4gICAgY29uc3QgeyBib3JkZXJXaWR0aCAsIGJvcmRlckpvaW5TdHlsZSAsIGJvcmRlckRhc2ggLCBib3JkZXJEYXNoT2Zmc2V0ICB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBpbm5lciA9IG9wdGlvbnMuYm9yZGVyQWxpZ24gPT09ICdpbm5lcic7XG4gICAgaWYgKCFib3JkZXJXaWR0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5zZXRMaW5lRGFzaChib3JkZXJEYXNoIHx8IFtdKTtcbiAgICBjdHgubGluZURhc2hPZmZzZXQgPSBib3JkZXJEYXNoT2Zmc2V0O1xuICAgIGlmIChpbm5lcikge1xuICAgICAgICBjdHgubGluZVdpZHRoID0gYm9yZGVyV2lkdGggKiAyO1xuICAgICAgICBjdHgubGluZUpvaW4gPSBib3JkZXJKb2luU3R5bGUgfHwgJ3JvdW5kJztcbiAgICB9IGVsc2Uge1xuICAgICAgICBjdHgubGluZVdpZHRoID0gYm9yZGVyV2lkdGg7XG4gICAgICAgIGN0eC5saW5lSm9pbiA9IGJvcmRlckpvaW5TdHlsZSB8fCAnYmV2ZWwnO1xuICAgIH1cbiAgICBsZXQgZW5kQW5nbGUgPSBlbGVtZW50LmVuZEFuZ2xlO1xuICAgIGlmIChmdWxsQ2lyY2xlcykge1xuICAgICAgICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSwgY2lyY3VsYXIpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZnVsbENpcmNsZXM7ICsraSl7XG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc05hTihjaXJjdW1mZXJlbmNlKSkge1xuICAgICAgICAgICAgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgKGNpcmN1bWZlcmVuY2UgJSBUQVUgfHwgVEFVKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5uZXIpIHtcbiAgICAgICAgY2xpcEFyYyhjdHgsIGVsZW1lbnQsIGVuZEFuZ2xlKTtcbiAgICB9XG4gICAgaWYgKCFmdWxsQ2lyY2xlcykge1xuICAgICAgICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSwgY2lyY3VsYXIpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuY2xhc3MgQXJjRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICAgIHN0YXRpYyBpZCA9ICdhcmMnO1xuICAgIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgYm9yZGVyQWxpZ246ICdjZW50ZXInLFxuICAgICAgICBib3JkZXJDb2xvcjogJyNmZmYnLFxuICAgICAgICBib3JkZXJEYXNoOiBbXSxcbiAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogMCxcbiAgICAgICAgYm9yZGVySm9pblN0eWxlOiB1bmRlZmluZWQsXG4gICAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDIsXG4gICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgc3BhY2luZzogMCxcbiAgICAgICAgYW5nbGU6IHVuZGVmaW5lZCxcbiAgICAgICAgY2lyY3VsYXI6IHRydWVcbiAgICB9O1xuICAgIHN0YXRpYyBkZWZhdWx0Um91dGVzID0ge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InXG4gICAgfTtcbiAgICBzdGF0aWMgZGVzY3JpcHRvcnMgPSB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgICAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdib3JkZXJEYXNoJ1xuICAgIH07XG4gICAgY2lyY3VtZmVyZW5jZTtcbiAgICBlbmRBbmdsZTtcbiAgICBmdWxsQ2lyY2xlcztcbiAgICBpbm5lclJhZGl1cztcbiAgICBvdXRlclJhZGl1cztcbiAgICBwaXhlbE1hcmdpbjtcbiAgICBzdGFydEFuZ2xlO1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jaXJjdW1mZXJlbmNlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnN0YXJ0QW5nbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZW5kQW5nbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucGl4ZWxNYXJnaW4gPSAwO1xuICAgICAgICB0aGlzLmZ1bGxDaXJjbGVzID0gMDtcbiAgICAgICAgaWYgKGNmZykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluUmFuZ2UoY2hhcnRYLCBjaGFydFksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5J1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgeyBhbmdsZSAsIGRpc3RhbmNlICB9ID0gZ2V0QW5nbGVGcm9tUG9pbnQocG9pbnQsIHtcbiAgICAgICAgICAgIHg6IGNoYXJ0WCxcbiAgICAgICAgICAgIHk6IGNoYXJ0WVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgeyBzdGFydEFuZ2xlICwgZW5kQW5nbGUgLCBpbm5lclJhZGl1cyAsIG91dGVyUmFkaXVzICwgY2lyY3VtZmVyZW5jZSAgfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgICAgICAgJ2VuZEFuZ2xlJyxcbiAgICAgICAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAgICAgICAnb3V0ZXJSYWRpdXMnLFxuICAgICAgICAgICAgJ2NpcmN1bWZlcmVuY2UnXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCByQWRqdXN0ID0gKHRoaXMub3B0aW9ucy5zcGFjaW5nICsgdGhpcy5vcHRpb25zLmJvcmRlcldpZHRoKSAvIDI7XG4gICAgICAgIGNvbnN0IF9jaXJjdW1mZXJlbmNlID0gdmFsdWVPckRlZmF1bHQoY2lyY3VtZmVyZW5jZSwgZW5kQW5nbGUgLSBzdGFydEFuZ2xlKTtcbiAgICAgICAgY29uc3QgYmV0d2VlbkFuZ2xlcyA9IF9jaXJjdW1mZXJlbmNlID49IFRBVSB8fCBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSk7XG4gICAgICAgIGNvbnN0IHdpdGhpblJhZGl1cyA9IF9pc0JldHdlZW4oZGlzdGFuY2UsIGlubmVyUmFkaXVzICsgckFkanVzdCwgb3V0ZXJSYWRpdXMgKyByQWRqdXN0KTtcbiAgICAgICAgcmV0dXJuIGJldHdlZW5BbmdsZXMgJiYgd2l0aGluUmFkaXVzO1xuICAgIH1cbiAgICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgLCBzdGFydEFuZ2xlICwgZW5kQW5nbGUgLCBpbm5lclJhZGl1cyAsIG91dGVyUmFkaXVzICB9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneScsXG4gICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAnZW5kQW5nbGUnLFxuICAgICAgICAgICAgJ2lubmVyUmFkaXVzJyxcbiAgICAgICAgICAgICdvdXRlclJhZGl1cydcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHsgb2Zmc2V0ICwgc3BhY2luZyAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgaGFsZkFuZ2xlID0gKHN0YXJ0QW5nbGUgKyBlbmRBbmdsZSkgLyAyO1xuICAgICAgICBjb25zdCBoYWxmUmFkaXVzID0gKGlubmVyUmFkaXVzICsgb3V0ZXJSYWRpdXMgKyBzcGFjaW5nICsgb2Zmc2V0KSAvIDI7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB4ICsgTWF0aC5jb3MoaGFsZkFuZ2xlKSAqIGhhbGZSYWRpdXMsXG4gICAgICAgICAgICB5OiB5ICsgTWF0aC5zaW4oaGFsZkFuZ2xlKSAqIGhhbGZSYWRpdXNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdG9vbHRpcFBvc2l0aW9uKHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIGRyYXcoY3R4KSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyAsIGNpcmN1bWZlcmVuY2UgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSAob3B0aW9ucy5vZmZzZXQgfHwgMCkgLyA0O1xuICAgICAgICBjb25zdCBzcGFjaW5nID0gKG9wdGlvbnMuc3BhY2luZyB8fCAwKSAvIDI7XG4gICAgICAgIGNvbnN0IGNpcmN1bGFyID0gb3B0aW9ucy5jaXJjdWxhcjtcbiAgICAgICAgdGhpcy5waXhlbE1hcmdpbiA9IG9wdGlvbnMuYm9yZGVyQWxpZ24gPT09ICdpbm5lcicgPyAwLjMzIDogMDtcbiAgICAgICAgdGhpcy5mdWxsQ2lyY2xlcyA9IGNpcmN1bWZlcmVuY2UgPiBUQVUgPyBNYXRoLmZsb29yKGNpcmN1bWZlcmVuY2UgLyBUQVUpIDogMDtcbiAgICAgICAgaWYgKGNpcmN1bWZlcmVuY2UgPT09IDAgfHwgdGhpcy5pbm5lclJhZGl1cyA8IDAgfHwgdGhpcy5vdXRlclJhZGl1cyA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjb25zdCBoYWxmQW5nbGUgPSAodGhpcy5zdGFydEFuZ2xlICsgdGhpcy5lbmRBbmdsZSkgLyAyO1xuICAgICAgICBjdHgudHJhbnNsYXRlKE1hdGguY29zKGhhbGZBbmdsZSkgKiBvZmZzZXQsIE1hdGguc2luKGhhbGZBbmdsZSkgKiBvZmZzZXQpO1xuICAgICAgICBjb25zdCBmaXggPSAxIC0gTWF0aC5zaW4oTWF0aC5taW4oUEksIGNpcmN1bWZlcmVuY2UgfHwgMCkpO1xuICAgICAgICBjb25zdCByYWRpdXNPZmZzZXQgPSBvZmZzZXQgKiBmaXg7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICAgICAgZHJhd0FyYyhjdHgsIHRoaXMsIHJhZGl1c09mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpO1xuICAgICAgICBkcmF3Qm9yZGVyKGN0eCwgdGhpcywgcmFkaXVzT2Zmc2V0LCBzcGFjaW5nLCBjaXJjdWxhcik7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRTdHlsZShjdHgsIG9wdGlvbnMsIHN0eWxlID0gb3B0aW9ucykge1xuICAgIGN0eC5saW5lQ2FwID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyQ2FwU3R5bGUsIG9wdGlvbnMuYm9yZGVyQ2FwU3R5bGUpO1xuICAgIGN0eC5zZXRMaW5lRGFzaCh2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJEYXNoLCBvcHRpb25zLmJvcmRlckRhc2gpKTtcbiAgICBjdHgubGluZURhc2hPZmZzZXQgPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0LCBvcHRpb25zLmJvcmRlckRhc2hPZmZzZXQpO1xuICAgIGN0eC5saW5lSm9pbiA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckpvaW5TdHlsZSwgb3B0aW9ucy5ib3JkZXJKb2luU3R5bGUpO1xuICAgIGN0eC5saW5lV2lkdGggPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJXaWR0aCwgb3B0aW9ucy5ib3JkZXJXaWR0aCk7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyQ29sb3IsIG9wdGlvbnMuYm9yZGVyQ29sb3IpO1xufVxuZnVuY3Rpb24gbGluZVRvKGN0eCwgcHJldmlvdXMsIHRhcmdldCkge1xuICAgIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbn1cbiBmdW5jdGlvbiBnZXRMaW5lTWV0aG9kKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5zdGVwcGVkKSB7XG4gICAgICAgIHJldHVybiBfc3RlcHBlZExpbmVUbztcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMudGVuc2lvbiB8fCBvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcbiAgICAgICAgcmV0dXJuIF9iZXppZXJDdXJ2ZVRvO1xuICAgIH1cbiAgICByZXR1cm4gbGluZVRvO1xufVxuZnVuY3Rpb24gcGF0aFZhcnMocG9pbnRzLCBzZWdtZW50LCBwYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBjb25zdCB7IHN0YXJ0OiBwYXJhbXNTdGFydCA9IDAgLCBlbmQ6IHBhcmFtc0VuZCA9IGNvdW50IC0gMSAgfSA9IHBhcmFtcztcbiAgICBjb25zdCB7IHN0YXJ0OiBzZWdtZW50U3RhcnQgLCBlbmQ6IHNlZ21lbnRFbmQgIH0gPSBzZWdtZW50O1xuICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgocGFyYW1zU3RhcnQsIHNlZ21lbnRTdGFydCk7XG4gICAgY29uc3QgZW5kID0gTWF0aC5taW4ocGFyYW1zRW5kLCBzZWdtZW50RW5kKTtcbiAgICBjb25zdCBvdXRzaWRlID0gcGFyYW1zU3RhcnQgPCBzZWdtZW50U3RhcnQgJiYgcGFyYW1zRW5kIDwgc2VnbWVudFN0YXJ0IHx8IHBhcmFtc1N0YXJ0ID4gc2VnbWVudEVuZCAmJiBwYXJhbXNFbmQgPiBzZWdtZW50RW5kO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvdW50LFxuICAgICAgICBzdGFydCxcbiAgICAgICAgbG9vcDogc2VnbWVudC5sb29wLFxuICAgICAgICBpbGVuOiBlbmQgPCBzdGFydCAmJiAhb3V0c2lkZSA/IGNvdW50ICsgZW5kIC0gc3RhcnQgOiBlbmQgLSBzdGFydFxuICAgIH07XG59XG4gZnVuY3Rpb24gcGF0aFNlZ21lbnQoY3R4LCBsaW5lLCBzZWdtZW50LCBwYXJhbXMpIHtcbiAgICBjb25zdCB7IHBvaW50cyAsIG9wdGlvbnMgIH0gPSBsaW5lO1xuICAgIGNvbnN0IHsgY291bnQgLCBzdGFydCAsIGxvb3AgLCBpbGVuICB9ID0gcGF0aFZhcnMocG9pbnRzLCBzZWdtZW50LCBwYXJhbXMpO1xuICAgIGNvbnN0IGxpbmVNZXRob2QgPSBnZXRMaW5lTWV0aG9kKG9wdGlvbnMpO1xuICAgIGxldCB7IG1vdmUgPXRydWUgLCByZXZlcnNlICB9ID0gcGFyYW1zIHx8IHt9O1xuICAgIGxldCBpLCBwb2ludCwgcHJldjtcbiAgICBmb3IoaSA9IDA7IGkgPD0gaWxlbjsgKytpKXtcbiAgICAgICAgcG9pbnQgPSBwb2ludHNbKHN0YXJ0ICsgKHJldmVyc2UgPyBpbGVuIC0gaSA6IGkpKSAlIGNvdW50XTtcbiAgICAgICAgaWYgKHBvaW50LnNraXApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG1vdmUpIHtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8ocG9pbnQueCwgcG9pbnQueSk7XG4gICAgICAgICAgICBtb3ZlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaW5lTWV0aG9kKGN0eCwgcHJldiwgcG9pbnQsIHJldmVyc2UsIG9wdGlvbnMuc3RlcHBlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJldiA9IHBvaW50O1xuICAgIH1cbiAgICBpZiAobG9vcCkge1xuICAgICAgICBwb2ludCA9IHBvaW50c1soc3RhcnQgKyAocmV2ZXJzZSA/IGlsZW4gOiAwKSkgJSBjb3VudF07XG4gICAgICAgIGxpbmVNZXRob2QoY3R4LCBwcmV2LCBwb2ludCwgcmV2ZXJzZSwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgICB9XG4gICAgcmV0dXJuICEhbG9vcDtcbn1cbiBmdW5jdGlvbiBmYXN0UGF0aFNlZ21lbnQoY3R4LCBsaW5lLCBzZWdtZW50LCBwYXJhbXMpIHtcbiAgICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCB7IGNvdW50ICwgc3RhcnQgLCBpbGVuICB9ID0gcGF0aFZhcnMocG9pbnRzLCBzZWdtZW50LCBwYXJhbXMpO1xuICAgIGNvbnN0IHsgbW92ZSA9dHJ1ZSAsIHJldmVyc2UgIH0gPSBwYXJhbXMgfHwge307XG4gICAgbGV0IGF2Z1ggPSAwO1xuICAgIGxldCBjb3VudFggPSAwO1xuICAgIGxldCBpLCBwb2ludCwgcHJldlgsIG1pblksIG1heFksIGxhc3RZO1xuICAgIGNvbnN0IHBvaW50SW5kZXggPSAoaW5kZXgpPT4oc3RhcnQgKyAocmV2ZXJzZSA/IGlsZW4gLSBpbmRleCA6IGluZGV4KSkgJSBjb3VudDtcbiAgICBjb25zdCBkcmF3WCA9ICgpPT57XG4gICAgICAgIGlmIChtaW5ZICE9PSBtYXhZKSB7XG4gICAgICAgICAgICBjdHgubGluZVRvKGF2Z1gsIG1heFkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhhdmdYLCBtaW5ZKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oYXZnWCwgbGFzdFkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAobW92ZSkge1xuICAgICAgICBwb2ludCA9IHBvaW50c1twb2ludEluZGV4KDApXTtcbiAgICAgICAgY3R4Lm1vdmVUbyhwb2ludC54LCBwb2ludC55KTtcbiAgICB9XG4gICAgZm9yKGkgPSAwOyBpIDw9IGlsZW47ICsraSl7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzW3BvaW50SW5kZXgoaSldO1xuICAgICAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeCA9IHBvaW50Lng7XG4gICAgICAgIGNvbnN0IHkgPSBwb2ludC55O1xuICAgICAgICBjb25zdCB0cnVuY1ggPSB4IHwgMDtcbiAgICAgICAgaWYgKHRydW5jWCA9PT0gcHJldlgpIHtcbiAgICAgICAgICAgIGlmICh5IDwgbWluWSkge1xuICAgICAgICAgICAgICAgIG1pblkgPSB5O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh5ID4gbWF4WSkge1xuICAgICAgICAgICAgICAgIG1heFkgPSB5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXZnWCA9IChjb3VudFggKiBhdmdYICsgeCkgLyArK2NvdW50WDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRyYXdYKCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgcHJldlggPSB0cnVuY1g7XG4gICAgICAgICAgICBjb3VudFggPSAwO1xuICAgICAgICAgICAgbWluWSA9IG1heFkgPSB5O1xuICAgICAgICB9XG4gICAgICAgIGxhc3RZID0geTtcbiAgICB9XG4gICAgZHJhd1goKTtcbn1cbiBmdW5jdGlvbiBfZ2V0U2VnbWVudE1ldGhvZChsaW5lKSB7XG4gICAgY29uc3Qgb3B0cyA9IGxpbmUub3B0aW9ucztcbiAgICBjb25zdCBib3JkZXJEYXNoID0gb3B0cy5ib3JkZXJEYXNoICYmIG9wdHMuYm9yZGVyRGFzaC5sZW5ndGg7XG4gICAgY29uc3QgdXNlRmFzdFBhdGggPSAhbGluZS5fZGVjaW1hdGVkICYmICFsaW5lLl9sb29wICYmICFvcHRzLnRlbnNpb24gJiYgb3B0cy5jdWJpY0ludGVycG9sYXRpb25Nb2RlICE9PSAnbW9ub3RvbmUnICYmICFvcHRzLnN0ZXBwZWQgJiYgIWJvcmRlckRhc2g7XG4gICAgcmV0dXJuIHVzZUZhc3RQYXRoID8gZmFzdFBhdGhTZWdtZW50IDogcGF0aFNlZ21lbnQ7XG59XG4gZnVuY3Rpb24gX2dldEludGVycG9sYXRpb25NZXRob2Qob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnN0ZXBwZWQpIHtcbiAgICAgICAgcmV0dXJuIF9zdGVwcGVkSW50ZXJwb2xhdGlvbjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMudGVuc2lvbiB8fCBvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcbiAgICAgICAgcmV0dXJuIF9iZXppZXJJbnRlcnBvbGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gX3BvaW50SW5MaW5lO1xufVxuZnVuY3Rpb24gc3Ryb2tlUGF0aFdpdGhDYWNoZShjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCkge1xuICAgIGxldCBwYXRoID0gbGluZS5fcGF0aDtcbiAgICBpZiAoIXBhdGgpIHtcbiAgICAgICAgcGF0aCA9IGxpbmUuX3BhdGggPSBuZXcgUGF0aDJEKCk7XG4gICAgICAgIGlmIChsaW5lLnBhdGgocGF0aCwgc3RhcnQsIGNvdW50KSkge1xuICAgICAgICAgICAgcGF0aC5jbG9zZVBhdGgoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRTdHlsZShjdHgsIGxpbmUub3B0aW9ucyk7XG4gICAgY3R4LnN0cm9rZShwYXRoKTtcbn1cbmZ1bmN0aW9uIHN0cm9rZVBhdGhEaXJlY3QoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCB7IHNlZ21lbnRzICwgb3B0aW9ucyAgfSA9IGxpbmU7XG4gICAgY29uc3Qgc2VnbWVudE1ldGhvZCA9IF9nZXRTZWdtZW50TWV0aG9kKGxpbmUpO1xuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgIHNldFN0eWxlKGN0eCwgb3B0aW9ucywgc2VnbWVudC5zdHlsZSk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgaWYgKHNlZ21lbnRNZXRob2QoY3R4LCBsaW5lLCBzZWdtZW50LCB7XG4gICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgIGVuZDogc3RhcnQgKyBjb3VudCAtIDFcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgfVxuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuY29uc3QgdXNlUGF0aDJEID0gdHlwZW9mIFBhdGgyRCA9PT0gJ2Z1bmN0aW9uJztcbmZ1bmN0aW9uIGRyYXcoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgICBpZiAodXNlUGF0aDJEICYmICFsaW5lLm9wdGlvbnMuc2VnbWVudCkge1xuICAgICAgICBzdHJva2VQYXRoV2l0aENhY2hlKGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdHJva2VQYXRoRGlyZWN0KGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG59XG5jbGFzcyBMaW5lRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICAgIHN0YXRpYyBpZCA9ICdsaW5lJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGJvcmRlckNhcFN0eWxlOiAnYnV0dCcsXG4gICAgICAgIGJvcmRlckRhc2g6IFtdLFxuICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLFxuICAgICAgICBib3JkZXJKb2luU3R5bGU6ICdtaXRlcicsXG4gICAgICAgIGJvcmRlcldpZHRoOiAzLFxuICAgICAgICBjYXBCZXppZXJQb2ludHM6IHRydWUsXG4gICAgICAgIGN1YmljSW50ZXJwb2xhdGlvbk1vZGU6ICdkZWZhdWx0JyxcbiAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgIHNwYW5HYXBzOiBmYWxzZSxcbiAgICAgICAgc3RlcHBlZDogZmFsc2UsXG4gICAgICAgIHRlbnNpb246IDBcbiAgICB9O1xuIHN0YXRpYyBkZWZhdWx0Um91dGVzID0ge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICAgICAgICBib3JkZXJDb2xvcjogJ2JvcmRlckNvbG9yJ1xuICAgIH07XG4gICAgc3RhdGljIGRlc2NyaXB0b3JzID0ge1xuICAgICAgICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICAgICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnYm9yZGVyRGFzaCcgJiYgbmFtZSAhPT0gJ2ZpbGwnXG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjZmcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmFuaW1hdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9jaGFydCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fbG9vcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZnVsbExvb3AgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3BhdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3BvaW50cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2VnbWVudHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RlY2ltYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2RhdGFzZXRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGNmZykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUNvbnRyb2xQb2ludHMoY2hhcnRBcmVhLCBpbmRleEF4aXMpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKChvcHRpb25zLnRlbnNpb24gfHwgb3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSAmJiAhb3B0aW9ucy5zdGVwcGVkICYmICF0aGlzLl9wb2ludHNVcGRhdGVkKSB7XG4gICAgICAgICAgICBjb25zdCBsb29wID0gb3B0aW9ucy5zcGFuR2FwcyA/IHRoaXMuX2xvb3AgOiB0aGlzLl9mdWxsTG9vcDtcbiAgICAgICAgICAgIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzKHRoaXMuX3BvaW50cywgb3B0aW9ucywgY2hhcnRBcmVhLCBsb29wLCBpbmRleEF4aXMpO1xuICAgICAgICAgICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0IHBvaW50cyhwb2ludHMpIHtcbiAgICAgICAgdGhpcy5fcG9pbnRzID0gcG9pbnRzO1xuICAgICAgICBkZWxldGUgdGhpcy5fc2VnbWVudHM7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9wYXRoO1xuICAgICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGdldCBwb2ludHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb2ludHM7XG4gICAgfVxuICAgIGdldCBzZWdtZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlZ21lbnRzIHx8ICh0aGlzLl9zZWdtZW50cyA9IF9jb21wdXRlU2VnbWVudHModGhpcywgdGhpcy5vcHRpb25zLnNlZ21lbnQpKTtcbiAgICB9XG4gZmlyc3QoKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgICAgIHJldHVybiBzZWdtZW50cy5sZW5ndGggJiYgcG9pbnRzW3NlZ21lbnRzWzBdLnN0YXJ0XTtcbiAgICB9XG4gbGFzdCgpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICAgICAgY29uc3QgY291bnQgPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgICAgIHJldHVybiBjb3VudCAmJiBwb2ludHNbc2VnbWVudHNbY291bnQgLSAxXS5lbmRdO1xuICAgIH1cbiBpbnRlcnBvbGF0ZShwb2ludCwgcHJvcGVydHkpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IF9ib3VuZFNlZ21lbnRzKHRoaXMsIHtcbiAgICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgICAgc3RhcnQ6IHZhbHVlLFxuICAgICAgICAgICAgZW5kOiB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgY29uc3QgX2ludGVycG9sYXRlID0gX2dldEludGVycG9sYXRpb25NZXRob2Qob3B0aW9ucyk7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3QgeyBzdGFydCAsIGVuZCAgfSA9IHNlZ21lbnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgcDEgPSBwb2ludHNbc3RhcnRdO1xuICAgICAgICAgICAgY29uc3QgcDIgPSBwb2ludHNbZW5kXTtcbiAgICAgICAgICAgIGlmIChwMSA9PT0gcDIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwMSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0ID0gTWF0aC5hYnMoKHZhbHVlIC0gcDFbcHJvcGVydHldKSAvIChwMltwcm9wZXJ0eV0gLSBwMVtwcm9wZXJ0eV0pKTtcbiAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRlZCA9IF9pbnRlcnBvbGF0ZShwMSwgcDIsIHQsIG9wdGlvbnMuc3RlcHBlZCk7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZWRbcHJvcGVydHldID0gcG9pbnRbcHJvcGVydHldO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goaW50ZXJwb2xhdGVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICB9XG4gcGF0aFNlZ21lbnQoY3R4LCBzZWdtZW50LCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudE1ldGhvZCA9IF9nZXRTZWdtZW50TWV0aG9kKHRoaXMpO1xuICAgICAgICByZXR1cm4gc2VnbWVudE1ldGhvZChjdHgsIHRoaXMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gICAgfVxuIHBhdGgoY3R4LCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgICAgICBjb25zdCBzZWdtZW50TWV0aG9kID0gX2dldFNlZ21lbnRNZXRob2QodGhpcyk7XG4gICAgICAgIGxldCBsb29wID0gdGhpcy5fbG9vcDtcbiAgICAgICAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICAgICAgICBjb3VudCA9IGNvdW50IHx8IHRoaXMucG9pbnRzLmxlbmd0aCAtIHN0YXJ0O1xuICAgICAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpe1xuICAgICAgICAgICAgbG9vcCAmPSBzZWdtZW50TWV0aG9kKGN0eCwgdGhpcywgc2VnbWVudCwge1xuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZDogc3RhcnQgKyBjb3VudCAtIDFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhIWxvb3A7XG4gICAgfVxuIGRyYXcoY3R4LCBjaGFydEFyZWEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cyB8fCBbXTtcbiAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggJiYgb3B0aW9ucy5ib3JkZXJXaWR0aCkge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGRyYXcoY3R4LCB0aGlzLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hbmltYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fcGF0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gaW5SYW5nZSQxKGVsLCBwb3MsIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCBvcHRpb25zID0gZWwub3B0aW9ucztcbiAgICBjb25zdCB7IFtheGlzXTogdmFsdWUgIH0gPSBlbC5nZXRQcm9wcyhbXG4gICAgICAgIGF4aXNcbiAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICByZXR1cm4gTWF0aC5hYnMocG9zIC0gdmFsdWUpIDwgb3B0aW9ucy5yYWRpdXMgKyBvcHRpb25zLmhpdFJhZGl1cztcbn1cbmNsYXNzIFBvaW50RWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICAgIHN0YXRpYyBpZCA9ICdwb2ludCc7XG4gICAgcGFyc2VkO1xuICAgIHNraXA7XG4gICAgc3RvcDtcbiAgICAvKipcbiAgICogQHR5cGUge2FueX1cbiAgICovIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICAgIGhpdFJhZGl1czogMSxcbiAgICAgICAgaG92ZXJCb3JkZXJXaWR0aDogMSxcbiAgICAgICAgaG92ZXJSYWRpdXM6IDQsXG4gICAgICAgIHBvaW50U3R5bGU6ICdjaXJjbGUnLFxuICAgICAgICByYWRpdXM6IDMsXG4gICAgICAgIHJvdGF0aW9uOiAwXG4gICAgfTtcbiAgICAvKipcbiAgICogQHR5cGUge2FueX1cbiAgICovIHN0YXRpYyBkZWZhdWx0Um91dGVzID0ge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICAgICAgICBib3JkZXJDb2xvcjogJ2JvcmRlckNvbG9yJ1xuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBhcnNlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5za2lwID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnN0b3AgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChjZmcpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpblJhbmdlKG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgIH0gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5J1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KG1vdXNlWCAtIHgsIDIpICsgTWF0aC5wb3cobW91c2VZIC0geSwgMikgPCBNYXRoLnBvdyhvcHRpb25zLmhpdFJhZGl1cyArIG9wdGlvbnMucmFkaXVzLCAyKTtcbiAgICB9XG4gICAgaW5YUmFuZ2UobW91c2VYLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBpblJhbmdlJDEodGhpcywgbW91c2VYLCAneCcsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBpbllSYW5nZShtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGluUmFuZ2UkMSh0aGlzLCBtb3VzZVksICd5JywgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAgfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc2l6ZShvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHRoaXMub3B0aW9ucyB8fCB7fTtcbiAgICAgICAgbGV0IHJhZGl1cyA9IG9wdGlvbnMucmFkaXVzIHx8IDA7XG4gICAgICAgIHJhZGl1cyA9IE1hdGgubWF4KHJhZGl1cywgcmFkaXVzICYmIG9wdGlvbnMuaG92ZXJSYWRpdXMgfHwgMCk7XG4gICAgICAgIGNvbnN0IGJvcmRlcldpZHRoID0gcmFkaXVzICYmIG9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMDtcbiAgICAgICAgcmV0dXJuIChyYWRpdXMgKyBib3JkZXJXaWR0aCkgKiAyO1xuICAgIH1cbiAgICBkcmF3KGN0eCwgYXJlYSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAodGhpcy5za2lwIHx8IG9wdGlvbnMucmFkaXVzIDwgMC4xIHx8ICFfaXNQb2ludEluQXJlYSh0aGlzLCBhcmVhLCB0aGlzLnNpemUob3B0aW9ucykgLyAyKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRpb25zLmJvcmRlcldpZHRoO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGRyYXdQb2ludChjdHgsIG9wdGlvbnMsIHRoaXMueCwgdGhpcy55KTtcbiAgICB9XG4gICAgZ2V0UmFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgfHwge307XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgRmFsbGJhY2tzIHNob3VsZCBuZXZlciBiZSBoaXQgaW4gcHJhY3RpY2VcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy5oaXRSYWRpdXM7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRCYXJCb3VuZHMoYmFyLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3QgeyB4ICwgeSAsIGJhc2UgLCB3aWR0aCAsIGhlaWdodCAgfSA9ICBiYXIuZ2V0UHJvcHMoW1xuICAgICAgICAneCcsXG4gICAgICAgICd5JyxcbiAgICAgICAgJ2Jhc2UnLFxuICAgICAgICAnd2lkdGgnLFxuICAgICAgICAnaGVpZ2h0J1xuICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGxldCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIGhhbGY7XG4gICAgaWYgKGJhci5ob3Jpem9udGFsKSB7XG4gICAgICAgIGhhbGYgPSBoZWlnaHQgLyAyO1xuICAgICAgICBsZWZ0ID0gTWF0aC5taW4oeCwgYmFzZSk7XG4gICAgICAgIHJpZ2h0ID0gTWF0aC5tYXgoeCwgYmFzZSk7XG4gICAgICAgIHRvcCA9IHkgLSBoYWxmO1xuICAgICAgICBib3R0b20gPSB5ICsgaGFsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBoYWxmID0gd2lkdGggLyAyO1xuICAgICAgICBsZWZ0ID0geCAtIGhhbGY7XG4gICAgICAgIHJpZ2h0ID0geCArIGhhbGY7XG4gICAgICAgIHRvcCA9IE1hdGgubWluKHksIGJhc2UpO1xuICAgICAgICBib3R0b20gPSBNYXRoLm1heCh5LCBiYXNlKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdCxcbiAgICAgICAgdG9wLFxuICAgICAgICByaWdodCxcbiAgICAgICAgYm90dG9tXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNraXBPckxpbWl0KHNraXAsIHZhbHVlLCBtaW4sIG1heCkge1xuICAgIHJldHVybiBza2lwID8gMCA6IF9saW1pdFZhbHVlKHZhbHVlLCBtaW4sIG1heCk7XG59XG5mdW5jdGlvbiBwYXJzZUJvcmRlcldpZHRoKGJhciwgbWF4VywgbWF4SCkge1xuICAgIGNvbnN0IHZhbHVlID0gYmFyLm9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgY29uc3Qgc2tpcCA9IGJhci5ib3JkZXJTa2lwcGVkO1xuICAgIGNvbnN0IG8gPSB0b1RSQkwodmFsdWUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHQ6IHNraXBPckxpbWl0KHNraXAudG9wLCBvLnRvcCwgMCwgbWF4SCksXG4gICAgICAgIHI6IHNraXBPckxpbWl0KHNraXAucmlnaHQsIG8ucmlnaHQsIDAsIG1heFcpLFxuICAgICAgICBiOiBza2lwT3JMaW1pdChza2lwLmJvdHRvbSwgby5ib3R0b20sIDAsIG1heEgpLFxuICAgICAgICBsOiBza2lwT3JMaW1pdChza2lwLmxlZnQsIG8ubGVmdCwgMCwgbWF4VylcbiAgICB9O1xufVxuZnVuY3Rpb24gcGFyc2VCb3JkZXJSYWRpdXMoYmFyLCBtYXhXLCBtYXhIKSB7XG4gICAgY29uc3QgeyBlbmFibGVCb3JkZXJSYWRpdXMgIH0gPSBiYXIuZ2V0UHJvcHMoW1xuICAgICAgICAnZW5hYmxlQm9yZGVyUmFkaXVzJ1xuICAgIF0pO1xuICAgIGNvbnN0IHZhbHVlID0gYmFyLm9wdGlvbnMuYm9yZGVyUmFkaXVzO1xuICAgIGNvbnN0IG8gPSB0b1RSQkxDb3JuZXJzKHZhbHVlKTtcbiAgICBjb25zdCBtYXhSID0gTWF0aC5taW4obWF4VywgbWF4SCk7XG4gICAgY29uc3Qgc2tpcCA9IGJhci5ib3JkZXJTa2lwcGVkO1xuICAgIGNvbnN0IGVuYWJsZUJvcmRlciA9IGVuYWJsZUJvcmRlclJhZGl1cyB8fCBpc09iamVjdCh2YWx1ZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9wTGVmdDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLnRvcCB8fCBza2lwLmxlZnQsIG8udG9wTGVmdCwgMCwgbWF4UiksXG4gICAgICAgIHRvcFJpZ2h0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAudG9wIHx8IHNraXAucmlnaHQsIG8udG9wUmlnaHQsIDAsIG1heFIpLFxuICAgICAgICBib3R0b21MZWZ0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAuYm90dG9tIHx8IHNraXAubGVmdCwgby5ib3R0b21MZWZ0LCAwLCBtYXhSKSxcbiAgICAgICAgYm90dG9tUmlnaHQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC5ib3R0b20gfHwgc2tpcC5yaWdodCwgby5ib3R0b21SaWdodCwgMCwgbWF4UilcbiAgICB9O1xufVxuZnVuY3Rpb24gYm91bmRpbmdSZWN0cyhiYXIpIHtcbiAgICBjb25zdCBib3VuZHMgPSBnZXRCYXJCb3VuZHMoYmFyKTtcbiAgICBjb25zdCB3aWR0aCA9IGJvdW5kcy5yaWdodCAtIGJvdW5kcy5sZWZ0O1xuICAgIGNvbnN0IGhlaWdodCA9IGJvdW5kcy5ib3R0b20gLSBib3VuZHMudG9wO1xuICAgIGNvbnN0IGJvcmRlciA9IHBhcnNlQm9yZGVyV2lkdGgoYmFyLCB3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICAgIGNvbnN0IHJhZGl1cyA9IHBhcnNlQm9yZGVyUmFkaXVzKGJhciwgd2lkdGggLyAyLCBoZWlnaHQgLyAyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvdXRlcjoge1xuICAgICAgICAgICAgeDogYm91bmRzLmxlZnQsXG4gICAgICAgICAgICB5OiBib3VuZHMudG9wLFxuICAgICAgICAgICAgdzogd2lkdGgsXG4gICAgICAgICAgICBoOiBoZWlnaHQsXG4gICAgICAgICAgICByYWRpdXNcbiAgICAgICAgfSxcbiAgICAgICAgaW5uZXI6IHtcbiAgICAgICAgICAgIHg6IGJvdW5kcy5sZWZ0ICsgYm9yZGVyLmwsXG4gICAgICAgICAgICB5OiBib3VuZHMudG9wICsgYm9yZGVyLnQsXG4gICAgICAgICAgICB3OiB3aWR0aCAtIGJvcmRlci5sIC0gYm9yZGVyLnIsXG4gICAgICAgICAgICBoOiBoZWlnaHQgLSBib3JkZXIudCAtIGJvcmRlci5iLFxuICAgICAgICAgICAgcmFkaXVzOiB7XG4gICAgICAgICAgICAgICAgdG9wTGVmdDogTWF0aC5tYXgoMCwgcmFkaXVzLnRvcExlZnQgLSBNYXRoLm1heChib3JkZXIudCwgYm9yZGVyLmwpKSxcbiAgICAgICAgICAgICAgICB0b3BSaWdodDogTWF0aC5tYXgoMCwgcmFkaXVzLnRvcFJpZ2h0IC0gTWF0aC5tYXgoYm9yZGVyLnQsIGJvcmRlci5yKSksXG4gICAgICAgICAgICAgICAgYm90dG9tTGVmdDogTWF0aC5tYXgoMCwgcmFkaXVzLmJvdHRvbUxlZnQgLSBNYXRoLm1heChib3JkZXIuYiwgYm9yZGVyLmwpKSxcbiAgICAgICAgICAgICAgICBib3R0b21SaWdodDogTWF0aC5tYXgoMCwgcmFkaXVzLmJvdHRvbVJpZ2h0IC0gTWF0aC5tYXgoYm9yZGVyLmIsIGJvcmRlci5yKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBpblJhbmdlKGJhciwgeCwgeSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHNraXBYID0geCA9PT0gbnVsbDtcbiAgICBjb25zdCBza2lwWSA9IHkgPT09IG51bGw7XG4gICAgY29uc3Qgc2tpcEJvdGggPSBza2lwWCAmJiBza2lwWTtcbiAgICBjb25zdCBib3VuZHMgPSBiYXIgJiYgIXNraXBCb3RoICYmIGdldEJhckJvdW5kcyhiYXIsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiBib3VuZHMgJiYgKHNraXBYIHx8IF9pc0JldHdlZW4oeCwgYm91bmRzLmxlZnQsIGJvdW5kcy5yaWdodCkpICYmIChza2lwWSB8fCBfaXNCZXR3ZWVuKHksIGJvdW5kcy50b3AsIGJvdW5kcy5ib3R0b20pKTtcbn1cbmZ1bmN0aW9uIGhhc1JhZGl1cyhyYWRpdXMpIHtcbiAgICByZXR1cm4gcmFkaXVzLnRvcExlZnQgfHwgcmFkaXVzLnRvcFJpZ2h0IHx8IHJhZGl1cy5ib3R0b21MZWZ0IHx8IHJhZGl1cy5ib3R0b21SaWdodDtcbn1cbiBmdW5jdGlvbiBhZGROb3JtYWxSZWN0UGF0aChjdHgsIHJlY3QpIHtcbiAgICBjdHgucmVjdChyZWN0LngsIHJlY3QueSwgcmVjdC53LCByZWN0LmgpO1xufVxuZnVuY3Rpb24gaW5mbGF0ZVJlY3QocmVjdCwgYW1vdW50LCByZWZSZWN0ID0ge30pIHtcbiAgICBjb25zdCB4ID0gcmVjdC54ICE9PSByZWZSZWN0LnggPyAtYW1vdW50IDogMDtcbiAgICBjb25zdCB5ID0gcmVjdC55ICE9PSByZWZSZWN0LnkgPyAtYW1vdW50IDogMDtcbiAgICBjb25zdCB3ID0gKHJlY3QueCArIHJlY3QudyAhPT0gcmVmUmVjdC54ICsgcmVmUmVjdC53ID8gYW1vdW50IDogMCkgLSB4O1xuICAgIGNvbnN0IGggPSAocmVjdC55ICsgcmVjdC5oICE9PSByZWZSZWN0LnkgKyByZWZSZWN0LmggPyBhbW91bnQgOiAwKSAtIHk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcmVjdC54ICsgeCxcbiAgICAgICAgeTogcmVjdC55ICsgeSxcbiAgICAgICAgdzogcmVjdC53ICsgdyxcbiAgICAgICAgaDogcmVjdC5oICsgaCxcbiAgICAgICAgcmFkaXVzOiByZWN0LnJhZGl1c1xuICAgIH07XG59XG5jbGFzcyBCYXJFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgc3RhdGljIGlkID0gJ2Jhcic7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBib3JkZXJTa2lwcGVkOiAnc3RhcnQnLFxuICAgICAgICBib3JkZXJXaWR0aDogMCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgICBpbmZsYXRlQW1vdW50OiAnYXV0bycsXG4gICAgICAgIHBvaW50U3R5bGU6IHVuZGVmaW5lZFxuICAgIH07XG4gc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcicsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnYm9yZGVyQ29sb3InXG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjZmcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5iYXNlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5pbmZsYXRlQW1vdW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoY2ZnKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZHJhdyhjdHgpIHtcbiAgICAgICAgY29uc3QgeyBpbmZsYXRlQW1vdW50ICwgb3B0aW9uczogeyBib3JkZXJDb2xvciAsIGJhY2tncm91bmRDb2xvciAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgaW5uZXIgLCBvdXRlciAgfSA9IGJvdW5kaW5nUmVjdHModGhpcyk7XG4gICAgICAgIGNvbnN0IGFkZFJlY3RQYXRoID0gaGFzUmFkaXVzKG91dGVyLnJhZGl1cykgPyBhZGRSb3VuZGVkUmVjdFBhdGggOiBhZGROb3JtYWxSZWN0UGF0aDtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgaWYgKG91dGVyLncgIT09IGlubmVyLncgfHwgb3V0ZXIuaCAhPT0gaW5uZXIuaCkge1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgYWRkUmVjdFBhdGgoY3R4LCBpbmZsYXRlUmVjdChvdXRlciwgaW5mbGF0ZUFtb3VudCwgaW5uZXIpKTtcbiAgICAgICAgICAgIGN0eC5jbGlwKCk7XG4gICAgICAgICAgICBhZGRSZWN0UGF0aChjdHgsIGluZmxhdGVSZWN0KGlubmVyLCAtaW5mbGF0ZUFtb3VudCwgb3V0ZXIpKTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBib3JkZXJDb2xvcjtcbiAgICAgICAgICAgIGN0eC5maWxsKCdldmVub2RkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBhZGRSZWN0UGF0aChjdHgsIGluZmxhdGVSZWN0KGlubmVyLCBpbmZsYXRlQW1vdW50KSk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICAgIGluUmFuZ2UobW91c2VYLCBtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGluUmFuZ2UodGhpcywgbW91c2VYLCBtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBpblhSYW5nZShtb3VzZVgsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGluUmFuZ2UodGhpcywgbW91c2VYLCBudWxsLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgaW5ZUmFuZ2UobW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG51bGwsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAsIGJhc2UgLCBob3Jpem9udGFsICB9ID0gIHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgJ2Jhc2UnLFxuICAgICAgICAgICAgJ2hvcml6b250YWwnXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogaG9yaXpvbnRhbCA/ICh4ICsgYmFzZSkgLyAyIDogeCxcbiAgICAgICAgICAgIHk6IGhvcml6b250YWwgPyB5IDogKHkgKyBiYXNlKSAvIDJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0UmFuZ2UoYXhpcykge1xuICAgICAgICByZXR1cm4gYXhpcyA9PT0gJ3gnID8gdGhpcy53aWR0aCAvIDIgOiB0aGlzLmhlaWdodCAvIDI7XG4gICAgfVxufVxuXG52YXIgZWxlbWVudHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5BcmNFbGVtZW50OiBBcmNFbGVtZW50LFxuQmFyRWxlbWVudDogQmFyRWxlbWVudCxcbkxpbmVFbGVtZW50OiBMaW5lRWxlbWVudCxcblBvaW50RWxlbWVudDogUG9pbnRFbGVtZW50XG59KTtcblxuY29uc3QgQk9SREVSX0NPTE9SUyA9IFtcbiAgICAncmdiKDU0LCAxNjIsIDIzNSknLFxuICAgICdyZ2IoMjU1LCA5OSwgMTMyKScsXG4gICAgJ3JnYigyNTUsIDE1OSwgNjQpJyxcbiAgICAncmdiKDI1NSwgMjA1LCA4NiknLFxuICAgICdyZ2IoNzUsIDE5MiwgMTkyKScsXG4gICAgJ3JnYigxNTMsIDEwMiwgMjU1KScsXG4gICAgJ3JnYigyMDEsIDIwMywgMjA3KScgLy8gZ3JleVxuXTtcbi8vIEJvcmRlciBjb2xvcnMgd2l0aCA1MCUgdHJhbnNwYXJlbmN5XG5jb25zdCBCQUNLR1JPVU5EX0NPTE9SUyA9IC8qICNfX1BVUkVfXyAqLyBCT1JERVJfQ09MT1JTLm1hcCgoY29sb3IpPT5jb2xvci5yZXBsYWNlKCdyZ2IoJywgJ3JnYmEoJykucmVwbGFjZSgnKScsICcsIDAuNSknKSk7XG5mdW5jdGlvbiBnZXRCb3JkZXJDb2xvcihpKSB7XG4gICAgcmV0dXJuIEJPUkRFUl9DT0xPUlNbaSAlIEJPUkRFUl9DT0xPUlMubGVuZ3RoXTtcbn1cbmZ1bmN0aW9uIGdldEJhY2tncm91bmRDb2xvcihpKSB7XG4gICAgcmV0dXJuIEJBQ0tHUk9VTkRfQ09MT1JTW2kgJSBCQUNLR1JPVU5EX0NPTE9SUy5sZW5ndGhdO1xufVxuZnVuY3Rpb24gY29sb3JpemVEZWZhdWx0RGF0YXNldChkYXRhc2V0LCBpKSB7XG4gICAgZGF0YXNldC5ib3JkZXJDb2xvciA9IGdldEJvcmRlckNvbG9yKGkpO1xuICAgIGRhdGFzZXQuYmFja2dyb3VuZENvbG9yID0gZ2V0QmFja2dyb3VuZENvbG9yKGkpO1xuICAgIHJldHVybiArK2k7XG59XG5mdW5jdGlvbiBjb2xvcml6ZURvdWdobnV0RGF0YXNldChkYXRhc2V0LCBpKSB7XG4gICAgZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IgPSBkYXRhc2V0LmRhdGEubWFwKCgpPT5nZXRCb3JkZXJDb2xvcihpKyspKTtcbiAgICByZXR1cm4gaTtcbn1cbmZ1bmN0aW9uIGNvbG9yaXplUG9sYXJBcmVhRGF0YXNldChkYXRhc2V0LCBpKSB7XG4gICAgZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IgPSBkYXRhc2V0LmRhdGEubWFwKCgpPT5nZXRCYWNrZ3JvdW5kQ29sb3IoaSsrKSk7XG4gICAgcmV0dXJuIGk7XG59XG5mdW5jdGlvbiBnZXRDb2xvcml6ZXIoY2hhcnQpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgcmV0dXJuIChkYXRhc2V0LCBkYXRhc2V0SW5kZXgpPT57XG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXI7XG4gICAgICAgIGlmIChjb250cm9sbGVyIGluc3RhbmNlb2YgRG91Z2hudXRDb250cm9sbGVyKSB7XG4gICAgICAgICAgICBpID0gY29sb3JpemVEb3VnaG51dERhdGFzZXQoZGF0YXNldCwgaSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udHJvbGxlciBpbnN0YW5jZW9mIFBvbGFyQXJlYUNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGkgPSBjb2xvcml6ZVBvbGFyQXJlYURhdGFzZXQoZGF0YXNldCwgaSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udHJvbGxlcikge1xuICAgICAgICAgICAgaSA9IGNvbG9yaXplRGVmYXVsdERhdGFzZXQoZGF0YXNldCwgaSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY29udGFpbnNDb2xvcnNEZWZpbml0aW9ucyhkZXNjcmlwdG9ycykge1xuICAgIGxldCBrO1xuICAgIGZvcihrIGluIGRlc2NyaXB0b3JzKXtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3JzW2tdLmJvcmRlckNvbG9yIHx8IGRlc2NyaXB0b3JzW2tdLmJhY2tncm91bmRDb2xvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY29udGFpbnNDb2xvcnNEZWZpbml0aW9uKGRlc2NyaXB0b3IpIHtcbiAgICByZXR1cm4gZGVzY3JpcHRvciAmJiAoZGVzY3JpcHRvci5ib3JkZXJDb2xvciB8fCBkZXNjcmlwdG9yLmJhY2tncm91bmRDb2xvcik7XG59XG52YXIgcGx1Z2luX2NvbG9ycyA9IHtcbiAgICBpZDogJ2NvbG9ycycsXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgZm9yY2VPdmVycmlkZTogZmFsc2VcbiAgICB9LFxuICAgIGJlZm9yZUxheW91dCAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5lbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBkYXRhOiB7IGRhdGFzZXRzICB9ICwgb3B0aW9uczogY2hhcnRPcHRpb25zICB9ID0gY2hhcnQuY29uZmlnO1xuICAgICAgICBjb25zdCB7IGVsZW1lbnRzICB9ID0gY2hhcnRPcHRpb25zO1xuICAgICAgICBpZiAoIW9wdGlvbnMuZm9yY2VPdmVycmlkZSAmJiAoY29udGFpbnNDb2xvcnNEZWZpbml0aW9ucyhkYXRhc2V0cykgfHwgY29udGFpbnNDb2xvcnNEZWZpbml0aW9uKGNoYXJ0T3B0aW9ucykgfHwgZWxlbWVudHMgJiYgY29udGFpbnNDb2xvcnNEZWZpbml0aW9ucyhlbGVtZW50cykpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29sb3JpemVyID0gZ2V0Q29sb3JpemVyKGNoYXJ0KTtcbiAgICAgICAgZGF0YXNldHMuZm9yRWFjaChjb2xvcml6ZXIpO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGx0dGJEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgsIG9wdGlvbnMpIHtcbiBjb25zdCBzYW1wbGVzID0gb3B0aW9ucy5zYW1wbGVzIHx8IGF2YWlsYWJsZVdpZHRoO1xuICAgIGlmIChzYW1wbGVzID49IGNvdW50KSB7XG4gICAgICAgIHJldHVybiBkYXRhLnNsaWNlKHN0YXJ0LCBzdGFydCArIGNvdW50KTtcbiAgICB9XG4gICAgY29uc3QgZGVjaW1hdGVkID0gW107XG4gICAgY29uc3QgYnVja2V0V2lkdGggPSAoY291bnQgLSAyKSAvIChzYW1wbGVzIC0gMik7XG4gICAgbGV0IHNhbXBsZWRJbmRleCA9IDA7XG4gICAgY29uc3QgZW5kSW5kZXggPSBzdGFydCArIGNvdW50IC0gMTtcbiAgICBsZXQgYSA9IHN0YXJ0O1xuICAgIGxldCBpLCBtYXhBcmVhUG9pbnQsIG1heEFyZWEsIGFyZWEsIG5leHRBO1xuICAgIGRlY2ltYXRlZFtzYW1wbGVkSW5kZXgrK10gPSBkYXRhW2FdO1xuICAgIGZvcihpID0gMDsgaSA8IHNhbXBsZXMgLSAyOyBpKyspe1xuICAgICAgICBsZXQgYXZnWCA9IDA7XG4gICAgICAgIGxldCBhdmdZID0gMDtcbiAgICAgICAgbGV0IGo7XG4gICAgICAgIGNvbnN0IGF2Z1JhbmdlU3RhcnQgPSBNYXRoLmZsb29yKChpICsgMSkgKiBidWNrZXRXaWR0aCkgKyAxICsgc3RhcnQ7XG4gICAgICAgIGNvbnN0IGF2Z1JhbmdlRW5kID0gTWF0aC5taW4oTWF0aC5mbG9vcigoaSArIDIpICogYnVja2V0V2lkdGgpICsgMSwgY291bnQpICsgc3RhcnQ7XG4gICAgICAgIGNvbnN0IGF2Z1JhbmdlTGVuZ3RoID0gYXZnUmFuZ2VFbmQgLSBhdmdSYW5nZVN0YXJ0O1xuICAgICAgICBmb3IoaiA9IGF2Z1JhbmdlU3RhcnQ7IGogPCBhdmdSYW5nZUVuZDsgaisrKXtcbiAgICAgICAgICAgIGF2Z1ggKz0gZGF0YVtqXS54O1xuICAgICAgICAgICAgYXZnWSArPSBkYXRhW2pdLnk7XG4gICAgICAgIH1cbiAgICAgICAgYXZnWCAvPSBhdmdSYW5nZUxlbmd0aDtcbiAgICAgICAgYXZnWSAvPSBhdmdSYW5nZUxlbmd0aDtcbiAgICAgICAgY29uc3QgcmFuZ2VPZmZzID0gTWF0aC5mbG9vcihpICogYnVja2V0V2lkdGgpICsgMSArIHN0YXJ0O1xuICAgICAgICBjb25zdCByYW5nZVRvID0gTWF0aC5taW4oTWF0aC5mbG9vcigoaSArIDEpICogYnVja2V0V2lkdGgpICsgMSwgY291bnQpICsgc3RhcnQ7XG4gICAgICAgIGNvbnN0IHsgeDogcG9pbnRBeCAsIHk6IHBvaW50QXkgIH0gPSBkYXRhW2FdO1xuICAgICAgICBtYXhBcmVhID0gYXJlYSA9IC0xO1xuICAgICAgICBmb3IoaiA9IHJhbmdlT2ZmczsgaiA8IHJhbmdlVG87IGorKyl7XG4gICAgICAgICAgICBhcmVhID0gMC41ICogTWF0aC5hYnMoKHBvaW50QXggLSBhdmdYKSAqIChkYXRhW2pdLnkgLSBwb2ludEF5KSAtIChwb2ludEF4IC0gZGF0YVtqXS54KSAqIChhdmdZIC0gcG9pbnRBeSkpO1xuICAgICAgICAgICAgaWYgKGFyZWEgPiBtYXhBcmVhKSB7XG4gICAgICAgICAgICAgICAgbWF4QXJlYSA9IGFyZWE7XG4gICAgICAgICAgICAgICAgbWF4QXJlYVBvaW50ID0gZGF0YVtqXTtcbiAgICAgICAgICAgICAgICBuZXh0QSA9IGo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IG1heEFyZWFQb2ludDtcbiAgICAgICAgYSA9IG5leHRBO1xuICAgIH1cbiAgICBkZWNpbWF0ZWRbc2FtcGxlZEluZGV4KytdID0gZGF0YVtlbmRJbmRleF07XG4gICAgcmV0dXJuIGRlY2ltYXRlZDtcbn1cbmZ1bmN0aW9uIG1pbk1heERlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCkge1xuICAgIGxldCBhdmdYID0gMDtcbiAgICBsZXQgY291bnRYID0gMDtcbiAgICBsZXQgaSwgcG9pbnQsIHgsIHksIHByZXZYLCBtaW5JbmRleCwgbWF4SW5kZXgsIHN0YXJ0SW5kZXgsIG1pblksIG1heFk7XG4gICAgY29uc3QgZGVjaW1hdGVkID0gW107XG4gICAgY29uc3QgZW5kSW5kZXggPSBzdGFydCArIGNvdW50IC0gMTtcbiAgICBjb25zdCB4TWluID0gZGF0YVtzdGFydF0ueDtcbiAgICBjb25zdCB4TWF4ID0gZGF0YVtlbmRJbmRleF0ueDtcbiAgICBjb25zdCBkeCA9IHhNYXggLSB4TWluO1xuICAgIGZvcihpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpe1xuICAgICAgICBwb2ludCA9IGRhdGFbaV07XG4gICAgICAgIHggPSAocG9pbnQueCAtIHhNaW4pIC8gZHggKiBhdmFpbGFibGVXaWR0aDtcbiAgICAgICAgeSA9IHBvaW50Lnk7XG4gICAgICAgIGNvbnN0IHRydW5jWCA9IHggfCAwO1xuICAgICAgICBpZiAodHJ1bmNYID09PSBwcmV2WCkge1xuICAgICAgICAgICAgaWYgKHkgPCBtaW5ZKSB7XG4gICAgICAgICAgICAgICAgbWluWSA9IHk7XG4gICAgICAgICAgICAgICAgbWluSW5kZXggPSBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh5ID4gbWF4WSkge1xuICAgICAgICAgICAgICAgIG1heFkgPSB5O1xuICAgICAgICAgICAgICAgIG1heEluZGV4ID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF2Z1ggPSAoY291bnRYICogYXZnWCArIHBvaW50LngpIC8gKytjb3VudFg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0SW5kZXggPSBpIC0gMTtcbiAgICAgICAgICAgIGlmICghaXNOdWxsT3JVbmRlZihtaW5JbmRleCkgJiYgIWlzTnVsbE9yVW5kZWYobWF4SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJtZWRpYXRlSW5kZXgxID0gTWF0aC5taW4obWluSW5kZXgsIG1heEluZGV4KTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcm1lZGlhdGVJbmRleDIgPSBNYXRoLm1heChtaW5JbmRleCwgbWF4SW5kZXgpO1xuICAgICAgICAgICAgICAgIGlmIChpbnRlcm1lZGlhdGVJbmRleDEgIT09IHN0YXJ0SW5kZXggJiYgaW50ZXJtZWRpYXRlSW5kZXgxICE9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVjaW1hdGVkLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZGF0YVtpbnRlcm1lZGlhdGVJbmRleDFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogYXZnWFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGludGVybWVkaWF0ZUluZGV4MiAhPT0gc3RhcnRJbmRleCAmJiBpbnRlcm1lZGlhdGVJbmRleDIgIT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBkZWNpbWF0ZWQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5kYXRhW2ludGVybWVkaWF0ZUluZGV4Ml0sXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBhdmdYXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpID4gMCAmJiBsYXN0SW5kZXggIT09IHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBkZWNpbWF0ZWQucHVzaChkYXRhW2xhc3RJbmRleF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVjaW1hdGVkLnB1c2gocG9pbnQpO1xuICAgICAgICAgICAgcHJldlggPSB0cnVuY1g7XG4gICAgICAgICAgICBjb3VudFggPSAwO1xuICAgICAgICAgICAgbWluWSA9IG1heFkgPSB5O1xuICAgICAgICAgICAgbWluSW5kZXggPSBtYXhJbmRleCA9IHN0YXJ0SW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZWNpbWF0ZWQ7XG59XG5mdW5jdGlvbiBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCkge1xuICAgIGlmIChkYXRhc2V0Ll9kZWNpbWF0ZWQpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGRhdGFzZXQuX2RhdGE7XG4gICAgICAgIGRlbGV0ZSBkYXRhc2V0Ll9kZWNpbWF0ZWQ7XG4gICAgICAgIGRlbGV0ZSBkYXRhc2V0Ll9kYXRhO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YXNldCwgJ2RhdGEnLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZGF0YVxuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhbkRlY2ltYXRlZERhdGEoY2hhcnQpIHtcbiAgICBjaGFydC5kYXRhLmRhdGFzZXRzLmZvckVhY2goKGRhdGFzZXQpPT57XG4gICAgICAgIGNsZWFuRGVjaW1hdGVkRGF0YXNldChkYXRhc2V0KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHNTaW1wbGlmaWVkKG1ldGEsIHBvaW50cykge1xuICAgIGNvbnN0IHBvaW50Q291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGNvdW50O1xuICAgIGNvbnN0IHsgaVNjYWxlICB9ID0gbWV0YTtcbiAgICBjb25zdCB7IG1pbiAsIG1heCAsIG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gaVNjYWxlLmdldFVzZXJCb3VuZHMoKTtcbiAgICBpZiAobWluRGVmaW5lZCkge1xuICAgICAgICBzdGFydCA9IF9saW1pdFZhbHVlKF9sb29rdXBCeUtleShwb2ludHMsIGlTY2FsZS5heGlzLCBtaW4pLmxvLCAwLCBwb2ludENvdW50IC0gMSk7XG4gICAgfVxuICAgIGlmIChtYXhEZWZpbmVkKSB7XG4gICAgICAgIGNvdW50ID0gX2xpbWl0VmFsdWUoX2xvb2t1cEJ5S2V5KHBvaW50cywgaVNjYWxlLmF4aXMsIG1heCkuaGkgKyAxLCBzdGFydCwgcG9pbnRDb3VudCkgLSBzdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb3VudCA9IHBvaW50Q291bnQgLSBzdGFydDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGNvdW50XG4gICAgfTtcbn1cbnZhciBwbHVnaW5fZGVjaW1hdGlvbiA9IHtcbiAgICBpZDogJ2RlY2ltYXRpb24nLFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGFsZ29yaXRobTogJ21pbi1tYXgnLFxuICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH0sXG4gICAgYmVmb3JlRWxlbWVudHNVcGRhdGU6IChjaGFydCwgYXJncywgb3B0aW9ucyk9PntcbiAgICAgICAgaWYgKCFvcHRpb25zLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXZhaWxhYmxlV2lkdGggPSBjaGFydC53aWR0aDtcbiAgICAgICAgY2hhcnQuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKChkYXRhc2V0LCBkYXRhc2V0SW5kZXgpPT57XG4gICAgICAgICAgICBjb25zdCB7IF9kYXRhICwgaW5kZXhBeGlzICB9ID0gZGF0YXNldDtcbiAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IF9kYXRhIHx8IGRhdGFzZXQuZGF0YTtcbiAgICAgICAgICAgIGlmIChyZXNvbHZlKFtcbiAgICAgICAgICAgICAgICBpbmRleEF4aXMsXG4gICAgICAgICAgICAgICAgY2hhcnQub3B0aW9ucy5pbmRleEF4aXNcbiAgICAgICAgICAgIF0pID09PSAneScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW1ldGEuY29udHJvbGxlci5zdXBwb3J0c0RlY2ltYXRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB4QXhpcyA9IGNoYXJ0LnNjYWxlc1ttZXRhLnhBeGlzSURdO1xuICAgICAgICAgICAgaWYgKHhBeGlzLnR5cGUgIT09ICdsaW5lYXInICYmIHhBeGlzLnR5cGUgIT09ICd0aW1lJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGFydC5vcHRpb25zLnBhcnNpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgeyBzdGFydCAsIGNvdW50ICB9ID0gZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50c1NpbXBsaWZpZWQobWV0YSwgZGF0YSk7XG4gICAgICAgICAgICBjb25zdCB0aHJlc2hvbGQgPSBvcHRpb25zLnRocmVzaG9sZCB8fCA0ICogYXZhaWxhYmxlV2lkdGg7XG4gICAgICAgICAgICBpZiAoY291bnQgPD0gdGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgY2xlYW5EZWNpbWF0ZWREYXRhc2V0KGRhdGFzZXQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc051bGxPclVuZGVmKF9kYXRhKSkge1xuICAgICAgICAgICAgICAgIGRhdGFzZXQuX2RhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhc2V0LmRhdGE7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGFzZXQsICdkYXRhJywge1xuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVjaW1hdGVkO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZGVjaW1hdGVkO1xuICAgICAgICAgICAgc3dpdGNoKG9wdGlvbnMuYWxnb3JpdGhtKXtcbiAgICAgICAgICAgICAgICBjYXNlICdsdHRiJzpcbiAgICAgICAgICAgICAgICAgICAgZGVjaW1hdGVkID0gbHR0YkRlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21pbi1tYXgnOlxuICAgICAgICAgICAgICAgICAgICBkZWNpbWF0ZWQgPSBtaW5NYXhEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGRlY2ltYXRpb24gYWxnb3JpdGhtICcke29wdGlvbnMuYWxnb3JpdGhtfSdgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGFzZXQuX2RlY2ltYXRlZCA9IGRlY2ltYXRlZDtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBkZXN0cm95IChjaGFydCkge1xuICAgICAgICBjbGVhbkRlY2ltYXRlZERhdGEoY2hhcnQpO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIF9zZWdtZW50cyhsaW5lLCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICAgIGNvbnN0IHBvaW50cyA9IGxpbmUucG9pbnRzO1xuICAgIGNvbnN0IHRwb2ludHMgPSB0YXJnZXQucG9pbnRzO1xuICAgIGNvbnN0IHBhcnRzID0gW107XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKXtcbiAgICAgICAgbGV0IHsgc3RhcnQgLCBlbmQgIH0gPSBzZWdtZW50O1xuICAgICAgICBlbmQgPSBfZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgcG9pbnRzKTtcbiAgICAgICAgY29uc3QgYm91bmRzID0gX2dldEJvdW5kcyhwcm9wZXJ0eSwgcG9pbnRzW3N0YXJ0XSwgcG9pbnRzW2VuZF0sIHNlZ21lbnQubG9vcCk7XG4gICAgICAgIGlmICghdGFyZ2V0LnNlZ21lbnRzKSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHNlZ21lbnQsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBib3VuZHMsXG4gICAgICAgICAgICAgICAgc3RhcnQ6IHBvaW50c1tzdGFydF0sXG4gICAgICAgICAgICAgICAgZW5kOiBwb2ludHNbZW5kXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YXJnZXRTZWdtZW50cyA9IF9ib3VuZFNlZ21lbnRzKHRhcmdldCwgYm91bmRzKTtcbiAgICAgICAgZm9yIChjb25zdCB0Z3Qgb2YgdGFyZ2V0U2VnbWVudHMpe1xuICAgICAgICAgICAgY29uc3Qgc3ViQm91bmRzID0gX2dldEJvdW5kcyhwcm9wZXJ0eSwgdHBvaW50c1t0Z3Quc3RhcnRdLCB0cG9pbnRzW3RndC5lbmRdLCB0Z3QubG9vcCk7XG4gICAgICAgICAgICBjb25zdCBmaWxsU291cmNlcyA9IF9ib3VuZFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBzdWJCb3VuZHMpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBmaWxsU291cmNlIG9mIGZpbGxTb3VyY2VzKXtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBmaWxsU291cmNlLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHRndCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtwcm9wZXJ0eV06IF9nZXRFZGdlKGJvdW5kcywgc3ViQm91bmRzLCAnc3RhcnQnLCBNYXRoLm1heClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBbcHJvcGVydHldOiBfZ2V0RWRnZShib3VuZHMsIHN1YkJvdW5kcywgJ2VuZCcsIE1hdGgubWluKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzO1xufVxuZnVuY3Rpb24gX2dldEJvdW5kcyhwcm9wZXJ0eSwgZmlyc3QsIGxhc3QsIGxvb3ApIHtcbiAgICBpZiAobG9vcCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBzdGFydCA9IGZpcnN0W3Byb3BlcnR5XTtcbiAgICBsZXQgZW5kID0gbGFzdFtwcm9wZXJ0eV07XG4gICAgaWYgKHByb3BlcnR5ID09PSAnYW5nbGUnKSB7XG4gICAgICAgIHN0YXJ0ID0gX25vcm1hbGl6ZUFuZ2xlKHN0YXJ0KTtcbiAgICAgICAgZW5kID0gX25vcm1hbGl6ZUFuZ2xlKGVuZCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHByb3BlcnR5LFxuICAgICAgICBzdGFydCxcbiAgICAgICAgZW5kXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF9wb2ludHNGcm9tU2VnbWVudHMoYm91bmRhcnksIGxpbmUpIHtcbiAgICBjb25zdCB7IHggPW51bGwgLCB5ID1udWxsICB9ID0gYm91bmRhcnkgfHwge307XG4gICAgY29uc3QgbGluZVBvaW50cyA9IGxpbmUucG9pbnRzO1xuICAgIGNvbnN0IHBvaW50cyA9IFtdO1xuICAgIGxpbmUuc2VnbWVudHMuZm9yRWFjaCgoeyBzdGFydCAsIGVuZCAgfSk9PntcbiAgICAgICAgZW5kID0gX2ZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIGxpbmVQb2ludHMpO1xuICAgICAgICBjb25zdCBmaXJzdCA9IGxpbmVQb2ludHNbc3RhcnRdO1xuICAgICAgICBjb25zdCBsYXN0ID0gbGluZVBvaW50c1tlbmRdO1xuICAgICAgICBpZiAoeSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHg6IGZpcnN0LngsXG4gICAgICAgICAgICAgICAgeVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogbGFzdC54LFxuICAgICAgICAgICAgICAgIHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHggIT09IG51bGwpIHtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgIHk6IGZpcnN0LnlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgeTogbGFzdC55XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwb2ludHM7XG59XG5mdW5jdGlvbiBfZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgcG9pbnRzKSB7XG4gICAgZm9yKDsgZW5kID4gc3RhcnQ7IGVuZC0tKXtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbZW5kXTtcbiAgICAgICAgaWYgKCFpc05hTihwb2ludC54KSAmJiAhaXNOYU4ocG9pbnQueSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbmQ7XG59XG5mdW5jdGlvbiBfZ2V0RWRnZShhLCBiLCBwcm9wLCBmbikge1xuICAgIGlmIChhICYmIGIpIHtcbiAgICAgICAgcmV0dXJuIGZuKGFbcHJvcF0sIGJbcHJvcF0pO1xuICAgIH1cbiAgICByZXR1cm4gYSA/IGFbcHJvcF0gOiBiID8gYltwcm9wXSA6IDA7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVCb3VuZGFyeUxpbmUoYm91bmRhcnksIGxpbmUpIHtcbiAgICBsZXQgcG9pbnRzID0gW107XG4gICAgbGV0IF9sb29wID0gZmFsc2U7XG4gICAgaWYgKGlzQXJyYXkoYm91bmRhcnkpKSB7XG4gICAgICAgIF9sb29wID0gdHJ1ZTtcbiAgICAgICAgcG9pbnRzID0gYm91bmRhcnk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcG9pbnRzID0gX3BvaW50c0Zyb21TZWdtZW50cyhib3VuZGFyeSwgbGluZSk7XG4gICAgfVxuICAgIHJldHVybiBwb2ludHMubGVuZ3RoID8gbmV3IExpbmVFbGVtZW50KHtcbiAgICAgICAgcG9pbnRzLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICB0ZW5zaW9uOiAwXG4gICAgICAgIH0sXG4gICAgICAgIF9sb29wLFxuICAgICAgICBfZnVsbExvb3A6IF9sb29wXG4gICAgfSkgOiBudWxsO1xufVxuZnVuY3Rpb24gX3Nob3VsZEFwcGx5RmlsbChzb3VyY2UpIHtcbiAgICByZXR1cm4gc291cmNlICYmIHNvdXJjZS5maWxsICE9PSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gX3Jlc29sdmVUYXJnZXQoc291cmNlcywgaW5kZXgsIHByb3BhZ2F0ZSkge1xuICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgIGxldCBmaWxsID0gc291cmNlLmZpbGw7XG4gICAgY29uc3QgdmlzaXRlZCA9IFtcbiAgICAgICAgaW5kZXhcbiAgICBdO1xuICAgIGxldCB0YXJnZXQ7XG4gICAgaWYgKCFwcm9wYWdhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZpbGw7XG4gICAgfVxuICAgIHdoaWxlKGZpbGwgIT09IGZhbHNlICYmIHZpc2l0ZWQuaW5kZXhPZihmaWxsKSA9PT0gLTEpe1xuICAgICAgICBpZiAoIWlzTnVtYmVyRmluaXRlKGZpbGwpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsbDtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQgPSBzb3VyY2VzW2ZpbGxdO1xuICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YXJnZXQudmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbGw7XG4gICAgICAgIH1cbiAgICAgICAgdmlzaXRlZC5wdXNoKGZpbGwpO1xuICAgICAgICBmaWxsID0gdGFyZ2V0LmZpbGw7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbiBmdW5jdGlvbiBfZGVjb2RlRmlsbChsaW5lLCBpbmRleCwgY291bnQpIHtcbiAgICAgY29uc3QgZmlsbCA9IHBhcnNlRmlsbE9wdGlvbihsaW5lKTtcbiAgICBpZiAoaXNPYmplY3QoZmlsbCkpIHtcbiAgICAgICAgcmV0dXJuIGlzTmFOKGZpbGwudmFsdWUpID8gZmFsc2UgOiBmaWxsO1xuICAgIH1cbiAgICBsZXQgdGFyZ2V0ID0gcGFyc2VGbG9hdChmaWxsKTtcbiAgICBpZiAoaXNOdW1iZXJGaW5pdGUodGFyZ2V0KSAmJiBNYXRoLmZsb29yKHRhcmdldCkgPT09IHRhcmdldCkge1xuICAgICAgICByZXR1cm4gZGVjb2RlVGFyZ2V0SW5kZXgoZmlsbFswXSwgaW5kZXgsIHRhcmdldCwgY291bnQpO1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgICAnb3JpZ2luJyxcbiAgICAgICAgJ3N0YXJ0JyxcbiAgICAgICAgJ2VuZCcsXG4gICAgICAgICdzdGFjaycsXG4gICAgICAgICdzaGFwZSdcbiAgICBdLmluZGV4T2YoZmlsbCkgPj0gMCAmJiBmaWxsO1xufVxuZnVuY3Rpb24gZGVjb2RlVGFyZ2V0SW5kZXgoZmlyc3RDaCwgaW5kZXgsIHRhcmdldCwgY291bnQpIHtcbiAgICBpZiAoZmlyc3RDaCA9PT0gJy0nIHx8IGZpcnN0Q2ggPT09ICcrJykge1xuICAgICAgICB0YXJnZXQgPSBpbmRleCArIHRhcmdldDtcbiAgICB9XG4gICAgaWYgKHRhcmdldCA9PT0gaW5kZXggfHwgdGFyZ2V0IDwgMCB8fCB0YXJnZXQgPj0gY291bnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuIGZ1bmN0aW9uIF9nZXRUYXJnZXRQaXhlbChmaWxsLCBzY2FsZSkge1xuICAgIGxldCBwaXhlbCA9IG51bGw7XG4gICAgaWYgKGZpbGwgPT09ICdzdGFydCcpIHtcbiAgICAgICAgcGl4ZWwgPSBzY2FsZS5ib3R0b207XG4gICAgfSBlbHNlIGlmIChmaWxsID09PSAnZW5kJykge1xuICAgICAgICBwaXhlbCA9IHNjYWxlLnRvcDtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGZpbGwpKSB7XG4gICAgICAgIHBpeGVsID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShmaWxsLnZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHNjYWxlLmdldEJhc2VQaXhlbCkge1xuICAgICAgICBwaXhlbCA9IHNjYWxlLmdldEJhc2VQaXhlbCgpO1xuICAgIH1cbiAgICByZXR1cm4gcGl4ZWw7XG59XG4gZnVuY3Rpb24gX2dldFRhcmdldFZhbHVlKGZpbGwsIHNjYWxlLCBzdGFydFZhbHVlKSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmIChmaWxsID09PSAnc3RhcnQnKSB7XG4gICAgICAgIHZhbHVlID0gc3RhcnRWYWx1ZTtcbiAgICB9IGVsc2UgaWYgKGZpbGwgPT09ICdlbmQnKSB7XG4gICAgICAgIHZhbHVlID0gc2NhbGUub3B0aW9ucy5yZXZlcnNlID8gc2NhbGUubWluIDogc2NhbGUubWF4O1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoZmlsbCkpIHtcbiAgICAgICAgdmFsdWUgPSBmaWxsLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gc2NhbGUuZ2V0QmFzZVZhbHVlKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbiBmdW5jdGlvbiBwYXJzZUZpbGxPcHRpb24obGluZSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBsaW5lLm9wdGlvbnM7XG4gICAgY29uc3QgZmlsbE9wdGlvbiA9IG9wdGlvbnMuZmlsbDtcbiAgICBsZXQgZmlsbCA9IHZhbHVlT3JEZWZhdWx0KGZpbGxPcHRpb24gJiYgZmlsbE9wdGlvbi50YXJnZXQsIGZpbGxPcHRpb24pO1xuICAgIGlmIChmaWxsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZmlsbCA9ICEhb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgfVxuICAgIGlmIChmaWxsID09PSBmYWxzZSB8fCBmaWxsID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGZpbGwgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuICdvcmlnaW4nO1xuICAgIH1cbiAgICByZXR1cm4gZmlsbDtcbn1cblxuZnVuY3Rpb24gX2J1aWxkU3RhY2tMaW5lKHNvdXJjZSkge1xuICAgIGNvbnN0IHsgc2NhbGUgLCBpbmRleCAsIGxpbmUgIH0gPSBzb3VyY2U7XG4gICAgY29uc3QgcG9pbnRzID0gW107XG4gICAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICAgIGNvbnN0IHNvdXJjZVBvaW50cyA9IGxpbmUucG9pbnRzO1xuICAgIGNvbnN0IGxpbmVzQmVsb3cgPSBnZXRMaW5lc0JlbG93KHNjYWxlLCBpbmRleCk7XG4gICAgbGluZXNCZWxvdy5wdXNoKF9jcmVhdGVCb3VuZGFyeUxpbmUoe1xuICAgICAgICB4OiBudWxsLFxuICAgICAgICB5OiBzY2FsZS5ib3R0b21cbiAgICB9LCBsaW5lKSk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3Qgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgICAgICBmb3IobGV0IGogPSBzZWdtZW50LnN0YXJ0OyBqIDw9IHNlZ21lbnQuZW5kOyBqKyspe1xuICAgICAgICAgICAgYWRkUG9pbnRzQmVsb3cocG9pbnRzLCBzb3VyY2VQb2ludHNbal0sIGxpbmVzQmVsb3cpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgTGluZUVsZW1lbnQoe1xuICAgICAgICBwb2ludHMsXG4gICAgICAgIG9wdGlvbnM6IHt9XG4gICAgfSk7XG59XG4gZnVuY3Rpb24gZ2V0TGluZXNCZWxvdyhzY2FsZSwgaW5kZXgpIHtcbiAgICBjb25zdCBiZWxvdyA9IFtdO1xuICAgIGNvbnN0IG1ldGFzID0gc2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoJ2xpbmUnKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgbWV0YXMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBtZXRhID0gbWV0YXNbaV07XG4gICAgICAgIGlmIChtZXRhLmluZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtZXRhLmhpZGRlbikge1xuICAgICAgICAgICAgYmVsb3cudW5zaGlmdChtZXRhLmRhdGFzZXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiZWxvdztcbn1cbiBmdW5jdGlvbiBhZGRQb2ludHNCZWxvdyhwb2ludHMsIHNvdXJjZVBvaW50LCBsaW5lc0JlbG93KSB7XG4gICAgY29uc3QgcG9zdHBvbmVkID0gW107XG4gICAgZm9yKGxldCBqID0gMDsgaiA8IGxpbmVzQmVsb3cubGVuZ3RoOyBqKyspe1xuICAgICAgICBjb25zdCBsaW5lID0gbGluZXNCZWxvd1tqXTtcbiAgICAgICAgY29uc3QgeyBmaXJzdCAsIGxhc3QgLCBwb2ludCAgfSA9IGZpbmRQb2ludChsaW5lLCBzb3VyY2VQb2ludCwgJ3gnKTtcbiAgICAgICAgaWYgKCFwb2ludCB8fCBmaXJzdCAmJiBsYXN0KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICAgIHBvc3Rwb25lZC51bnNoaWZ0KHBvaW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcbiAgICAgICAgICAgIGlmICghbGFzdCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHBvaW50cy5wdXNoKC4uLnBvc3Rwb25lZCk7XG59XG4gZnVuY3Rpb24gZmluZFBvaW50KGxpbmUsIHNvdXJjZVBvaW50LCBwcm9wZXJ0eSkge1xuICAgIGNvbnN0IHBvaW50ID0gbGluZS5pbnRlcnBvbGF0ZShzb3VyY2VQb2ludCwgcHJvcGVydHkpO1xuICAgIGlmICghcG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBjb25zdCBwb2ludFZhbHVlID0gcG9pbnRbcHJvcGVydHldO1xuICAgIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgICBjb25zdCBsaW5lUG9pbnRzID0gbGluZS5wb2ludHM7XG4gICAgbGV0IGZpcnN0ID0gZmFsc2U7XG4gICAgbGV0IGxhc3QgPSBmYWxzZTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgICAgIGNvbnN0IGZpcnN0VmFsdWUgPSBsaW5lUG9pbnRzW3NlZ21lbnQuc3RhcnRdW3Byb3BlcnR5XTtcbiAgICAgICAgY29uc3QgbGFzdFZhbHVlID0gbGluZVBvaW50c1tzZWdtZW50LmVuZF1bcHJvcGVydHldO1xuICAgICAgICBpZiAoX2lzQmV0d2Vlbihwb2ludFZhbHVlLCBmaXJzdFZhbHVlLCBsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICBmaXJzdCA9IHBvaW50VmFsdWUgPT09IGZpcnN0VmFsdWU7XG4gICAgICAgICAgICBsYXN0ID0gcG9pbnRWYWx1ZSA9PT0gbGFzdFZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmlyc3QsXG4gICAgICAgIGxhc3QsXG4gICAgICAgIHBvaW50XG4gICAgfTtcbn1cblxuY2xhc3Mgc2ltcGxlQXJjIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKXtcbiAgICAgICAgdGhpcy54ID0gb3B0cy54O1xuICAgICAgICB0aGlzLnkgPSBvcHRzLnk7XG4gICAgICAgIHRoaXMucmFkaXVzID0gb3B0cy5yYWRpdXM7XG4gICAgfVxuICAgIHBhdGhTZWdtZW50KGN0eCwgYm91bmRzLCBvcHRzKSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgLCByYWRpdXMgIH0gPSB0aGlzO1xuICAgICAgICBib3VuZHMgPSBib3VuZHMgfHwge1xuICAgICAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgICAgICBlbmQ6IFRBVVxuICAgICAgICB9O1xuICAgICAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgYm91bmRzLmVuZCwgYm91bmRzLnN0YXJ0LCB0cnVlKTtcbiAgICAgICAgcmV0dXJuICFvcHRzLmJvdW5kcztcbiAgICB9XG4gICAgaW50ZXJwb2xhdGUocG9pbnQpIHtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAsIHJhZGl1cyAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gcG9pbnQuYW5nbGU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB4ICsgTWF0aC5jb3MoYW5nbGUpICogcmFkaXVzLFxuICAgICAgICAgICAgeTogeSArIE1hdGguc2luKGFuZ2xlKSAqIHJhZGl1cyxcbiAgICAgICAgICAgIGFuZ2xlXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfZ2V0VGFyZ2V0KHNvdXJjZSkge1xuICAgIGNvbnN0IHsgY2hhcnQgLCBmaWxsICwgbGluZSAgfSA9IHNvdXJjZTtcbiAgICBpZiAoaXNOdW1iZXJGaW5pdGUoZmlsbCkpIHtcbiAgICAgICAgcmV0dXJuIGdldExpbmVCeUluZGV4KGNoYXJ0LCBmaWxsKTtcbiAgICB9XG4gICAgaWYgKGZpbGwgPT09ICdzdGFjaycpIHtcbiAgICAgICAgcmV0dXJuIF9idWlsZFN0YWNrTGluZShzb3VyY2UpO1xuICAgIH1cbiAgICBpZiAoZmlsbCA9PT0gJ3NoYXBlJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgYm91bmRhcnkgPSBjb21wdXRlQm91bmRhcnkoc291cmNlKTtcbiAgICBpZiAoYm91bmRhcnkgaW5zdGFuY2VvZiBzaW1wbGVBcmMpIHtcbiAgICAgICAgcmV0dXJuIGJvdW5kYXJ5O1xuICAgIH1cbiAgICByZXR1cm4gX2NyZWF0ZUJvdW5kYXJ5TGluZShib3VuZGFyeSwgbGluZSk7XG59XG4gZnVuY3Rpb24gZ2V0TGluZUJ5SW5kZXgoY2hhcnQsIGluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGluZGV4KTtcbiAgICBjb25zdCB2aXNpYmxlID0gbWV0YSAmJiBjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGluZGV4KTtcbiAgICByZXR1cm4gdmlzaWJsZSA/IG1ldGEuZGF0YXNldCA6IG51bGw7XG59XG5mdW5jdGlvbiBjb21wdXRlQm91bmRhcnkoc291cmNlKSB7XG4gICAgY29uc3Qgc2NhbGUgPSBzb3VyY2Uuc2NhbGUgfHwge307XG4gICAgaWYgKHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY29tcHV0ZUNpcmN1bGFyQm91bmRhcnkoc291cmNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXB1dGVMaW5lYXJCb3VuZGFyeShzb3VyY2UpO1xufVxuZnVuY3Rpb24gY29tcHV0ZUxpbmVhckJvdW5kYXJ5KHNvdXJjZSkge1xuICAgIGNvbnN0IHsgc2NhbGUgPXt9ICwgZmlsbCAgfSA9IHNvdXJjZTtcbiAgICBjb25zdCBwaXhlbCA9IF9nZXRUYXJnZXRQaXhlbChmaWxsLCBzY2FsZSk7XG4gICAgaWYgKGlzTnVtYmVyRmluaXRlKHBpeGVsKSkge1xuICAgICAgICBjb25zdCBob3Jpem9udGFsID0gc2NhbGUuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBob3Jpem9udGFsID8gcGl4ZWwgOiBudWxsLFxuICAgICAgICAgICAgeTogaG9yaXpvbnRhbCA/IG51bGwgOiBwaXhlbFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5KHNvdXJjZSkge1xuICAgIGNvbnN0IHsgc2NhbGUgLCBmaWxsICB9ID0gc291cmNlO1xuICAgIGNvbnN0IG9wdGlvbnMgPSBzY2FsZS5vcHRpb25zO1xuICAgIGNvbnN0IGxlbmd0aCA9IHNjYWxlLmdldExhYmVscygpLmxlbmd0aDtcbiAgICBjb25zdCBzdGFydCA9IG9wdGlvbnMucmV2ZXJzZSA/IHNjYWxlLm1heCA6IHNjYWxlLm1pbjtcbiAgICBjb25zdCB2YWx1ZSA9IF9nZXRUYXJnZXRWYWx1ZShmaWxsLCBzY2FsZSwgc3RhcnQpO1xuICAgIGNvbnN0IHRhcmdldCA9IFtdO1xuICAgIGlmIChvcHRpb25zLmdyaWQuY2lyY3VsYXIpIHtcbiAgICAgICAgY29uc3QgY2VudGVyID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKDAsIHN0YXJ0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBzaW1wbGVBcmMoe1xuICAgICAgICAgICAgeDogY2VudGVyLngsXG4gICAgICAgICAgICB5OiBjZW50ZXIueSxcbiAgICAgICAgICAgIHJhZGl1czogc2NhbGUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpe1xuICAgICAgICB0YXJnZXQucHVzaChzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaSwgdmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX2RyYXdmaWxsKGN0eCwgc291cmNlLCBhcmVhKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gX2dldFRhcmdldChzb3VyY2UpO1xuICAgIGNvbnN0IHsgbGluZSAsIHNjYWxlICwgYXhpcyAgfSA9IHNvdXJjZTtcbiAgICBjb25zdCBsaW5lT3B0cyA9IGxpbmUub3B0aW9ucztcbiAgICBjb25zdCBmaWxsT3B0aW9uID0gbGluZU9wdHMuZmlsbDtcbiAgICBjb25zdCBjb2xvciA9IGxpbmVPcHRzLmJhY2tncm91bmRDb2xvcjtcbiAgICBjb25zdCB7IGFib3ZlID1jb2xvciAsIGJlbG93ID1jb2xvciAgfSA9IGZpbGxPcHRpb24gfHwge307XG4gICAgaWYgKHRhcmdldCAmJiBsaW5lLnBvaW50cy5sZW5ndGgpIHtcbiAgICAgICAgY2xpcEFyZWEoY3R4LCBhcmVhKTtcbiAgICAgICAgZG9GaWxsKGN0eCwge1xuICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIGFib3ZlLFxuICAgICAgICAgICAgYmVsb3csXG4gICAgICAgICAgICBhcmVhLFxuICAgICAgICAgICAgc2NhbGUsXG4gICAgICAgICAgICBheGlzXG4gICAgICAgIH0pO1xuICAgICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZG9GaWxsKGN0eCwgY2ZnKSB7XG4gICAgY29uc3QgeyBsaW5lICwgdGFyZ2V0ICwgYWJvdmUgLCBiZWxvdyAsIGFyZWEgLCBzY2FsZSAgfSA9IGNmZztcbiAgICBjb25zdCBwcm9wZXJ0eSA9IGxpbmUuX2xvb3AgPyAnYW5nbGUnIDogY2ZnLmF4aXM7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBpZiAocHJvcGVydHkgPT09ICd4JyAmJiBiZWxvdyAhPT0gYWJvdmUpIHtcbiAgICAgICAgY2xpcFZlcnRpY2FsKGN0eCwgdGFyZ2V0LCBhcmVhLnRvcCk7XG4gICAgICAgIGZpbGwoY3R4LCB7XG4gICAgICAgICAgICBsaW5lLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgY29sb3I6IGFib3ZlLFxuICAgICAgICAgICAgc2NhbGUsXG4gICAgICAgICAgICBwcm9wZXJ0eVxuICAgICAgICB9KTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY2xpcFZlcnRpY2FsKGN0eCwgdGFyZ2V0LCBhcmVhLmJvdHRvbSk7XG4gICAgfVxuICAgIGZpbGwoY3R4LCB7XG4gICAgICAgIGxpbmUsXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgY29sb3I6IGJlbG93LFxuICAgICAgICBzY2FsZSxcbiAgICAgICAgcHJvcGVydHlcbiAgICB9KTtcbiAgICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gY2xpcFZlcnRpY2FsKGN0eCwgdGFyZ2V0LCBjbGlwWSkge1xuICAgIGNvbnN0IHsgc2VnbWVudHMgLCBwb2ludHMgIH0gPSB0YXJnZXQ7XG4gICAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgICBsZXQgbGluZUxvb3AgPSBmYWxzZTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKXtcbiAgICAgICAgY29uc3QgeyBzdGFydCAsIGVuZCAgfSA9IHNlZ21lbnQ7XG4gICAgICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBwb2ludHNbc3RhcnRdO1xuICAgICAgICBjb25zdCBsYXN0UG9pbnQgPSBwb2ludHNbX2ZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIHBvaW50cyldO1xuICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xuICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oZmlyc3RQb2ludC54LCBjbGlwWSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcbiAgICAgICAgfVxuICAgICAgICBsaW5lTG9vcCA9ICEhdGFyZ2V0LnBhdGhTZWdtZW50KGN0eCwgc2VnbWVudCwge1xuICAgICAgICAgICAgbW92ZTogbGluZUxvb3BcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChsaW5lTG9vcCkge1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhsYXN0UG9pbnQueCwgY2xpcFkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGN0eC5saW5lVG8odGFyZ2V0LmZpcnN0KCkueCwgY2xpcFkpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gZmlsbChjdHgsIGNmZykge1xuICAgIGNvbnN0IHsgbGluZSAsIHRhcmdldCAsIHByb3BlcnR5ICwgY29sb3IgLCBzY2FsZSAgfSA9IGNmZztcbiAgICBjb25zdCBzZWdtZW50cyA9IF9zZWdtZW50cyhsaW5lLCB0YXJnZXQsIHByb3BlcnR5KTtcbiAgICBmb3IgKGNvbnN0IHsgc291cmNlOiBzcmMgLCB0YXJnZXQ6IHRndCAsIHN0YXJ0ICwgZW5kICB9IG9mIHNlZ21lbnRzKXtcbiAgICAgICAgY29uc3QgeyBzdHlsZTogeyBiYWNrZ3JvdW5kQ29sb3IgPWNvbG9yICB9ID0ge30gIH0gPSBzcmM7XG4gICAgICAgIGNvbnN0IG5vdFNoYXBlID0gdGFyZ2V0ICE9PSB0cnVlO1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBjbGlwQm91bmRzKGN0eCwgc2NhbGUsIG5vdFNoYXBlICYmIF9nZXRCb3VuZHMocHJvcGVydHksIHN0YXJ0LCBlbmQpKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjb25zdCBsaW5lTG9vcCA9ICEhbGluZS5wYXRoU2VnbWVudChjdHgsIHNyYyk7XG4gICAgICAgIGxldCBsb29wO1xuICAgICAgICBpZiAobm90U2hhcGUpIHtcbiAgICAgICAgICAgIGlmIChsaW5lTG9vcCkge1xuICAgICAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkTGluZVRvKGN0eCwgdGFyZ2V0LCBlbmQsIHByb3BlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRhcmdldExvb3AgPSAhIXRhcmdldC5wYXRoU2VnbWVudChjdHgsIHRndCwge1xuICAgICAgICAgICAgICAgIG1vdmU6IGxpbmVMb29wLFxuICAgICAgICAgICAgICAgIHJldmVyc2U6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbG9vcCA9IGxpbmVMb29wICYmIHRhcmdldExvb3A7XG4gICAgICAgICAgICBpZiAoIWxvb3ApIHtcbiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWRMaW5lVG8oY3R4LCB0YXJnZXQsIHN0YXJ0LCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICBjdHguZmlsbChsb29wID8gJ2V2ZW5vZGQnIDogJ25vbnplcm8nKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGlwQm91bmRzKGN0eCwgc2NhbGUsIGJvdW5kcykge1xuICAgIGNvbnN0IHsgdG9wICwgYm90dG9tICB9ID0gc2NhbGUuY2hhcnQuY2hhcnRBcmVhO1xuICAgIGNvbnN0IHsgcHJvcGVydHkgLCBzdGFydCAsIGVuZCAgfSA9IGJvdW5kcyB8fCB7fTtcbiAgICBpZiAocHJvcGVydHkgPT09ICd4Jykge1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5yZWN0KHN0YXJ0LCB0b3AsIGVuZCAtIHN0YXJ0LCBib3R0b20gLSB0b3ApO1xuICAgICAgICBjdHguY2xpcCgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgcG9pbnQsIHByb3BlcnR5KSB7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkUG9pbnQgPSB0YXJnZXQuaW50ZXJwb2xhdGUocG9pbnQsIHByb3BlcnR5KTtcbiAgICBpZiAoaW50ZXJwb2xhdGVkUG9pbnQpIHtcbiAgICAgICAgY3R4LmxpbmVUbyhpbnRlcnBvbGF0ZWRQb2ludC54LCBpbnRlcnBvbGF0ZWRQb2ludC55KTtcbiAgICB9XG59XG5cbnZhciBpbmRleCA9IHtcbiAgICBpZDogJ2ZpbGxlcicsXG4gICAgYWZ0ZXJEYXRhc2V0c1VwZGF0ZSAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gKGNoYXJ0LmRhdGEuZGF0YXNldHMgfHwgW10pLmxlbmd0aDtcbiAgICAgICAgY29uc3Qgc291cmNlcyA9IFtdO1xuICAgICAgICBsZXQgbWV0YSwgaSwgbGluZSwgc291cmNlO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBjb3VudDsgKytpKXtcbiAgICAgICAgICAgIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgIGxpbmUgPSBtZXRhLmRhdGFzZXQ7XG4gICAgICAgICAgICBzb3VyY2UgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGxpbmUgJiYgbGluZS5vcHRpb25zICYmIGxpbmUgaW5zdGFuY2VvZiBMaW5lRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHNvdXJjZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IF9kZWNvZGVGaWxsKGxpbmUsIGksIGNvdW50KSxcbiAgICAgICAgICAgICAgICAgICAgY2hhcnQsXG4gICAgICAgICAgICAgICAgICAgIGF4aXM6IG1ldGEuY29udHJvbGxlci5vcHRpb25zLmluZGV4QXhpcyxcbiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IG1ldGEudlNjYWxlLFxuICAgICAgICAgICAgICAgICAgICBsaW5lXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGEuJGZpbGxlciA9IHNvdXJjZTtcbiAgICAgICAgICAgIHNvdXJjZXMucHVzaChzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGNvdW50OyArK2kpe1xuICAgICAgICAgICAgc291cmNlID0gc291cmNlc1tpXTtcbiAgICAgICAgICAgIGlmICghc291cmNlIHx8IHNvdXJjZS5maWxsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc291cmNlLmZpbGwgPSBfcmVzb2x2ZVRhcmdldChzb3VyY2VzLCBpLCBvcHRpb25zLnByb3BhZ2F0ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZURyYXcgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBkcmF3ID0gb3B0aW9ucy5kcmF3VGltZSA9PT0gJ2JlZm9yZURyYXcnO1xuICAgICAgICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICAgICAgY29uc3QgYXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICAgICAgZm9yKGxldCBpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgY29uc3Qgc291cmNlID0gbWV0YXNldHNbaV0uJGZpbGxlcjtcbiAgICAgICAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb3VyY2UubGluZS51cGRhdGVDb250cm9sUG9pbnRzKGFyZWEsIHNvdXJjZS5heGlzKTtcbiAgICAgICAgICAgIGlmIChkcmF3ICYmIHNvdXJjZS5maWxsKSB7XG4gICAgICAgICAgICAgICAgX2RyYXdmaWxsKGNoYXJ0LmN0eCwgc291cmNlLCBhcmVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlRGF0YXNldHNEcmF3IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuZHJhd1RpbWUgIT09ICdiZWZvcmVEYXRhc2V0c0RyYXcnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgICAgIGZvcihsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IG1ldGFzZXRzW2ldLiRmaWxsZXI7XG4gICAgICAgICAgICBpZiAoX3Nob3VsZEFwcGx5RmlsbChzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgX2RyYXdmaWxsKGNoYXJ0LmN0eCwgc291cmNlLCBjaGFydC5jaGFydEFyZWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVEYXRhc2V0RHJhdyAoY2hhcnQsIGFyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgc291cmNlID0gYXJncy5tZXRhLiRmaWxsZXI7XG4gICAgICAgIGlmICghX3Nob3VsZEFwcGx5RmlsbChzb3VyY2UpIHx8IG9wdGlvbnMuZHJhd1RpbWUgIT09ICdiZWZvcmVEYXRhc2V0RHJhdycpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfZHJhd2ZpbGwoY2hhcnQuY3R4LCBzb3VyY2UsIGNoYXJ0LmNoYXJ0QXJlYSk7XG4gICAgfSxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBwcm9wYWdhdGU6IHRydWUsXG4gICAgICAgIGRyYXdUaW1lOiAnYmVmb3JlRGF0YXNldERyYXcnXG4gICAgfVxufTtcblxuY29uc3QgZ2V0Qm94U2l6ZSA9IChsYWJlbE9wdHMsIGZvbnRTaXplKT0+e1xuICAgIGxldCB7IGJveEhlaWdodCA9Zm9udFNpemUgLCBib3hXaWR0aCA9Zm9udFNpemUgIH0gPSBsYWJlbE9wdHM7XG4gICAgaWYgKGxhYmVsT3B0cy51c2VQb2ludFN0eWxlKSB7XG4gICAgICAgIGJveEhlaWdodCA9IE1hdGgubWluKGJveEhlaWdodCwgZm9udFNpemUpO1xuICAgICAgICBib3hXaWR0aCA9IGxhYmVsT3B0cy5wb2ludFN0eWxlV2lkdGggfHwgTWF0aC5taW4oYm94V2lkdGgsIGZvbnRTaXplKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYm94V2lkdGgsXG4gICAgICAgIGJveEhlaWdodCxcbiAgICAgICAgaXRlbUhlaWdodDogTWF0aC5tYXgoZm9udFNpemUsIGJveEhlaWdodClcbiAgICB9O1xufTtcbmNvbnN0IGl0ZW1zRXF1YWwgPSAoYSwgYik9PmEgIT09IG51bGwgJiYgYiAhPT0gbnVsbCAmJiBhLmRhdGFzZXRJbmRleCA9PT0gYi5kYXRhc2V0SW5kZXggJiYgYS5pbmRleCA9PT0gYi5pbmRleDtcbmNsYXNzIExlZ2VuZCBleHRlbmRzIEVsZW1lbnQge1xuIGNvbnN0cnVjdG9yKGNvbmZpZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2FkZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiB0aGlzLl9ob3ZlcmVkSXRlbSA9IG51bGw7XG4gICAgICAgIHRoaXMuZG91Z2hudXRNb2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2hhcnQgPSBjb25maWcuY2hhcnQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgICAgICB0aGlzLmN0eCA9IGNvbmZpZy5jdHg7XG4gICAgICAgIHRoaXMubGVnZW5kSXRlbXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY29sdW1uU2l6ZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGluZVdpZHRocyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXhIZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWF4V2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9wID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sZWZ0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fbWFyZ2lucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy53ZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZnVsbFNpemUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHVwZGF0ZShtYXhXaWR0aCwgbWF4SGVpZ2h0LCBtYXJnaW5zKSB7XG4gICAgICAgIHRoaXMubWF4V2lkdGggPSBtYXhXaWR0aDtcbiAgICAgICAgdGhpcy5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgICAgIHRoaXMuX21hcmdpbnMgPSBtYXJnaW5zO1xuICAgICAgICB0aGlzLnNldERpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5idWlsZExhYmVscygpO1xuICAgICAgICB0aGlzLmZpdCgpO1xuICAgIH1cbiAgICBzZXREaW1lbnNpb25zKCkge1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICAgICAgICB0aGlzLmxlZnQgPSB0aGlzLl9tYXJnaW5zLmxlZnQ7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0ID0gdGhpcy53aWR0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLnRvcCA9IHRoaXMuX21hcmdpbnMudG9wO1xuICAgICAgICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLmhlaWdodDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBidWlsZExhYmVscygpIHtcbiAgICAgICAgY29uc3QgbGFiZWxPcHRzID0gdGhpcy5vcHRpb25zLmxhYmVscyB8fCB7fTtcbiAgICAgICAgbGV0IGxlZ2VuZEl0ZW1zID0gY2FsbGJhY2sobGFiZWxPcHRzLmdlbmVyYXRlTGFiZWxzLCBbXG4gICAgICAgICAgICB0aGlzLmNoYXJ0XG4gICAgICAgIF0sIHRoaXMpIHx8IFtdO1xuICAgICAgICBpZiAobGFiZWxPcHRzLmZpbHRlcikge1xuICAgICAgICAgICAgbGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcy5maWx0ZXIoKGl0ZW0pPT5sYWJlbE9wdHMuZmlsdGVyKGl0ZW0sIHRoaXMuY2hhcnQuZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYWJlbE9wdHMuc29ydCkge1xuICAgICAgICAgICAgbGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcy5zb3J0KChhLCBiKT0+bGFiZWxPcHRzLnNvcnQoYSwgYiwgdGhpcy5jaGFydC5kYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICAgICAgICBsZWdlbmRJdGVtcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zO1xuICAgIH1cbiAgICBmaXQoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyAsIGN0eCAgfSA9IHRoaXM7XG4gICAgICAgIGlmICghb3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhYmVsT3B0cyA9IG9wdGlvbnMubGFiZWxzO1xuICAgICAgICBjb25zdCBsYWJlbEZvbnQgPSB0b0ZvbnQobGFiZWxPcHRzLmZvbnQpO1xuICAgICAgICBjb25zdCBmb250U2l6ZSA9IGxhYmVsRm9udC5zaXplO1xuICAgICAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgICAgICBjb25zdCB7IGJveFdpZHRoICwgaXRlbUhlaWdodCAgfSA9IGdldEJveFNpemUobGFiZWxPcHRzLCBmb250U2l6ZSk7XG4gICAgICAgIGxldCB3aWR0aCwgaGVpZ2h0O1xuICAgICAgICBjdHguZm9udCA9IGxhYmVsRm9udC5zdHJpbmc7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB3aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICAgICAgICBoZWlnaHQgPSB0aGlzLl9maXRSb3dzKHRpdGxlSGVpZ2h0LCBmb250U2l6ZSwgYm94V2lkdGgsIGl0ZW1IZWlnaHQpICsgMTA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgICAgIHdpZHRoID0gdGhpcy5fZml0Q29scyh0aXRsZUhlaWdodCwgbGFiZWxGb250LCBib3hXaWR0aCwgaXRlbUhlaWdodCkgKyAxMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndpZHRoID0gTWF0aC5taW4od2lkdGgsIG9wdGlvbnMubWF4V2lkdGggfHwgdGhpcy5tYXhXaWR0aCk7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5taW4oaGVpZ2h0LCBvcHRpb25zLm1heEhlaWdodCB8fCB0aGlzLm1heEhlaWdodCk7XG4gICAgfVxuIF9maXRSb3dzKHRpdGxlSGVpZ2h0LCBmb250U2l6ZSwgYm94V2lkdGgsIGl0ZW1IZWlnaHQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggLCBtYXhXaWR0aCAsIG9wdGlvbnM6IHsgbGFiZWxzOiB7IHBhZGRpbmcgIH0gIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBoaXRib3hlcyA9IHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgbGluZVdpZHRocyA9IHRoaXMubGluZVdpZHRocyA9IFtcbiAgICAgICAgICAgIDBcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgbGluZUhlaWdodCA9IGl0ZW1IZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgICBsZXQgdG90YWxIZWlnaHQgPSB0aXRsZUhlaWdodDtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBsZXQgcm93ID0gLTE7XG4gICAgICAgIGxldCB0b3AgPSAtbGluZUhlaWdodDtcbiAgICAgICAgdGhpcy5sZWdlbmRJdGVtcy5mb3JFYWNoKChsZWdlbmRJdGVtLCBpKT0+e1xuICAgICAgICAgICAgY29uc3QgaXRlbVdpZHRoID0gYm94V2lkdGggKyBmb250U2l6ZSAvIDIgKyBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcbiAgICAgICAgICAgIGlmIChpID09PSAwIHx8IGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAxXSArIGl0ZW1XaWR0aCArIDIgKiBwYWRkaW5nID4gbWF4V2lkdGgpIHtcbiAgICAgICAgICAgICAgICB0b3RhbEhlaWdodCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgIGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAoaSA+IDAgPyAwIDogMSldID0gMDtcbiAgICAgICAgICAgICAgICB0b3AgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICByb3crKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhpdGJveGVzW2ldID0ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgdG9wLFxuICAgICAgICAgICAgICAgIHJvdyxcbiAgICAgICAgICAgICAgICB3aWR0aDogaXRlbVdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaXRlbUhlaWdodFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAxXSArPSBpdGVtV2lkdGggKyBwYWRkaW5nO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRvdGFsSGVpZ2h0O1xuICAgIH1cbiAgICBfZml0Q29scyh0aXRsZUhlaWdodCwgbGFiZWxGb250LCBib3hXaWR0aCwgX2l0ZW1IZWlnaHQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggLCBtYXhIZWlnaHQgLCBvcHRpb25zOiB7IGxhYmVsczogeyBwYWRkaW5nICB9ICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaGl0Ym94ZXMgPSB0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG4gICAgICAgIGNvbnN0IGNvbHVtblNpemVzID0gdGhpcy5jb2x1bW5TaXplcyA9IFtdO1xuICAgICAgICBjb25zdCBoZWlnaHRMaW1pdCA9IG1heEhlaWdodCAtIHRpdGxlSGVpZ2h0O1xuICAgICAgICBsZXQgdG90YWxXaWR0aCA9IHBhZGRpbmc7XG4gICAgICAgIGxldCBjdXJyZW50Q29sV2lkdGggPSAwO1xuICAgICAgICBsZXQgY3VycmVudENvbEhlaWdodCA9IDA7XG4gICAgICAgIGxldCBsZWZ0ID0gMDtcbiAgICAgICAgbGV0IGNvbCA9IDA7XG4gICAgICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSk9PntcbiAgICAgICAgICAgIGNvbnN0IHsgaXRlbVdpZHRoICwgaXRlbUhlaWdodCAgfSA9IGNhbGN1bGF0ZUl0ZW1TaXplKGJveFdpZHRoLCBsYWJlbEZvbnQsIGN0eCwgbGVnZW5kSXRlbSwgX2l0ZW1IZWlnaHQpO1xuICAgICAgICAgICAgaWYgKGkgPiAwICYmIGN1cnJlbnRDb2xIZWlnaHQgKyBpdGVtSGVpZ2h0ICsgMiAqIHBhZGRpbmcgPiBoZWlnaHRMaW1pdCkge1xuICAgICAgICAgICAgICAgIHRvdGFsV2lkdGggKz0gY3VycmVudENvbFdpZHRoICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBjb2x1bW5TaXplcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGN1cnJlbnRDb2xXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBjdXJyZW50Q29sSGVpZ2h0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbGVmdCArPSBjdXJyZW50Q29sV2lkdGggKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGNvbCsrO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRDb2xXaWR0aCA9IGN1cnJlbnRDb2xIZWlnaHQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGl0Ym94ZXNbaV0gPSB7XG4gICAgICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgICAgICAgICB0b3A6IGN1cnJlbnRDb2xIZWlnaHQsXG4gICAgICAgICAgICAgICAgY29sLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBpdGVtV2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBpdGVtSGVpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY3VycmVudENvbFdpZHRoID0gTWF0aC5tYXgoY3VycmVudENvbFdpZHRoLCBpdGVtV2lkdGgpO1xuICAgICAgICAgICAgY3VycmVudENvbEhlaWdodCArPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgfSk7XG4gICAgICAgIHRvdGFsV2lkdGggKz0gY3VycmVudENvbFdpZHRoO1xuICAgICAgICBjb2x1bW5TaXplcy5wdXNoKHtcbiAgICAgICAgICAgIHdpZHRoOiBjdXJyZW50Q29sV2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGN1cnJlbnRDb2xIZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0b3RhbFdpZHRoO1xuICAgIH1cbiAgICBhZGp1c3RIaXRCb3hlcygpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZGlzcGxheSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gdGhpcy5fY29tcHV0ZVRpdGxlSGVpZ2h0KCk7XG4gICAgICAgIGNvbnN0IHsgbGVnZW5kSGl0Qm94ZXM6IGhpdGJveGVzICwgb3B0aW9uczogeyBhbGlnbiAsIGxhYmVsczogeyBwYWRkaW5nICB9ICwgcnRsICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihydGwsIHRoaXMubGVmdCwgdGhpcy53aWR0aCk7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICBsZXQgcm93ID0gMDtcbiAgICAgICAgICAgIGxldCBsZWZ0ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSB0aGlzLmxpbmVXaWR0aHNbcm93XSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGhpdGJveCBvZiBoaXRib3hlcyl7XG4gICAgICAgICAgICAgICAgaWYgKHJvdyAhPT0gaGl0Ym94LnJvdykge1xuICAgICAgICAgICAgICAgICAgICByb3cgPSBoaXRib3gucm93O1xuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSB0aGlzLmxpbmVXaWR0aHNbcm93XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhpdGJveC50b3AgKz0gdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgaGl0Ym94LmxlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueChsZWZ0KSwgaGl0Ym94LndpZHRoKTtcbiAgICAgICAgICAgICAgICBsZWZ0ICs9IGhpdGJveC53aWR0aCArIHBhZGRpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgY29sID0gMDtcbiAgICAgICAgICAgIGxldCB0b3AgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gdGhpcy5jb2x1bW5TaXplc1tjb2xdLmhlaWdodCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGhpdGJveCBvZiBoaXRib3hlcyl7XG4gICAgICAgICAgICAgICAgaWYgKGhpdGJveC5jb2wgIT09IGNvbCkge1xuICAgICAgICAgICAgICAgICAgICBjb2wgPSBoaXRib3guY29sO1xuICAgICAgICAgICAgICAgICAgICB0b3AgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gdGhpcy5jb2x1bW5TaXplc1tjb2xdLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhpdGJveC50b3AgPSB0b3A7XG4gICAgICAgICAgICAgICAgaGl0Ym94LmxlZnQgKz0gdGhpcy5sZWZ0ICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBoaXRib3gubGVmdCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bEhlbHBlci54KGhpdGJveC5sZWZ0KSwgaGl0Ym94LndpZHRoKTtcbiAgICAgICAgICAgICAgICB0b3AgKz0gaGl0Ym94LmhlaWdodCArIHBhZGRpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnBvc2l0aW9uID09PSAndG9wJyB8fCB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICdib3R0b20nO1xuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICAgICAgY2xpcEFyZWEoY3R4LCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX2RyYXcoKTtcbiAgICAgICAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICAgICAgfVxuICAgIH1cbiBfZHJhdygpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zOiBvcHRzICwgY29sdW1uU2l6ZXMgLCBsaW5lV2lkdGhzICwgY3R4ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBhbGlnbiAsIGxhYmVsczogbGFiZWxPcHRzICB9ID0gb3B0cztcbiAgICAgICAgY29uc3QgZGVmYXVsdENvbG9yID0gZGVmYXVsdHMuY29sb3I7XG4gICAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0cy5ydGwsIHRoaXMubGVmdCwgdGhpcy53aWR0aCk7XG4gICAgICAgIGNvbnN0IGxhYmVsRm9udCA9IHRvRm9udChsYWJlbE9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IHsgcGFkZGluZyAgfSA9IGxhYmVsT3B0cztcbiAgICAgICAgY29uc3QgZm9udFNpemUgPSBsYWJlbEZvbnQuc2l6ZTtcbiAgICAgICAgY29uc3QgaGFsZkZvbnRTaXplID0gZm9udFNpemUgLyAyO1xuICAgICAgICBsZXQgY3Vyc29yO1xuICAgICAgICB0aGlzLmRyYXdUaXRsZSgpO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbignbGVmdCcpO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAwLjU7XG4gICAgICAgIGN0eC5mb250ID0gbGFiZWxGb250LnN0cmluZztcbiAgICAgICAgY29uc3QgeyBib3hXaWR0aCAsIGJveEhlaWdodCAsIGl0ZW1IZWlnaHQgIH0gPSBnZXRCb3hTaXplKGxhYmVsT3B0cywgZm9udFNpemUpO1xuICAgICAgICBjb25zdCBkcmF3TGVnZW5kQm94ID0gZnVuY3Rpb24oeCwgeSwgbGVnZW5kSXRlbSkge1xuICAgICAgICAgICAgaWYgKGlzTmFOKGJveFdpZHRoKSB8fCBib3hXaWR0aCA8PSAwIHx8IGlzTmFOKGJveEhlaWdodCkgfHwgYm94SGVpZ2h0IDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjb25zdCBsaW5lV2lkdGggPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVXaWR0aCwgMSk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5maWxsU3R5bGUsIGRlZmF1bHRDb2xvcik7XG4gICAgICAgICAgICBjdHgubGluZUNhcCA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZUNhcCwgJ2J1dHQnKTtcbiAgICAgICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZURhc2hPZmZzZXQsIDApO1xuICAgICAgICAgICAgY3R4LmxpbmVKb2luID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lSm9pbiwgJ21pdGVyJyk7XG4gICAgICAgICAgICBjdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5zdHJva2VTdHlsZSwgZGVmYXVsdENvbG9yKTtcbiAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaCh2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVEYXNoLCBbXSkpO1xuICAgICAgICAgICAgaWYgKGxhYmVsT3B0cy51c2VQb2ludFN0eWxlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZHJhd09wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogYm94SGVpZ2h0ICogTWF0aC5TUVJUMiAvIDIsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IGxlZ2VuZEl0ZW0ucG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IGxlZ2VuZEl0ZW0ucm90YXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiBsaW5lV2lkdGhcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlclggPSBydGxIZWxwZXIueFBsdXMoeCwgYm94V2lkdGggLyAyKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJZID0geSArIGhhbGZGb250U2l6ZTtcbiAgICAgICAgICAgICAgICBkcmF3UG9pbnRMZWdlbmQoY3R4LCBkcmF3T3B0aW9ucywgY2VudGVyWCwgY2VudGVyWSwgbGFiZWxPcHRzLnBvaW50U3R5bGVXaWR0aCAmJiBib3hXaWR0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHlCb3hUb3AgPSB5ICsgTWF0aC5tYXgoKGZvbnRTaXplIC0gYm94SGVpZ2h0KSAvIDIsIDApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHhCb3hMZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIoeCwgYm94V2lkdGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvcmRlclJhZGl1cyA9IHRvVFJCTENvcm5lcnMobGVnZW5kSXRlbS5ib3JkZXJSYWRpdXMpO1xuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhib3JkZXJSYWRpdXMpLnNvbWUoKHYpPT52ICE9PSAwKSkge1xuICAgICAgICAgICAgICAgICAgICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB4Qm94TGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHlCb3hUb3AsXG4gICAgICAgICAgICAgICAgICAgICAgICB3OiBib3hXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGg6IGJveEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5yZWN0KHhCb3hMZWZ0LCB5Qm94VG9wLCBib3hXaWR0aCwgYm94SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgICAgICBpZiAobGluZVdpZHRoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBmaWxsVGV4dCA9IGZ1bmN0aW9uKHgsIHksIGxlZ2VuZEl0ZW0pIHtcbiAgICAgICAgICAgIHJlbmRlclRleHQoY3R4LCBsZWdlbmRJdGVtLnRleHQsIHgsIHkgKyBpdGVtSGVpZ2h0IC8gMiwgbGFiZWxGb250LCB7XG4gICAgICAgICAgICAgICAgc3RyaWtldGhyb3VnaDogbGVnZW5kSXRlbS5oaWRkZW4sXG4gICAgICAgICAgICAgICAgdGV4dEFsaWduOiBydGxIZWxwZXIudGV4dEFsaWduKGxlZ2VuZEl0ZW0udGV4dEFsaWduKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gdGhpcy5fY29tcHV0ZVRpdGxlSGVpZ2h0KCk7XG4gICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgICB4OiBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIGxpbmVXaWR0aHNbMF0pLFxuICAgICAgICAgICAgICAgIHk6IHRoaXMudG9wICsgcGFkZGluZyArIHRpdGxlSGVpZ2h0LFxuICAgICAgICAgICAgICAgIGxpbmU6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgICAgeDogdGhpcy5sZWZ0ICsgcGFkZGluZyxcbiAgICAgICAgICAgICAgICB5OiBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gY29sdW1uU2l6ZXNbMF0uaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICBsaW5lOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIG92ZXJyaWRlVGV4dERpcmVjdGlvbih0aGlzLmN0eCwgb3B0cy50ZXh0RGlyZWN0aW9uKTtcbiAgICAgICAgY29uc3QgbGluZUhlaWdodCA9IGl0ZW1IZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zLmZvckVhY2goKGxlZ2VuZEl0ZW0sIGkpPT57XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBsZWdlbmRJdGVtLmZvbnRDb2xvcjtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsZWdlbmRJdGVtLmZvbnRDb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IHRleHRXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuICAgICAgICAgICAgY29uc3QgdGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihsZWdlbmRJdGVtLnRleHRBbGlnbiB8fCAobGVnZW5kSXRlbS50ZXh0QWxpZ24gPSBsYWJlbE9wdHMudGV4dEFsaWduKSk7XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IGJveFdpZHRoICsgaGFsZkZvbnRTaXplICsgdGV4dFdpZHRoO1xuICAgICAgICAgICAgbGV0IHggPSBjdXJzb3IueDtcbiAgICAgICAgICAgIGxldCB5ID0gY3Vyc29yLnk7XG4gICAgICAgICAgICBydGxIZWxwZXIuc2V0V2lkdGgodGhpcy53aWR0aCk7XG4gICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwICYmIHggKyB3aWR0aCArIHBhZGRpbmcgPiB0aGlzLnJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBjdXJzb3IueSArPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3IubGluZSsrO1xuICAgICAgICAgICAgICAgICAgICB4ID0gY3Vyc29yLnggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIGxpbmVXaWR0aHNbY3Vyc29yLmxpbmVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgPiAwICYmIHkgKyBsaW5lSGVpZ2h0ID4gdGhpcy5ib3R0b20pIHtcbiAgICAgICAgICAgICAgICB4ID0gY3Vyc29yLnggPSB4ICsgY29sdW1uU2l6ZXNbY3Vyc29yLmxpbmVdLndpZHRoICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBjdXJzb3IubGluZSsrO1xuICAgICAgICAgICAgICAgIHkgPSBjdXJzb3IueSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSBjb2x1bW5TaXplc1tjdXJzb3IubGluZV0uaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlYWxYID0gcnRsSGVscGVyLngoeCk7XG4gICAgICAgICAgICBkcmF3TGVnZW5kQm94KHJlYWxYLCB5LCBsZWdlbmRJdGVtKTtcbiAgICAgICAgICAgIHggPSBfdGV4dFgodGV4dEFsaWduLCB4ICsgYm94V2lkdGggKyBoYWxmRm9udFNpemUsIGlzSG9yaXpvbnRhbCA/IHggKyB3aWR0aCA6IHRoaXMucmlnaHQsIG9wdHMucnRsKTtcbiAgICAgICAgICAgIGZpbGxUZXh0KHJ0bEhlbHBlci54KHgpLCB5LCBsZWdlbmRJdGVtKTtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICBjdXJzb3IueCArPSB3aWR0aCArIHBhZGRpbmc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsZWdlbmRJdGVtLnRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9udExpbmVIZWlnaHQgPSBsYWJlbEZvbnQubGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICBjdXJzb3IueSArPSBjYWxjdWxhdGVMZWdlbmRJdGVtSGVpZ2h0KGxlZ2VuZEl0ZW0sIGZvbnRMaW5lSGVpZ2h0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3Vyc29yLnkgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3RvcmVUZXh0RGlyZWN0aW9uKHRoaXMuY3R4LCBvcHRzLnRleHREaXJlY3Rpb24pO1xuICAgIH1cbiBkcmF3VGl0bGUoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpdGxlT3B0cyA9IG9wdHMudGl0bGU7XG4gICAgICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udCh0aXRsZU9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IHRpdGxlUGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZU9wdHMucGFkZGluZyk7XG4gICAgICAgIGlmICghdGl0bGVPcHRzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdHMucnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aXRsZU9wdHMucG9zaXRpb247XG4gICAgICAgIGNvbnN0IGhhbGZGb250U2l6ZSA9IHRpdGxlRm9udC5zaXplIC8gMjtcbiAgICAgICAgY29uc3QgdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUgPSB0aXRsZVBhZGRpbmcudG9wICsgaGFsZkZvbnRTaXplO1xuICAgICAgICBsZXQgeTtcbiAgICAgICAgbGV0IGxlZnQgPSB0aGlzLmxlZnQ7XG4gICAgICAgIGxldCBtYXhXaWR0aCA9IHRoaXMud2lkdGg7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICBtYXhXaWR0aCA9IE1hdGgubWF4KC4uLnRoaXMubGluZVdpZHRocyk7XG4gICAgICAgICAgICB5ID0gdGhpcy50b3AgKyB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZTtcbiAgICAgICAgICAgIGxlZnQgPSBfYWxpZ25TdGFydEVuZChvcHRzLmFsaWduLCBsZWZ0LCB0aGlzLnJpZ2h0IC0gbWF4V2lkdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gdGhpcy5jb2x1bW5TaXplcy5yZWR1Y2UoKGFjYywgc2l6ZSk9Pk1hdGgubWF4KGFjYywgc2l6ZS5oZWlnaHQpLCAwKTtcbiAgICAgICAgICAgIHkgPSB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZSArIF9hbGlnblN0YXJ0RW5kKG9wdHMuYWxpZ24sIHRoaXMudG9wLCB0aGlzLmJvdHRvbSAtIG1heEhlaWdodCAtIG9wdHMubGFiZWxzLnBhZGRpbmcgLSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeCA9IF9hbGlnblN0YXJ0RW5kKHBvc2l0aW9uLCBsZWZ0LCBsZWZ0ICsgbWF4V2lkdGgpO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihfdG9MZWZ0UmlnaHRDZW50ZXIocG9zaXRpb24pKTtcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aXRsZU9wdHMuY29sb3I7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aXRsZU9wdHMuY29sb3I7XG4gICAgICAgIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgICAgICAgcmVuZGVyVGV4dChjdHgsIHRpdGxlT3B0cy50ZXh0LCB4LCB5LCB0aXRsZUZvbnQpO1xuICAgIH1cbiBfY29tcHV0ZVRpdGxlSGVpZ2h0KCkge1xuICAgICAgICBjb25zdCB0aXRsZU9wdHMgPSB0aGlzLm9wdGlvbnMudGl0bGU7XG4gICAgICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udCh0aXRsZU9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IHRpdGxlUGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZU9wdHMucGFkZGluZyk7XG4gICAgICAgIHJldHVybiB0aXRsZU9wdHMuZGlzcGxheSA/IHRpdGxlRm9udC5saW5lSGVpZ2h0ICsgdGl0bGVQYWRkaW5nLmhlaWdodCA6IDA7XG4gICAgfVxuIF9nZXRMZWdlbmRJdGVtQXQoeCwgeSkge1xuICAgICAgICBsZXQgaSwgaGl0Qm94LCBsaDtcbiAgICAgICAgaWYgKF9pc0JldHdlZW4oeCwgdGhpcy5sZWZ0LCB0aGlzLnJpZ2h0KSAmJiBfaXNCZXR3ZWVuKHksIHRoaXMudG9wLCB0aGlzLmJvdHRvbSkpIHtcbiAgICAgICAgICAgIGxoID0gdGhpcy5sZWdlbmRIaXRCb3hlcztcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxoLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICBoaXRCb3ggPSBsaFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoX2lzQmV0d2Vlbih4LCBoaXRCb3gubGVmdCwgaGl0Qm94LmxlZnQgKyBoaXRCb3gud2lkdGgpICYmIF9pc0JldHdlZW4oeSwgaGl0Qm94LnRvcCwgaGl0Qm94LnRvcCArIGhpdEJveC5oZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxlZ2VuZEl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gaGFuZGxlRXZlbnQoZSkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoIWlzTGlzdGVuZWQoZS50eXBlLCBvcHRzKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvdmVyZWRJdGVtID0gdGhpcy5fZ2V0TGVnZW5kSXRlbUF0KGUueCwgZS55KTtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlbW92ZScgfHwgZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IHRoaXMuX2hvdmVyZWRJdGVtO1xuICAgICAgICAgICAgY29uc3Qgc2FtZUl0ZW0gPSBpdGVtc0VxdWFsKHByZXZpb3VzLCBob3ZlcmVkSXRlbSk7XG4gICAgICAgICAgICBpZiAocHJldmlvdXMgJiYgIXNhbWVJdGVtKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sob3B0cy5vbkxlYXZlLCBbXG4gICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzLFxuICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9ob3ZlcmVkSXRlbSA9IGhvdmVyZWRJdGVtO1xuICAgICAgICAgICAgaWYgKGhvdmVyZWRJdGVtICYmICFzYW1lSXRlbSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG9wdHMub25Ib3ZlciwgW1xuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICBob3ZlcmVkSXRlbSxcbiAgICAgICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGhvdmVyZWRJdGVtKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhvcHRzLm9uQ2xpY2ssIFtcbiAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgIGhvdmVyZWRJdGVtLFxuICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY2FsY3VsYXRlSXRlbVNpemUoYm94V2lkdGgsIGxhYmVsRm9udCwgY3R4LCBsZWdlbmRJdGVtLCBfaXRlbUhlaWdodCkge1xuICAgIGNvbnN0IGl0ZW1XaWR0aCA9IGNhbGN1bGF0ZUl0ZW1XaWR0aChsZWdlbmRJdGVtLCBib3hXaWR0aCwgbGFiZWxGb250LCBjdHgpO1xuICAgIGNvbnN0IGl0ZW1IZWlnaHQgPSBjYWxjdWxhdGVJdGVtSGVpZ2h0KF9pdGVtSGVpZ2h0LCBsZWdlbmRJdGVtLCBsYWJlbEZvbnQubGluZUhlaWdodCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbVdpZHRoLFxuICAgICAgICBpdGVtSGVpZ2h0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZUl0ZW1XaWR0aChsZWdlbmRJdGVtLCBib3hXaWR0aCwgbGFiZWxGb250LCBjdHgpIHtcbiAgICBsZXQgbGVnZW5kSXRlbVRleHQgPSBsZWdlbmRJdGVtLnRleHQ7XG4gICAgaWYgKGxlZ2VuZEl0ZW1UZXh0ICYmIHR5cGVvZiBsZWdlbmRJdGVtVGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbGVnZW5kSXRlbVRleHQgPSBsZWdlbmRJdGVtVGV4dC5yZWR1Y2UoKGEsIGIpPT5hLmxlbmd0aCA+IGIubGVuZ3RoID8gYSA6IGIpO1xuICAgIH1cbiAgICByZXR1cm4gYm94V2lkdGggKyBsYWJlbEZvbnQuc2l6ZSAvIDIgKyBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbVRleHQpLndpZHRoO1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlSXRlbUhlaWdodChfaXRlbUhlaWdodCwgbGVnZW5kSXRlbSwgZm9udExpbmVIZWlnaHQpIHtcbiAgICBsZXQgaXRlbUhlaWdodCA9IF9pdGVtSGVpZ2h0O1xuICAgIGlmICh0eXBlb2YgbGVnZW5kSXRlbS50ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBpdGVtSGVpZ2h0ID0gY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodChsZWdlbmRJdGVtLCBmb250TGluZUhlaWdodCk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtSGVpZ2h0O1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodChsZWdlbmRJdGVtLCBmb250TGluZUhlaWdodCkge1xuICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gbGVnZW5kSXRlbS50ZXh0ID8gbGVnZW5kSXRlbS50ZXh0Lmxlbmd0aCArIDAuNSA6IDA7XG4gICAgcmV0dXJuIGZvbnRMaW5lSGVpZ2h0ICogbGFiZWxIZWlnaHQ7XG59XG5mdW5jdGlvbiBpc0xpc3RlbmVkKHR5cGUsIG9wdHMpIHtcbiAgICBpZiAoKHR5cGUgPT09ICdtb3VzZW1vdmUnIHx8IHR5cGUgPT09ICdtb3VzZW91dCcpICYmIChvcHRzLm9uSG92ZXIgfHwgb3B0cy5vbkxlYXZlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG9wdHMub25DbGljayAmJiAodHlwZSA9PT0gJ2NsaWNrJyB8fCB0eXBlID09PSAnbW91c2V1cCcpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG52YXIgcGx1Z2luX2xlZ2VuZCA9IHtcbiAgICBpZDogJ2xlZ2VuZCcsXG4gX2VsZW1lbnQ6IExlZ2VuZCxcbiAgICBzdGFydCAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZCA9IG5ldyBMZWdlbmQoe1xuICAgICAgICAgICAgY3R4OiBjaGFydC5jdHgsXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgY2hhcnRcbiAgICAgICAgfSk7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCBsZWdlbmQsIG9wdGlvbnMpO1xuICAgICAgICBsYXlvdXRzLmFkZEJveChjaGFydCwgbGVnZW5kKTtcbiAgICB9LFxuICAgIHN0b3AgKGNoYXJ0KSB7XG4gICAgICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCBjaGFydC5sZWdlbmQpO1xuICAgICAgICBkZWxldGUgY2hhcnQubGVnZW5kO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuICAgICAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgbGVnZW5kLCBvcHRpb25zKTtcbiAgICAgICAgbGVnZW5kLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0sXG4gICAgYWZ0ZXJVcGRhdGUgKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICAgICAgbGVnZW5kLmJ1aWxkTGFiZWxzKCk7XG4gICAgICAgIGxlZ2VuZC5hZGp1c3RIaXRCb3hlcygpO1xuICAgIH0sXG4gICAgYWZ0ZXJFdmVudCAoY2hhcnQsIGFyZ3MpIHtcbiAgICAgICAgaWYgKCFhcmdzLnJlcGxheSkge1xuICAgICAgICAgICAgY2hhcnQubGVnZW5kLmhhbmRsZUV2ZW50KGFyZ3MuZXZlbnQpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgZnVsbFNpemU6IHRydWUsXG4gICAgICAgIHJldmVyc2U6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDEwMDAsXG4gICAgICAgIG9uQ2xpY2sgKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsZWdlbmRJdGVtLmRhdGFzZXRJbmRleDtcbiAgICAgICAgICAgIGNvbnN0IGNpID0gbGVnZW5kLmNoYXJ0O1xuICAgICAgICAgICAgaWYgKGNpLmlzRGF0YXNldFZpc2libGUoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgY2kuaGlkZShpbmRleCk7XG4gICAgICAgICAgICAgICAgbGVnZW5kSXRlbS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaS5zaG93KGluZGV4KTtcbiAgICAgICAgICAgICAgICBsZWdlbmRJdGVtLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkhvdmVyOiBudWxsLFxuICAgICAgICBvbkxlYXZlOiBudWxsLFxuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgIGNvbG9yOiAoY3R4KT0+Y3R4LmNoYXJ0Lm9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICBib3hXaWR0aDogNDAsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIGdlbmVyYXRlTGFiZWxzIChjaGFydCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcbiAgICAgICAgICAgICAgICBjb25zdCB7IGxhYmVsczogeyB1c2VQb2ludFN0eWxlICwgcG9pbnRTdHlsZSAsIHRleHRBbGlnbiAsIGNvbG9yICwgdXNlQm9yZGVyUmFkaXVzICwgYm9yZGVyUmFkaXVzICB9ICB9ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXJ0Ll9nZXRTb3J0ZWREYXRhc2V0TWV0YXMoKS5tYXAoKG1ldGEpPT57XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHVzZVBvaW50U3R5bGUgPyAwIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9yZGVyV2lkdGggPSB0b1BhZGRpbmcoc3R5bGUuYm9yZGVyV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZGF0YXNldHNbbWV0YS5pbmRleF0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW46ICFtZXRhLnZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lQ2FwOiBzdHlsZS5ib3JkZXJDYXBTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVEYXNoOiBzdHlsZS5ib3JkZXJEYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZURhc2hPZmZzZXQ6IHN0eWxlLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lSm9pbjogc3R5bGUuYm9yZGVySm9pblN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiAoYm9yZGVyV2lkdGgud2lkdGggKyBib3JkZXJXaWR0aC5oZWlnaHQpIC8gNCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUgfHwgc3R5bGUucG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBzdHlsZS5yb3RhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogdGV4dEFsaWduIHx8IHN0eWxlLnRleHRBbGlnbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogdXNlQm9yZGVyUmFkaXVzICYmIChib3JkZXJSYWRpdXMgfHwgc3R5bGUuYm9yZGVyUmFkaXVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleDogbWV0YS5pbmRleFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgY29sb3I6IChjdHgpPT5jdHguY2hhcnQub3B0aW9ucy5jb2xvcixcbiAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgcG9zaXRpb246ICdjZW50ZXInLFxuICAgICAgICAgICAgdGV4dDogJydcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGVzY3JpcHRvcnM6IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+IW5hbWUuc3RhcnRzV2l0aCgnb24nKSxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICBfc2NyaXB0YWJsZTogKG5hbWUpPT4hW1xuICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVMYWJlbHMnLFxuICAgICAgICAgICAgICAgICAgICAnZmlsdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NvcnQnXG4gICAgICAgICAgICAgICAgXS5pbmNsdWRlcyhuYW1lKVxuICAgICAgICB9XG4gICAgfVxufTtcblxuY2xhc3MgVGl0bGUgZXh0ZW5kcyBFbGVtZW50IHtcbiBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICAgICAgdGhpcy5jdHggPSBjb25maWcuY3R4O1xuICAgICAgICB0aGlzLl9wYWRkaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2VpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmZ1bGxTaXplID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB0aGlzLmxlZnQgPSAwO1xuICAgICAgICB0aGlzLnRvcCA9IDA7XG4gICAgICAgIGlmICghb3B0cy5kaXNwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5oZWlnaHQgPSB0aGlzLnJpZ2h0ID0gdGhpcy5ib3R0b20gPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLnJpZ2h0ID0gbWF4V2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5ib3R0b20gPSBtYXhIZWlnaHQ7XG4gICAgICAgIGNvbnN0IGxpbmVDb3VudCA9IGlzQXJyYXkob3B0cy50ZXh0KSA/IG9wdHMudGV4dC5sZW5ndGggOiAxO1xuICAgICAgICB0aGlzLl9wYWRkaW5nID0gdG9QYWRkaW5nKG9wdHMucGFkZGluZyk7XG4gICAgICAgIGNvbnN0IHRleHRTaXplID0gbGluZUNvdW50ICogdG9Gb250KG9wdHMuZm9udCkubGluZUhlaWdodCArIHRoaXMuX3BhZGRpbmcuaGVpZ2h0O1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0ZXh0U2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0ZXh0U2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbjtcbiAgICAgICAgcmV0dXJuIHBvcyA9PT0gJ3RvcCcgfHwgcG9zID09PSAnYm90dG9tJztcbiAgICB9XG4gICAgX2RyYXdBcmdzKG9mZnNldCkge1xuICAgICAgICBjb25zdCB7IHRvcCAsIGxlZnQgLCBib3R0b20gLCByaWdodCAsIG9wdGlvbnMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBhbGlnbiA9IG9wdGlvbnMuYWxpZ247XG4gICAgICAgIGxldCByb3RhdGlvbiA9IDA7XG4gICAgICAgIGxldCBtYXhXaWR0aCwgdGl0bGVYLCB0aXRsZVk7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgICAgICAgICAgdGl0bGVZID0gdG9wICsgb2Zmc2V0O1xuICAgICAgICAgICAgbWF4V2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICAgICAgdGl0bGVYID0gbGVmdCArIG9mZnNldDtcbiAgICAgICAgICAgICAgICB0aXRsZVkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgYm90dG9tLCB0b3ApO1xuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gUEkgKiAtMC41O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aXRsZVggPSByaWdodCAtIG9mZnNldDtcbiAgICAgICAgICAgICAgICB0aXRsZVkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdG9wLCBib3R0b20pO1xuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gUEkgKiAwLjU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXhXaWR0aCA9IGJvdHRvbSAtIHRvcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGl0bGVYLFxuICAgICAgICAgICAgdGl0bGVZLFxuICAgICAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgICAgICByb3RhdGlvblxuICAgICAgICB9O1xuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKCFvcHRzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb250T3B0cyA9IHRvRm9udChvcHRzLmZvbnQpO1xuICAgICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gZm9udE9wdHMubGluZUhlaWdodDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbGluZUhlaWdodCAvIDIgKyB0aGlzLl9wYWRkaW5nLnRvcDtcbiAgICAgICAgY29uc3QgeyB0aXRsZVggLCB0aXRsZVkgLCBtYXhXaWR0aCAsIHJvdGF0aW9uICB9ID0gdGhpcy5fZHJhd0FyZ3Mob2Zmc2V0KTtcbiAgICAgICAgcmVuZGVyVGV4dChjdHgsIG9wdHMudGV4dCwgMCwgMCwgZm9udE9wdHMsIHtcbiAgICAgICAgICAgIGNvbG9yOiBvcHRzLmNvbG9yLFxuICAgICAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgIHRleHRBbGlnbjogX3RvTGVmdFJpZ2h0Q2VudGVyKG9wdHMuYWxpZ24pLFxuICAgICAgICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uOiBbXG4gICAgICAgICAgICAgICAgdGl0bGVYLFxuICAgICAgICAgICAgICAgIHRpdGxlWVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVUaXRsZShjaGFydCwgdGl0bGVPcHRzKSB7XG4gICAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGUoe1xuICAgICAgICBjdHg6IGNoYXJ0LmN0eCxcbiAgICAgICAgb3B0aW9uczogdGl0bGVPcHRzLFxuICAgICAgICBjaGFydFxuICAgIH0pO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgdGl0bGVPcHRzKTtcbiAgICBsYXlvdXRzLmFkZEJveChjaGFydCwgdGl0bGUpO1xuICAgIGNoYXJ0LnRpdGxlQmxvY2sgPSB0aXRsZTtcbn1cbnZhciBwbHVnaW5fdGl0bGUgPSB7XG4gICAgaWQ6ICd0aXRsZScsXG4gX2VsZW1lbnQ6IFRpdGxlLFxuICAgIHN0YXJ0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY3JlYXRlVGl0bGUoY2hhcnQsIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgc3RvcCAoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgdGl0bGVCbG9jayA9IGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCB0aXRsZUJsb2NrKTtcbiAgICAgICAgZGVsZXRlIGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgfSxcbiAgICBiZWZvcmVVcGRhdGUgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB0aXRsZSA9IGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgICAgIHRpdGxlLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgZm9udDoge1xuICAgICAgICAgICAgd2VpZ2h0OiAnYm9sZCdcbiAgICAgICAgfSxcbiAgICAgICAgZnVsbFNpemU6IHRydWUsXG4gICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgIHRleHQ6ICcnLFxuICAgICAgICB3ZWlnaHQ6IDIwMDBcbiAgICB9LFxuICAgIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICAgICAgY29sb3I6ICdjb2xvcidcbiAgICB9LFxuICAgIGRlc2NyaXB0b3JzOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgIH1cbn07XG5cbmNvbnN0IG1hcCA9IG5ldyBXZWFrTWFwKCk7XG52YXIgcGx1Z2luX3N1YnRpdGxlID0ge1xuICAgIGlkOiAnc3VidGl0bGUnLFxuICAgIHN0YXJ0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGUoe1xuICAgICAgICAgICAgY3R4OiBjaGFydC5jdHgsXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgY2hhcnRcbiAgICAgICAgfSk7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgICAgIGxheW91dHMuYWRkQm94KGNoYXJ0LCB0aXRsZSk7XG4gICAgICAgIG1hcC5zZXQoY2hhcnQsIHRpdGxlKTtcbiAgICB9LFxuICAgIHN0b3AgKGNoYXJ0KSB7XG4gICAgICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCBtYXAuZ2V0KGNoYXJ0KSk7XG4gICAgICAgIG1hcC5kZWxldGUoY2hhcnQpO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBtYXAuZ2V0KGNoYXJ0KTtcbiAgICAgICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCBvcHRpb25zKTtcbiAgICAgICAgdGl0bGUub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfSxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICBmb250OiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICdub3JtYWwnXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bGxTaXplOiB0cnVlLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgIHRleHQ6ICcnLFxuICAgICAgICB3ZWlnaHQ6IDE1MDBcbiAgICB9LFxuICAgIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICAgICAgY29sb3I6ICdjb2xvcidcbiAgICB9LFxuICAgIGRlc2NyaXB0b3JzOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgIH1cbn07XG5cbmNvbnN0IHBvc2l0aW9uZXJzID0ge1xuIGF2ZXJhZ2UgKGl0ZW1zKSB7XG4gICAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGksIGxlbjtcbiAgICAgICAgbGV0IHggPSAwO1xuICAgICAgICBsZXQgeSA9IDA7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIGZvcihpID0gMCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3QgZWwgPSBpdGVtc1tpXS5lbGVtZW50O1xuICAgICAgICAgICAgaWYgKGVsICYmIGVsLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3MgPSBlbC50b29sdGlwUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB4ICs9IHBvcy54O1xuICAgICAgICAgICAgICAgIHkgKz0gcG9zLnk7XG4gICAgICAgICAgICAgICAgKytjb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCAvIGNvdW50LFxuICAgICAgICAgICAgeTogeSAvIGNvdW50XG4gICAgICAgIH07XG4gICAgfSxcbiBuZWFyZXN0IChpdGVtcywgZXZlbnRQb3NpdGlvbikge1xuICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGxldCB4ID0gZXZlbnRQb3NpdGlvbi54O1xuICAgICAgICBsZXQgeSA9IGV2ZW50UG9zaXRpb24ueTtcbiAgICAgICAgbGV0IG1pbkRpc3RhbmNlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICBsZXQgaSwgbGVuLCBuZWFyZXN0RWxlbWVudDtcbiAgICAgICAgZm9yKGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCBlbCA9IGl0ZW1zW2ldLmVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoZWwgJiYgZWwuaGFzVmFsdWUoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IGVsLmdldENlbnRlclBvaW50KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhldmVudFBvc2l0aW9uLCBjZW50ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChkIDwgbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBkO1xuICAgICAgICAgICAgICAgICAgICBuZWFyZXN0RWxlbWVudCA9IGVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmVhcmVzdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRwID0gbmVhcmVzdEVsZW1lbnQudG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgICAgICAgICB4ID0gdHAueDtcbiAgICAgICAgICAgIHkgPSB0cC55O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICB9O1xuICAgIH1cbn07XG5mdW5jdGlvbiBwdXNoT3JDb25jYXQoYmFzZSwgdG9QdXNoKSB7XG4gICAgaWYgKHRvUHVzaCkge1xuICAgICAgICBpZiAoaXNBcnJheSh0b1B1c2gpKSB7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShiYXNlLCB0b1B1c2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZS5wdXNoKHRvUHVzaCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJhc2U7XG59XG4gZnVuY3Rpb24gc3BsaXROZXdsaW5lcyhzdHIpIHtcbiAgICBpZiAoKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnIHx8IHN0ciBpbnN0YW5jZW9mIFN0cmluZykgJiYgc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5zcGxpdCgnXFxuJyk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG4gZnVuY3Rpb24gY3JlYXRlVG9vbHRpcEl0ZW0oY2hhcnQsIGl0ZW0pIHtcbiAgICBjb25zdCB7IGVsZW1lbnQgLCBkYXRhc2V0SW5kZXggLCBpbmRleCAgfSA9IGl0ZW07XG4gICAgY29uc3QgY29udHJvbGxlciA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgICBjb25zdCB7IGxhYmVsICwgdmFsdWUgIH0gPSBjb250cm9sbGVyLmdldExhYmVsQW5kVmFsdWUoaW5kZXgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNoYXJ0LFxuICAgICAgICBsYWJlbCxcbiAgICAgICAgcGFyc2VkOiBjb250cm9sbGVyLmdldFBhcnNlZChpbmRleCksXG4gICAgICAgIHJhdzogY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmRhdGFbaW5kZXhdLFxuICAgICAgICBmb3JtYXR0ZWRWYWx1ZTogdmFsdWUsXG4gICAgICAgIGRhdGFzZXQ6IGNvbnRyb2xsZXIuZ2V0RGF0YXNldCgpLFxuICAgICAgICBkYXRhSW5kZXg6IGluZGV4LFxuICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgIGVsZW1lbnRcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGdldFRvb2x0aXBTaXplKHRvb2x0aXAsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjdHggPSB0b29sdGlwLmNoYXJ0LmN0eDtcbiAgICBjb25zdCB7IGJvZHkgLCBmb290ZXIgLCB0aXRsZSAgfSA9IHRvb2x0aXA7XG4gICAgY29uc3QgeyBib3hXaWR0aCAsIGJveEhlaWdodCAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYm9keUZvbnQgPSB0b0ZvbnQob3B0aW9ucy5ib2R5Rm9udCk7XG4gICAgY29uc3QgdGl0bGVGb250ID0gdG9Gb250KG9wdGlvbnMudGl0bGVGb250KTtcbiAgICBjb25zdCBmb290ZXJGb250ID0gdG9Gb250KG9wdGlvbnMuZm9vdGVyRm9udCk7XG4gICAgY29uc3QgdGl0bGVMaW5lQ291bnQgPSB0aXRsZS5sZW5ndGg7XG4gICAgY29uc3QgZm9vdGVyTGluZUNvdW50ID0gZm9vdGVyLmxlbmd0aDtcbiAgICBjb25zdCBib2R5TGluZUl0ZW1Db3VudCA9IGJvZHkubGVuZ3RoO1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICBsZXQgaGVpZ2h0ID0gcGFkZGluZy5oZWlnaHQ7XG4gICAgbGV0IHdpZHRoID0gMDtcbiAgICBsZXQgY29tYmluZWRCb2R5TGVuZ3RoID0gYm9keS5yZWR1Y2UoKGNvdW50LCBib2R5SXRlbSk9PmNvdW50ICsgYm9keUl0ZW0uYmVmb3JlLmxlbmd0aCArIGJvZHlJdGVtLmxpbmVzLmxlbmd0aCArIGJvZHlJdGVtLmFmdGVyLmxlbmd0aCwgMCk7XG4gICAgY29tYmluZWRCb2R5TGVuZ3RoICs9IHRvb2x0aXAuYmVmb3JlQm9keS5sZW5ndGggKyB0b29sdGlwLmFmdGVyQm9keS5sZW5ndGg7XG4gICAgaWYgKHRpdGxlTGluZUNvdW50KSB7XG4gICAgICAgIGhlaWdodCArPSB0aXRsZUxpbmVDb3VudCAqIHRpdGxlRm9udC5saW5lSGVpZ2h0ICsgKHRpdGxlTGluZUNvdW50IC0gMSkgKiBvcHRpb25zLnRpdGxlU3BhY2luZyArIG9wdGlvbnMudGl0bGVNYXJnaW5Cb3R0b207XG4gICAgfVxuICAgIGlmIChjb21iaW5lZEJvZHlMZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYm9keUxpbmVIZWlnaHQgPSBvcHRpb25zLmRpc3BsYXlDb2xvcnMgPyBNYXRoLm1heChib3hIZWlnaHQsIGJvZHlGb250LmxpbmVIZWlnaHQpIDogYm9keUZvbnQubGluZUhlaWdodDtcbiAgICAgICAgaGVpZ2h0ICs9IGJvZHlMaW5lSXRlbUNvdW50ICogYm9keUxpbmVIZWlnaHQgKyAoY29tYmluZWRCb2R5TGVuZ3RoIC0gYm9keUxpbmVJdGVtQ291bnQpICogYm9keUZvbnQubGluZUhlaWdodCArIChjb21iaW5lZEJvZHlMZW5ndGggLSAxKSAqIG9wdGlvbnMuYm9keVNwYWNpbmc7XG4gICAgfVxuICAgIGlmIChmb290ZXJMaW5lQ291bnQpIHtcbiAgICAgICAgaGVpZ2h0ICs9IG9wdGlvbnMuZm9vdGVyTWFyZ2luVG9wICsgZm9vdGVyTGluZUNvdW50ICogZm9vdGVyRm9udC5saW5lSGVpZ2h0ICsgKGZvb3RlckxpbmVDb3VudCAtIDEpICogb3B0aW9ucy5mb290ZXJTcGFjaW5nO1xuICAgIH1cbiAgICBsZXQgd2lkdGhQYWRkaW5nID0gMDtcbiAgICBjb25zdCBtYXhMaW5lV2lkdGggPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN0eC5tZWFzdXJlVGV4dChsaW5lKS53aWR0aCArIHdpZHRoUGFkZGluZyk7XG4gICAgfTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgICBlYWNoKHRvb2x0aXAudGl0bGUsIG1heExpbmVXaWR0aCk7XG4gICAgY3R4LmZvbnQgPSBib2R5Rm9udC5zdHJpbmc7XG4gICAgZWFjaCh0b29sdGlwLmJlZm9yZUJvZHkuY29uY2F0KHRvb2x0aXAuYWZ0ZXJCb2R5KSwgbWF4TGluZVdpZHRoKTtcbiAgICB3aWR0aFBhZGRpbmcgPSBvcHRpb25zLmRpc3BsYXlDb2xvcnMgPyBib3hXaWR0aCArIDIgKyBvcHRpb25zLmJveFBhZGRpbmcgOiAwO1xuICAgIGVhY2goYm9keSwgKGJvZHlJdGVtKT0+e1xuICAgICAgICBlYWNoKGJvZHlJdGVtLmJlZm9yZSwgbWF4TGluZVdpZHRoKTtcbiAgICAgICAgZWFjaChib2R5SXRlbS5saW5lcywgbWF4TGluZVdpZHRoKTtcbiAgICAgICAgZWFjaChib2R5SXRlbS5hZnRlciwgbWF4TGluZVdpZHRoKTtcbiAgICB9KTtcbiAgICB3aWR0aFBhZGRpbmcgPSAwO1xuICAgIGN0eC5mb250ID0gZm9vdGVyRm9udC5zdHJpbmc7XG4gICAgZWFjaCh0b29sdGlwLmZvb3RlciwgbWF4TGluZVdpZHRoKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIHdpZHRoICs9IHBhZGRpbmcud2lkdGg7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgIH07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVZQWxpZ24oY2hhcnQsIHNpemUpIHtcbiAgICBjb25zdCB7IHkgLCBoZWlnaHQgIH0gPSBzaXplO1xuICAgIGlmICh5IDwgaGVpZ2h0IC8gMikge1xuICAgICAgICByZXR1cm4gJ3RvcCc7XG4gICAgfSBlbHNlIGlmICh5ID4gY2hhcnQuaGVpZ2h0IC0gaGVpZ2h0IC8gMikge1xuICAgICAgICByZXR1cm4gJ2JvdHRvbSc7XG4gICAgfVxuICAgIHJldHVybiAnY2VudGVyJztcbn1cbmZ1bmN0aW9uIGRvZXNOb3RGaXRXaXRoQWxpZ24oeEFsaWduLCBjaGFydCwgb3B0aW9ucywgc2l6ZSkge1xuICAgIGNvbnN0IHsgeCAsIHdpZHRoICB9ID0gc2l6ZTtcbiAgICBjb25zdCBjYXJldCA9IG9wdGlvbnMuY2FyZXRTaXplICsgb3B0aW9ucy5jYXJldFBhZGRpbmc7XG4gICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnICYmIHggKyB3aWR0aCArIGNhcmV0ID4gY2hhcnQud2lkdGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh4QWxpZ24gPT09ICdyaWdodCcgJiYgeCAtIHdpZHRoIC0gY2FyZXQgPCAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGVybWluZVhBbGlnbihjaGFydCwgb3B0aW9ucywgc2l6ZSwgeUFsaWduKSB7XG4gICAgY29uc3QgeyB4ICwgd2lkdGggIH0gPSBzaXplO1xuICAgIGNvbnN0IHsgd2lkdGg6IGNoYXJ0V2lkdGggLCBjaGFydEFyZWE6IHsgbGVmdCAsIHJpZ2h0ICB9ICB9ID0gY2hhcnQ7XG4gICAgbGV0IHhBbGlnbiA9ICdjZW50ZXInO1xuICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHhBbGlnbiA9IHggPD0gKGxlZnQgKyByaWdodCkgLyAyID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9IGVsc2UgaWYgKHggPD0gd2lkdGggLyAyKSB7XG4gICAgICAgIHhBbGlnbiA9ICdsZWZ0JztcbiAgICB9IGVsc2UgaWYgKHggPj0gY2hhcnRXaWR0aCAtIHdpZHRoIC8gMikge1xuICAgICAgICB4QWxpZ24gPSAncmlnaHQnO1xuICAgIH1cbiAgICBpZiAoZG9lc05vdEZpdFdpdGhBbGlnbih4QWxpZ24sIGNoYXJ0LCBvcHRpb25zLCBzaXplKSkge1xuICAgICAgICB4QWxpZ24gPSAnY2VudGVyJztcbiAgICB9XG4gICAgcmV0dXJuIHhBbGlnbjtcbn1cbiBmdW5jdGlvbiBkZXRlcm1pbmVBbGlnbm1lbnQoY2hhcnQsIG9wdGlvbnMsIHNpemUpIHtcbiAgICBjb25zdCB5QWxpZ24gPSBzaXplLnlBbGlnbiB8fCBvcHRpb25zLnlBbGlnbiB8fCBkZXRlcm1pbmVZQWxpZ24oY2hhcnQsIHNpemUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHhBbGlnbjogc2l6ZS54QWxpZ24gfHwgb3B0aW9ucy54QWxpZ24gfHwgZGV0ZXJtaW5lWEFsaWduKGNoYXJ0LCBvcHRpb25zLCBzaXplLCB5QWxpZ24pLFxuICAgICAgICB5QWxpZ25cbiAgICB9O1xufVxuZnVuY3Rpb24gYWxpZ25YKHNpemUsIHhBbGlnbikge1xuICAgIGxldCB7IHggLCB3aWR0aCAgfSA9IHNpemU7XG4gICAgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB4IC09IHdpZHRoO1xuICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICB4IC09IHdpZHRoIC8gMjtcbiAgICB9XG4gICAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiBhbGlnblkoc2l6ZSwgeUFsaWduLCBwYWRkaW5nQW5kU2l6ZSkge1xuICAgIGxldCB7IHkgLCBoZWlnaHQgIH0gPSBzaXplO1xuICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICAgIHkgKz0gcGFkZGluZ0FuZFNpemU7XG4gICAgfSBlbHNlIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICAgIHkgLT0gaGVpZ2h0ICsgcGFkZGluZ0FuZFNpemU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgeSAtPSBoZWlnaHQgLyAyO1xuICAgIH1cbiAgICByZXR1cm4geTtcbn1cbiBmdW5jdGlvbiBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgc2l6ZSwgYWxpZ25tZW50LCBjaGFydCkge1xuICAgIGNvbnN0IHsgY2FyZXRTaXplICwgY2FyZXRQYWRkaW5nICwgY29ybmVyUmFkaXVzICB9ID0gb3B0aW9ucztcbiAgICBjb25zdCB7IHhBbGlnbiAsIHlBbGlnbiAgfSA9IGFsaWdubWVudDtcbiAgICBjb25zdCBwYWRkaW5nQW5kU2l6ZSA9IGNhcmV0U2l6ZSArIGNhcmV0UGFkZGluZztcbiAgICBjb25zdCB7IHRvcExlZnQgLCB0b3BSaWdodCAsIGJvdHRvbUxlZnQgLCBib3R0b21SaWdodCAgfSA9IHRvVFJCTENvcm5lcnMoY29ybmVyUmFkaXVzKTtcbiAgICBsZXQgeCA9IGFsaWduWChzaXplLCB4QWxpZ24pO1xuICAgIGNvbnN0IHkgPSBhbGlnblkoc2l6ZSwgeUFsaWduLCBwYWRkaW5nQW5kU2l6ZSk7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICB4ICs9IHBhZGRpbmdBbmRTaXplO1xuICAgICAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgeCAtPSBwYWRkaW5nQW5kU2l6ZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgeCAtPSBNYXRoLm1heCh0b3BMZWZ0LCBib3R0b21MZWZ0KSArIGNhcmV0U2l6ZTtcbiAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB4ICs9IE1hdGgubWF4KHRvcFJpZ2h0LCBib3R0b21SaWdodCkgKyBjYXJldFNpemU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IF9saW1pdFZhbHVlKHgsIDAsIGNoYXJ0LndpZHRoIC0gc2l6ZS53aWR0aCksXG4gICAgICAgIHk6IF9saW1pdFZhbHVlKHksIDAsIGNoYXJ0LmhlaWdodCAtIHNpemUuaGVpZ2h0KVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRBbGlnbmVkWCh0b29sdGlwLCBhbGlnbiwgb3B0aW9ucykge1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICByZXR1cm4gYWxpZ24gPT09ICdjZW50ZXInID8gdG9vbHRpcC54ICsgdG9vbHRpcC53aWR0aCAvIDIgOiBhbGlnbiA9PT0gJ3JpZ2h0JyA/IHRvb2x0aXAueCArIHRvb2x0aXAud2lkdGggLSBwYWRkaW5nLnJpZ2h0IDogdG9vbHRpcC54ICsgcGFkZGluZy5sZWZ0O1xufVxuIGZ1bmN0aW9uIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHB1c2hPckNvbmNhdChbXSwgc3BsaXROZXdsaW5lcyhjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlVG9vbHRpcENvbnRleHQocGFyZW50LCB0b29sdGlwLCB0b29sdGlwSXRlbXMpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgdG9vbHRpcCxcbiAgICAgICAgdG9vbHRpcEl0ZW1zLFxuICAgICAgICB0eXBlOiAndG9vbHRpcCdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIG92ZXJyaWRlQ2FsbGJhY2tzKGNhbGxiYWNrcywgY29udGV4dCkge1xuICAgIGNvbnN0IG92ZXJyaWRlID0gY29udGV4dCAmJiBjb250ZXh0LmRhdGFzZXQgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAuY2FsbGJhY2tzO1xuICAgIHJldHVybiBvdmVycmlkZSA/IGNhbGxiYWNrcy5vdmVycmlkZShvdmVycmlkZSkgOiBjYWxsYmFja3M7XG59XG5jb25zdCBkZWZhdWx0Q2FsbGJhY2tzID0ge1xuICAgIGJlZm9yZVRpdGxlOiBub29wLFxuICAgIHRpdGxlICh0b29sdGlwSXRlbXMpIHtcbiAgICAgICAgaWYgKHRvb2x0aXBJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdG9vbHRpcEl0ZW1zWzBdO1xuICAgICAgICAgICAgY29uc3QgbGFiZWxzID0gaXRlbS5jaGFydC5kYXRhLmxhYmVscztcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsQ291bnQgPSBsYWJlbHMgPyBsYWJlbHMubGVuZ3RoIDogMDtcbiAgICAgICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uZGF0YXNldC5sYWJlbCB8fCAnJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5sYWJlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmxhYmVsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYWJlbENvdW50ID4gMCAmJiBpdGVtLmRhdGFJbmRleCA8IGxhYmVsQ291bnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWxzW2l0ZW0uZGF0YUluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfSxcbiAgICBhZnRlclRpdGxlOiBub29wLFxuICAgIGJlZm9yZUJvZHk6IG5vb3AsXG4gICAgYmVmb3JlTGFiZWw6IG5vb3AsXG4gICAgbGFiZWwgKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9vbHRpcEl0ZW0ubGFiZWwgKyAnOiAnICsgdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWUgfHwgdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxhYmVsID0gdG9vbHRpcEl0ZW0uZGF0YXNldC5sYWJlbCB8fCAnJztcbiAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICBsYWJlbCArPSAnOiAnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcbiAgICAgICAgICAgIGxhYmVsICs9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9LFxuICAgIGxhYmVsQ29sb3IgKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0b29sdGlwSXRlbS5jaGFydC5nZXREYXRhc2V0TWV0YSh0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHRvb2x0aXBJdGVtLmRhdGFJbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgIGJvcmRlckRhc2g6IG9wdGlvbnMuYm9yZGVyRGFzaCxcbiAgICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogMFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgbGFiZWxUZXh0Q29sb3IgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmJvZHlDb2xvcjtcbiAgICB9LFxuICAgIGxhYmVsUG9pbnRTdHlsZSAodG9vbHRpcEl0ZW0pIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRvb2x0aXBJdGVtLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRvb2x0aXBJdGVtLmRhdGFzZXRJbmRleCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUodG9vbHRpcEl0ZW0uZGF0YUluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvaW50U3R5bGU6IG9wdGlvbnMucG9pbnRTdHlsZSxcbiAgICAgICAgICAgIHJvdGF0aW9uOiBvcHRpb25zLnJvdGF0aW9uXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZnRlckxhYmVsOiBub29wLFxuICAgIGFmdGVyQm9keTogbm9vcCxcbiAgICBiZWZvcmVGb290ZXI6IG5vb3AsXG4gICAgZm9vdGVyOiBub29wLFxuICAgIGFmdGVyRm9vdGVyOiBub29wXG59O1xuIGZ1bmN0aW9uIGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgbmFtZSwgY3R4LCBhcmcpIHtcbiAgICBjb25zdCByZXN1bHQgPSBjYWxsYmFja3NbbmFtZV0uY2FsbChjdHgsIGFyZyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q2FsbGJhY2tzW25hbWVdLmNhbGwoY3R4LCBhcmcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY2xhc3MgVG9vbHRpcCBleHRlbmRzIEVsZW1lbnQge1xuIHN0YXRpYyBwb3NpdGlvbmVycyA9IHBvc2l0aW9uZXJzO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3BhY2l0eSA9IDA7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IFtdO1xuICAgICAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zaXplID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl90b29sdGlwSXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy4kYW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgICAgIHRoaXMuZGF0YVBvaW50cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50aXRsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5iZWZvcmVCb2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYWZ0ZXJCb2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmZvb3RlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy54QWxpZ24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueUFsaWduID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2FyZXRYID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNhcmV0WSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYWJlbENvbG9ycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYWJlbFBvaW50U3R5bGVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxhYmVsVGV4dENvbG9ycyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZShvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgfVxuIF9yZXNvbHZlQW5pbWF0aW9ucygpIHtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gdGhpcy5fY2FjaGVkQW5pbWF0aW9ucztcbiAgICAgICAgaWYgKGNhY2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBvcHRpb25zLmVuYWJsZWQgJiYgY2hhcnQub3B0aW9ucy5hbmltYXRpb24gJiYgb3B0aW9ucy5hbmltYXRpb25zO1xuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gbmV3IEFuaW1hdGlvbnModGhpcy5jaGFydCwgb3B0cyk7XG4gICAgICAgIGlmIChvcHRzLl9jYWNoZWFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSBPYmplY3QuZnJlZXplKGFuaW1hdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiBnZXRDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZVRvb2x0aXBDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLCB0aGlzLl90b29sdGlwSXRlbXMpKTtcbiAgICB9XG4gICAgZ2V0VGl0bGUoY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGNhbGxiYWNrcyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJlZm9yZVRpdGxlID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAnYmVmb3JlVGl0bGUnLCB0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICd0aXRsZScsIHRoaXMsIGNvbnRleHQpO1xuICAgICAgICBjb25zdCBhZnRlclRpdGxlID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAnYWZ0ZXJUaXRsZScsIHRoaXMsIGNvbnRleHQpO1xuICAgICAgICBsZXQgbGluZXMgPSBbXTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYmVmb3JlVGl0bGUpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXModGl0bGUpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJUaXRsZSkpO1xuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgfVxuICAgIGdldEJlZm9yZUJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhvcHRpb25zLmNhbGxiYWNrcywgJ2JlZm9yZUJvZHknLCB0aGlzLCB0b29sdGlwSXRlbXMpKTtcbiAgICB9XG4gICAgZ2V0Qm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBjYWxsYmFja3MgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBib2R5SXRlbXMgPSBbXTtcbiAgICAgICAgZWFjaCh0b29sdGlwSXRlbXMsIChjb250ZXh0KT0+e1xuICAgICAgICAgICAgY29uc3QgYm9keUl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgYmVmb3JlOiBbXSxcbiAgICAgICAgICAgICAgICBsaW5lczogW10sXG4gICAgICAgICAgICAgICAgYWZ0ZXI6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3Qgc2NvcGVkID0gb3ZlcnJpZGVDYWxsYmFja3MoY2FsbGJhY2tzLCBjb250ZXh0KTtcbiAgICAgICAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5iZWZvcmUsIHNwbGl0TmV3bGluZXMoaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnYmVmb3JlTGFiZWwnLCB0aGlzLCBjb250ZXh0KSkpO1xuICAgICAgICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmxpbmVzLCBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhzY29wZWQsICdsYWJlbCcsIHRoaXMsIGNvbnRleHQpKTtcbiAgICAgICAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5hZnRlciwgc3BsaXROZXdsaW5lcyhpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhzY29wZWQsICdhZnRlckxhYmVsJywgdGhpcywgY29udGV4dCkpKTtcbiAgICAgICAgICAgIGJvZHlJdGVtcy5wdXNoKGJvZHlJdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBib2R5SXRlbXM7XG4gICAgfVxuICAgIGdldEFmdGVyQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKG9wdGlvbnMuY2FsbGJhY2tzLCAnYWZ0ZXJCb2R5JywgdGhpcywgdG9vbHRpcEl0ZW1zKSk7XG4gICAgfVxuICAgIGdldEZvb3Rlcih0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBjYWxsYmFja3MgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBiZWZvcmVGb290ZXIgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICdiZWZvcmVGb290ZXInLCB0aGlzLCB0b29sdGlwSXRlbXMpO1xuICAgICAgICBjb25zdCBmb290ZXIgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICdmb290ZXInLCB0aGlzLCB0b29sdGlwSXRlbXMpO1xuICAgICAgICBjb25zdCBhZnRlckZvb3RlciA9IGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgJ2FmdGVyRm9vdGVyJywgdGhpcywgdG9vbHRpcEl0ZW1zKTtcbiAgICAgICAgbGV0IGxpbmVzID0gW107XG4gICAgICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGJlZm9yZUZvb3RlcikpO1xuICAgICAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhmb290ZXIpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJGb290ZXIpKTtcbiAgICAgICAgcmV0dXJuIGxpbmVzO1xuICAgIH1cbiBfY3JlYXRlSXRlbXMob3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNoYXJ0LmRhdGE7XG4gICAgICAgIGNvbnN0IGxhYmVsQ29sb3JzID0gW107XG4gICAgICAgIGNvbnN0IGxhYmVsUG9pbnRTdHlsZXMgPSBbXTtcbiAgICAgICAgY29uc3QgbGFiZWxUZXh0Q29sb3JzID0gW107XG4gICAgICAgIGxldCB0b29sdGlwSXRlbXMgPSBbXTtcbiAgICAgICAgbGV0IGksIGxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBsZW4gPSBhY3RpdmUubGVuZ3RoOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zLnB1c2goY3JlYXRlVG9vbHRpcEl0ZW0odGhpcy5jaGFydCwgYWN0aXZlW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZmlsdGVyKSB7XG4gICAgICAgICAgICB0b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXMuZmlsdGVyKChlbGVtZW50LCBpbmRleCwgYXJyYXkpPT5vcHRpb25zLmZpbHRlcihlbGVtZW50LCBpbmRleCwgYXJyYXksIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pdGVtU29ydCkge1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLnNvcnQoKGEsIGIpPT5vcHRpb25zLml0ZW1Tb3J0KGEsIGIsIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBlYWNoKHRvb2x0aXBJdGVtcywgKGNvbnRleHQpPT57XG4gICAgICAgICAgICBjb25zdCBzY29wZWQgPSBvdmVycmlkZUNhbGxiYWNrcyhvcHRpb25zLmNhbGxiYWNrcywgY29udGV4dCk7XG4gICAgICAgICAgICBsYWJlbENvbG9ycy5wdXNoKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKHNjb3BlZCwgJ2xhYmVsQ29sb3InLCB0aGlzLCBjb250ZXh0KSk7XG4gICAgICAgICAgICBsYWJlbFBvaW50U3R5bGVzLnB1c2goaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnbGFiZWxQb2ludFN0eWxlJywgdGhpcywgY29udGV4dCkpO1xuICAgICAgICAgICAgbGFiZWxUZXh0Q29sb3JzLnB1c2goaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnbGFiZWxUZXh0Q29sb3InLCB0aGlzLCBjb250ZXh0KSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxhYmVsQ29sb3JzID0gbGFiZWxDb2xvcnM7XG4gICAgICAgIHRoaXMubGFiZWxQb2ludFN0eWxlcyA9IGxhYmVsUG9pbnRTdHlsZXM7XG4gICAgICAgIHRoaXMubGFiZWxUZXh0Q29sb3JzID0gbGFiZWxUZXh0Q29sb3JzO1xuICAgICAgICB0aGlzLmRhdGFQb2ludHMgPSB0b29sdGlwSXRlbXM7XG4gICAgICAgIHJldHVybiB0b29sdGlwSXRlbXM7XG4gICAgfVxuICAgIHVwZGF0ZShjaGFuZ2VkLCByZXBsYXkpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgICAgICBsZXQgcHJvcGVydGllcztcbiAgICAgICAgbGV0IHRvb2x0aXBJdGVtcyA9IFtdO1xuICAgICAgICBpZiAoIWFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wYWNpdHkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCBhY3RpdmUsIHRoaXMuX2V2ZW50UG9zaXRpb24pO1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zID0gdGhpcy5fY3JlYXRlSXRlbXMob3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gdGhpcy5nZXRUaXRsZSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5iZWZvcmVCb2R5ID0gdGhpcy5nZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmJvZHkgPSB0aGlzLmdldEJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJCb2R5ID0gdGhpcy5nZXRBZnRlckJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuZm9vdGVyID0gdGhpcy5nZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9zaXplID0gZ2V0VG9vbHRpcFNpemUodGhpcywgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbkFuZFNpemUgPSBPYmplY3QuYXNzaWduKHt9LCBwb3NpdGlvbiwgc2l6ZSk7XG4gICAgICAgICAgICBjb25zdCBhbGlnbm1lbnQgPSBkZXRlcm1pbmVBbGlnbm1lbnQodGhpcy5jaGFydCwgb3B0aW9ucywgcG9zaXRpb25BbmRTaXplKTtcbiAgICAgICAgICAgIGNvbnN0IGJhY2tncm91bmRQb2ludCA9IGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUsIGFsaWdubWVudCwgdGhpcy5jaGFydCk7XG4gICAgICAgICAgICB0aGlzLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG4gICAgICAgICAgICB0aGlzLnlBbGlnbiA9IGFsaWdubWVudC55QWxpZ247XG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgeDogYmFja2dyb3VuZFBvaW50LngsXG4gICAgICAgICAgICAgICAgeTogYmFja2dyb3VuZFBvaW50LnksXG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemUud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcbiAgICAgICAgICAgICAgICBjYXJldFg6IHBvc2l0aW9uLngsXG4gICAgICAgICAgICAgICAgY2FyZXRZOiBwb3NpdGlvbi55XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcztcbiAgICAgICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFuZ2VkICYmIG9wdGlvbnMuZXh0ZXJuYWwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZXh0ZXJuYWwuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXMuY2hhcnQsXG4gICAgICAgICAgICAgICAgdG9vbHRpcDogdGhpcyxcbiAgICAgICAgICAgICAgICByZXBsYXlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXdDYXJldCh0b29sdGlwUG9pbnQsIGN0eCwgc2l6ZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBjYXJldFBvc2l0aW9uID0gdGhpcy5nZXRDYXJldFBvc2l0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MSwgY2FyZXRQb3NpdGlvbi55MSk7XG4gICAgICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MiwgY2FyZXRQb3NpdGlvbi55Mik7XG4gICAgICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MywgY2FyZXRQb3NpdGlvbi55Myk7XG4gICAgfVxuICAgIGdldENhcmV0UG9zaXRpb24odG9vbHRpcFBvaW50LCBzaXplLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgeEFsaWduICwgeUFsaWduICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBjYXJldFNpemUgLCBjb3JuZXJSYWRpdXMgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB7IHRvcExlZnQgLCB0b3BSaWdodCAsIGJvdHRvbUxlZnQgLCBib3R0b21SaWdodCAgfSA9IHRvVFJCTENvcm5lcnMoY29ybmVyUmFkaXVzKTtcbiAgICAgICAgY29uc3QgeyB4OiBwdFggLCB5OiBwdFkgIH0gPSB0b29sdGlwUG9pbnQ7XG4gICAgICAgIGNvbnN0IHsgd2lkdGggLCBoZWlnaHQgIH0gPSBzaXplO1xuICAgICAgICBsZXQgeDEsIHgyLCB4MywgeTEsIHkyLCB5MztcbiAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHkyID0gcHRZICsgaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIHgxID0gcHRYO1xuICAgICAgICAgICAgICAgIHgyID0geDEgLSBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeTEgPSB5MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB5MyA9IHkyIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4MSA9IHB0WCArIHdpZHRoO1xuICAgICAgICAgICAgICAgIHgyID0geDEgKyBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeTEgPSB5MiAtIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB5MyA9IHkyICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeDMgPSB4MTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIHgyID0gcHRYICsgTWF0aC5tYXgodG9wTGVmdCwgYm90dG9tTGVmdCkgKyBjYXJldFNpemU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgICAgIHgyID0gcHRYICsgd2lkdGggLSBNYXRoLm1heCh0b3BSaWdodCwgYm90dG9tUmlnaHQpIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4MiA9IHRoaXMuY2FyZXRYO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgICAgICB5MSA9IHB0WTtcbiAgICAgICAgICAgICAgICB5MiA9IHkxIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHgxID0geDIgLSBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeDMgPSB4MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeTEgPSBwdFkgKyBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgeTIgPSB5MSArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB4MSA9IHgyICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHgzID0geDIgLSBjYXJldFNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5MyA9IHkxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4MSxcbiAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICB5MSxcbiAgICAgICAgICAgIHkyLFxuICAgICAgICAgICAgeTNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZHJhd1RpdGxlKHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLnRpdGxlO1xuICAgICAgICBjb25zdCBsZW5ndGggPSB0aXRsZS5sZW5ndGg7XG4gICAgICAgIGxldCB0aXRsZUZvbnQsIHRpdGxlU3BhY2luZywgaTtcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgICAgICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBvcHRpb25zLnRpdGxlQWxpZ24sIG9wdGlvbnMpO1xuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24ob3B0aW9ucy50aXRsZUFsaWduKTtcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgICAgIHRpdGxlRm9udCA9IHRvRm9udChvcHRpb25zLnRpdGxlRm9udCk7XG4gICAgICAgICAgICB0aXRsZVNwYWNpbmcgPSBvcHRpb25zLnRpdGxlU3BhY2luZztcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLnRpdGxlQ29sb3I7XG4gICAgICAgICAgICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSl7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KHRpdGxlW2ldLCBydGxIZWxwZXIueChwdC54KSwgcHQueSArIHRpdGxlRm9udC5saW5lSGVpZ2h0IC8gMik7XG4gICAgICAgICAgICAgICAgcHQueSArPSB0aXRsZUZvbnQubGluZUhlaWdodCArIHRpdGxlU3BhY2luZztcbiAgICAgICAgICAgICAgICBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBwdC55ICs9IG9wdGlvbnMudGl0bGVNYXJnaW5Cb3R0b20gLSB0aXRsZVNwYWNpbmc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuIF9kcmF3Q29sb3JCb3goY3R4LCBwdCwgaSwgcnRsSGVscGVyLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsQ29sb3IgPSB0aGlzLmxhYmVsQ29sb3JzW2ldO1xuICAgICAgICBjb25zdCBsYWJlbFBvaW50U3R5bGUgPSB0aGlzLmxhYmVsUG9pbnRTdHlsZXNbaV07XG4gICAgICAgIGNvbnN0IHsgYm94SGVpZ2h0ICwgYm94V2lkdGggIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBib2R5Rm9udCA9IHRvRm9udChvcHRpb25zLmJvZHlGb250KTtcbiAgICAgICAgY29uc3QgY29sb3JYID0gZ2V0QWxpZ25lZFgodGhpcywgJ2xlZnQnLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgcnRsQ29sb3JYID0gcnRsSGVscGVyLngoY29sb3JYKTtcbiAgICAgICAgY29uc3QgeU9mZlNldCA9IGJveEhlaWdodCA8IGJvZHlGb250LmxpbmVIZWlnaHQgPyAoYm9keUZvbnQubGluZUhlaWdodCAtIGJveEhlaWdodCkgLyAyIDogMDtcbiAgICAgICAgY29uc3QgY29sb3JZID0gcHQueSArIHlPZmZTZXQ7XG4gICAgICAgIGlmIChvcHRpb25zLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRyYXdPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHJhZGl1czogTWF0aC5taW4oYm94V2lkdGgsIGJveEhlaWdodCkgLyAyLFxuICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IGxhYmVsUG9pbnRTdHlsZS5wb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBsYWJlbFBvaW50U3R5bGUucm90YXRpb24sXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib3hXaWR0aCkgKyBib3hXaWR0aCAvIDI7XG4gICAgICAgICAgICBjb25zdCBjZW50ZXJZID0gY29sb3JZICsgYm94SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvci5ib3JkZXJDb2xvcjtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9yLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgIGRyYXdQb2ludChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBpc09iamVjdChsYWJlbENvbG9yLmJvcmRlcldpZHRoKSA/IE1hdGgubWF4KC4uLk9iamVjdC52YWx1ZXMobGFiZWxDb2xvci5ib3JkZXJXaWR0aCkpIDogbGFiZWxDb2xvci5ib3JkZXJXaWR0aCB8fCAxO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvci5ib3JkZXJDb2xvcjtcbiAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChsYWJlbENvbG9yLmJvcmRlckRhc2ggfHwgW10pO1xuICAgICAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gbGFiZWxDb2xvci5ib3JkZXJEYXNoT2Zmc2V0IHx8IDA7XG4gICAgICAgICAgICBjb25zdCBvdXRlclggPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxDb2xvclgsIGJveFdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IGlubmVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bEhlbHBlci54UGx1cyhydGxDb2xvclgsIDEpLCBib3hXaWR0aCAtIDIpO1xuICAgICAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhsYWJlbENvbG9yLmJvcmRlclJhZGl1cyk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhib3JkZXJSYWRpdXMpLnNvbWUoKHYpPT52ICE9PSAwKSkge1xuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5tdWx0aUtleUJhY2tncm91bmQ7XG4gICAgICAgICAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgICAgICAgICAgICB4OiBvdXRlclgsXG4gICAgICAgICAgICAgICAgICAgIHk6IGNvbG9yWSxcbiAgICAgICAgICAgICAgICAgICAgdzogYm94V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGg6IGJveEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvci5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgeDogaW5uZXJYLFxuICAgICAgICAgICAgICAgICAgICB5OiBjb2xvclkgKyAxLFxuICAgICAgICAgICAgICAgICAgICB3OiBib3hXaWR0aCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIGg6IGJveEhlaWdodCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChvdXRlclgsIGNvbG9yWSwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3Qob3V0ZXJYLCBjb2xvclksIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9yLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoaW5uZXJYLCBjb2xvclkgKyAxLCBib3hXaWR0aCAtIDIsIGJveEhlaWdodCAtIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmxhYmVsVGV4dENvbG9yc1tpXTtcbiAgICB9XG4gICAgZHJhd0JvZHkocHQsIGN0eCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJvZHkgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGJvZHlTcGFjaW5nICwgYm9keUFsaWduICwgZGlzcGxheUNvbG9ycyAsIGJveEhlaWdodCAsIGJveFdpZHRoICwgYm94UGFkZGluZyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICAgICAgICBsZXQgYm9keUxpbmVIZWlnaHQgPSBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgICAgICBsZXQgeExpbmVQYWRkaW5nID0gMDtcbiAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgICAgY29uc3QgZmlsbExpbmVPZlRleHQgPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQobGluZSwgcnRsSGVscGVyLngocHQueCArIHhMaW5lUGFkZGluZyksIHB0LnkgKyBib2R5TGluZUhlaWdodCAvIDIpO1xuICAgICAgICAgICAgcHQueSArPSBib2R5TGluZUhlaWdodCArIGJvZHlTcGFjaW5nO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oYm9keUFsaWduKTtcbiAgICAgICAgbGV0IGJvZHlJdGVtLCB0ZXh0Q29sb3IsIGxpbmVzLCBpLCBqLCBpbGVuLCBqbGVuO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gYm9keUFsaWduO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGN0eC5mb250ID0gYm9keUZvbnQuc3RyaW5nO1xuICAgICAgICBwdC54ID0gZ2V0QWxpZ25lZFgodGhpcywgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24sIG9wdGlvbnMpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5ib2R5Q29sb3I7XG4gICAgICAgIGVhY2godGhpcy5iZWZvcmVCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG4gICAgICAgIHhMaW5lUGFkZGluZyA9IGRpc3BsYXlDb2xvcnMgJiYgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24gIT09ICdyaWdodCcgPyBib2R5QWxpZ24gPT09ICdjZW50ZXInID8gYm94V2lkdGggLyAyICsgYm94UGFkZGluZyA6IGJveFdpZHRoICsgMiArIGJveFBhZGRpbmcgOiAwO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBib2R5Lmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBib2R5SXRlbSA9IGJvZHlbaV07XG4gICAgICAgICAgICB0ZXh0Q29sb3IgPSB0aGlzLmxhYmVsVGV4dENvbG9yc1tpXTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0ZXh0Q29sb3I7XG4gICAgICAgICAgICBlYWNoKGJvZHlJdGVtLmJlZm9yZSwgZmlsbExpbmVPZlRleHQpO1xuICAgICAgICAgICAgbGluZXMgPSBib2R5SXRlbS5saW5lcztcbiAgICAgICAgICAgIGlmIChkaXNwbGF5Q29sb3JzICYmIGxpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdDb2xvckJveChjdHgsIHB0LCBpLCBydGxIZWxwZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJvZHlMaW5lSGVpZ2h0ID0gTWF0aC5tYXgoYm9keUZvbnQubGluZUhlaWdodCwgYm94SGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcihqID0gMCwgamxlbiA9IGxpbmVzLmxlbmd0aDsgaiA8IGpsZW47ICsrail7XG4gICAgICAgICAgICAgICAgZmlsbExpbmVPZlRleHQobGluZXNbal0pO1xuICAgICAgICAgICAgICAgIGJvZHlMaW5lSGVpZ2h0ID0gYm9keUZvbnQubGluZUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVhY2goYm9keUl0ZW0uYWZ0ZXIsIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICB4TGluZVBhZGRpbmcgPSAwO1xuICAgICAgICBib2R5TGluZUhlaWdodCA9IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgICAgIGVhY2godGhpcy5hZnRlckJvZHksIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICAgICAgcHQueSAtPSBib2R5U3BhY2luZztcbiAgICB9XG4gICAgZHJhd0Zvb3RlcihwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGZvb3RlciA9IHRoaXMuZm9vdGVyO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBmb290ZXIubGVuZ3RoO1xuICAgICAgICBsZXQgZm9vdGVyRm9udCwgaTtcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgICAgICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBvcHRpb25zLmZvb3RlckFsaWduLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHB0LnkgKz0gb3B0aW9ucy5mb290ZXJNYXJnaW5Ub3A7XG4gICAgICAgICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihvcHRpb25zLmZvb3RlckFsaWduKTtcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgICAgIGZvb3RlckZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb290ZXJGb250KTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmZvb3RlckNvbG9yO1xuICAgICAgICAgICAgY3R4LmZvbnQgPSBmb290ZXJGb250LnN0cmluZztcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFRleHQoZm9vdGVyW2ldLCBydGxIZWxwZXIueChwdC54KSwgcHQueSArIGZvb3RlckZvbnQubGluZUhlaWdodCAvIDIpO1xuICAgICAgICAgICAgICAgIHB0LnkgKz0gZm9vdGVyRm9udC5saW5lSGVpZ2h0ICsgb3B0aW9ucy5mb290ZXJTcGFjaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgeEFsaWduICwgeUFsaWduICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyB4ICwgeSAgfSA9IHB0O1xuICAgICAgICBjb25zdCB7IHdpZHRoICwgaGVpZ2h0ICB9ID0gdG9vbHRpcFNpemU7XG4gICAgICAgIGNvbnN0IHsgdG9wTGVmdCAsIHRvcFJpZ2h0ICwgYm90dG9tTGVmdCAsIGJvdHRvbVJpZ2h0ICB9ID0gdG9UUkJMQ29ybmVycyhvcHRpb25zLmNvcm5lclJhZGl1cyk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyh4ICsgdG9wTGVmdCwgeSk7XG4gICAgICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgd2lkdGggLSB0b3BSaWdodCwgeSk7XG4gICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSwgeCArIHdpZHRoLCB5ICsgdG9wUmlnaHQpO1xuICAgICAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgubGluZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCAtIGJvdHRvbVJpZ2h0KTtcbiAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0LCB4ICsgd2lkdGggLSBib3R0b21SaWdodCwgeSArIGhlaWdodCk7XG4gICAgICAgIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgYm90dG9tTGVmdCwgeSArIGhlaWdodCk7XG4gICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSBib3R0b21MZWZ0KTtcbiAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicgJiYgeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgubGluZVRvKHgsIHkgKyB0b3BMZWZ0KTtcbiAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHRvcExlZnQsIHkpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGlmIChvcHRpb25zLmJvcmRlcldpZHRoID4gMCkge1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICB9XG4gICAgfVxuIF91cGRhdGVBbmltYXRpb25UYXJnZXQob3B0aW9ucykge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy4kYW5pbWF0aW9ucztcbiAgICAgICAgY29uc3QgYW5pbVggPSBhbmltcyAmJiBhbmltcy54O1xuICAgICAgICBjb25zdCBhbmltWSA9IGFuaW1zICYmIGFuaW1zLnk7XG4gICAgICAgIGlmIChhbmltWCB8fCBhbmltWSkge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbmVyc1tvcHRpb25zLnBvc2l0aW9uXS5jYWxsKHRoaXMsIHRoaXMuX2FjdGl2ZSwgdGhpcy5fZXZlbnRQb3NpdGlvbik7XG4gICAgICAgICAgICBpZiAoIXBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuX3NpemUgPSBnZXRUb29sdGlwU2l6ZSh0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQW5kU2l6ZSA9IE9iamVjdC5hc3NpZ24oe30sIHBvc2l0aW9uLCB0aGlzLl9zaXplKTtcbiAgICAgICAgICAgIGNvbnN0IGFsaWdubWVudCA9IGRldGVybWluZUFsaWdubWVudChjaGFydCwgb3B0aW9ucywgcG9zaXRpb25BbmRTaXplKTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gZ2V0QmFja2dyb3VuZFBvaW50KG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSwgYWxpZ25tZW50LCBjaGFydCk7XG4gICAgICAgICAgICBpZiAoYW5pbVguX3RvICE9PSBwb2ludC54IHx8IGFuaW1ZLl90byAhPT0gcG9pbnQueSkge1xuICAgICAgICAgICAgICAgIHRoaXMueEFsaWduID0gYWxpZ25tZW50LnhBbGlnbjtcbiAgICAgICAgICAgICAgICB0aGlzLnlBbGlnbiA9IGFsaWdubWVudC55QWxpZ247XG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IHNpemUud2lkdGg7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmV0WCA9IHBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgdGhpcy5jYXJldFkgPSBwb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiBfd2lsbFJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5vcGFjaXR5O1xuICAgIH1cbiAgICBkcmF3KGN0eCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBsZXQgb3BhY2l0eSA9IHRoaXMub3BhY2l0eTtcbiAgICAgICAgaWYgKCFvcGFjaXR5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlQW5pbWF0aW9uVGFyZ2V0KG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB0b29sdGlwU2l6ZSA9IHtcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwdCA9IHtcbiAgICAgICAgICAgIHg6IHRoaXMueCxcbiAgICAgICAgICAgIHk6IHRoaXMueVxuICAgICAgICB9O1xuICAgICAgICBvcGFjaXR5ID0gTWF0aC5hYnMob3BhY2l0eSkgPCAxZS0zID8gMCA6IG9wYWNpdHk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICAgICAgY29uc3QgaGFzVG9vbHRpcENvbnRlbnQgPSB0aGlzLnRpdGxlLmxlbmd0aCB8fCB0aGlzLmJlZm9yZUJvZHkubGVuZ3RoIHx8IHRoaXMuYm9keS5sZW5ndGggfHwgdGhpcy5hZnRlckJvZHkubGVuZ3RoIHx8IHRoaXMuZm9vdGVyLmxlbmd0aDtcbiAgICAgICAgaWYgKG9wdGlvbnMuZW5hYmxlZCAmJiBoYXNUb29sdGlwQ29udGVudCkge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IG9wYWNpdHk7XG4gICAgICAgICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgICAgIG92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIG9wdGlvbnMudGV4dERpcmVjdGlvbik7XG4gICAgICAgICAgICBwdC55ICs9IHBhZGRpbmcudG9wO1xuICAgICAgICAgICAgdGhpcy5kcmF3VGl0bGUocHQsIGN0eCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmRyYXdCb2R5KHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5kcmF3Rm9vdGVyKHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmVzdG9yZVRleHREaXJlY3Rpb24oY3R4LCBvcHRpb25zLnRleHREaXJlY3Rpb24pO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiBnZXRBY3RpdmVFbGVtZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgICB9XG4gc2V0QWN0aXZlRWxlbWVudHMoYWN0aXZlRWxlbWVudHMsIGV2ZW50UG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgbGFzdEFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gYWN0aXZlRWxlbWVudHMubWFwKCh7IGRhdGFzZXRJbmRleCAsIGluZGV4ICB9KT0+e1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgICAgICAgIGlmICghbWV0YSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgYSBkYXRhc2V0IGF0IGluZGV4ICcgKyBkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgZWxlbWVudDogbWV0YS5kYXRhW2luZGV4XSxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwobGFzdEFjdGl2ZSwgYWN0aXZlKTtcbiAgICAgICAgY29uc3QgcG9zaXRpb25DaGFuZ2VkID0gdGhpcy5fcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZXZlbnRQb3NpdGlvbik7XG4gICAgICAgIGlmIChjaGFuZ2VkIHx8IHBvc2l0aW9uQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IGV2ZW50UG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gaGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSA9IHRydWUpIHtcbiAgICAgICAgaWYgKHJlcGxheSAmJiB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbGFzdEFjdGl2ZSA9IHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5fZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSk7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQ2hhbmdlZCA9IHRoaXMuX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGUpO1xuICAgICAgICBjb25zdCBjaGFuZ2VkID0gcmVwbGF5IHx8ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpIHx8IHBvc2l0aW9uQ2hhbmdlZDtcbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmVuYWJsZWQgfHwgb3B0aW9ucy5leHRlcm5hbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50UG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGUueCxcbiAgICAgICAgICAgICAgICAgICAgeTogZS55XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSh0cnVlLCByZXBsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cbiBfZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbkNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RBY3RpdmU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5jaGFydC5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGUsIG9wdGlvbnMubW9kZSwgb3B0aW9ucywgcmVwbGF5KTtcbiAgICAgICAgaWYgKG9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgICAgICAgYWN0aXZlLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aXZlO1xuICAgIH1cbiBfcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZSkge1xuICAgICAgICBjb25zdCB7IGNhcmV0WCAsIGNhcmV0WSAsIG9wdGlvbnMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdGlvbnMucG9zaXRpb25dLmNhbGwodGhpcywgYWN0aXZlLCBlKTtcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uICE9PSBmYWxzZSAmJiAoY2FyZXRYICE9PSBwb3NpdGlvbi54IHx8IGNhcmV0WSAhPT0gcG9zaXRpb24ueSk7XG4gICAgfVxufVxudmFyIHBsdWdpbl90b29sdGlwID0ge1xuICAgIGlkOiAndG9vbHRpcCcsXG4gICAgX2VsZW1lbnQ6IFRvb2x0aXAsXG4gICAgcG9zaXRpb25lcnMsXG4gICAgYWZ0ZXJJbml0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNoYXJ0LnRvb2x0aXAgPSBuZXcgVG9vbHRpcCh7XG4gICAgICAgICAgICAgICAgY2hhcnQsXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZSAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICAgICAgICBjaGFydC50b29sdGlwLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlc2V0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgICAgICAgIGNoYXJ0LnRvb2x0aXAuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWZ0ZXJEcmF3IChjaGFydCkge1xuICAgICAgICBjb25zdCB0b29sdGlwID0gY2hhcnQudG9vbHRpcDtcbiAgICAgICAgaWYgKHRvb2x0aXAgJiYgdG9vbHRpcC5fd2lsbFJlbmRlcigpKSB7XG4gICAgICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgICAgIHRvb2x0aXBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoY2hhcnQubm90aWZ5UGx1Z2lucygnYmVmb3JlVG9vbHRpcERyYXcnLCB7XG4gICAgICAgICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b29sdGlwLmRyYXcoY2hhcnQuY3R4KTtcbiAgICAgICAgICAgIGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2FmdGVyVG9vbHRpcERyYXcnLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWZ0ZXJFdmVudCAoY2hhcnQsIGFyZ3MpIHtcbiAgICAgICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZUZpbmFsUG9zaXRpb24gPSBhcmdzLnJlcGxheTtcbiAgICAgICAgICAgIGlmIChjaGFydC50b29sdGlwLmhhbmRsZUV2ZW50KGFyZ3MuZXZlbnQsIHVzZUZpbmFsUG9zaXRpb24sIGFyZ3MuaW5DaGFydEFyZWEpKSB7XG4gICAgICAgICAgICAgICAgYXJncy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgZXh0ZXJuYWw6IG51bGwsXG4gICAgICAgIHBvc2l0aW9uOiAnYXZlcmFnZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC44KScsXG4gICAgICAgIHRpdGxlQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgdGl0bGVGb250OiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICdib2xkJ1xuICAgICAgICB9LFxuICAgICAgICB0aXRsZVNwYWNpbmc6IDIsXG4gICAgICAgIHRpdGxlTWFyZ2luQm90dG9tOiA2LFxuICAgICAgICB0aXRsZUFsaWduOiAnbGVmdCcsXG4gICAgICAgIGJvZHlDb2xvcjogJyNmZmYnLFxuICAgICAgICBib2R5U3BhY2luZzogMixcbiAgICAgICAgYm9keUZvbnQ6IHt9LFxuICAgICAgICBib2R5QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgZm9vdGVyQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgZm9vdGVyU3BhY2luZzogMixcbiAgICAgICAgZm9vdGVyTWFyZ2luVG9wOiA2LFxuICAgICAgICBmb290ZXJGb250OiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICdib2xkJ1xuICAgICAgICB9LFxuICAgICAgICBmb290ZXJBbGlnbjogJ2xlZnQnLFxuICAgICAgICBwYWRkaW5nOiA2LFxuICAgICAgICBjYXJldFBhZGRpbmc6IDIsXG4gICAgICAgIGNhcmV0U2l6ZTogNSxcbiAgICAgICAgY29ybmVyUmFkaXVzOiA2LFxuICAgICAgICBib3hIZWlnaHQ6IChjdHgsIG9wdHMpPT5vcHRzLmJvZHlGb250LnNpemUsXG4gICAgICAgIGJveFdpZHRoOiAoY3R4LCBvcHRzKT0+b3B0cy5ib2R5Rm9udC5zaXplLFxuICAgICAgICBtdWx0aUtleUJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgZGlzcGxheUNvbG9yczogdHJ1ZSxcbiAgICAgICAgYm94UGFkZGluZzogMCxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgZHVyYXRpb246IDQwMCxcbiAgICAgICAgICAgIGVhc2luZzogJ2Vhc2VPdXRRdWFydCdcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCcsXG4gICAgICAgICAgICAgICAgICAgICdoZWlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAnY2FyZXRYJyxcbiAgICAgICAgICAgICAgICAgICAgJ2NhcmV0WSdcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3BhY2l0eToge1xuICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDIwMFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxsYmFja3M6IGRlZmF1bHRDYWxsYmFja3NcbiAgICB9LFxuICAgIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICAgICAgYm9keUZvbnQ6ICdmb250JyxcbiAgICAgICAgZm9vdGVyRm9udDogJ2ZvbnQnLFxuICAgICAgICB0aXRsZUZvbnQ6ICdmb250J1xuICAgIH0sXG4gICAgZGVzY3JpcHRvcnM6IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2ZpbHRlcicgJiYgbmFtZSAhPT0gJ2l0ZW1Tb3J0JyAmJiBuYW1lICE9PSAnZXh0ZXJuYWwnLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICBfc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgIF9mYWxsYmFjazogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgX2ZhbGxiYWNrOiAnYW5pbWF0aW9uJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhZGRpdGlvbmFsT3B0aW9uU2NvcGVzOiBbXG4gICAgICAgICdpbnRlcmFjdGlvbidcbiAgICBdXG59O1xuXG52YXIgcGx1Z2lucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkNvbG9yczogcGx1Z2luX2NvbG9ycyxcbkRlY2ltYXRpb246IHBsdWdpbl9kZWNpbWF0aW9uLFxuRmlsbGVyOiBpbmRleCxcbkxlZ2VuZDogcGx1Z2luX2xlZ2VuZCxcblN1YlRpdGxlOiBwbHVnaW5fc3VidGl0bGUsXG5UaXRsZTogcGx1Z2luX3RpdGxlLFxuVG9vbHRpcDogcGx1Z2luX3Rvb2x0aXBcbn0pO1xuXG5jb25zdCBhZGRJZlN0cmluZyA9IChsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKT0+e1xuICAgIGlmICh0eXBlb2YgcmF3ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpbmRleCA9IGxhYmVscy5wdXNoKHJhdykgLSAxO1xuICAgICAgICBhZGRlZExhYmVscy51bnNoaWZ0KHtcbiAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgbGFiZWw6IHJhd1xuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGlzTmFOKHJhdykpIHtcbiAgICAgICAgaW5kZXggPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG59O1xuZnVuY3Rpb24gZmluZE9yQWRkTGFiZWwobGFiZWxzLCByYXcsIGluZGV4LCBhZGRlZExhYmVscykge1xuICAgIGNvbnN0IGZpcnN0ID0gbGFiZWxzLmluZGV4T2YocmF3KTtcbiAgICBpZiAoZmlyc3QgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBhZGRJZlN0cmluZyhsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKTtcbiAgICB9XG4gICAgY29uc3QgbGFzdCA9IGxhYmVscy5sYXN0SW5kZXhPZihyYXcpO1xuICAgIHJldHVybiBmaXJzdCAhPT0gbGFzdCA/IGluZGV4IDogZmlyc3Q7XG59XG5jb25zdCB2YWxpZEluZGV4ID0gKGluZGV4LCBtYXgpPT5pbmRleCA9PT0gbnVsbCA/IG51bGwgOiBfbGltaXRWYWx1ZShNYXRoLnJvdW5kKGluZGV4KSwgMCwgbWF4KTtcbmZ1bmN0aW9uIF9nZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICBpZiAodmFsdWUgPj0gMCAmJiB2YWx1ZSA8IGxhYmVscy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGxhYmVsc1t2YWx1ZV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmNsYXNzIENhdGVnb3J5U2NhbGUgZXh0ZW5kcyBTY2FsZSB7XG4gICAgc3RhdGljIGlkID0gJ2NhdGVnb3J5JztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBjYWxsYmFjazogX2dldExhYmVsRm9yVmFsdWVcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoY2ZnKTtcbiAgICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSAwO1xuICAgICAgICB0aGlzLl9hZGRlZExhYmVscyA9IFtdO1xuICAgIH1cbiAgICBpbml0KHNjYWxlT3B0aW9ucykge1xuICAgICAgICBjb25zdCBhZGRlZCA9IHRoaXMuX2FkZGVkTGFiZWxzO1xuICAgICAgICBpZiAoYWRkZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB7IGluZGV4ICwgbGFiZWwgIH0gb2YgYWRkZWQpe1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbHNbaW5kZXhdID09PSBsYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hZGRlZExhYmVscyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmluaXQoc2NhbGVPcHRpb25zKTtcbiAgICB9XG4gICAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZihyYXcpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICBpbmRleCA9IGlzRmluaXRlKGluZGV4KSAmJiBsYWJlbHNbaW5kZXhdID09PSByYXcgPyBpbmRleCA6IGZpbmRPckFkZExhYmVsKGxhYmVscywgcmF3LCB2YWx1ZU9yRGVmYXVsdChpbmRleCwgcmF3KSwgdGhpcy5fYWRkZWRMYWJlbHMpO1xuICAgICAgICByZXR1cm4gdmFsaWRJbmRleChpbmRleCwgbGFiZWxzLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCB7IG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgICAgIGxldCB7IG1pbiAsIG1heCAgfSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgICAgICAgICAgaWYgKCFtaW5EZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWluID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1heCA9IHRoaXMuZ2V0TGFiZWxzKCkubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1pbiA9IG1pbjtcbiAgICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgfVxuICAgIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5vcHRpb25zLm9mZnNldDtcbiAgICAgICAgY29uc3QgdGlja3MgPSBbXTtcbiAgICAgICAgbGV0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgICAgIGxhYmVscyA9IG1pbiA9PT0gMCAmJiBtYXggPT09IGxhYmVscy5sZW5ndGggLSAxID8gbGFiZWxzIDogbGFiZWxzLnNsaWNlKG1pbiwgbWF4ICsgMSk7XG4gICAgICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSBNYXRoLm1heChsYWJlbHMubGVuZ3RoIC0gKG9mZnNldCA/IDAgOiAxKSwgMSk7XG4gICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB0aGlzLm1pbiAtIChvZmZzZXQgPyAwLjUgOiAwKTtcbiAgICAgICAgZm9yKGxldCB2YWx1ZSA9IG1pbjsgdmFsdWUgPD0gbWF4OyB2YWx1ZSsrKXtcbiAgICAgICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlja3M7XG4gICAgfVxuICAgIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRMYWJlbEZvclZhbHVlLmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgICAgICBpZiAoIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSAhdGhpcy5fcmV2ZXJzZVBpeGVscztcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMucGFyc2UodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6IHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKCh2YWx1ZSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gICAgfVxuICAgIGdldFBpeGVsRm9yVGljayhpbmRleCkge1xuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aWNrcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRpY2tzW2luZGV4XS52YWx1ZSk7XG4gICAgfVxuICAgIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy5fc3RhcnRWYWx1ZSArIHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAqIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbiAgICBnZXRCYXNlUGl4ZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJvdHRvbTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGlja3MkMShnZW5lcmF0aW9uT3B0aW9ucywgZGF0YVJhbmdlKSB7XG4gICAgY29uc3QgdGlja3MgPSBbXTtcbiAgICBjb25zdCBNSU5fU1BBQ0lORyA9IDFlLTE0O1xuICAgIGNvbnN0IHsgYm91bmRzICwgc3RlcCAsIG1pbiAsIG1heCAsIHByZWNpc2lvbiAsIGNvdW50ICwgbWF4VGlja3MgLCBtYXhEaWdpdHMgLCBpbmNsdWRlQm91bmRzICB9ID0gZ2VuZXJhdGlvbk9wdGlvbnM7XG4gICAgY29uc3QgdW5pdCA9IHN0ZXAgfHwgMTtcbiAgICBjb25zdCBtYXhTcGFjZXMgPSBtYXhUaWNrcyAtIDE7XG4gICAgY29uc3QgeyBtaW46IHJtaW4gLCBtYXg6IHJtYXggIH0gPSBkYXRhUmFuZ2U7XG4gICAgY29uc3QgbWluRGVmaW5lZCA9ICFpc051bGxPclVuZGVmKG1pbik7XG4gICAgY29uc3QgbWF4RGVmaW5lZCA9ICFpc051bGxPclVuZGVmKG1heCk7XG4gICAgY29uc3QgY291bnREZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYoY291bnQpO1xuICAgIGNvbnN0IG1pblNwYWNpbmcgPSAocm1heCAtIHJtaW4pIC8gKG1heERpZ2l0cyArIDEpO1xuICAgIGxldCBzcGFjaW5nID0gbmljZU51bSgocm1heCAtIHJtaW4pIC8gbWF4U3BhY2VzIC8gdW5pdCkgKiB1bml0O1xuICAgIGxldCBmYWN0b3IsIG5pY2VNaW4sIG5pY2VNYXgsIG51bVNwYWNlcztcbiAgICBpZiAoc3BhY2luZyA8IE1JTl9TUEFDSU5HICYmICFtaW5EZWZpbmVkICYmICFtYXhEZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHJtaW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHJtYXhcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICB9XG4gICAgbnVtU3BhY2VzID0gTWF0aC5jZWlsKHJtYXggLyBzcGFjaW5nKSAtIE1hdGguZmxvb3Iocm1pbiAvIHNwYWNpbmcpO1xuICAgIGlmIChudW1TcGFjZXMgPiBtYXhTcGFjZXMpIHtcbiAgICAgICAgc3BhY2luZyA9IG5pY2VOdW0obnVtU3BhY2VzICogc3BhY2luZyAvIG1heFNwYWNlcyAvIHVuaXQpICogdW5pdDtcbiAgICB9XG4gICAgaWYgKCFpc051bGxPclVuZGVmKHByZWNpc2lvbikpIHtcbiAgICAgICAgZmFjdG9yID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gICAgICAgIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyAqIGZhY3RvcikgLyBmYWN0b3I7XG4gICAgfVxuICAgIGlmIChib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgbmljZU1pbiA9IE1hdGguZmxvb3Iocm1pbiAvIHNwYWNpbmcpICogc3BhY2luZztcbiAgICAgICAgbmljZU1heCA9IE1hdGguY2VpbChybWF4IC8gc3BhY2luZykgKiBzcGFjaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG5pY2VNaW4gPSBybWluO1xuICAgICAgICBuaWNlTWF4ID0gcm1heDtcbiAgICB9XG4gICAgaWYgKG1pbkRlZmluZWQgJiYgbWF4RGVmaW5lZCAmJiBzdGVwICYmIGFsbW9zdFdob2xlKChtYXggLSBtaW4pIC8gc3RlcCwgc3BhY2luZyAvIDEwMDApKSB7XG4gICAgICAgIG51bVNwYWNlcyA9IE1hdGgucm91bmQoTWF0aC5taW4oKG1heCAtIG1pbikgLyBzcGFjaW5nLCBtYXhUaWNrcykpO1xuICAgICAgICBzcGFjaW5nID0gKG1heCAtIG1pbikgLyBudW1TcGFjZXM7XG4gICAgICAgIG5pY2VNaW4gPSBtaW47XG4gICAgICAgIG5pY2VNYXggPSBtYXg7XG4gICAgfSBlbHNlIGlmIChjb3VudERlZmluZWQpIHtcbiAgICAgICAgbmljZU1pbiA9IG1pbkRlZmluZWQgPyBtaW4gOiBuaWNlTWluO1xuICAgICAgICBuaWNlTWF4ID0gbWF4RGVmaW5lZCA/IG1heCA6IG5pY2VNYXg7XG4gICAgICAgIG51bVNwYWNlcyA9IGNvdW50IC0gMTtcbiAgICAgICAgc3BhY2luZyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBudW1TcGFjZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbnVtU3BhY2VzID0gKG5pY2VNYXggLSBuaWNlTWluKSAvIHNwYWNpbmc7XG4gICAgICAgIGlmIChhbG1vc3RFcXVhbHMobnVtU3BhY2VzLCBNYXRoLnJvdW5kKG51bVNwYWNlcyksIHNwYWNpbmcgLyAxMDAwKSkge1xuICAgICAgICAgICAgbnVtU3BhY2VzID0gTWF0aC5yb3VuZChudW1TcGFjZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbnVtU3BhY2VzID0gTWF0aC5jZWlsKG51bVNwYWNlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZGVjaW1hbFBsYWNlcyA9IE1hdGgubWF4KF9kZWNpbWFsUGxhY2VzKHNwYWNpbmcpLCBfZGVjaW1hbFBsYWNlcyhuaWNlTWluKSk7XG4gICAgZmFjdG9yID0gTWF0aC5wb3coMTAsIGlzTnVsbE9yVW5kZWYocHJlY2lzaW9uKSA/IGRlY2ltYWxQbGFjZXMgOiBwcmVjaXNpb24pO1xuICAgIG5pY2VNaW4gPSBNYXRoLnJvdW5kKG5pY2VNaW4gKiBmYWN0b3IpIC8gZmFjdG9yO1xuICAgIG5pY2VNYXggPSBNYXRoLnJvdW5kKG5pY2VNYXggKiBmYWN0b3IpIC8gZmFjdG9yO1xuICAgIGxldCBqID0gMDtcbiAgICBpZiAobWluRGVmaW5lZCkge1xuICAgICAgICBpZiAoaW5jbHVkZUJvdW5kcyAmJiBuaWNlTWluICE9PSBtaW4pIHtcbiAgICAgICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBtaW5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG5pY2VNaW4gPCBtaW4pIHtcbiAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWxtb3N0RXF1YWxzKE1hdGgucm91bmQoKG5pY2VNaW4gKyBqICogc3BhY2luZykgKiBmYWN0b3IpIC8gZmFjdG9yLCBtaW4sIHJlbGF0aXZlTGFiZWxTaXplKG1pbiwgbWluU3BhY2luZywgZ2VuZXJhdGlvbk9wdGlvbnMpKSkge1xuICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChuaWNlTWluIDwgbWluKSB7XG4gICAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yKDsgaiA8IG51bVNwYWNlczsgKytqKXtcbiAgICAgICAgY29uc3QgdGlja1ZhbHVlID0gTWF0aC5yb3VuZCgobmljZU1pbiArIGogKiBzcGFjaW5nKSAqIGZhY3RvcikgLyBmYWN0b3I7XG4gICAgICAgIGlmIChtYXhEZWZpbmVkICYmIHRpY2tWYWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZTogdGlja1ZhbHVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAobWF4RGVmaW5lZCAmJiBpbmNsdWRlQm91bmRzICYmIG5pY2VNYXggIT09IG1heCkge1xuICAgICAgICBpZiAodGlja3MubGVuZ3RoICYmIGFsbW9zdEVxdWFscyh0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSwgbWF4LCByZWxhdGl2ZUxhYmVsU2l6ZShtYXgsIG1pblNwYWNpbmcsIGdlbmVyYXRpb25PcHRpb25zKSkpIHtcbiAgICAgICAgICAgIHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlID0gbWF4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IG1heFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFtYXhEZWZpbmVkIHx8IG5pY2VNYXggPT09IG1heCkge1xuICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlOiBuaWNlTWF4XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG59XG5mdW5jdGlvbiByZWxhdGl2ZUxhYmVsU2l6ZSh2YWx1ZSwgbWluU3BhY2luZywgeyBob3Jpem9udGFsICwgbWluUm90YXRpb24gIH0pIHtcbiAgICBjb25zdCByYWQgPSB0b1JhZGlhbnMobWluUm90YXRpb24pO1xuICAgIGNvbnN0IHJhdGlvID0gKGhvcml6b250YWwgPyBNYXRoLnNpbihyYWQpIDogTWF0aC5jb3MocmFkKSkgfHwgMC4wMDE7XG4gICAgY29uc3QgbGVuZ3RoID0gMC43NSAqIG1pblNwYWNpbmcgKiAoJycgKyB2YWx1ZSkubGVuZ3RoO1xuICAgIHJldHVybiBNYXRoLm1pbihtaW5TcGFjaW5nIC8gcmF0aW8sIGxlbmd0aCk7XG59XG5jbGFzcyBMaW5lYXJTY2FsZUJhc2UgZXh0ZW5kcyBTY2FsZSB7XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoY2ZnKTtcbiAgICAgICAgIHRoaXMuc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmVuZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9lbmRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gICAgfVxuICAgIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYocmF3KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0eXBlb2YgcmF3ID09PSAnbnVtYmVyJyB8fCByYXcgaW5zdGFuY2VvZiBOdW1iZXIpICYmICFpc0Zpbml0ZSgrcmF3KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICtyYXc7XG4gICAgfVxuICAgIGhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHsgYmVnaW5BdFplcm8gIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICAgICAgbGV0IHsgbWluICwgbWF4ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2V0TWluID0gKHYpPT5taW4gPSBtaW5EZWZpbmVkID8gbWluIDogdjtcbiAgICAgICAgY29uc3Qgc2V0TWF4ID0gKHYpPT5tYXggPSBtYXhEZWZpbmVkID8gbWF4IDogdjtcbiAgICAgICAgaWYgKGJlZ2luQXRaZXJvKSB7XG4gICAgICAgICAgICBjb25zdCBtaW5TaWduID0gc2lnbihtaW4pO1xuICAgICAgICAgICAgY29uc3QgbWF4U2lnbiA9IHNpZ24obWF4KTtcbiAgICAgICAgICAgIGlmIChtaW5TaWduIDwgMCAmJiBtYXhTaWduIDwgMCkge1xuICAgICAgICAgICAgICAgIHNldE1heCgwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWluU2lnbiA+IDAgJiYgbWF4U2lnbiA+IDApIHtcbiAgICAgICAgICAgICAgICBzZXRNaW4oMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gbWF4ID09PSAwID8gMSA6IE1hdGguYWJzKG1heCAqIDAuMDUpO1xuICAgICAgICAgICAgc2V0TWF4KG1heCArIG9mZnNldCk7XG4gICAgICAgICAgICBpZiAoIWJlZ2luQXRaZXJvKSB7XG4gICAgICAgICAgICAgICAgc2V0TWluKG1pbiAtIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cbiAgICBnZXRUaWNrTGltaXQoKSB7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBsZXQgeyBtYXhUaWNrc0xpbWl0ICwgc3RlcFNpemUgIH0gPSB0aWNrT3B0cztcbiAgICAgICAgbGV0IG1heFRpY2tzO1xuICAgICAgICBpZiAoc3RlcFNpemUpIHtcbiAgICAgICAgICAgIG1heFRpY2tzID0gTWF0aC5jZWlsKHRoaXMubWF4IC8gc3RlcFNpemUpIC0gTWF0aC5mbG9vcih0aGlzLm1pbiAvIHN0ZXBTaXplKSArIDE7XG4gICAgICAgICAgICBpZiAobWF4VGlja3MgPiAxMDAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBzY2FsZXMuJHt0aGlzLmlkfS50aWNrcy5zdGVwU2l6ZTogJHtzdGVwU2l6ZX0gd291bGQgcmVzdWx0IGdlbmVyYXRpbmcgdXAgdG8gJHttYXhUaWNrc30gdGlja3MuIExpbWl0aW5nIHRvIDEwMDAuYCk7XG4gICAgICAgICAgICAgICAgbWF4VGlja3MgPSAxMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF4VGlja3MgPSB0aGlzLmNvbXB1dGVUaWNrTGltaXQoKTtcbiAgICAgICAgICAgIG1heFRpY2tzTGltaXQgPSBtYXhUaWNrc0xpbWl0IHx8IDExO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhUaWNrc0xpbWl0KSB7XG4gICAgICAgICAgICBtYXhUaWNrcyA9IE1hdGgubWluKG1heFRpY2tzTGltaXQsIG1heFRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4VGlja3M7XG4gICAgfVxuIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICAgIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICAgICAgbGV0IG1heFRpY2tzID0gdGhpcy5nZXRUaWNrTGltaXQoKTtcbiAgICAgICAgbWF4VGlja3MgPSBNYXRoLm1heCgyLCBtYXhUaWNrcyk7XG4gICAgICAgIGNvbnN0IG51bWVyaWNHZW5lcmF0b3JPcHRpb25zID0ge1xuICAgICAgICAgICAgbWF4VGlja3MsXG4gICAgICAgICAgICBib3VuZHM6IG9wdHMuYm91bmRzLFxuICAgICAgICAgICAgbWluOiBvcHRzLm1pbixcbiAgICAgICAgICAgIG1heDogb3B0cy5tYXgsXG4gICAgICAgICAgICBwcmVjaXNpb246IHRpY2tPcHRzLnByZWNpc2lvbixcbiAgICAgICAgICAgIHN0ZXA6IHRpY2tPcHRzLnN0ZXBTaXplLFxuICAgICAgICAgICAgY291bnQ6IHRpY2tPcHRzLmNvdW50LFxuICAgICAgICAgICAgbWF4RGlnaXRzOiB0aGlzLl9tYXhEaWdpdHMoKSxcbiAgICAgICAgICAgIGhvcml6b250YWw6IHRoaXMuaXNIb3Jpem9udGFsKCksXG4gICAgICAgICAgICBtaW5Sb3RhdGlvbjogdGlja09wdHMubWluUm90YXRpb24gfHwgMCxcbiAgICAgICAgICAgIGluY2x1ZGVCb3VuZHM6IHRpY2tPcHRzLmluY2x1ZGVCb3VuZHMgIT09IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRhdGFSYW5nZSA9IHRoaXMuX3JhbmdlIHx8IHRoaXM7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gZ2VuZXJhdGVUaWNrcyQxKG51bWVyaWNHZW5lcmF0b3JPcHRpb25zLCBkYXRhUmFuZ2UpO1xuICAgICAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgICAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5taW47XG4gICAgICAgIGxldCBlbmQgPSB0aGlzLm1heDtcbiAgICAgICAgc3VwZXIuY29uZmlndXJlKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0ICYmIHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gKGVuZCAtIHN0YXJ0KSAvIE1hdGgubWF4KHRpY2tzLmxlbmd0aCAtIDEsIDEpIC8gMjtcbiAgICAgICAgICAgIHN0YXJ0IC09IG9mZnNldDtcbiAgICAgICAgICAgIGVuZCArPSBvZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHN0YXJ0O1xuICAgICAgICB0aGlzLl9lbmRWYWx1ZSA9IGVuZDtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IGVuZCAtIHN0YXJ0O1xuICAgIH1cbiAgICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXROdW1iZXIodmFsdWUsIHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGUsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICAgIH1cbn1cblxuY2xhc3MgTGluZWFyU2NhbGUgZXh0ZW5kcyBMaW5lYXJTY2FsZUJhc2Uge1xuICAgIHN0YXRpYyBpZCA9ICdsaW5lYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgICAgICAgfVxuICAgIH07XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggIH0gPSB0aGlzLmdldE1pbk1heCh0cnVlKTtcbiAgICAgICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pID8gbWluIDogMDtcbiAgICAgICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpID8gbWF4IDogMTtcbiAgICAgICAgdGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG4gICAgfVxuIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBob3Jpem9udGFsID8gdGhpcy53aWR0aCA6IHRoaXMuaGVpZ2h0O1xuICAgICAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRvUmFkaWFucyh0aGlzLm9wdGlvbnMudGlja3MubWluUm90YXRpb24pO1xuICAgICAgICBjb25zdCByYXRpbyA9IChob3Jpem9udGFsID8gTWF0aC5zaW4obWluUm90YXRpb24pIDogTWF0aC5jb3MobWluUm90YXRpb24pKSB8fCAwLjAwMTtcbiAgICAgICAgY29uc3QgdGlja0ZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApO1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKGxlbmd0aCAvIE1hdGgubWluKDQwLCB0aWNrRm9udC5saW5lSGVpZ2h0IC8gcmF0aW8pKTtcbiAgICB9XG4gICAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBOYU4gOiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgodmFsdWUgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbiAgICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFydFZhbHVlICsgdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpICogdGhpcy5fdmFsdWVSYW5nZTtcbiAgICB9XG59XG5cbmNvbnN0IGxvZzEwRmxvb3IgPSAodik9Pk1hdGguZmxvb3IobG9nMTAodikpO1xuY29uc3QgY2hhbmdlRXhwb25lbnQgPSAodiwgbSk9Pk1hdGgucG93KDEwLCBsb2cxMEZsb29yKHYpICsgbSk7XG5mdW5jdGlvbiBpc01ham9yKHRpY2tWYWwpIHtcbiAgICBjb25zdCByZW1haW4gPSB0aWNrVmFsIC8gTWF0aC5wb3coMTAsIGxvZzEwRmxvb3IodGlja1ZhbCkpO1xuICAgIHJldHVybiByZW1haW4gPT09IDE7XG59XG5mdW5jdGlvbiBzdGVwcyhtaW4sIG1heCwgcmFuZ2VFeHApIHtcbiAgICBjb25zdCByYW5nZVN0ZXAgPSBNYXRoLnBvdygxMCwgcmFuZ2VFeHApO1xuICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5mbG9vcihtaW4gLyByYW5nZVN0ZXApO1xuICAgIGNvbnN0IGVuZCA9IE1hdGguY2VpbChtYXggLyByYW5nZVN0ZXApO1xuICAgIHJldHVybiBlbmQgLSBzdGFydDtcbn1cbmZ1bmN0aW9uIHN0YXJ0RXhwKG1pbiwgbWF4KSB7XG4gICAgY29uc3QgcmFuZ2UgPSBtYXggLSBtaW47XG4gICAgbGV0IHJhbmdlRXhwID0gbG9nMTBGbG9vcihyYW5nZSk7XG4gICAgd2hpbGUoc3RlcHMobWluLCBtYXgsIHJhbmdlRXhwKSA+IDEwKXtcbiAgICAgICAgcmFuZ2VFeHArKztcbiAgICB9XG4gICAgd2hpbGUoc3RlcHMobWluLCBtYXgsIHJhbmdlRXhwKSA8IDEwKXtcbiAgICAgICAgcmFuZ2VFeHAtLTtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGgubWluKHJhbmdlRXhwLCBsb2cxMEZsb29yKG1pbikpO1xufVxuIGZ1bmN0aW9uIGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIHsgbWluICwgbWF4ICB9KSB7XG4gICAgbWluID0gZmluaXRlT3JEZWZhdWx0KGdlbmVyYXRpb25PcHRpb25zLm1pbiwgbWluKTtcbiAgICBjb25zdCB0aWNrcyA9IFtdO1xuICAgIGNvbnN0IG1pbkV4cCA9IGxvZzEwRmxvb3IobWluKTtcbiAgICBsZXQgZXhwID0gc3RhcnRFeHAobWluLCBtYXgpO1xuICAgIGxldCBwcmVjaXNpb24gPSBleHAgPCAwID8gTWF0aC5wb3coMTAsIE1hdGguYWJzKGV4cCkpIDogMTtcbiAgICBjb25zdCBzdGVwU2l6ZSA9IE1hdGgucG93KDEwLCBleHApO1xuICAgIGNvbnN0IGJhc2UgPSBtaW5FeHAgPiBleHAgPyBNYXRoLnBvdygxMCwgbWluRXhwKSA6IDA7XG4gICAgY29uc3Qgc3RhcnQgPSBNYXRoLnJvdW5kKChtaW4gLSBiYXNlKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG4gICAgY29uc3Qgb2Zmc2V0ID0gTWF0aC5mbG9vcigobWluIC0gYmFzZSkgLyBzdGVwU2l6ZSAvIDEwKSAqIHN0ZXBTaXplICogMTA7XG4gICAgbGV0IHNpZ25pZmljYW5kID0gTWF0aC5mbG9vcigoc3RhcnQgLSBvZmZzZXQpIC8gTWF0aC5wb3coMTAsIGV4cCkpO1xuICAgIGxldCB2YWx1ZSA9IGZpbml0ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5taW4sIE1hdGgucm91bmQoKGJhc2UgKyBvZmZzZXQgKyBzaWduaWZpY2FuZCAqIE1hdGgucG93KDEwLCBleHApKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb24pO1xuICAgIHdoaWxlKHZhbHVlIDwgbWF4KXtcbiAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIG1ham9yOiBpc01ham9yKHZhbHVlKSxcbiAgICAgICAgICAgIHNpZ25pZmljYW5kXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc2lnbmlmaWNhbmQgPj0gMTApIHtcbiAgICAgICAgICAgIHNpZ25pZmljYW5kID0gc2lnbmlmaWNhbmQgPCAxNSA/IDE1IDogMjA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaWduaWZpY2FuZCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaWduaWZpY2FuZCA+PSAyMCkge1xuICAgICAgICAgICAgZXhwKys7XG4gICAgICAgICAgICBzaWduaWZpY2FuZCA9IDI7XG4gICAgICAgICAgICBwcmVjaXNpb24gPSBleHAgPj0gMCA/IDEgOiBwcmVjaXNpb247XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKChiYXNlICsgb2Zmc2V0ICsgc2lnbmlmaWNhbmQgKiBNYXRoLnBvdygxMCwgZXhwKSkgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuICAgIH1cbiAgICBjb25zdCBsYXN0VGljayA9IGZpbml0ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5tYXgsIHZhbHVlKTtcbiAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgdmFsdWU6IGxhc3RUaWNrLFxuICAgICAgICBtYWpvcjogaXNNYWpvcihsYXN0VGljayksXG4gICAgICAgIHNpZ25pZmljYW5kXG4gICAgfSk7XG4gICAgcmV0dXJuIHRpY2tzO1xufVxuY2xhc3MgTG9nYXJpdGhtaWNTY2FsZSBleHRlbmRzIFNjYWxlIHtcbiAgICBzdGF0aWMgaWQgPSAnbG9nYXJpdGhtaWMnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLmxvZ2FyaXRobWljLFxuICAgICAgICAgICAgbWFqb3I6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgICB0aGlzLnN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5lbmQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl92YWx1ZVJhbmdlID0gMDtcbiAgICB9XG4gICAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IExpbmVhclNjYWxlQmFzZS5wcm90b3R5cGUucGFyc2UuYXBwbHkodGhpcywgW1xuICAgICAgICAgICAgcmF3LFxuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgXSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5femVybyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc051bWJlckZpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgPiAwID8gdmFsdWUgOiBudWxsO1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCB7IG1pbiAsIG1heCAgfSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgICAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgPyBNYXRoLm1heCgwLCBtaW4pIDogbnVsbDtcbiAgICAgICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpID8gTWF0aC5tYXgoMCwgbWF4KSA6IG51bGw7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmVnaW5BdFplcm8pIHtcbiAgICAgICAgICAgIHRoaXMuX3plcm8gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl96ZXJvICYmIHRoaXMubWluICE9PSB0aGlzLl9zdWdnZXN0ZWRNaW4gJiYgIWlzTnVtYmVyRmluaXRlKHRoaXMuX3VzZXJNaW4pKSB7XG4gICAgICAgICAgICB0aGlzLm1pbiA9IG1pbiA9PT0gY2hhbmdlRXhwb25lbnQodGhpcy5taW4sIDApID8gY2hhbmdlRXhwb25lbnQodGhpcy5taW4sIC0xKSA6IGNoYW5nZUV4cG9uZW50KHRoaXMubWluLCAwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgICB9XG4gICAgaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpIHtcbiAgICAgICAgY29uc3QgeyBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgICAgICBsZXQgbWluID0gdGhpcy5taW47XG4gICAgICAgIGxldCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3Qgc2V0TWluID0gKHYpPT5taW4gPSBtaW5EZWZpbmVkID8gbWluIDogdjtcbiAgICAgICAgY29uc3Qgc2V0TWF4ID0gKHYpPT5tYXggPSBtYXhEZWZpbmVkID8gbWF4IDogdjtcbiAgICAgICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgICAgICBpZiAobWluIDw9IDApIHtcbiAgICAgICAgICAgICAgICBzZXRNaW4oMSk7XG4gICAgICAgICAgICAgICAgc2V0TWF4KDEwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0TWluKGNoYW5nZUV4cG9uZW50KG1pbiwgLTEpKTtcbiAgICAgICAgICAgICAgICBzZXRNYXgoY2hhbmdlRXhwb25lbnQobWF4LCArMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtaW4gPD0gMCkge1xuICAgICAgICAgICAgc2V0TWluKGNoYW5nZUV4cG9uZW50KG1heCwgLTEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4IDw9IDApIHtcbiAgICAgICAgICAgIHNldE1heChjaGFuZ2VFeHBvbmVudChtaW4sICsxKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cbiAgICBidWlsZFRpY2tzKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBnZW5lcmF0aW9uT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1pbjogdGhpcy5fdXNlck1pbixcbiAgICAgICAgICAgIG1heDogdGhpcy5fdXNlck1heFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB0aWNrcyA9IGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIHRoaXMpO1xuICAgICAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgICAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cbiBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gJzAnIDogZm9ybWF0TnVtYmVyKHZhbHVlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgICB9XG4gY29uZmlndXJlKCkge1xuICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMubWluO1xuICAgICAgICBzdXBlci5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IGxvZzEwKHN0YXJ0KTtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IGxvZzEwKHRoaXMubWF4KSAtIGxvZzEwKHN0YXJ0KTtcbiAgICB9XG4gICAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLm1pbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCh2YWx1ZSA9PT0gdGhpcy5taW4gPyAwIDogKGxvZzEwKHZhbHVlKSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gICAgfVxuICAgIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3QgZGVjaW1hbCA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KDEwLCB0aGlzLl9zdGFydFZhbHVlICsgZGVjaW1hbCAqIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KG9wdHMpIHtcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gICAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgb3B0cy5kaXNwbGF5KSB7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcodGlja09wdHMuYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KHRpY2tPcHRzLmZvbnQgJiYgdGlja09wdHMuZm9udC5zaXplLCBkZWZhdWx0cy5mb250LnNpemUpICsgcGFkZGluZy5oZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZnVuY3Rpb24gbWVhc3VyZUxhYmVsU2l6ZShjdHgsIGZvbnQsIGxhYmVsKSB7XG4gICAgbGFiZWwgPSBpc0FycmF5KGxhYmVsKSA/IGxhYmVsIDogW1xuICAgICAgICBsYWJlbFxuICAgIF07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdzogX2xvbmdlc3RUZXh0KGN0eCwgZm9udC5zdHJpbmcsIGxhYmVsKSxcbiAgICAgICAgaDogbGFiZWwubGVuZ3RoICogZm9udC5saW5lSGVpZ2h0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9zLCBzaXplLCBtaW4sIG1heCkge1xuICAgIGlmIChhbmdsZSA9PT0gbWluIHx8IGFuZ2xlID09PSBtYXgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSBzaXplIC8gMixcbiAgICAgICAgICAgIGVuZDogcG9zICsgc2l6ZSAvIDJcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGFuZ2xlIDwgbWluIHx8IGFuZ2xlID4gbWF4KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydDogcG9zIC0gc2l6ZSxcbiAgICAgICAgICAgIGVuZDogcG9zXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBwb3MsXG4gICAgICAgIGVuZDogcG9zICsgc2l6ZVxuICAgIH07XG59XG4gZnVuY3Rpb24gZml0V2l0aFBvaW50TGFiZWxzKHNjYWxlKSB7XG4gICAgY29uc3Qgb3JpZyA9IHtcbiAgICAgICAgbDogc2NhbGUubGVmdCArIHNjYWxlLl9wYWRkaW5nLmxlZnQsXG4gICAgICAgIHI6IHNjYWxlLnJpZ2h0IC0gc2NhbGUuX3BhZGRpbmcucmlnaHQsXG4gICAgICAgIHQ6IHNjYWxlLnRvcCArIHNjYWxlLl9wYWRkaW5nLnRvcCxcbiAgICAgICAgYjogc2NhbGUuYm90dG9tIC0gc2NhbGUuX3BhZGRpbmcuYm90dG9tXG4gICAgfTtcbiAgICBjb25zdCBsaW1pdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnKTtcbiAgICBjb25zdCBsYWJlbFNpemVzID0gW107XG4gICAgY29uc3QgcGFkZGluZyA9IFtdO1xuICAgIGNvbnN0IHZhbHVlQ291bnQgPSBzY2FsZS5fcG9pbnRMYWJlbHMubGVuZ3RoO1xuICAgIGNvbnN0IHBvaW50TGFiZWxPcHRzID0gc2NhbGUub3B0aW9ucy5wb2ludExhYmVscztcbiAgICBjb25zdCBhZGRpdGlvbmFsQW5nbGUgPSBwb2ludExhYmVsT3B0cy5jZW50ZXJQb2ludExhYmVscyA/IFBJIC8gdmFsdWVDb3VudCA6IDA7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKyl7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBwb2ludExhYmVsT3B0cy5zZXRDb250ZXh0KHNjYWxlLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICAgICAgcGFkZGluZ1tpXSA9IG9wdHMucGFkZGluZztcbiAgICAgICAgY29uc3QgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgc2NhbGUuZHJhd2luZ0FyZWEgKyBwYWRkaW5nW2ldLCBhZGRpdGlvbmFsQW5nbGUpO1xuICAgICAgICBjb25zdCBwbEZvbnQgPSB0b0ZvbnQob3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgdGV4dFNpemUgPSBtZWFzdXJlTGFiZWxTaXplKHNjYWxlLmN0eCwgcGxGb250LCBzY2FsZS5fcG9pbnRMYWJlbHNbaV0pO1xuICAgICAgICBsYWJlbFNpemVzW2ldID0gdGV4dFNpemU7XG4gICAgICAgIGNvbnN0IGFuZ2xlUmFkaWFucyA9IF9ub3JtYWxpemVBbmdsZShzY2FsZS5nZXRJbmRleEFuZ2xlKGkpICsgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICAgICAgY29uc3QgYW5nbGUgPSBNYXRoLnJvdW5kKHRvRGVncmVlcyhhbmdsZVJhZGlhbnMpKTtcbiAgICAgICAgY29uc3QgaExpbWl0cyA9IGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9pbnRQb3NpdGlvbi54LCB0ZXh0U2l6ZS53LCAwLCAxODApO1xuICAgICAgICBjb25zdCB2TGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLnksIHRleHRTaXplLmgsIDkwLCAyNzApO1xuICAgICAgICB1cGRhdGVMaW1pdHMobGltaXRzLCBvcmlnLCBhbmdsZVJhZGlhbnMsIGhMaW1pdHMsIHZMaW1pdHMpO1xuICAgIH1cbiAgICBzY2FsZS5zZXRDZW50ZXJQb2ludChvcmlnLmwgLSBsaW1pdHMubCwgbGltaXRzLnIgLSBvcmlnLnIsIG9yaWcudCAtIGxpbWl0cy50LCBsaW1pdHMuYiAtIG9yaWcuYik7XG4gICAgc2NhbGUuX3BvaW50TGFiZWxJdGVtcyA9IGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUxpbWl0cyhsaW1pdHMsIG9yaWcsIGFuZ2xlLCBoTGltaXRzLCB2TGltaXRzKSB7XG4gICAgY29uc3Qgc2luID0gTWF0aC5hYnMoTWF0aC5zaW4oYW5nbGUpKTtcbiAgICBjb25zdCBjb3MgPSBNYXRoLmFicyhNYXRoLmNvcyhhbmdsZSkpO1xuICAgIGxldCB4ID0gMDtcbiAgICBsZXQgeSA9IDA7XG4gICAgaWYgKGhMaW1pdHMuc3RhcnQgPCBvcmlnLmwpIHtcbiAgICAgICAgeCA9IChvcmlnLmwgLSBoTGltaXRzLnN0YXJ0KSAvIHNpbjtcbiAgICAgICAgbGltaXRzLmwgPSBNYXRoLm1pbihsaW1pdHMubCwgb3JpZy5sIC0geCk7XG4gICAgfSBlbHNlIGlmIChoTGltaXRzLmVuZCA+IG9yaWcucikge1xuICAgICAgICB4ID0gKGhMaW1pdHMuZW5kIC0gb3JpZy5yKSAvIHNpbjtcbiAgICAgICAgbGltaXRzLnIgPSBNYXRoLm1heChsaW1pdHMuciwgb3JpZy5yICsgeCk7XG4gICAgfVxuICAgIGlmICh2TGltaXRzLnN0YXJ0IDwgb3JpZy50KSB7XG4gICAgICAgIHkgPSAob3JpZy50IC0gdkxpbWl0cy5zdGFydCkgLyBjb3M7XG4gICAgICAgIGxpbWl0cy50ID0gTWF0aC5taW4obGltaXRzLnQsIG9yaWcudCAtIHkpO1xuICAgIH0gZWxzZSBpZiAodkxpbWl0cy5lbmQgPiBvcmlnLmIpIHtcbiAgICAgICAgeSA9ICh2TGltaXRzLmVuZCAtIG9yaWcuYikgLyBjb3M7XG4gICAgICAgIGxpbWl0cy5iID0gTWF0aC5tYXgobGltaXRzLmIsIG9yaWcuYiArIHkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVBvaW50TGFiZWxJdGVtKHNjYWxlLCBpbmRleCwgaXRlbU9wdHMpIHtcbiAgICBjb25zdCBvdXRlckRpc3RhbmNlID0gc2NhbGUuZHJhd2luZ0FyZWE7XG4gICAgY29uc3QgeyBleHRyYSAsIGFkZGl0aW9uYWxBbmdsZSAsIHBhZGRpbmcgLCBzaXplICB9ID0gaXRlbU9wdHM7XG4gICAgY29uc3QgcG9pbnRMYWJlbFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgb3V0ZXJEaXN0YW5jZSArIGV4dHJhICsgcGFkZGluZywgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICBjb25zdCBhbmdsZSA9IE1hdGgucm91bmQodG9EZWdyZWVzKF9ub3JtYWxpemVBbmdsZShwb2ludExhYmVsUG9zaXRpb24uYW5nbGUgKyBIQUxGX1BJKSkpO1xuICAgIGNvbnN0IHkgPSB5Rm9yQW5nbGUocG9pbnRMYWJlbFBvc2l0aW9uLnksIHNpemUuaCwgYW5nbGUpO1xuICAgIGNvbnN0IHRleHRBbGlnbiA9IGdldFRleHRBbGlnbkZvckFuZ2xlKGFuZ2xlKTtcbiAgICBjb25zdCBsZWZ0ID0gbGVmdEZvclRleHRBbGlnbihwb2ludExhYmVsUG9zaXRpb24ueCwgc2l6ZS53LCB0ZXh0QWxpZ24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIHg6IHBvaW50TGFiZWxQb3NpdGlvbi54LFxuICAgICAgICB5LFxuICAgICAgICB0ZXh0QWxpZ24sXG4gICAgICAgIGxlZnQsXG4gICAgICAgIHRvcDogeSxcbiAgICAgICAgcmlnaHQ6IGxlZnQgKyBzaXplLncsXG4gICAgICAgIGJvdHRvbTogeSArIHNpemUuaFxuICAgIH07XG59XG5mdW5jdGlvbiBpc05vdE92ZXJsYXBwZWQoaXRlbSwgYXJlYSkge1xuICAgIGlmICghYXJlYSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgeyBsZWZ0ICwgdG9wICwgcmlnaHQgLCBib3R0b20gIH0gPSBpdGVtO1xuICAgIGNvbnN0IGFwZXhlc0luQXJlYSA9IF9pc1BvaW50SW5BcmVhKHtcbiAgICAgICAgeDogbGVmdCxcbiAgICAgICAgeTogdG9wXG4gICAgfSwgYXJlYSkgfHwgX2lzUG9pbnRJbkFyZWEoe1xuICAgICAgICB4OiBsZWZ0LFxuICAgICAgICB5OiBib3R0b21cbiAgICB9LCBhcmVhKSB8fCBfaXNQb2ludEluQXJlYSh7XG4gICAgICAgIHg6IHJpZ2h0LFxuICAgICAgICB5OiB0b3BcbiAgICB9LCBhcmVhKSB8fCBfaXNQb2ludEluQXJlYSh7XG4gICAgICAgIHg6IHJpZ2h0LFxuICAgICAgICB5OiBib3R0b21cbiAgICB9LCBhcmVhKTtcbiAgICByZXR1cm4gIWFwZXhlc0luQXJlYTtcbn1cbmZ1bmN0aW9uIGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCB2YWx1ZUNvdW50ID0gc2NhbGUuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICBjb25zdCBvcHRzID0gc2NhbGUub3B0aW9ucztcbiAgICBjb25zdCB7IGNlbnRlclBvaW50TGFiZWxzICwgZGlzcGxheSAgfSA9IG9wdHMucG9pbnRMYWJlbHM7XG4gICAgY29uc3QgaXRlbU9wdHMgPSB7XG4gICAgICAgIGV4dHJhOiBnZXRUaWNrQmFja2Ryb3BIZWlnaHQob3B0cykgLyAyLFxuICAgICAgICBhZGRpdGlvbmFsQW5nbGU6IGNlbnRlclBvaW50TGFiZWxzID8gUEkgLyB2YWx1ZUNvdW50IDogMFxuICAgIH07XG4gICAgbGV0IGFyZWE7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKyl7XG4gICAgICAgIGl0ZW1PcHRzLnBhZGRpbmcgPSBwYWRkaW5nW2ldO1xuICAgICAgICBpdGVtT3B0cy5zaXplID0gbGFiZWxTaXplc1tpXTtcbiAgICAgICAgY29uc3QgaXRlbSA9IGNyZWF0ZVBvaW50TGFiZWxJdGVtKHNjYWxlLCBpLCBpdGVtT3B0cyk7XG4gICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgIGlmIChkaXNwbGF5ID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIGl0ZW0udmlzaWJsZSA9IGlzTm90T3ZlcmxhcHBlZChpdGVtLCBhcmVhKTtcbiAgICAgICAgICAgIGlmIChpdGVtLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBhcmVhID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXRUZXh0QWxpZ25Gb3JBbmdsZShhbmdsZSkge1xuICAgIGlmIChhbmdsZSA9PT0gMCB8fCBhbmdsZSA9PT0gMTgwKSB7XG4gICAgICAgIHJldHVybiAnY2VudGVyJztcbiAgICB9IGVsc2UgaWYgKGFuZ2xlIDwgMTgwKSB7XG4gICAgICAgIHJldHVybiAnbGVmdCc7XG4gICAgfVxuICAgIHJldHVybiAncmlnaHQnO1xufVxuZnVuY3Rpb24gbGVmdEZvclRleHRBbGlnbih4LCB3LCBhbGlnbikge1xuICAgIGlmIChhbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB4IC09IHc7XG4gICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgeCAtPSB3IC8gMjtcbiAgICB9XG4gICAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiB5Rm9yQW5nbGUoeSwgaCwgYW5nbGUpIHtcbiAgICBpZiAoYW5nbGUgPT09IDkwIHx8IGFuZ2xlID09PSAyNzApIHtcbiAgICAgICAgeSAtPSBoIC8gMjtcbiAgICB9IGVsc2UgaWYgKGFuZ2xlID4gMjcwIHx8IGFuZ2xlIDwgOTApIHtcbiAgICAgICAgeSAtPSBoO1xuICAgIH1cbiAgICByZXR1cm4geTtcbn1cbmZ1bmN0aW9uIGRyYXdQb2ludExhYmVsQm94KGN0eCwgb3B0cywgaXRlbSkge1xuICAgIGNvbnN0IHsgbGVmdCAsIHRvcCAsIHJpZ2h0ICwgYm90dG9tICB9ID0gaXRlbTtcbiAgICBjb25zdCB7IGJhY2tkcm9wQ29sb3IgIH0gPSBvcHRzO1xuICAgIGlmICghaXNOdWxsT3JVbmRlZihiYWNrZHJvcENvbG9yKSkge1xuICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKG9wdHMuYm9yZGVyUmFkaXVzKTtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRzLmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZHJvcENvbG9yO1xuICAgICAgICBjb25zdCBiYWNrZHJvcExlZnQgPSBsZWZ0IC0gcGFkZGluZy5sZWZ0O1xuICAgICAgICBjb25zdCBiYWNrZHJvcFRvcCA9IHRvcCAtIHBhZGRpbmcudG9wO1xuICAgICAgICBjb25zdCBiYWNrZHJvcFdpZHRoID0gcmlnaHQgLSBsZWZ0ICsgcGFkZGluZy53aWR0aDtcbiAgICAgICAgY29uc3QgYmFja2Ryb3BIZWlnaHQgPSBib3R0b20gLSB0b3AgKyBwYWRkaW5nLmhlaWdodDtcbiAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKCh2KT0+diAhPT0gMCkpIHtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgICAgICB4OiBiYWNrZHJvcExlZnQsXG4gICAgICAgICAgICAgICAgeTogYmFja2Ryb3BUb3AsXG4gICAgICAgICAgICAgICAgdzogYmFja2Ryb3BXaWR0aCxcbiAgICAgICAgICAgICAgICBoOiBiYWNrZHJvcEhlaWdodCxcbiAgICAgICAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGJhY2tkcm9wTGVmdCwgYmFja2Ryb3BUb3AsIGJhY2tkcm9wV2lkdGgsIGJhY2tkcm9wSGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGRyYXdQb2ludExhYmVscyhzY2FsZSwgbGFiZWxDb3VudCkge1xuICAgIGNvbnN0IHsgY3R4ICwgb3B0aW9uczogeyBwb2ludExhYmVscyAgfSAgfSA9IHNjYWxlO1xuICAgIGZvcihsZXQgaSA9IGxhYmVsQ291bnQgLSAxOyBpID49IDA7IGktLSl7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBzY2FsZS5fcG9pbnRMYWJlbEl0ZW1zW2ldO1xuICAgICAgICBpZiAoIWl0ZW0udmlzaWJsZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBwb2ludExhYmVscy5zZXRDb250ZXh0KHNjYWxlLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICAgICAgZHJhd1BvaW50TGFiZWxCb3goY3R4LCBvcHRzQXRJbmRleCwgaXRlbSk7XG4gICAgICAgIGNvbnN0IHBsRm9udCA9IHRvRm9udChvcHRzQXRJbmRleC5mb250KTtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAsIHRleHRBbGlnbiAgfSA9IGl0ZW07XG4gICAgICAgIHJlbmRlclRleHQoY3R4LCBzY2FsZS5fcG9pbnRMYWJlbHNbaV0sIHgsIHkgKyBwbEZvbnQubGluZUhlaWdodCAvIDIsIHBsRm9udCwge1xuICAgICAgICAgICAgY29sb3I6IG9wdHNBdEluZGV4LmNvbG9yLFxuICAgICAgICAgICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24sXG4gICAgICAgICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KSB7XG4gICAgY29uc3QgeyBjdHggIH0gPSBzY2FsZTtcbiAgICBpZiAoY2lyY3VsYXIpIHtcbiAgICAgICAgY3R4LmFyYyhzY2FsZS54Q2VudGVyLCBzY2FsZS55Q2VudGVyLCByYWRpdXMsIDAsIFRBVSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKDAsIHJhZGl1cyk7XG4gICAgICAgIGN0eC5tb3ZlVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuICAgICAgICBmb3IobGV0IGkgPSAxOyBpIDwgbGFiZWxDb3VudDsgaSsrKXtcbiAgICAgICAgICAgIHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIHJhZGl1cyk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGRyYXdSYWRpdXNMaW5lKHNjYWxlLCBncmlkTGluZU9wdHMsIHJhZGl1cywgbGFiZWxDb3VudCwgYm9yZGVyT3B0cykge1xuICAgIGNvbnN0IGN0eCA9IHNjYWxlLmN0eDtcbiAgICBjb25zdCBjaXJjdWxhciA9IGdyaWRMaW5lT3B0cy5jaXJjdWxhcjtcbiAgICBjb25zdCB7IGNvbG9yICwgbGluZVdpZHRoICB9ID0gZ3JpZExpbmVPcHRzO1xuICAgIGlmICghY2lyY3VsYXIgJiYgIWxhYmVsQ291bnQgfHwgIWNvbG9yIHx8ICFsaW5lV2lkdGggfHwgcmFkaXVzIDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICBjdHguc2V0TGluZURhc2goYm9yZGVyT3B0cy5kYXNoKTtcbiAgICBjdHgubGluZURhc2hPZmZzZXQgPSBib3JkZXJPcHRzLmRhc2hPZmZzZXQ7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LnN0cm9rZSgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVQb2ludExhYmVsQ29udGV4dChwYXJlbnQsIGluZGV4LCBsYWJlbCkge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICBsYWJlbCxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIHR5cGU6ICdwb2ludExhYmVsJ1xuICAgIH0pO1xufVxuY2xhc3MgUmFkaWFsTGluZWFyU2NhbGUgZXh0ZW5kcyBMaW5lYXJTY2FsZUJhc2Uge1xuICAgIHN0YXRpYyBpZCA9ICdyYWRpYWxMaW5lYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgcG9zaXRpb246ICdjaGFydEFyZWEnLFxuICAgICAgICBhbmdsZUxpbmVzOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgYm9yZGVyRGFzaDogW10sXG4gICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLjBcbiAgICAgICAgfSxcbiAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgY2lyY3VsYXI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0QW5nbGU6IDAsXG4gICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBzaG93TGFiZWxCYWNrZHJvcDogdHJ1ZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgICAgICAgfSxcbiAgICAgICAgcG9pbnRMYWJlbHM6IHtcbiAgICAgICAgICAgIGJhY2tkcm9wQ29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJhY2tkcm9wUGFkZGluZzogMixcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBmb250OiB7XG4gICAgICAgICAgICAgICAgc2l6ZTogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxsYmFjayAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFkZGluZzogNSxcbiAgICAgICAgICAgIGNlbnRlclBvaW50TGFiZWxzOiBmYWxzZVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgJ2FuZ2xlTGluZXMuY29sb3InOiAnYm9yZGVyQ29sb3InLFxuICAgICAgICAncG9pbnRMYWJlbHMuY29sb3InOiAnY29sb3InLFxuICAgICAgICAndGlja3MuY29sb3InOiAnY29sb3InXG4gICAgfTtcbiAgICBzdGF0aWMgZGVzY3JpcHRvcnMgPSB7XG4gICAgICAgIGFuZ2xlTGluZXM6IHtcbiAgICAgICAgICAgIF9mYWxsYmFjazogJ2dyaWQnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgICB0aGlzLnhDZW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLnlDZW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmRyYXdpbmdBcmVhID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fcG9pbnRMYWJlbHMgPSBbXTtcbiAgICAgICAgdGhpcy5fcG9pbnRMYWJlbEl0ZW1zID0gW107XG4gICAgfVxuICAgIHNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0aGlzLl9wYWRkaW5nID0gdG9QYWRkaW5nKGdldFRpY2tCYWNrZHJvcEhlaWdodCh0aGlzLm9wdGlvbnMpIC8gMik7XG4gICAgICAgIGNvbnN0IHcgPSB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aCAtIHBhZGRpbmcud2lkdGg7XG4gICAgICAgIGNvbnN0IGggPSB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0IC0gcGFkZGluZy5oZWlnaHQ7XG4gICAgICAgIHRoaXMueENlbnRlciA9IE1hdGguZmxvb3IodGhpcy5sZWZ0ICsgdyAvIDIgKyBwYWRkaW5nLmxlZnQpO1xuICAgICAgICB0aGlzLnlDZW50ZXIgPSBNYXRoLmZsb29yKHRoaXMudG9wICsgaCAvIDIgKyBwYWRkaW5nLnRvcCk7XG4gICAgICAgIHRoaXMuZHJhd2luZ0FyZWEgPSBNYXRoLmZsb29yKE1hdGgubWluKHcsIGgpIC8gMik7XG4gICAgfVxuICAgIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcy5nZXRNaW5NYXgoZmFsc2UpO1xuICAgICAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgJiYgIWlzTmFOKG1pbikgPyBtaW4gOiAwO1xuICAgICAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgJiYgIWlzTmFOKG1heCkgPyBtYXggOiAwO1xuICAgICAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgICB9XG4gY29tcHV0ZVRpY2tMaW1pdCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmRyYXdpbmdBcmVhIC8gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KHRoaXMub3B0aW9ucykpO1xuICAgIH1cbiAgICBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICAgICAgTGluZWFyU2NhbGVCYXNlLnByb3RvdHlwZS5nZW5lcmF0ZVRpY2tMYWJlbHMuY2FsbCh0aGlzLCB0aWNrcyk7XG4gICAgICAgIHRoaXMuX3BvaW50TGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKS5tYXAoKHZhbHVlLCBpbmRleCk9PntcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gY2FsbGJhY2sodGhpcy5vcHRpb25zLnBvaW50TGFiZWxzLmNhbGxiYWNrLCBbXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIGxhYmVsIHx8IGxhYmVsID09PSAwID8gbGFiZWwgOiAnJztcbiAgICAgICAgfSkuZmlsdGVyKCh2LCBpKT0+dGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSk7XG4gICAgfVxuICAgIGZpdCgpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKG9wdHMuZGlzcGxheSAmJiBvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGZpdFdpdGhQb2ludExhYmVscyh0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2VudGVyUG9pbnQoMCwgMCwgMCwgMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0Q2VudGVyUG9pbnQobGVmdE1vdmVtZW50LCByaWdodE1vdmVtZW50LCB0b3BNb3ZlbWVudCwgYm90dG9tTW92ZW1lbnQpIHtcbiAgICAgICAgdGhpcy54Q2VudGVyICs9IE1hdGguZmxvb3IoKGxlZnRNb3ZlbWVudCAtIHJpZ2h0TW92ZW1lbnQpIC8gMik7XG4gICAgICAgIHRoaXMueUNlbnRlciArPSBNYXRoLmZsb29yKCh0b3BNb3ZlbWVudCAtIGJvdHRvbU1vdmVtZW50KSAvIDIpO1xuICAgICAgICB0aGlzLmRyYXdpbmdBcmVhIC09IE1hdGgubWluKHRoaXMuZHJhd2luZ0FyZWEgLyAyLCBNYXRoLm1heChsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQsIHRvcE1vdmVtZW50LCBib3R0b21Nb3ZlbWVudCkpO1xuICAgIH1cbiAgICBnZXRJbmRleEFuZ2xlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGFuZ2xlTXVsdGlwbGllciA9IFRBVSAvICh0aGlzLl9wb2ludExhYmVscy5sZW5ndGggfHwgMSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLm9wdGlvbnMuc3RhcnRBbmdsZSB8fCAwO1xuICAgICAgICByZXR1cm4gX25vcm1hbGl6ZUFuZ2xlKGluZGV4ICogYW5nbGVNdWx0aXBsaWVyICsgdG9SYWRpYW5zKHN0YXJ0QW5nbGUpKTtcbiAgICB9XG4gICAgZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxpbmdGYWN0b3IgPSB0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5tYXggLSB2YWx1ZSkgKiBzY2FsaW5nRmFjdG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodmFsdWUgLSB0aGlzLm1pbikgKiBzY2FsaW5nRmFjdG9yO1xuICAgIH1cbiAgICBnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlcihkaXN0YW5jZSkge1xuICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZihkaXN0YW5jZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NhbGVkRGlzdGFuY2UgPSBkaXN0YW5jZSAvICh0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXZlcnNlID8gdGhpcy5tYXggLSBzY2FsZWREaXN0YW5jZSA6IHRoaXMubWluICsgc2NhbGVkRGlzdGFuY2U7XG4gICAgfVxuICAgIGdldFBvaW50TGFiZWxDb250ZXh0KGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHBvaW50TGFiZWxzID0gdGhpcy5fcG9pbnRMYWJlbHMgfHwgW107XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgcG9pbnRMYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludExhYmVsID0gcG9pbnRMYWJlbHNbaW5kZXhdO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVBvaW50TGFiZWxDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgcG9pbnRMYWJlbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgZGlzdGFuY2VGcm9tQ2VudGVyLCBhZGRpdGlvbmFsQW5nbGUgPSAwKSB7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKGluZGV4KSAtIEhBTEZfUEkgKyBhZGRpdGlvbmFsQW5nbGU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBNYXRoLmNvcyhhbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIgKyB0aGlzLnhDZW50ZXIsXG4gICAgICAgICAgICB5OiBNYXRoLnNpbihhbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIgKyB0aGlzLnlDZW50ZXIsXG4gICAgICAgICAgICBhbmdsZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb24oaW5kZXgsIHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpKTtcbiAgICB9XG4gICAgZ2V0QmFzZVBvc2l0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCB8fCAwLCB0aGlzLmdldEJhc2VWYWx1ZSgpKTtcbiAgICB9XG4gICAgZ2V0UG9pbnRMYWJlbFBvc2l0aW9uKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgbGVmdCAsIHRvcCAsIHJpZ2h0ICwgYm90dG9tICB9ID0gdGhpcy5fcG9pbnRMYWJlbEl0ZW1zW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICByaWdodCxcbiAgICAgICAgICAgIGJvdHRvbVxuICAgICAgICB9O1xuICAgIH1cbiBkcmF3QmFja2dyb3VuZCgpIHtcbiAgICAgICAgY29uc3QgeyBiYWNrZ3JvdW5kQ29sb3IgLCBncmlkOiB7IGNpcmN1bGFyICB9ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBwYXRoUmFkaXVzTGluZSh0aGlzLCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMuX2VuZFZhbHVlKSwgY2lyY3VsYXIsIHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aCk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd0dyaWQoKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IGFuZ2xlTGluZXMgLCBncmlkICwgYm9yZGVyICB9ID0gb3B0cztcbiAgICAgICAgY29uc3QgbGFiZWxDb3VudCA9IHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICAgICAgbGV0IGksIG9mZnNldCwgcG9zaXRpb247XG4gICAgICAgIGlmIChvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGRyYXdQb2ludExhYmVscyh0aGlzLCBsYWJlbENvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ3JpZC5kaXNwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLnRpY2tzLmZvckVhY2goKHRpY2ssIGluZGV4KT0+e1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRpY2sudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBncmlkLnNldENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4Qm9yZGVyID0gYm9yZGVyLnNldENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdSYWRpdXNMaW5lKHRoaXMsIG9wdHNBdEluZGV4LCBvZmZzZXQsIGxhYmVsQ291bnQsIG9wdHNBdEluZGV4Qm9yZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5nbGVMaW5lcy5kaXNwbGF5KSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgZm9yKGkgPSBsYWJlbENvdW50IC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gYW5nbGVMaW5lcy5zZXRDb250ZXh0KHRoaXMuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY29sb3IgLCBsaW5lV2lkdGggIH0gPSBvcHRzQXRJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIWxpbmVXaWR0aCB8fCAhY29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKG9wdHNBdEluZGV4LmJvcmRlckRhc2gpO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LmJvcmRlckRhc2hPZmZzZXQ7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShvcHRzLnRpY2tzLnJldmVyc2UgPyB0aGlzLm1pbiA6IHRoaXMubWF4KTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjdHgubW92ZVRvKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyKTtcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd0JvcmRlcigpIHt9XG4gZHJhd0xhYmVscygpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICAgICAgaWYgKCF0aWNrT3B0cy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IHRoaXMuZ2V0SW5kZXhBbmdsZSgwKTtcbiAgICAgICAgbGV0IG9mZnNldCwgd2lkdGg7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC50cmFuc2xhdGUodGhpcy54Q2VudGVyLCB0aGlzLnlDZW50ZXIpO1xuICAgICAgICBjdHgucm90YXRlKHN0YXJ0QW5nbGUpO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgdGhpcy50aWNrcy5mb3JFYWNoKCh0aWNrLCBpbmRleCk9PntcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiAhb3B0cy5yZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSB0aWNrT3B0cy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgICAgICAgY29uc3QgdGlja0ZvbnQgPSB0b0ZvbnQob3B0c0F0SW5kZXguZm9udCk7XG4gICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMudGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICAgICAgICAgIGN0eC5mb250ID0gdGlja0ZvbnQuc3RyaW5nO1xuICAgICAgICAgICAgICAgIHdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHRpY2subGFiZWwpLndpZHRoO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzQXRJbmRleC5iYWNrZHJvcENvbG9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0c0F0SW5kZXguYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoLXdpZHRoIC8gMiAtIHBhZGRpbmcubGVmdCwgLW9mZnNldCAtIHRpY2tGb250LnNpemUgLyAyIC0gcGFkZGluZy50b3AsIHdpZHRoICsgcGFkZGluZy53aWR0aCwgdGlja0ZvbnQuc2l6ZSArIHBhZGRpbmcuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbmRlclRleHQoY3R4LCB0aWNrLmxhYmVsLCAwLCAtb2Zmc2V0LCB0aWNrRm9udCwge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5jb2xvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiBkcmF3VGl0bGUoKSB7fVxufVxuXG5jb25zdCBJTlRFUlZBTFMgPSB7XG4gICAgbWlsbGlzZWNvbmQ6IHtcbiAgICAgICAgY29tbW9uOiB0cnVlLFxuICAgICAgICBzaXplOiAxLFxuICAgICAgICBzdGVwczogMTAwMFxuICAgIH0sXG4gICAgc2Vjb25kOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMTAwMCxcbiAgICAgICAgc3RlcHM6IDYwXG4gICAgfSxcbiAgICBtaW51dGU6IHtcbiAgICAgICAgY29tbW9uOiB0cnVlLFxuICAgICAgICBzaXplOiA2MDAwMCxcbiAgICAgICAgc3RlcHM6IDYwXG4gICAgfSxcbiAgICBob3VyOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMzYwMDAwMCxcbiAgICAgICAgc3RlcHM6IDI0XG4gICAgfSxcbiAgICBkYXk6IHtcbiAgICAgICAgY29tbW9uOiB0cnVlLFxuICAgICAgICBzaXplOiA4NjQwMDAwMCxcbiAgICAgICAgc3RlcHM6IDMwXG4gICAgfSxcbiAgICB3ZWVrOiB7XG4gICAgICAgIGNvbW1vbjogZmFsc2UsXG4gICAgICAgIHNpemU6IDYwNDgwMDAwMCxcbiAgICAgICAgc3RlcHM6IDRcbiAgICB9LFxuICAgIG1vbnRoOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMi42MjhlOSxcbiAgICAgICAgc3RlcHM6IDEyXG4gICAgfSxcbiAgICBxdWFydGVyOiB7XG4gICAgICAgIGNvbW1vbjogZmFsc2UsXG4gICAgICAgIHNpemU6IDcuODg0ZTksXG4gICAgICAgIHN0ZXBzOiA0XG4gICAgfSxcbiAgICB5ZWFyOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMy4xNTRlMTBcbiAgICB9XG59O1xuIGNvbnN0IFVOSVRTID0gIC8qICNfX1BVUkVfXyAqLyBPYmplY3Qua2V5cyhJTlRFUlZBTFMpO1xuIGZ1bmN0aW9uIHNvcnRlcihhLCBiKSB7XG4gICAgcmV0dXJuIGEgLSBiO1xufVxuIGZ1bmN0aW9uIHBhcnNlKHNjYWxlLCBpbnB1dCkge1xuICAgIGlmIChpc051bGxPclVuZGVmKGlucHV0KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgYWRhcHRlciA9IHNjYWxlLl9hZGFwdGVyO1xuICAgIGNvbnN0IHsgcGFyc2VyICwgcm91bmQgLCBpc29XZWVrZGF5ICB9ID0gc2NhbGUuX3BhcnNlT3B0cztcbiAgICBsZXQgdmFsdWUgPSBpbnB1dDtcbiAgICBpZiAodHlwZW9mIHBhcnNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IHBhcnNlcih2YWx1ZSk7XG4gICAgfVxuICAgIGlmICghaXNOdW1iZXJGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdHlwZW9mIHBhcnNlciA9PT0gJ3N0cmluZycgPyBhZGFwdGVyLnBhcnNlKHZhbHVlLCAgcGFyc2VyKSA6IGFkYXB0ZXIucGFyc2UodmFsdWUpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChyb3VuZCkge1xuICAgICAgICB2YWx1ZSA9IHJvdW5kID09PSAnd2VlaycgJiYgKGlzTnVtYmVyKGlzb1dlZWtkYXkpIHx8IGlzb1dlZWtkYXkgPT09IHRydWUpID8gYWRhcHRlci5zdGFydE9mKHZhbHVlLCAnaXNvV2VlaycsIGlzb1dlZWtkYXkpIDogYWRhcHRlci5zdGFydE9mKHZhbHVlLCByb3VuZCk7XG4gICAgfVxuICAgIHJldHVybiArdmFsdWU7XG59XG4gZnVuY3Rpb24gZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyhtaW5Vbml0LCBtaW4sIG1heCwgY2FwYWNpdHkpIHtcbiAgICBjb25zdCBpbGVuID0gVU5JVFMubGVuZ3RoO1xuICAgIGZvcihsZXQgaSA9IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGkgPCBpbGVuIC0gMTsgKytpKXtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBJTlRFUlZBTFNbVU5JVFNbaV1dO1xuICAgICAgICBjb25zdCBmYWN0b3IgPSBpbnRlcnZhbC5zdGVwcyA/IGludGVydmFsLnN0ZXBzIDogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICAgIGlmIChpbnRlcnZhbC5jb21tb24gJiYgTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKGZhY3RvciAqIGludGVydmFsLnNpemUpKSA8PSBjYXBhY2l0eSkge1xuICAgICAgICAgICAgcmV0dXJuIFVOSVRTW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBVTklUU1tpbGVuIC0gMV07XG59XG4gZnVuY3Rpb24gZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmcoc2NhbGUsIG51bVRpY2tzLCBtaW5Vbml0LCBtaW4sIG1heCkge1xuICAgIGZvcihsZXQgaSA9IFVOSVRTLmxlbmd0aCAtIDE7IGkgPj0gVU5JVFMuaW5kZXhPZihtaW5Vbml0KTsgaS0tKXtcbiAgICAgICAgY29uc3QgdW5pdCA9IFVOSVRTW2ldO1xuICAgICAgICBpZiAoSU5URVJWQUxTW3VuaXRdLmNvbW1vbiAmJiBzY2FsZS5fYWRhcHRlci5kaWZmKG1heCwgbWluLCB1bml0KSA+PSBudW1UaWNrcyAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiB1bml0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBVTklUU1ttaW5Vbml0ID8gVU5JVFMuaW5kZXhPZihtaW5Vbml0KSA6IDBdO1xufVxuIGZ1bmN0aW9uIGRldGVybWluZU1ham9yVW5pdCh1bml0KSB7XG4gICAgZm9yKGxldCBpID0gVU5JVFMuaW5kZXhPZih1bml0KSArIDEsIGlsZW4gPSBVTklUUy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBpZiAoSU5URVJWQUxTW1VOSVRTW2ldXS5jb21tb24pIHtcbiAgICAgICAgICAgIHJldHVybiBVTklUU1tpXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiBmdW5jdGlvbiBhZGRUaWNrKHRpY2tzLCB0aW1lLCB0aW1lc3RhbXBzKSB7XG4gICAgaWYgKCF0aW1lc3RhbXBzKSB7XG4gICAgICAgIHRpY2tzW3RpbWVdID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHsgbG8gLCBoaSAgfSA9IF9sb29rdXAodGltZXN0YW1wcywgdGltZSk7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IHRpbWVzdGFtcHNbbG9dID49IHRpbWUgPyB0aW1lc3RhbXBzW2xvXSA6IHRpbWVzdGFtcHNbaGldO1xuICAgICAgICB0aWNrc1t0aW1lc3RhbXBdID0gdHJ1ZTtcbiAgICB9XG59XG4gZnVuY3Rpb24gc2V0TWFqb3JUaWNrcyhzY2FsZSwgdGlja3MsIG1hcCwgbWFqb3JVbml0KSB7XG4gICAgY29uc3QgYWRhcHRlciA9IHNjYWxlLl9hZGFwdGVyO1xuICAgIGNvbnN0IGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZih0aWNrc1swXS52YWx1ZSwgbWFqb3JVbml0KTtcbiAgICBjb25zdCBsYXN0ID0gdGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWU7XG4gICAgbGV0IG1ham9yLCBpbmRleDtcbiAgICBmb3IobWFqb3IgPSBmaXJzdDsgbWFqb3IgPD0gbGFzdDsgbWFqb3IgPSArYWRhcHRlci5hZGQobWFqb3IsIDEsIG1ham9yVW5pdCkpe1xuICAgICAgICBpbmRleCA9IG1hcFttYWpvcl07XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aWNrc1tpbmRleF0ubWFqb3IgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aWNrcztcbn1cbiBmdW5jdGlvbiB0aWNrc0Zyb21UaW1lc3RhbXBzKHNjYWxlLCB2YWx1ZXMsIG1ham9yVW5pdCkge1xuICAgIGNvbnN0IHRpY2tzID0gW107XG4gICAgIGNvbnN0IG1hcCA9IHt9O1xuICAgIGNvbnN0IGlsZW4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgIGxldCBpLCB2YWx1ZTtcbiAgICBmb3IoaSA9IDA7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICAgICAgbWFwW3ZhbHVlXSA9IGk7XG4gICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBtYWpvcjogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBpbGVuID09PSAwIHx8ICFtYWpvclVuaXQgPyB0aWNrcyA6IHNldE1ham9yVGlja3Moc2NhbGUsIHRpY2tzLCBtYXAsIG1ham9yVW5pdCk7XG59XG5jbGFzcyBUaW1lU2NhbGUgZXh0ZW5kcyBTY2FsZSB7XG4gICAgc3RhdGljIGlkID0gJ3RpbWUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiBib3VuZHM6ICdkYXRhJyxcbiAgICAgICAgYWRhcHRlcnM6IHt9LFxuICAgICAgICB0aW1lOiB7XG4gICAgICAgICAgICBwYXJzZXI6IGZhbHNlLFxuICAgICAgICAgICAgdW5pdDogZmFsc2UsXG4gICAgICAgICAgICByb3VuZDogZmFsc2UsXG4gICAgICAgICAgICBpc29XZWVrZGF5OiBmYWxzZSxcbiAgICAgICAgICAgIG1pblVuaXQ6ICdtaWxsaXNlY29uZCcsXG4gICAgICAgICAgICBkaXNwbGF5Rm9ybWF0czoge31cbiAgICAgICAgfSxcbiAgICAgICAgdGlja3M6IHtcbiBzb3VyY2U6ICdhdXRvJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmYWxzZSxcbiAgICAgICAgICAgIG1ham9yOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gY29uc3RydWN0b3IocHJvcHMpe1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgICB0aGlzLl9jYWNoZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgbGFiZWxzOiBbXSxcbiAgICAgICAgICAgIGFsbDogW11cbiAgICAgICAgfTtcbiAgICAgICAgIHRoaXMuX3VuaXQgPSAnZGF5JztcbiAgICAgICAgIHRoaXMuX21ham9yVW5pdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fb2Zmc2V0cyA9IHt9O1xuICAgICAgICB0aGlzLl9ub3JtYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcnNlT3B0cyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaW5pdChzY2FsZU9wdHMsIG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCB0aW1lID0gc2NhbGVPcHRzLnRpbWUgfHwgKHNjYWxlT3B0cy50aW1lID0ge30pO1xuICAgICAgICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXIgPSBuZXcgYWRhcHRlcnMuX2RhdGUoc2NhbGVPcHRzLmFkYXB0ZXJzLmRhdGUpO1xuICAgICAgICBhZGFwdGVyLmluaXQob3B0cyk7XG4gICAgICAgIG1lcmdlSWYodGltZS5kaXNwbGF5Rm9ybWF0cywgYWRhcHRlci5mb3JtYXRzKCkpO1xuICAgICAgICB0aGlzLl9wYXJzZU9wdHMgPSB7XG4gICAgICAgICAgICBwYXJzZXI6IHRpbWUucGFyc2VyLFxuICAgICAgICAgICAgcm91bmQ6IHRpbWUucm91bmQsXG4gICAgICAgICAgICBpc29XZWVrZGF5OiB0aW1lLmlzb1dlZWtkYXlcbiAgICAgICAgfTtcbiAgICAgICAgc3VwZXIuaW5pdChzY2FsZU9wdHMpO1xuICAgICAgICB0aGlzLl9ub3JtYWxpemVkID0gb3B0cy5ub3JtYWxpemVkO1xuICAgIH1cbiBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgICAgIGlmIChyYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlKHRoaXMsIHJhdyk7XG4gICAgfVxuICAgIGJlZm9yZUxheW91dCgpIHtcbiAgICAgICAgc3VwZXIuYmVmb3JlTGF5b3V0KCk7XG4gICAgICAgIHRoaXMuX2NhY2hlID0ge1xuICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICBsYWJlbHM6IFtdLFxuICAgICAgICAgICAgYWxsOiBbXVxuICAgICAgICB9O1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlcjtcbiAgICAgICAgY29uc3QgdW5pdCA9IG9wdGlvbnMudGltZS51bml0IHx8ICdkYXknO1xuICAgICAgICBsZXQgeyBtaW4gLCBtYXggLCBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuIGZ1bmN0aW9uIF9hcHBseUJvdW5kcyhib3VuZHMpIHtcbiAgICAgICAgICAgIGlmICghbWluRGVmaW5lZCAmJiAhaXNOYU4oYm91bmRzLm1pbikpIHtcbiAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIGJvdW5kcy5taW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFtYXhEZWZpbmVkICYmICFpc05hTihib3VuZHMubWF4KSkge1xuICAgICAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgYm91bmRzLm1heCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtaW5EZWZpbmVkIHx8ICFtYXhEZWZpbmVkKSB7XG4gICAgICAgICAgICBfYXBwbHlCb3VuZHModGhpcy5fZ2V0TGFiZWxCb3VuZHMoKSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ib3VuZHMgIT09ICd0aWNrcycgfHwgb3B0aW9ucy50aWNrcy5zb3VyY2UgIT09ICdsYWJlbHMnKSB7XG4gICAgICAgICAgICAgICAgX2FwcGx5Qm91bmRzKHRoaXMuZ2V0TWluTWF4KGZhbHNlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWluID0gaXNOdW1iZXJGaW5pdGUobWluKSAmJiAhaXNOYU4obWluKSA/IG1pbiA6ICthZGFwdGVyLnN0YXJ0T2YoRGF0ZS5ub3coKSwgdW5pdCk7XG4gICAgICAgIG1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgJiYgIWlzTmFOKG1heCkgPyBtYXggOiArYWRhcHRlci5lbmRPZihEYXRlLm5vdygpLCB1bml0KSArIDE7XG4gICAgICAgIHRoaXMubWluID0gTWF0aC5taW4obWluLCBtYXggLSAxKTtcbiAgICAgICAgdGhpcy5tYXggPSBNYXRoLm1heChtaW4gKyAxLCBtYXgpO1xuICAgIH1cbiBfZ2V0TGFiZWxCb3VuZHMoKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7XG4gICAgICAgIGxldCBtaW4gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIGxldCBtYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICBtaW4gPSBhcnJbMF07XG4gICAgICAgICAgICBtYXggPSBhcnJbYXJyLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW4sXG4gICAgICAgICAgICBtYXhcbiAgICAgICAgfTtcbiAgICB9XG4gYnVpbGRUaWNrcygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSBvcHRpb25zLnRpbWU7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0aW9ucy50aWNrcztcbiAgICAgICAgY29uc3QgdGltZXN0YW1wcyA9IHRpY2tPcHRzLnNvdXJjZSA9PT0gJ2xhYmVscycgPyB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpIDogdGhpcy5fZ2VuZXJhdGUoKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuYm91bmRzID09PSAndGlja3MnICYmIHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLm1pbiA9IHRoaXMuX3VzZXJNaW4gfHwgdGltZXN0YW1wc1swXTtcbiAgICAgICAgICAgIHRoaXMubWF4ID0gdGhpcy5fdXNlck1heCB8fCB0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWluID0gdGhpcy5taW47XG4gICAgICAgIGNvbnN0IG1heCA9IHRoaXMubWF4O1xuICAgICAgICBjb25zdCB0aWNrcyA9IF9maWx0ZXJCZXR3ZWVuKHRpbWVzdGFtcHMsIG1pbiwgbWF4KTtcbiAgICAgICAgdGhpcy5fdW5pdCA9IHRpbWVPcHRzLnVuaXQgfHwgKHRpY2tPcHRzLmF1dG9Ta2lwID8gZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyh0aW1lT3B0cy5taW5Vbml0LCB0aGlzLm1pbiwgdGhpcy5tYXgsIHRoaXMuX2dldExhYmVsQ2FwYWNpdHkobWluKSkgOiBkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyh0aGlzLCB0aWNrcy5sZW5ndGgsIHRpbWVPcHRzLm1pblVuaXQsIHRoaXMubWluLCB0aGlzLm1heCkpO1xuICAgICAgICB0aGlzLl9tYWpvclVuaXQgPSAhdGlja09wdHMubWFqb3IuZW5hYmxlZCB8fCB0aGlzLl91bml0ID09PSAneWVhcicgPyB1bmRlZmluZWQgOiBkZXRlcm1pbmVNYWpvclVuaXQodGhpcy5fdW5pdCk7XG4gICAgICAgIHRoaXMuaW5pdE9mZnNldHModGltZXN0YW1wcyk7XG4gICAgICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHRpY2tzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlja3NGcm9tVGltZXN0YW1wcyh0aGlzLCB0aWNrcywgdGhpcy5fbWFqb3JVbml0KTtcbiAgICB9XG4gICAgYWZ0ZXJBdXRvU2tpcCgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5vZmZzZXRBZnRlckF1dG9za2lwKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRPZmZzZXRzKHRoaXMudGlja3MubWFwKCh0aWNrKT0+K3RpY2sudmFsdWUpKTtcbiAgICAgICAgfVxuICAgIH1cbiBpbml0T2Zmc2V0cyh0aW1lc3RhbXBzID0gW10pIHtcbiAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgbGV0IGVuZCA9IDA7XG4gICAgICAgIGxldCBmaXJzdCwgbGFzdDtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5vZmZzZXQgJiYgdGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gdGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodGltZXN0YW1wc1swXSk7XG4gICAgICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDEgLSBmaXJzdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSAodGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodGltZXN0YW1wc1sxXSkgLSBmaXJzdCkgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdCA9IHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBsYXN0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbmQgPSAobGFzdCAtIHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAyXSkpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW1pdCA9IHRpbWVzdGFtcHMubGVuZ3RoIDwgMyA/IDAuNSA6IDAuMjU7XG4gICAgICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoc3RhcnQsIDAsIGxpbWl0KTtcbiAgICAgICAgZW5kID0gX2xpbWl0VmFsdWUoZW5kLCAwLCBsaW1pdCk7XG4gICAgICAgIHRoaXMuX29mZnNldHMgPSB7XG4gICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgIGVuZCxcbiAgICAgICAgICAgIGZhY3RvcjogMSAvIChzdGFydCArIDEgKyBlbmQpXG4gICAgICAgIH07XG4gICAgfVxuIF9nZW5lcmF0ZSgpIHtcbiAgICAgICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXI7XG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSBvcHRpb25zLnRpbWU7XG4gICAgICAgIGNvbnN0IG1pbm9yID0gdGltZU9wdHMudW5pdCB8fCBkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzKHRpbWVPcHRzLm1pblVuaXQsIG1pbiwgbWF4LCB0aGlzLl9nZXRMYWJlbENhcGFjaXR5KG1pbikpO1xuICAgICAgICBjb25zdCBzdGVwU2l6ZSA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMudGlja3Muc3RlcFNpemUsIDEpO1xuICAgICAgICBjb25zdCB3ZWVrZGF5ID0gbWlub3IgPT09ICd3ZWVrJyA/IHRpbWVPcHRzLmlzb1dlZWtkYXkgOiBmYWxzZTtcbiAgICAgICAgY29uc3QgaGFzV2Vla2RheSA9IGlzTnVtYmVyKHdlZWtkYXkpIHx8IHdlZWtkYXkgPT09IHRydWU7XG4gICAgICAgIGNvbnN0IHRpY2tzID0ge307XG4gICAgICAgIGxldCBmaXJzdCA9IG1pbjtcbiAgICAgICAgbGV0IHRpbWUsIGNvdW50O1xuICAgICAgICBpZiAoaGFzV2Vla2RheSkge1xuICAgICAgICAgICAgZmlyc3QgPSArYWRhcHRlci5zdGFydE9mKGZpcnN0LCAnaXNvV2VlaycsIHdlZWtkYXkpO1xuICAgICAgICB9XG4gICAgICAgIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgaGFzV2Vla2RheSA/ICdkYXknIDogbWlub3IpO1xuICAgICAgICBpZiAoYWRhcHRlci5kaWZmKG1heCwgbWluLCBtaW5vcikgPiAxMDAwMDAgKiBzdGVwU2l6ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1pbiArICcgYW5kICcgKyBtYXggKyAnIGFyZSB0b28gZmFyIGFwYXJ0IHdpdGggc3RlcFNpemUgb2YgJyArIHN0ZXBTaXplICsgJyAnICsgbWlub3IpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcHMgPSBvcHRpb25zLnRpY2tzLnNvdXJjZSA9PT0gJ2RhdGEnICYmIHRoaXMuZ2V0RGF0YVRpbWVzdGFtcHMoKTtcbiAgICAgICAgZm9yKHRpbWUgPSBmaXJzdCwgY291bnQgPSAwOyB0aW1lIDwgbWF4OyB0aW1lID0gK2FkYXB0ZXIuYWRkKHRpbWUsIHN0ZXBTaXplLCBtaW5vciksIGNvdW50Kyspe1xuICAgICAgICAgICAgYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWUgPT09IG1heCB8fCBvcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJyB8fCBjb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRpY2tzKS5zb3J0KChhLCBiKT0+YSAtIGIpLm1hcCgoeCk9Pit4KTtcbiAgICB9XG4gZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlcjtcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSB0aGlzLm9wdGlvbnMudGltZTtcbiAgICAgICAgaWYgKHRpbWVPcHRzLnRvb2x0aXBGb3JtYXQpIHtcbiAgICAgICAgICAgIHJldHVybiBhZGFwdGVyLmZvcm1hdCh2YWx1ZSwgdGltZU9wdHMudG9vbHRpcEZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkYXB0ZXIuZm9ybWF0KHZhbHVlLCB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cy5kYXRldGltZSk7XG4gICAgfVxuIGZvcm1hdCh2YWx1ZSwgZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGZvcm1hdHMgPSBvcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHM7XG4gICAgICAgIGNvbnN0IHVuaXQgPSB0aGlzLl91bml0O1xuICAgICAgICBjb25zdCBmbXQgPSBmb3JtYXQgfHwgZm9ybWF0c1t1bml0XTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkYXB0ZXIuZm9ybWF0KHZhbHVlLCBmbXQpO1xuICAgIH1cbiBfdGlja0Zvcm1hdEZ1bmN0aW9uKHRpbWUsIGluZGV4LCB0aWNrcywgZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IG9wdGlvbnMudGlja3MuY2FsbGJhY2s7XG4gICAgICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhmb3JtYXR0ZXIsIFtcbiAgICAgICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIHRpY2tzXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb3JtYXRzID0gb3B0aW9ucy50aW1lLmRpc3BsYXlGb3JtYXRzO1xuICAgICAgICBjb25zdCB1bml0ID0gdGhpcy5fdW5pdDtcbiAgICAgICAgY29uc3QgbWFqb3JVbml0ID0gdGhpcy5fbWFqb3JVbml0O1xuICAgICAgICBjb25zdCBtaW5vckZvcm1hdCA9IHVuaXQgJiYgZm9ybWF0c1t1bml0XTtcbiAgICAgICAgY29uc3QgbWFqb3JGb3JtYXQgPSBtYWpvclVuaXQgJiYgZm9ybWF0c1ttYWpvclVuaXRdO1xuICAgICAgICBjb25zdCB0aWNrID0gdGlja3NbaW5kZXhdO1xuICAgICAgICBjb25zdCBtYWpvciA9IG1ham9yVW5pdCAmJiBtYWpvckZvcm1hdCAmJiB0aWNrICYmIHRpY2subWFqb3I7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGFwdGVyLmZvcm1hdCh0aW1lLCBmb3JtYXQgfHwgKG1ham9yID8gbWFqb3JGb3JtYXQgOiBtaW5vckZvcm1hdCkpO1xuICAgIH1cbiBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICAgICAgbGV0IGksIGlsZW4sIHRpY2s7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aWNrID0gdGlja3NbaV07XG4gICAgICAgICAgICB0aWNrLmxhYmVsID0gdGhpcy5fdGlja0Zvcm1hdEZ1bmN0aW9uKHRpY2sudmFsdWUsIGksIHRpY2tzKTtcbiAgICAgICAgfVxuICAgIH1cbiBnZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gTmFOIDogKHZhbHVlIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICAgIH1cbiBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgob2Zmc2V0cy5zdGFydCArIHBvcykgKiBvZmZzZXRzLmZhY3Rvcik7XG4gICAgfVxuIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHRoaXMuX29mZnNldHM7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAvIG9mZnNldHMuZmFjdG9yIC0gb2Zmc2V0cy5lbmQ7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbiArIHBvcyAqICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgICB9XG4gX2dldExhYmVsU2l6ZShsYWJlbCkge1xuICAgICAgICBjb25zdCB0aWNrc09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGNvbnN0IHRpY2tMYWJlbFdpZHRoID0gdGhpcy5jdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuICAgICAgICBjb25zdCBhbmdsZSA9IHRvUmFkaWFucyh0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGlja3NPcHRzLm1heFJvdGF0aW9uIDogdGlja3NPcHRzLm1pblJvdGF0aW9uKTtcbiAgICAgICAgY29uc3QgY29zUm90YXRpb24gPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIGNvbnN0IHNpblJvdGF0aW9uID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICBjb25zdCB0aWNrRm9udFNpemUgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApLnNpemU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3OiB0aWNrTGFiZWxXaWR0aCAqIGNvc1JvdGF0aW9uICsgdGlja0ZvbnRTaXplICogc2luUm90YXRpb24sXG4gICAgICAgICAgICBoOiB0aWNrTGFiZWxXaWR0aCAqIHNpblJvdGF0aW9uICsgdGlja0ZvbnRTaXplICogY29zUm90YXRpb25cbiAgICAgICAgfTtcbiAgICB9XG4gX2dldExhYmVsQ2FwYWNpdHkoZXhhbXBsZVRpbWUpIHtcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSB0aGlzLm9wdGlvbnMudGltZTtcbiAgICAgICAgY29uc3QgZGlzcGxheUZvcm1hdHMgPSB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cztcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gZGlzcGxheUZvcm1hdHNbdGltZU9wdHMudW5pdF0gfHwgZGlzcGxheUZvcm1hdHMubWlsbGlzZWNvbmQ7XG4gICAgICAgIGNvbnN0IGV4YW1wbGVMYWJlbCA9IHRoaXMuX3RpY2tGb3JtYXRGdW5jdGlvbihleGFtcGxlVGltZSwgMCwgdGlja3NGcm9tVGltZXN0YW1wcyh0aGlzLCBbXG4gICAgICAgICAgICBleGFtcGxlVGltZVxuICAgICAgICBdLCB0aGlzLl9tYWpvclVuaXQpLCBmb3JtYXQpO1xuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5fZ2V0TGFiZWxTaXplKGV4YW1wbGVMYWJlbCk7XG4gICAgICAgIGNvbnN0IGNhcGFjaXR5ID0gTWF0aC5mbG9vcih0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCAvIHNpemUudyA6IHRoaXMuaGVpZ2h0IC8gc2l6ZS5oKSAtIDE7XG4gICAgICAgIHJldHVybiBjYXBhY2l0eSA+IDAgPyBjYXBhY2l0eSA6IDE7XG4gICAgfVxuIGdldERhdGFUaW1lc3RhbXBzKCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmRhdGEgfHwgW107XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzID0gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpO1xuICAgICAgICBpZiAodGhpcy5fbm9ybWFsaXplZCAmJiBtZXRhcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5kYXRhID0gbWV0YXNbMF0uY29udHJvbGxlci5nZXRBbGxQYXJzZWRWYWx1ZXModGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMgPSB0aW1lc3RhbXBzLmNvbmNhdChtZXRhc1tpXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLmRhdGEgPSB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKTtcbiAgICB9XG4gZ2V0TGFiZWxUaW1lc3RhbXBzKCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUubGFiZWxzIHx8IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBsYWJlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMucHVzaChwYXJzZSh0aGlzLCBsYWJlbHNbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUubGFiZWxzID0gdGhpcy5fbm9ybWFsaXplZCA/IHRpbWVzdGFtcHMgOiB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKTtcbiAgICB9XG4gbm9ybWFsaXplKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gX2FycmF5VW5pcXVlKHZhbHVlcy5zb3J0KHNvcnRlcikpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJwb2xhdGUodGFibGUsIHZhbCwgcmV2ZXJzZSkge1xuICAgIGxldCBsbyA9IDA7XG4gICAgbGV0IGhpID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgICBsZXQgcHJldlNvdXJjZSwgbmV4dFNvdXJjZSwgcHJldlRhcmdldCwgbmV4dFRhcmdldDtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICBpZiAodmFsID49IHRhYmxlW2xvXS5wb3MgJiYgdmFsIDw9IHRhYmxlW2hpXS5wb3MpIHtcbiAgICAgICAgICAgICh7IGxvICwgaGkgIH0gPSBfbG9va3VwQnlLZXkodGFibGUsICdwb3MnLCB2YWwpKTtcbiAgICAgICAgfVxuICAgICAgICAoeyBwb3M6IHByZXZTb3VyY2UgLCB0aW1lOiBwcmV2VGFyZ2V0ICB9ID0gdGFibGVbbG9dKTtcbiAgICAgICAgKHsgcG9zOiBuZXh0U291cmNlICwgdGltZTogbmV4dFRhcmdldCAgfSA9IHRhYmxlW2hpXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHZhbCA+PSB0YWJsZVtsb10udGltZSAmJiB2YWwgPD0gdGFibGVbaGldLnRpbWUpIHtcbiAgICAgICAgICAgICh7IGxvICwgaGkgIH0gPSBfbG9va3VwQnlLZXkodGFibGUsICd0aW1lJywgdmFsKSk7XG4gICAgICAgIH1cbiAgICAgICAgKHsgdGltZTogcHJldlNvdXJjZSAsIHBvczogcHJldlRhcmdldCAgfSA9IHRhYmxlW2xvXSk7XG4gICAgICAgICh7IHRpbWU6IG5leHRTb3VyY2UgLCBwb3M6IG5leHRUYXJnZXQgIH0gPSB0YWJsZVtoaV0pO1xuICAgIH1cbiAgICBjb25zdCBzcGFuID0gbmV4dFNvdXJjZSAtIHByZXZTb3VyY2U7XG4gICAgcmV0dXJuIHNwYW4gPyBwcmV2VGFyZ2V0ICsgKG5leHRUYXJnZXQgLSBwcmV2VGFyZ2V0KSAqICh2YWwgLSBwcmV2U291cmNlKSAvIHNwYW4gOiBwcmV2VGFyZ2V0O1xufVxuY2xhc3MgVGltZVNlcmllc1NjYWxlIGV4dGVuZHMgVGltZVNjYWxlIHtcbiAgICBzdGF0aWMgaWQgPSAndGltZXNlcmllcyc7XG4gc3RhdGljIGRlZmF1bHRzID0gVGltZVNjYWxlLmRlZmF1bHRzO1xuIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgdGhpcy5fdGFibGUgPSBbXTtcbiAgICAgICAgIHRoaXMuX21pblBvcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX3RhYmxlUmFuZ2UgPSB1bmRlZmluZWQ7XG4gICAgfVxuIGluaXRPZmZzZXRzKCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5fZ2V0VGltZXN0YW1wc0ZvclRhYmxlKCk7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gdGhpcy5fdGFibGUgPSB0aGlzLmJ1aWxkTG9va3VwVGFibGUodGltZXN0YW1wcyk7XG4gICAgICAgIHRoaXMuX21pblBvcyA9IGludGVycG9sYXRlKHRhYmxlLCB0aGlzLm1pbik7XG4gICAgICAgIHRoaXMuX3RhYmxlUmFuZ2UgPSBpbnRlcnBvbGF0ZSh0YWJsZSwgdGhpcy5tYXgpIC0gdGhpcy5fbWluUG9zO1xuICAgICAgICBzdXBlci5pbml0T2Zmc2V0cyh0aW1lc3RhbXBzKTtcbiAgICB9XG4gYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgY29uc3QgdGFibGUgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIHByZXYsIGN1cnIsIG5leHQ7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRpbWVzdGFtcHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGN1cnIgPSB0aW1lc3RhbXBzW2ldO1xuICAgICAgICAgICAgaWYgKGN1cnIgPj0gbWluICYmIGN1cnIgPD0gbWF4KSB7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChjdXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IG1pbixcbiAgICAgICAgICAgICAgICAgICAgcG9zOiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IG1heCxcbiAgICAgICAgICAgICAgICAgICAgcG9zOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgbmV4dCA9IGl0ZW1zW2kgKyAxXTtcbiAgICAgICAgICAgIHByZXYgPSBpdGVtc1tpIC0gMV07XG4gICAgICAgICAgICBjdXJyID0gaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAoTWF0aC5yb3VuZCgobmV4dCArIHByZXYpIC8gMikgIT09IGN1cnIpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGltZTogY3VycixcbiAgICAgICAgICAgICAgICAgICAgcG9zOiBpIC8gKGlsZW4gLSAxKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG4gX2dldFRpbWVzdGFtcHNGb3JUYWJsZSgpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5hbGwgfHwgW107XG4gICAgICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0RGF0YVRpbWVzdGFtcHMoKTtcbiAgICAgICAgY29uc3QgbGFiZWwgPSB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggJiYgbGFiZWwubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aW1lc3RhbXBzID0gdGhpcy5ub3JtYWxpemUoZGF0YS5jb25jYXQobGFiZWwpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMgPSBkYXRhLmxlbmd0aCA/IGRhdGEgOiBsYWJlbDtcbiAgICAgICAgfVxuICAgICAgICB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUuYWxsID0gdGltZXN0YW1wcztcbiAgICAgICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gICAgfVxuIGdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKGludGVycG9sYXRlKHRoaXMuX3RhYmxlLCB2YWx1ZSkgLSB0aGlzLl9taW5Qb3MpIC8gdGhpcy5fdGFibGVSYW5nZTtcbiAgICB9XG4gZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgICAgICBjb25zdCBvZmZzZXRzID0gdGhpcy5fb2Zmc2V0cztcbiAgICAgICAgY29uc3QgZGVjaW1hbCA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAvIG9mZnNldHMuZmFjdG9yIC0gb2Zmc2V0cy5lbmQ7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0ZSh0aGlzLl90YWJsZSwgZGVjaW1hbCAqIHRoaXMuX3RhYmxlUmFuZ2UgKyB0aGlzLl9taW5Qb3MsIHRydWUpO1xuICAgIH1cbn1cblxudmFyIHNjYWxlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkNhdGVnb3J5U2NhbGU6IENhdGVnb3J5U2NhbGUsXG5MaW5lYXJTY2FsZTogTGluZWFyU2NhbGUsXG5Mb2dhcml0aG1pY1NjYWxlOiBMb2dhcml0aG1pY1NjYWxlLFxuUmFkaWFsTGluZWFyU2NhbGU6IFJhZGlhbExpbmVhclNjYWxlLFxuVGltZVNjYWxlOiBUaW1lU2NhbGUsXG5UaW1lU2VyaWVzU2NhbGU6IFRpbWVTZXJpZXNTY2FsZVxufSk7XG5cbmNvbnN0IHJlZ2lzdGVyYWJsZXMgPSBbXG4gICAgY29udHJvbGxlcnMsXG4gICAgZWxlbWVudHMsXG4gICAgcGx1Z2lucyxcbiAgICBzY2FsZXNcbl07XG5cbmV4cG9ydCB7IEFuaW1hdGlvbiwgQW5pbWF0aW9ucywgQXJjRWxlbWVudCwgQmFyQ29udHJvbGxlciwgQmFyRWxlbWVudCwgQmFzZVBsYXRmb3JtLCBCYXNpY1BsYXRmb3JtLCBCdWJibGVDb250cm9sbGVyLCBDYXRlZ29yeVNjYWxlLCBDaGFydCwgcGx1Z2luX2NvbG9ycyBhcyBDb2xvcnMsIERhdGFzZXRDb250cm9sbGVyLCBwbHVnaW5fZGVjaW1hdGlvbiBhcyBEZWNpbWF0aW9uLCBEb21QbGF0Zm9ybSwgRG91Z2hudXRDb250cm9sbGVyLCBFbGVtZW50LCBpbmRleCBhcyBGaWxsZXIsIEludGVyYWN0aW9uLCBwbHVnaW5fbGVnZW5kIGFzIExlZ2VuZCwgTGluZUNvbnRyb2xsZXIsIExpbmVFbGVtZW50LCBMaW5lYXJTY2FsZSwgTG9nYXJpdGhtaWNTY2FsZSwgUGllQ29udHJvbGxlciwgUG9pbnRFbGVtZW50LCBQb2xhckFyZWFDb250cm9sbGVyLCBSYWRhckNvbnRyb2xsZXIsIFJhZGlhbExpbmVhclNjYWxlLCBTY2FsZSwgU2NhdHRlckNvbnRyb2xsZXIsIHBsdWdpbl9zdWJ0aXRsZSBhcyBTdWJUaXRsZSwgVGlja3MsIFRpbWVTY2FsZSwgVGltZVNlcmllc1NjYWxlLCBwbHVnaW5fdGl0bGUgYXMgVGl0bGUsIHBsdWdpbl90b29sdGlwIGFzIFRvb2x0aXAsIGFkYXB0ZXJzIGFzIF9hZGFwdGVycywgX2RldGVjdFBsYXRmb3JtLCBhbmltYXRvciwgY29udHJvbGxlcnMsIGRlZmF1bHRzLCBlbGVtZW50cywgbGF5b3V0cywgcGx1Z2lucywgcmVnaXN0ZXJhYmxlcywgcmVnaXN0cnksIHNjYWxlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhcnQuanMubWFwXG4iLCJpbXBvcnQge0NoYXJ0LCByZWdpc3RlcmFibGVzfSBmcm9tICcuLi9kaXN0L2NoYXJ0LmpzJztcblxuQ2hhcnQucmVnaXN0ZXIoLi4ucmVnaXN0ZXJhYmxlcyk7XG5cbmV4cG9ydCAqIGZyb20gJy4uL2Rpc3QvY2hhcnQuanMnO1xuZXhwb3J0IGRlZmF1bHQgQ2hhcnQ7XG4iLCJpbXBvcnQgeyBDaGFydCwgQ2hhcnRDb25maWd1cmF0aW9uLCBDaGFydEl0ZW0sIENoYXJ0VHlwZSB9IGZyb20gXCJjaGFydC5qcy9hdXRvXCI7XHJcbmltcG9ydCB7IENoYXJ0R2VuZXJhdG9yIH0gZnJvbSBcIi4vY2hhcnRHZW5lcmF0b3JcIjtcclxuaW1wb3J0IHsgU3RyYXZhQWN0aXZpdHkgfSBmcm9tIFwiLi9tb2RlbHMvc3RyYXZhQWN0aXZpdHlcIjtcclxuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcIi4vbW9kZWxzL3N0cmVhbVwiO1xyXG5pbXBvcnQgeyBUaW1lSW5ab25lRmlsdGVyIH0gZnJvbSBcIi4vdGltZUluWm9uZUZpbHRlclwiO1xyXG5pbXBvcnQgKiBhcyBEYXRlSGVscGVyIGZyb20gJ2RhdGUtZm5zJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDaGFydFByb3ZpZGVyICB7XHJcbiAgICBidXR0b246IEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgY2hhcnRJdGVtOiBDaGFydEl0ZW07XHJcbiAgICBjaGFydDogQ2hhcnQ7XHJcbiAgICB0aW1lSW5ab25lOiBudW1iZXJbXTtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuYnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzd2l0Y2hIclwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICB0aGlzLmNoYXJ0SXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaHJDaGFydFwiKSBhcyBDaGFydEl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlVGltZUluWm9uZUNoYXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmNoYXJ0ICE9IG51bGwgfHwgdGhpcy5jaGFydCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFydC5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hhcnQgPSBuZXcgQ2hhcnQodGhpcy5jaGFydEl0ZW0sIHtcclxuICAgICAgICAgICAgdHlwZTogJ2JhcicsXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsczogWydab25lIDEnLCAnWm9uZSAyJywgJ1pvbmUgMycsICdab25lIDQnLCAnWm9uZSA1J10sXHJcbiAgICAgICAgICAgICAgICBkYXRhc2V0czogW3tcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1RpbWUgaW4gWm9uZSAoaG91cnMpJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLnRpbWVJblpvbmUubWFwKHggPT4geCAvIDM2MDApLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAxXHJcbiAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBzY2FsZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luQXRaZXJvOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDaGFydCB9IGZyb20gXCJjaGFydC5qcy9kaXN0XCI7XHJcbmltcG9ydCB7IFN0cmF2YUFwaUNsaWVudCB9IGZyb20gXCIuL2FwaUNsaWVudFwiO1xyXG5pbXBvcnQgeyBDaGFydEdlbmVyYXRvciB9IGZyb20gXCIuL2NoYXJ0R2VuZXJhdG9yXCI7XHJcbmltcG9ydCB7IEhlYXJ0UmF0ZUNoYXJ0R2VuZXJhdG9yIH0gZnJvbSBcIi4vaGVhcnRSYXRlQ2hhcnRHZW5lcmF0b3JcIjtcclxuaW1wb3J0IHsgRGF0YUNhbGN1bGF0b3IgfSBmcm9tIFwiLi9kYXRhQ2FsY3VsYXRvclwiO1xyXG5pbXBvcnQgeyBTdHJhdmFBY3Rpdml0eSB9IGZyb20gXCIuL21vZGVscy9zdHJhdmFBY3Rpdml0eVwiO1xyXG5pbXBvcnQgeyBTdHJlYW0gfSBmcm9tIFwiLi9tb2RlbHMvc3RyZWFtXCI7XHJcbmltcG9ydCAqIGFzIERhdGVIZWxwZXIgZnJvbSBcImRhdGUtZm5zXCI7XHJcbmltcG9ydCB7IERldGFpbGVkQWN0aXZpdHkgfSBmcm9tIFwiLi9tb2RlbHMvZGV0YWlsZWRBY3Rpdml0eVwiO1xyXG5pbXBvcnQgeyBDaGFydFByb3ZpZGVyIH0gZnJvbSBcIi4vY2hhcnRQcm92aWRlclwiO1xyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XHJcbiAgICBsZXQgY2xpZW50ID0gbmV3IFN0cmF2YUFwaUNsaWVudCgpO1xyXG5cclxuICAgIHZhciBwb3dlclN0cmVhbXMgPSBhd2FpdCBjbGllbnQuZ2V0UG93ZXJEYXRhKCk7XHJcbiAgICB2YXIgaHJTdHJlYW1zID0gYXdhaXQgY2xpZW50LmdldEhlYXJ0UmF0ZURhdGEoKTtcclxuXHJcbiAgICB2YXIgYWN0aXZpdGllcyA9IGF3YWl0IGNsaWVudC5nZXRBY3Rpdml0aWVzKCk7XHJcblxyXG4gICAgdmFyIGRldGFpbGVkQWN0aXZpdGllcyA9IGF3YWl0IGNsaWVudC5nZXREZXRhaWxlZEFjdGl2aXRpZXMoKTtcclxuXHJcbiAgICBsZXQgY2hhcnRQcm92aWRlciA9IG5ldyBDaGFydFByb3ZpZGVyKCk7XHJcblxyXG4gICAgYWRkU3RyZWFtc1RvQWN0aXZpdHkocG93ZXJTdHJlYW1zLCBoclN0cmVhbXMsIGFjdGl2aXRpZXMpO1xyXG4gICAgYWRkRGV0YWlsc1RvQWN0aXZpdHkoYWN0aXZpdGllcywgZGV0YWlsZWRBY3Rpdml0aWVzKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhhY3Rpdml0aWVzKTtcclxuICAgIGxldCBkYXRhQ2FsY3VsYXRvciA9IG5ldyBEYXRhQ2FsY3VsYXRvcihhY3Rpdml0aWVzKTtcclxuICAgIGRhdGFDYWxjdWxhdG9yLnNldFRpbWVJblpvbmVMaXN0cygpO1xyXG5cclxuICAgIGNoYXJ0UHJvdmlkZXIudGltZUluWm9uZSA9IGRhdGFDYWxjdWxhdG9yLmhyVGltZUluWm9uZTtcclxuXHJcbiAgICBjaGFydFByb3ZpZGVyLmNyZWF0ZVRpbWVJblpvbmVDaGFydCgpO1xyXG4gICAgbGV0IGRhdGVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcGx5RGF0ZXNcIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICBsZXQgZnJvbURhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZyb21EYXRlXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICBsZXQgdG9EYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b0RhdGVcIikgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgIGxldCB0b3RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG90YWxcIik7XHJcbiAgICBkYXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJyYW5cIik7XHJcbiAgICAgICAgY29uc29sZS5sb2coZnJvbURhdGUudmFsdWUpXHJcbiAgICAgICAgY29uc29sZS5sb2coRGF0ZS5wYXJzZShmcm9tRGF0ZS52YWx1ZSkpO1xyXG4gICAgICAgIGRhdGFDYWxjdWxhdG9yLmZpbHRlckJ5RGF0ZShuZXcgRGF0ZShmcm9tRGF0ZS52YWx1ZSksIG5ldyBEYXRlKHRvRGF0ZS52YWx1ZSkpO1xyXG4gICAgICAgIGRhdGFDYWxjdWxhdG9yLnNldFRpbWVJblpvbmVMaXN0cygpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGFDYWxjdWxhdG9yLmhyVGltZUluWm9uZSk7XHJcbiAgICAgICAgY2hhcnRQcm92aWRlci50aW1lSW5ab25lID0gZGF0YUNhbGN1bGF0b3IuaHJUaW1lSW5ab25lO1xyXG4gICAgICAgIGNoYXJ0UHJvdmlkZXIuY3JlYXRlVGltZUluWm9uZUNoYXJ0KCk7XHJcbiAgICAgICAgbGV0IHRvdGFsTnVtID0gMDtcclxuICAgICAgICBmb3IgKGxldCB2YWwgb2YgY2hhcnRQcm92aWRlci50aW1lSW5ab25lKSB7XHJcbiAgICAgICAgICAgIHRvdGFsTnVtICs9IHZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdG90YWxOdW0gPSB0b3RhbE51bSAvIDM2MDA7XHJcbiAgICAgICAgdG90YWwudGV4dENvbnRlbnQgPSBcIlRvdGFsIGhvdXJzOiBcIiArIHRvdGFsTnVtLnRvU3RyaW5nKCk7XHJcbiAgICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRTdHJlYW1zVG9BY3Rpdml0eShwb3dlclN0cmVhbXM6IFN0cmVhbVtdLCBoclN0cmVhbXM6IFN0cmVhbVtdLCBhY3Rpdml0aWVzOiBTdHJhdmFBY3Rpdml0eVtdKSB7XHJcbiAgICBmb3IgKGxldCBhY3Rpdml0eSBvZiBhY3Rpdml0aWVzKSB7XHJcbiAgICAgICAgbGV0IGhyU3RyZWFtV2l0aElkID0gaHJTdHJlYW1zLmZpbmQoc3RyZWFtID0+IHN0cmVhbS5pZCA9PSBhY3Rpdml0eS5pZCk7XHJcbiAgICAgICAgbGV0IHBvd2VyU3RyZWFtV2l0aElkID0gcG93ZXJTdHJlYW1zLmZpbmQoc3RyZWFtID0+IHN0cmVhbS5pZCA9PSBhY3Rpdml0eS5pZCk7XHJcbiAgICAgICAgYWN0aXZpdHkucG93ZXJTdHJlYW0gPSBwb3dlclN0cmVhbVdpdGhJZD8ucG93ZXJEaWN0O1xyXG4gICAgICAgIGFjdGl2aXR5LmhyU3RyZWFtID0gaHJTdHJlYW1XaXRoSWQ/LmhlYXJ0UmF0ZURpY3Q7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZERldGFpbHNUb0FjdGl2aXR5KGFjdGl2aXRpZXM6IFN0cmF2YUFjdGl2aXR5W10sIGRldGFpbGVkQWN0aXZpdGllczogRGV0YWlsZWRBY3Rpdml0eVtdKSB7XHJcbiAgICBmb3IgKGxldCBhY3Rpdml0eSBvZiBhY3Rpdml0aWVzKSB7XHJcbiAgICAgICAgbGV0IGRldGFpbHMgPSBkZXRhaWxlZEFjdGl2aXRpZXMuZmluZChlID0+IGUuaWQgPT0gYWN0aXZpdHkuaWQpO1xyXG4gICAgICAgIGFjdGl2aXR5LmRldGFpbHMgPSBkZXRhaWxzO1xyXG4gICAgfVxyXG59XHJcblxyXG4oYXN5bmMgKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBhd2FpdCBtYWluKCk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgIH1cclxufSkoKTtcclxuIl0sIm5hbWVzIjpbImdldFBvd2VyRGF0YSIsImZldGNoIiwianNvbiIsImdldEhlYXJ0UmF0ZURhdGEiLCJnZXRBY3Rpdml0aWVzIiwiZ2V0RGV0YWlsZWRBY3Rpdml0aWVzIiwiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJsZW5ndGgiLCJUeXBlRXJyb3IiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ3VtZW50cyIsImFyZ1N0ciIsIk9iamVjdCIsInRvU3RyaW5nIiwiY2FsbCIsIkRhdGUiLCJnZXRUaW1lIiwiY29uc29sZSIsIndhcm4iLCJFcnJvciIsInN0YWNrIiwiTmFOIiwiaXNBZnRlciIsImRpcnR5RGF0ZSIsImRpcnR5RGF0ZVRvQ29tcGFyZSIsImRhdGUiLCJkYXRlVG9Db21wYXJlIiwiaXNCZWZvcmUiLCJnZXRUaW1lSW5ab25lTGlzdCIsImFjdGl2aXRpZXMiLCJ0aW1lSW5ab25lRGljdCIsImFjdGl2aXR5Iiwia2V5IiwicG93ZXJTdHJlYW0iLCJ0aW1lQXRQb3dlckluU2Vjb25kcyIsInRoaXMiLCJnZXRab25lIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJ2YWx1ZXMiLCJwb3dlciIsInBvd2VyQXNOdW1iZXIiLCJzZXRQb3dlclpvbmVzIiwiZnRwIiwicG93ZXJab25lcyIsImhyU3RyZWFtIiwiaGVhcnRSYXRlIiwic2V0SHJab25lcyIsIm1heEhyIiwiaHJab25lcyIsImFsbEFjdGl2aXRpZXMiLCJmaWx0ZXJlZEFjdGl2aXRpZXMiLCJmaWx0ZXJCeURhdGUiLCJmcm9tRGF0ZSIsImFjdGl2aXR5RGF0ZSIsInBhcnNlIiwic3RhcnRfZGF0ZV9sb2NhbCIsInB1c2giLCJzZXRUaW1lSW5ab25lTGlzdHMiLCJwb3dlclRpbWVJblpvbmUiLCJQb3dlclpvbmUiLCJoclRpbWVJblpvbmUiLCJIclpvbmUiLCJzZXRDYWxvcmllc0J1cm5lZCIsImNhbG9yaWVzQnVybmVkSW5UaW1lUGVyaW9kIiwiZGV0YWlscyIsImNhbG9yaWVzIiwicm91bmQiLCJ2IiwibGltIiwibCIsImgiLCJNYXRoIiwibWF4IiwibWluIiwicDJiIiwibjJiIiwiYjJuIiwibjJwIiwibWFwJDEiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJhIiwiYiIsImMiLCJkIiwiZSIsImYiLCJoZXgiLCJoMSIsImgyIiwiZXEiLCJIVUVfUkUiLCJoc2wycmdibiIsInMiLCJuIiwiayIsImhzdjJyZ2JuIiwiaHdiMnJnYm4iLCJ3IiwicmdiIiwiaSIsInJnYjJoc2wiLCJyIiwiZyIsImh1ZVZhbHVlIiwiY2FsbG4iLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJoc2wycmdiIiwiaHVlIiwieCIsIloiLCJZIiwiWCIsIlciLCJWIiwiVSIsIlQiLCJTIiwiUiIsIlEiLCJQIiwiTyIsIk4iLCJNIiwiTCIsIksiLCJHIiwiSCIsIkkiLCJKIiwibmFtZXMkMSIsIk9pY2VYZSIsImFudGlxdWV3RXRlIiwiYXF1YSIsImFxdWFtYXJSZSIsImF6dVkiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbktlZE9tb25kIiwiWGUiLCJYZXZpVGV0IiwiYlB3biIsImJ1cmx5d29vZCIsImNhTXRYZSIsIkthcnRZdXNlIiwiS29jVGF0ZSIsImNTTyIsImNTbmZsb3dlclhlIiwiY1Nuc2lsayIsImNyaW1zb24iLCJjeWFuIiwieFhlIiwieGN5YW4iLCJ4Z1RNblBkIiwieFdheSIsInhnWUYiLCJ4Z1l5IiwieGtoYWtpIiwieG1hZ0Z0YSIsInhUaXZlZ1lGIiwieFNhbmdlIiwieFNjRWQiLCJ4WWQiLCJ4c09tb24iLCJ4c0hnWUYiLCJ4VVhlIiwieFVXYXkiLCJ4VWdZeSIsInhRZSIsInh2aVRldCIsImRBcHBSayIsImRBcHNreVhlIiwiZGltV2F5IiwiZGltZ1l5IiwiZG9kZ2VyWGUiLCJmaVlicmljayIsImZsU093RXRlIiwiZm9Zc3RXQW4iLCJmdUtzaWEiLCJnYVJzYlNvIiwiZ2hvc3R3RXRlIiwiZ1RkIiwiZ1RNblBkIiwiV2F5IiwiZ1lGIiwiZ1lGTHciLCJnWXkiLCJob25leU13IiwiaG90cFJrIiwiUmRpYW5ZZCIsIlJkaWdvIiwiaXZTeSIsImtoYWtpIiwibGF2Rk1yIiwibGF2Rk1yWHNoIiwibGF3bmdZRiIsIk5tb25jRWZmb24iLCJaWGUiLCJaY1NPIiwiWmN5YW4iLCJaZ1RNblBkTHciLCJaV2F5IiwiWmdZRiIsIlpnWXkiLCJacFJrIiwiWnNPbW9uIiwiWnNIZ1lGIiwiWnNreVhlIiwiWlVXYXkiLCJaVWdZeSIsIlpzdEFsWGUiLCJaTHciLCJsaW1lIiwibGltZWdZRiIsImxSRiIsIm1hZ0Z0YSIsIm1hUG9uIiwiVmFxdWFtYXJSZSIsIlZYZSIsIlZTY0VkIiwiVnB1cnBOIiwiVnNIZ1lGIiwiVlVYZSIsIlZzcHJSZ2dZRiIsIlZRZSIsIlZ2aVRldFlkIiwibWlkbmlnaHRYZSIsIm1SdGNZYW0iLCJtaXN0eVBzZSIsIm1vY2Nhc1IiLCJuYXZham93RXRlIiwibmF2eSIsIlRkbGFjZSIsIlRpdmUiLCJUaXZlZEJiIiwiU2FuZ2UiLCJTYW5nZVlkIiwiU2NFZCIsInBPZWdUTW5QZCIsInBPZWdZRiIsInBPZVFlIiwicE9ldmlUZXRZZCIsInBhcGF5YXdFcCIsInBIS3B1ZmYiLCJwZXJ1IiwicFJrIiwicGx1bSIsInBvd01yWGUiLCJwdXJwTiIsIlliZWNjYXB1cnBOIiwiWWQiLCJQc3licm93biIsIlB5T1hlIiwic2FkZE5iUHduIiwic09tb24iLCJzYW5keWJQd24iLCJzSGdZRiIsInNIc2hlbGwiLCJzaUZuYSIsInNpbHZlciIsInNreVhlIiwiVVhlIiwiVVdheSIsIlVnWXkiLCJzbm93Iiwic3ByUmdnWUYiLCJzdEFsWGUiLCJ0YW4iLCJ0ZU8iLCJ0RXN0TiIsInRvbWF0byIsIlFlIiwidmlUZXQiLCJKSHQiLCJ3RXRlIiwid0V0ZXNtb2tlIiwiTHciLCJMd2dZRiIsIm5hbWVzIiwiUkdCX1JFIiwidG8iLCJwb3ciLCJmcm9tIiwibW9kSFNMIiwicmF0aW8iLCJ0bXAiLCJjbG9uZSIsInByb3RvIiwiYXNzaWduIiwiZnJvbU9iamVjdCIsImlucHV0IiwiZnVuY3Rpb25QYXJzZSIsInN0ciIsImNoYXJBdCIsIm0iLCJleGVjIiwicmdiUGFyc2UiLCJwMSIsInAyIiwiaHdiMnJnYiIsImhzdjJyZ2IiLCJodWVQYXJzZSIsIkNvbG9yIiwidHlwZSIsInJldCIsImxlbiIsInVucGFja2VkIiwia2V5cyIsInRrZXlzIiwiaiIsIm9rIiwibmsiLCJyZXBsYWNlIiwidW5wYWNrIiwidHJhbnNwYXJlbnQiLCJ0b0xvd2VyQ2FzZSIsIm5hbWVQYXJzZSIsIl9yZ2IiLCJfdmFsaWQiLCJ2YWxpZCIsInJnYlN0cmluZyIsInVuZGVmaW5lZCIsImhleFN0cmluZyIsImlzU2hvcnQiLCJhbHBoYSIsImhzbFN0cmluZyIsIm1peCIsImNvbG9yIiwid2VpZ2h0IiwiYzEiLCJjMiIsIncyIiwicCIsIncxIiwiaW50ZXJwb2xhdGUiLCJ0IiwicmdiMSIsInJnYjIiLCJjbGVhcmVyIiwiZ3JleXNjYWxlIiwidmFsIiwib3BhcXVlciIsIm5lZ2F0ZSIsImxpZ2h0ZW4iLCJkYXJrZW4iLCJzYXR1cmF0ZSIsImRlc2F0dXJhdGUiLCJyb3RhdGUiLCJkZWciLCJub29wIiwidWlkIiwiaWQiLCJpc051bGxPclVuZGVmIiwidmFsdWUiLCJzbGljZSIsImlzT2JqZWN0IiwiaXNOdW1iZXJGaW5pdGUiLCJpc0Zpbml0ZSIsImZpbml0ZU9yRGVmYXVsdCIsImRlZmF1bHRWYWx1ZSIsInZhbHVlT3JEZWZhdWx0IiwidG9EaW1lbnNpb24iLCJkaW1lbnNpb24iLCJlbmRzV2l0aCIsInBhcnNlRmxvYXQiLCJjYWxsYmFjayIsImZuIiwidGhpc0FyZyIsImFwcGx5IiwiZWFjaCIsImxvb3BhYmxlIiwicmV2ZXJzZSIsIl9lbGVtZW50c0VxdWFsIiwiYTAiLCJhMSIsImlsZW4iLCJ2MCIsInYxIiwiZGF0YXNldEluZGV4IiwiaW5kZXgiLCJzb3VyY2UiLCJ0YXJnZXQiLCJjcmVhdGUiLCJrbGVuIiwiaXNWYWxpZEtleSIsImluZGV4T2YiLCJfbWVyZ2VyIiwib3B0aW9ucyIsInR2YWwiLCJzdmFsIiwibWVyZ2UiLCJzb3VyY2VzIiwibWVyZ2VyIiwiY3VycmVudCIsIm1lcmdlSWYiLCJfbWVyZ2VySWYiLCJoYXNPd25Qcm9wZXJ0eSIsImtleVJlc29sdmVycyIsIm8iLCJ5IiwicmVzb2x2ZU9iamVjdEtleSIsInJlc29sdmVyIiwicGFydHMiLCJzcGxpdCIsInBhcnQiLCJfc3BsaXRLZXkiLCJfZ2V0S2V5UmVzb2x2ZXIiLCJfY2FwaXRhbGl6ZSIsInRvVXBwZXJDYXNlIiwiZGVmaW5lZCIsImlzRnVuY3Rpb24iLCJzZXRzRXF1YWwiLCJzaXplIiwiaXRlbSIsImhhcyIsIlBJIiwiVEFVIiwiUElUQVUiLCJJTkZJTklUWSIsIlBPU0lUSVZFX0lORklOSVRZIiwiUkFEX1BFUl9ERUciLCJIQUxGX1BJIiwiUVVBUlRFUl9QSSIsIlRXT19USElSRFNfUEkiLCJsb2cxMCIsInNpZ24iLCJhbG1vc3RFcXVhbHMiLCJlcHNpbG9uIiwiYWJzIiwibmljZU51bSIsInJhbmdlIiwicm91bmRlZFJhbmdlIiwibmljZVJhbmdlIiwiZmxvb3IiLCJmcmFjdGlvbiIsImlzTnVtYmVyIiwiaXNOYU4iLCJfc2V0TWluQW5kTWF4QnlLZXkiLCJhcnJheSIsInByb3BlcnR5IiwidG9SYWRpYW5zIiwiZGVncmVlcyIsInRvRGVncmVlcyIsInJhZGlhbnMiLCJfZGVjaW1hbFBsYWNlcyIsImdldEFuZ2xlRnJvbVBvaW50IiwiY2VudHJlUG9pbnQiLCJhbmdsZVBvaW50IiwiZGlzdGFuY2VGcm9tWENlbnRlciIsImRpc3RhbmNlRnJvbVlDZW50ZXIiLCJyYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIiLCJzcXJ0IiwiYW5nbGUiLCJhdGFuMiIsImRpc3RhbmNlIiwiZGlzdGFuY2VCZXR3ZWVuUG9pbnRzIiwicHQxIiwicHQyIiwiX2FuZ2xlRGlmZiIsIl9ub3JtYWxpemVBbmdsZSIsIl9hbmdsZUJldHdlZW4iLCJzdGFydCIsImVuZCIsInNhbWVBbmdsZUlzRnVsbENpcmNsZSIsImFuZ2xlVG9TdGFydCIsImFuZ2xlVG9FbmQiLCJzdGFydFRvQW5nbGUiLCJlbmRUb0FuZ2xlIiwiX2xpbWl0VmFsdWUiLCJfaXNCZXR3ZWVuIiwiX2xvb2t1cCIsInRhYmxlIiwiY21wIiwibWlkIiwiaGkiLCJsbyIsIl9sb29rdXBCeUtleSIsImxhc3QiLCJ0aSIsIl9ybG9va3VwQnlLZXkiLCJhcnJheUV2ZW50cyIsInVubGlzdGVuQXJyYXlFdmVudHMiLCJsaXN0ZW5lciIsInN0dWIiLCJfY2hhcnRqcyIsImxpc3RlbmVycyIsInNwbGljZSIsImZvckVhY2giLCJfYXJyYXlVbmlxdWUiLCJpdGVtcyIsInNldCIsIlNldCIsInJlcXVlc3RBbmltRnJhbWUiLCJ3aW5kb3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0aHJvdHRsZWQiLCJhcmdzVG9Vc2UiLCJ0aWNraW5nIiwiX3RvTGVmdFJpZ2h0Q2VudGVyIiwiYWxpZ24iLCJfYWxpZ25TdGFydEVuZCIsIl9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzIiwibWV0YSIsInBvaW50cyIsImFuaW1hdGlvbnNEaXNhYmxlZCIsInBvaW50Q291bnQiLCJjb3VudCIsIl9zb3J0ZWQiLCJpU2NhbGUiLCJfcGFyc2VkIiwiYXhpcyIsIm1pbkRlZmluZWQiLCJtYXhEZWZpbmVkIiwiZ2V0VXNlckJvdW5kcyIsImdldFBpeGVsRm9yVmFsdWUiLCJfc2NhbGVSYW5nZXNDaGFuZ2VkIiwieFNjYWxlIiwieVNjYWxlIiwiX3NjYWxlUmFuZ2VzIiwibmV3UmFuZ2VzIiwieG1pbiIsInhtYXgiLCJ5bWluIiwieW1heCIsImNoYW5nZWQiLCJhdEVkZ2UiLCJlbGFzdGljSW4iLCJzaW4iLCJlbGFzdGljT3V0IiwiZWZmZWN0cyIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiY29zIiwiZWFzZU91dFNpbmUiLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImVhc2VJbkNpcmMiLCJlYXNlT3V0Q2lyYyIsImVhc2VJbk91dENpcmMiLCJlYXNlSW5FbGFzdGljIiwiZWFzZU91dEVsYXN0aWMiLCJlYXNlSW5PdXRFbGFzdGljIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJlYXNlSW5PdXRCb3VuY2UiLCJpc1BhdHRlcm5PckdyYWRpZW50IiwiZ2V0SG92ZXJDb2xvciIsIm51bWJlcnMiLCJjb2xvcnMiLCJpbnRsQ2FjaGUiLCJNYXAiLCJmb3JtYXROdW1iZXIiLCJudW0iLCJsb2NhbGUiLCJjYWNoZUtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb3JtYXR0ZXIiLCJnZXQiLCJJbnRsIiwiTnVtYmVyRm9ybWF0IiwiZ2V0TnVtYmVyRm9ybWF0IiwiZm9ybWF0IiwiZm9ybWF0dGVycyIsIm51bWVyaWMiLCJ0aWNrVmFsdWUiLCJ0aWNrcyIsImNoYXJ0Iiwibm90YXRpb24iLCJkZWx0YSIsIm1heFRpY2siLCJjYWxjdWxhdGVEZWx0YSIsImxvZ0RlbHRhIiwibnVtRGVjaW1hbCIsIm1pbmltdW1GcmFjdGlvbkRpZ2l0cyIsIm1heGltdW1GcmFjdGlvbkRpZ2l0cyIsImxvZ2FyaXRobWljIiwicmVtYWluIiwic2lnbmlmaWNhbmQiLCJpbmNsdWRlcyIsIlRpY2tzIiwib3ZlcnJpZGVzIiwiZGVzY3JpcHRvcnMiLCJnZXRTY29wZSQxIiwibm9kZSIsInJvb3QiLCJzY29wZSIsIkRlZmF1bHRzIiwiX2Rlc2NyaXB0b3JzIiwiX2FwcGxpZXJzIiwiYW5pbWF0aW9uIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyQ29sb3IiLCJkYXRhc2V0cyIsImRldmljZVBpeGVsUmF0aW8iLCJjb250ZXh0IiwicGxhdGZvcm0iLCJnZXREZXZpY2VQaXhlbFJhdGlvIiwiZWxlbWVudHMiLCJldmVudHMiLCJmb250IiwiZmFtaWx5Iiwic3R5bGUiLCJsaW5lSGVpZ2h0IiwiaG92ZXIiLCJob3ZlckJhY2tncm91bmRDb2xvciIsImN0eCIsImhvdmVyQm9yZGVyQ29sb3IiLCJob3ZlckNvbG9yIiwiaW5kZXhBeGlzIiwiaW50ZXJhY3Rpb24iLCJtb2RlIiwiaW50ZXJzZWN0IiwiaW5jbHVkZUludmlzaWJsZSIsIm1haW50YWluQXNwZWN0UmF0aW8iLCJvbkhvdmVyIiwib25DbGljayIsInBhcnNpbmciLCJwbHVnaW5zIiwicmVzcG9uc2l2ZSIsInNjYWxlIiwic2NhbGVzIiwic2hvd0xpbmUiLCJkcmF3QWN0aXZlRWxlbWVudHNPblRvcCIsImRlc2NyaWJlIiwib3ZlcnJpZGUiLCJyb3V0ZSIsIm5hbWUiLCJ0YXJnZXRTY29wZSIsInRhcmdldE5hbWUiLCJzY29wZU9iamVjdCIsInRhcmdldFNjb3BlT2JqZWN0IiwicHJpdmF0ZU5hbWUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwid3JpdGFibGUiLCJlbnVtZXJhYmxlIiwibG9jYWwiLCJhcHBsaWVycyIsImRlZmF1bHRzIiwiX3NjcmlwdGFibGUiLCJzdGFydHNXaXRoIiwiX2luZGV4YWJsZSIsIl9mYWxsYmFjayIsImRlbGF5IiwiZHVyYXRpb24iLCJlYXNpbmciLCJsb29wIiwicHJvcGVydGllcyIsImFjdGl2ZSIsInJlc2l6ZSIsInNob3ciLCJhbmltYXRpb25zIiwidmlzaWJsZSIsImhpZGUiLCJhdXRvUGFkZGluZyIsInBhZGRpbmciLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJkaXNwbGF5Iiwib2Zmc2V0IiwiYmVnaW5BdFplcm8iLCJib3VuZHMiLCJncmFjZSIsImdyaWQiLCJsaW5lV2lkdGgiLCJkcmF3T25DaGFydEFyZWEiLCJkcmF3VGlja3MiLCJ0aWNrTGVuZ3RoIiwidGlja1dpZHRoIiwiX2N0eCIsInRpY2tDb2xvciIsImJvcmRlciIsImRhc2giLCJkYXNoT2Zmc2V0Iiwid2lkdGgiLCJ0aXRsZSIsInRleHQiLCJtaW5Sb3RhdGlvbiIsIm1heFJvdGF0aW9uIiwibWlycm9yIiwidGV4dFN0cm9rZVdpZHRoIiwidGV4dFN0cm9rZUNvbG9yIiwiYXV0b1NraXAiLCJhdXRvU2tpcFBhZGRpbmciLCJsYWJlbE9mZnNldCIsIm1pbm9yIiwibWFqb3IiLCJjcm9zc0FsaWduIiwic2hvd0xhYmVsQmFja2Ryb3AiLCJiYWNrZHJvcENvbG9yIiwiYmFja2Ryb3BQYWRkaW5nIiwiX21lYXN1cmVUZXh0IiwiZGF0YSIsImdjIiwibG9uZ2VzdCIsInN0cmluZyIsInRleHRXaWR0aCIsIm1lYXN1cmVUZXh0IiwiX2xvbmdlc3RUZXh0IiwiYXJyYXlPZlRoaW5ncyIsImNhY2hlIiwiZ2FyYmFnZUNvbGxlY3QiLCJzYXZlIiwiamxlbiIsInRoaW5nIiwibmVzdGVkVGhpbmciLCJyZXN0b3JlIiwiZ2NMZW4iLCJfYWxpZ25QaXhlbCIsInBpeGVsIiwiY3VycmVudERldmljZVBpeGVsUmF0aW8iLCJoYWxmV2lkdGgiLCJjbGVhckNhbnZhcyIsImNhbnZhcyIsImdldENvbnRleHQiLCJyZXNldFRyYW5zZm9ybSIsImNsZWFyUmVjdCIsImhlaWdodCIsImRyYXdQb2ludCIsImRyYXdQb2ludExlZ2VuZCIsInhPZmZzZXQiLCJ5T2Zmc2V0IiwiY29ybmVyUmFkaXVzIiwieE9mZnNldFciLCJ5T2Zmc2V0VyIsInBvaW50U3R5bGUiLCJyb3RhdGlvbiIsInJhZGl1cyIsInJhZCIsInRyYW5zbGF0ZSIsImRyYXdJbWFnZSIsImJlZ2luUGF0aCIsImVsbGlwc2UiLCJhcmMiLCJjbG9zZVBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJTUVJUMV8yIiwicmVjdCIsImZpbGwiLCJib3JkZXJXaWR0aCIsInN0cm9rZSIsIl9pc1BvaW50SW5BcmVhIiwicG9pbnQiLCJhcmVhIiwibWFyZ2luIiwiY2xpcEFyZWEiLCJjbGlwIiwidW5jbGlwQXJlYSIsIl9zdGVwcGVkTGluZVRvIiwicHJldmlvdXMiLCJmbGlwIiwibWlkcG9pbnQiLCJfYmV6aWVyQ3VydmVUbyIsImJlemllckN1cnZlVG8iLCJjcDF4IiwiY3AyeCIsImNwMXkiLCJjcDJ5IiwiZGVjb3JhdGVUZXh0IiwibGluZSIsIm9wdHMiLCJzdHJpa2V0aHJvdWdoIiwidW5kZXJsaW5lIiwibWV0cmljcyIsImFjdHVhbEJvdW5kaW5nQm94TGVmdCIsImFjdHVhbEJvdW5kaW5nQm94UmlnaHQiLCJhY3R1YWxCb3VuZGluZ0JveEFzY2VudCIsImFjdHVhbEJvdW5kaW5nQm94RGVzY2VudCIsInlEZWNvcmF0aW9uIiwic3Ryb2tlU3R5bGUiLCJmaWxsU3R5bGUiLCJkZWNvcmF0aW9uV2lkdGgiLCJkcmF3QmFja2Ryb3AiLCJvbGRDb2xvciIsImZpbGxSZWN0IiwicmVuZGVyVGV4dCIsImxpbmVzIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VDb2xvciIsInRyYW5zbGF0aW9uIiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwic2V0UmVuZGVyT3B0cyIsImJhY2tkcm9wIiwic3Ryb2tlVGV4dCIsIm1heFdpZHRoIiwiZmlsbFRleHQiLCJhZGRSb3VuZGVkUmVjdFBhdGgiLCJ0b3BMZWZ0IiwiYm90dG9tTGVmdCIsImJvdHRvbVJpZ2h0IiwidG9wUmlnaHQiLCJMSU5FX0hFSUdIVCIsIkZPTlRfU1RZTEUiLCJ0b0xpbmVIZWlnaHQiLCJtYXRjaGVzIiwibWF0Y2giLCJudW1iZXJPclplcm8iLCJfcmVhZFZhbHVlVG9Qcm9wcyIsInByb3BzIiwib2JqUHJvcHMiLCJyZWFkIiwicHJvcCIsInRvVFJCTCIsInRvVFJCTENvcm5lcnMiLCJ0b1BhZGRpbmciLCJ0b0ZvbnQiLCJmYWxsYmFjayIsInRvRm9udFN0cmluZyIsInJlc29sdmUiLCJpbnB1dHMiLCJpbmZvIiwiY2FjaGVhYmxlIiwiY3JlYXRlQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJfY3JlYXRlUmVzb2x2ZXIiLCJzY29wZXMiLCJwcmVmaXhlcyIsInJvb3RTY29wZXMiLCJnZXRUYXJnZXQiLCJmaW5hbFJvb3RTY29wZXMiLCJfcmVzb2x2ZSIsInRvU3RyaW5nVGFnIiwiX2NhY2hlYWJsZSIsIl9zY29wZXMiLCJfcm9vdFNjb3BlcyIsIl9nZXRUYXJnZXQiLCJQcm94eSIsImRlbGV0ZVByb3BlcnR5IiwiX2tleXMiLCJfY2FjaGVkIiwicHJveHkiLCJwcmVmaXgiLCJyZWFkS2V5IiwibmVlZHNTdWJSZXNvbHZlciIsImNyZWF0ZVN1YlJlc29sdmVyIiwiX3Jlc29sdmVXaXRoUHJlZml4ZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJnZXRLZXlzRnJvbUFsbFNjb3BlcyIsIm93bktleXMiLCJzdG9yYWdlIiwiX3N0b3JhZ2UiLCJfYXR0YWNoQ29udGV4dCIsInN1YlByb3h5IiwiZGVzY3JpcHRvckRlZmF1bHRzIiwiX3Byb3h5IiwiX2NvbnRleHQiLCJfc3ViUHJveHkiLCJfc3RhY2siLCJzZXRDb250ZXh0IiwicmVjZWl2ZXIiLCJpc1NjcmlwdGFibGUiLCJnZXRWYWx1ZSIsImpvaW4iLCJhZGQiLCJkZWxldGUiLCJfcmVzb2x2ZVNjcmlwdGFibGUiLCJpc0luZGV4YWJsZSIsImFyciIsImZpbHRlciIsIl9yZXNvbHZlQXJyYXkiLCJfcmVzb2x2ZVdpdGhDb250ZXh0IiwiYWxsS2V5cyIsImNvbmZpZ3VyYWJsZSIsInNjcmlwdGFibGUiLCJpbmRleGFibGUiLCJfYWxsS2V5cyIsInJlc29sdmVGYWxsYmFjayIsImdldFNjb3BlIiwicGFyZW50IiwiYWRkU2NvcGVzIiwicGFyZW50U2NvcGVzIiwicGFyZW50RmFsbGJhY2siLCJhbGxTY29wZXMiLCJhZGRTY29wZXNGcm9tS2V5Iiwic3ViR2V0VGFyZ2V0IiwicmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzIiwiX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlIiwiX3BhcnNpbmciLCJwYXJzZWQiLCJFUFNJTE9OIiwiZ2V0UG9pbnQiLCJza2lwIiwiZ2V0VmFsdWVBeGlzIiwic3BsaW5lQ3VydmUiLCJmaXJzdFBvaW50IiwibWlkZGxlUG9pbnQiLCJhZnRlclBvaW50IiwibmV4dCIsImQwMSIsImQxMiIsInMwMSIsInMxMiIsImZhIiwiZmIiLCJjYXBDb250cm9sUG9pbnQiLCJwdCIsIl91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzIiwiY29udHJvbFBvaW50cyIsInNwYW5HYXBzIiwiY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSIsInZhbHVlQXhpcyIsInBvaW50c0xlbiIsImRlbHRhSyIsIm1LIiwicG9pbnRCZWZvcmUiLCJwb2ludEN1cnJlbnQiLCJwb2ludEFmdGVyIiwic2xvcGVEZWx0YSIsImFscGhhSyIsImJldGFLIiwidGF1SyIsInNxdWFyZWRNYWduaXR1ZGUiLCJtb25vdG9uZUFkanVzdCIsImlQaXhlbCIsInZQaXhlbCIsIm1vbm90b25lQ29tcHV0ZSIsInNwbGluZUN1cnZlTW9ub3RvbmUiLCJwcmV2IiwidGVuc2lvbiIsImNhcEJlemllclBvaW50cyIsImluQXJlYSIsImluQXJlYVByZXYiLCJpbkFyZWFOZXh0IiwiX2lzRG9tU3VwcG9ydGVkIiwiZG9jdW1lbnQiLCJfZ2V0UGFyZW50Tm9kZSIsImRvbU5vZGUiLCJwYXJlbnROb2RlIiwiaG9zdCIsInBhcnNlTWF4U3R5bGUiLCJzdHlsZVZhbHVlIiwicGFyZW50UHJvcGVydHkiLCJ2YWx1ZUluUGl4ZWxzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImVsZW1lbnQiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwb3NpdGlvbnMiLCJnZXRQb3NpdGlvbmVkU3R5bGUiLCJzdHlsZXMiLCJzdWZmaXgiLCJyZXN1bHQiLCJwb3MiLCJ1c2VPZmZzZXRQb3MiLCJzaGFkb3dSb290IiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsImV2ZW50IiwiYm9yZGVyQm94IiwiYm94U2l6aW5nIiwicGFkZGluZ3MiLCJib3JkZXJzIiwiYm94IiwidG91Y2hlcyIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJnZXRDYW52YXNQb3NpdGlvbiIsInJvdW5kMSIsInJldGluYVNjYWxlIiwiZm9yY2VSYXRpbyIsImZvcmNlU3R5bGUiLCJwaXhlbFJhdGlvIiwiZGV2aWNlSGVpZ2h0IiwiZGV2aWNlV2lkdGgiLCJzZXRUcmFuc2Zvcm0iLCJzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIiwicGFzc2l2ZVN1cHBvcnRlZCIsInBhc3NpdmUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWRVc2VkU2l6ZSIsImVsIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldFN0eWxlIiwiX3BvaW50SW5MaW5lIiwiX3N0ZXBwZWRJbnRlcnBvbGF0aW9uIiwiX2JlemllckludGVycG9sYXRpb24iLCJjcDEiLCJjcDIiLCJnZXRSdGxBZGFwdGVyIiwicnRsIiwicmVjdFgiLCJzZXRXaWR0aCIsInhQbHVzIiwibGVmdEZvckx0ciIsIml0ZW1XaWR0aCIsImdldFJpZ2h0VG9MZWZ0QWRhcHRlciIsIl9pdGVtV2lkdGgiLCJvdmVycmlkZVRleHREaXJlY3Rpb24iLCJkaXJlY3Rpb24iLCJvcmlnaW5hbCIsImdldFByb3BlcnR5UHJpb3JpdHkiLCJzZXRQcm9wZXJ0eSIsInByZXZUZXh0RGlyZWN0aW9uIiwicmVzdG9yZVRleHREaXJlY3Rpb24iLCJwcm9wZXJ0eUZuIiwiYmV0d2VlbiIsImNvbXBhcmUiLCJub3JtYWxpemUiLCJub3JtYWxpemVTZWdtZW50IiwiX2JvdW5kU2VnbWVudCIsInNlZ21lbnQiLCJzdGFydEJvdW5kIiwiZW5kQm91bmQiLCJnZXRTZWdtZW50IiwicHJldlZhbHVlIiwiaW5zaWRlIiwic3ViU3RhcnQiLCJfYm91bmRTZWdtZW50cyIsInNlZ21lbnRzIiwic3ViIiwicmVhZFN0eWxlIiwiYm9yZGVyQ2FwU3R5bGUiLCJib3JkZXJEYXNoIiwiYm9yZGVyRGFzaE9mZnNldCIsImJvcmRlckpvaW5TdHlsZSIsInN0eWxlQ2hhbmdlZCIsInByZXZTdHlsZSIsInJlcGxhY2VyIiwiQW5pbWF0b3IiLCJfcmVxdWVzdCIsIl9jaGFydHMiLCJfcnVubmluZyIsIl9sYXN0RGF0ZSIsIl9ub3RpZnkiLCJhbmltcyIsImNhbGxiYWNrcyIsIm51bVN0ZXBzIiwiaW5pdGlhbCIsImN1cnJlbnRTdGVwIiwiX3JlZnJlc2giLCJfdXBkYXRlIiwibm93IiwicmVtYWluaW5nIiwicnVubmluZyIsImRyYXciLCJfYWN0aXZlIiwiX3RvdGFsIiwidGljayIsInBvcCIsIl9nZXRBbmltcyIsImNoYXJ0cyIsImNvbXBsZXRlIiwicHJvZ3Jlc3MiLCJsaXN0ZW4iLCJjYiIsInJlZHVjZSIsImFjYyIsImN1ciIsIl9kdXJhdGlvbiIsInN0b3AiLCJjYW5jZWwiLCJyZW1vdmUiLCJhbmltYXRvciIsImludGVycG9sYXRvcnMiLCJib29sZWFuIiwiZmFjdG9yIiwiYzAiLCJudW1iZXIiLCJBbmltYXRpb24iLCJjZmciLCJjdXJyZW50VmFsdWUiLCJfZm4iLCJfZWFzaW5nIiwiX3N0YXJ0IiwiX2xvb3AiLCJfdGFyZ2V0IiwiX3Byb3AiLCJfZnJvbSIsIl90byIsIl9wcm9taXNlcyIsInVwZGF0ZSIsImVsYXBzZWQiLCJ3YWl0IiwicHJvbWlzZXMiLCJQcm9taXNlIiwicmVzIiwicmVqIiwicmVzb2x2ZWQiLCJtZXRob2QiLCJBbmltYXRpb25zIiwiY29uZmlnIiwiX2NoYXJ0IiwiX3Byb3BlcnRpZXMiLCJjb25maWd1cmUiLCJhbmltYXRpb25PcHRpb25zIiwiYW5pbWF0ZWRQcm9wcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJvcHRpb24iLCJfYW5pbWF0ZU9wdGlvbnMiLCJuZXdPcHRpb25zIiwiJHNoYXJlZCIsIiRhbmltYXRpb25zIiwicmVzb2x2ZVRhcmdldE9wdGlvbnMiLCJfY3JlYXRlQW5pbWF0aW9ucyIsImFuaW0iLCJhbGwiLCJhd2FpdEFsbCIsInRoZW4iLCJzY2FsZUNsaXAiLCJhbGxvd2VkT3ZlcmZsb3ciLCJnZXRTb3J0ZWREYXRhc2V0SW5kaWNlcyIsImZpbHRlclZpc2libGUiLCJtZXRhc2V0cyIsIl9nZXRTb3J0ZWREYXRhc2V0TWV0YXMiLCJhcHBseVN0YWNrIiwiZHNJbmRleCIsInNpbmdsZU1vZGUiLCJvdGhlclZhbHVlIiwiaXNTdGFja2VkIiwic3RhY2tlZCIsImdldE9yQ3JlYXRlU3RhY2siLCJzdGFja3MiLCJzdGFja0tleSIsImluZGV4VmFsdWUiLCJzdWJTdGFjayIsImdldExhc3RJbmRleEluU3RhY2siLCJ2U2NhbGUiLCJwb3NpdGl2ZSIsImdldE1hdGNoaW5nVmlzaWJsZU1ldGFzIiwidXBkYXRlU3RhY2tzIiwiY29udHJvbGxlciIsIl9jYWNoZWRNZXRhIiwiX3N0YWNrcyIsImlBeGlzIiwidkF4aXMiLCJpbmRleFNjYWxlIiwidmFsdWVTY2FsZSIsImdldFN0YWNrS2V5IiwiX3RvcCIsIl9ib3R0b20iLCJfdmlzdWFsVmFsdWVzIiwiZ2V0Rmlyc3RTY2FsZUlkIiwic2hpZnQiLCJjbGVhclN0YWNrcyIsImlzRGlyZWN0VXBkYXRlTW9kZSIsImNsb25lSWZOb3RTaGFyZWQiLCJjYWNoZWQiLCJzaGFyZWQiLCJEYXRhc2V0Q29udHJvbGxlciIsInN0YXRpYyIsIl9jYWNoZWREYXRhT3B0cyIsImdldE1ldGEiLCJfdHlwZSIsIl9kYXRhIiwiX29iamVjdERhdGEiLCJfc2hhcmVkT3B0aW9ucyIsIl9kcmF3U3RhcnQiLCJfZHJhd0NvdW50IiwiZW5hYmxlT3B0aW9uU2hhcmluZyIsInN1cHBvcnRzRGVjaW1hdGlvbiIsIiRjb250ZXh0IiwiX3N5bmNMaXN0IiwiZGF0YXNldEVsZW1lbnRUeXBlIiwiZGF0YUVsZW1lbnRUeXBlIiwiaW5pdGlhbGl6ZSIsImxpbmtTY2FsZXMiLCJfc3RhY2tlZCIsImFkZEVsZW1lbnRzIiwiaXNQbHVnaW5FbmFibGVkIiwidXBkYXRlSW5kZXgiLCJkYXRhc2V0IiwiZ2V0RGF0YXNldCIsImNob29zZUlkIiwieGlkIiwieEF4aXNJRCIsInlpZCIsInlBeGlzSUQiLCJyaWQiLCJyQXhpc0lEIiwiaWlkIiwiaUF4aXNJRCIsInZpZCIsInZBeGlzSUQiLCJnZXRTY2FsZUZvcklkIiwiclNjYWxlIiwiZ2V0RGF0YXNldE1ldGEiLCJzY2FsZUlEIiwiX2dldE90aGVyU2NhbGUiLCJyZXNldCIsIl9kZXN0cm95IiwiX2RhdGFDaGVjayIsImFkYXRhIiwiY29udmVydE9iamVjdERhdGFUb0FycmF5IiwiaXNFeHRlbnNpYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJiYXNlIiwib2JqZWN0IiwiYnVpbGRPclVwZGF0ZUVsZW1lbnRzIiwicmVzZXROZXdFbGVtZW50cyIsInN0YWNrQ2hhbmdlZCIsIm9sZFN0YWNrZWQiLCJfcmVzeW5jRWxlbWVudHMiLCJzY29wZUtleXMiLCJkYXRhc2V0U2NvcGVLZXlzIiwiZ2V0T3B0aW9uU2NvcGVzIiwiY3JlYXRlUmVzb2x2ZXIiLCJzb3J0ZWQiLCJwYXJzZUFycmF5RGF0YSIsInBhcnNlT2JqZWN0RGF0YSIsInBhcnNlUHJpbWl0aXZlRGF0YSIsImlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2IiwibGFiZWxzIiwiZ2V0TGFiZWxzIiwic2luZ2xlU2NhbGUiLCJ4QXhpc0tleSIsInlBeGlzS2V5IiwiZ2V0UGFyc2VkIiwiZ2V0RGF0YUVsZW1lbnQiLCJ1cGRhdGVSYW5nZUZyb21QYXJzZWQiLCJwYXJzZWRWYWx1ZSIsImdldE1pbk1heCIsImNhblN0YWNrIiwib3RoZXJTY2FsZSIsImhpZGRlbiIsImNyZWF0ZVN0YWNrIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJvdGhlck1pbiIsIm90aGVyTWF4IiwiX3NraXAiLCJnZXRBbGxQYXJzZWRWYWx1ZXMiLCJnZXRNYXhPdmVyZmxvdyIsImdldExhYmVsQW5kVmFsdWUiLCJsYWJlbCIsImdldExhYmVsRm9yVmFsdWUiLCJfY2xpcCIsImRpc2FibGVkIiwidG9DbGlwIiwiZGVmYXVsdENsaXAiLCJjaGFydEFyZWEiLCJyZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zIiwicmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyIsImRhdGFJbmRleCIsInJhdyIsImNyZWF0ZURhdGFDb250ZXh0IiwiY3JlYXRlRGF0YXNldENvbnRleHQiLCJfcmVzb2x2ZUVsZW1lbnRPcHRpb25zIiwiZWxlbWVudFR5cGUiLCJzaGFyaW5nIiwiZGF0YXNldEVsZW1lbnRTY29wZUtleXMiLCJyZXNvbHZlTmFtZWRPcHRpb25zIiwiZnJlZXplIiwiX3Jlc29sdmVBbmltYXRpb25zIiwidHJhbnNpdGlvbiIsImRhdGFzZXRBbmltYXRpb25TY29wZUtleXMiLCJnZXRTaGFyZWRPcHRpb25zIiwiaW5jbHVkZU9wdGlvbnMiLCJzaGFyZWRPcHRpb25zIiwiX2FuaW1hdGlvbnNEaXNhYmxlZCIsIl9nZXRTaGFyZWRPcHRpb25zIiwiZmlyc3RPcHRzIiwicHJldmlvdXNseVNoYXJlZE9wdGlvbnMiLCJ1cGRhdGVTaGFyZWRPcHRpb25zIiwidXBkYXRlRWxlbWVudCIsIl9zZXRTdHlsZSIsInJlbW92ZUhvdmVyU3R5bGUiLCJzZXRIb3ZlclN0eWxlIiwiX3JlbW92ZURhdGFzZXRIb3ZlclN0eWxlIiwiX3NldERhdGFzZXRIb3ZlclN0eWxlIiwiYXJnMSIsImFyZzIiLCJudW1NZXRhIiwibnVtRGF0YSIsIl9pbnNlcnRFbGVtZW50cyIsIl9yZW1vdmVFbGVtZW50cyIsIm1vdmUiLCJ1cGRhdGVFbGVtZW50cyIsInJlbW92ZWQiLCJfc3luYyIsIl9kYXRhQ2hhbmdlcyIsIl9vbkRhdGFQdXNoIiwiX29uRGF0YVBvcCIsIl9vbkRhdGFTaGlmdCIsIl9vbkRhdGFTcGxpY2UiLCJuZXdDb3VudCIsIl9vbkRhdGFVbnNoaWZ0IiwiY29tcHV0ZU1pblNhbXBsZVNpemUiLCJfY2FjaGUiLCIkYmFyIiwidmlzaWJsZU1ldGFzIiwiY29uY2F0Iiwic29ydCIsImdldEFsbFNjYWxlVmFsdWVzIiwiY3VyciIsIl9sZW5ndGgiLCJ1cGRhdGVNaW5BbmRQcmV2IiwiZ2V0UGl4ZWxGb3JUaWNrIiwicGFyc2VWYWx1ZSIsImVudHJ5Iiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwiYmFyU3RhcnQiLCJiYXJFbmQiLCJfY3VzdG9tIiwicGFyc2VGbG9hdEJhciIsInBhcnNlQXJyYXlPclByaW1pdGl2ZSIsImlzRmxvYXRCYXIiLCJjdXN0b20iLCJzZXRCb3JkZXJTa2lwcGVkIiwiZWRnZSIsImJvcmRlclNraXBwZWQiLCJob3Jpem9udGFsIiwiYm9yZGVyUHJvcHMiLCJlbmFibGVCb3JkZXJSYWRpdXMiLCJwYXJzZUVkZ2UiLCJvcmlnIiwidjIiLCJzdGFydEVuZCIsInNldEluZmxhdGVBbW91bnQiLCJpbmZsYXRlQW1vdW50IiwiRG91Z2hudXRDb250cm9sbGVyIiwiYW5pbWF0ZVJvdGF0ZSIsImFuaW1hdGVTY2FsZSIsImN1dG91dCIsImNpcmN1bWZlcmVuY2UiLCJzcGFjaW5nIiwiYXNwZWN0UmF0aW8iLCJsZWdlbmQiLCJnZW5lcmF0ZUxhYmVscyIsImZvbnRDb2xvciIsImdldERhdGFWaXNpYmlsaXR5IiwibGVnZW5kSXRlbSIsInRvZ2dsZURhdGFWaXNpYmlsaXR5Iiwic3VwZXIiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiZ2V0dGVyIiwiX2dldFJvdGF0aW9uIiwiX2dldENpcmN1bWZlcmVuY2UiLCJfZ2V0Um90YXRpb25FeHRlbnRzIiwiaXNEYXRhc2V0VmlzaWJsZSIsImFyY3MiLCJnZXRNYXhCb3JkZXJXaWR0aCIsImdldE1heE9mZnNldCIsIm1heFNpemUiLCJjaGFydFdlaWdodCIsIl9nZXRSaW5nV2VpZ2h0IiwicmF0aW9YIiwicmF0aW9ZIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwic3RhcnRYIiwic3RhcnRZIiwiZW5kWCIsImVuZFkiLCJjYWxjTWF4IiwiY2FsY01pbiIsIm1heFgiLCJtYXhZIiwibWluWCIsIm1pblkiLCJnZXRSYXRpb0FuZE9mZnNldCIsIm1heEhlaWdodCIsIm1heFJhZGl1cyIsInJhZGl1c0xlbmd0aCIsIl9nZXRWaXNpYmxlRGF0YXNldFdlaWdodFRvdGFsIiwidG90YWwiLCJjYWxjdWxhdGVUb3RhbCIsIl9nZXRSaW5nV2VpZ2h0T2Zmc2V0IiwiX2NpcmN1bWZlcmVuY2UiLCJjYWxjdWxhdGVDaXJjdW1mZXJlbmNlIiwiYW5pbWF0aW9uT3B0cyIsImNlbnRlclgiLCJjZW50ZXJZIiwibWV0YURhdGEiLCJib3JkZXJBbGlnbiIsImhvdmVyQm9yZGVyV2lkdGgiLCJob3Zlck9mZnNldCIsInJpbmdXZWlnaHRPZmZzZXQiLCJQb2xhckFyZWFDb250cm9sbGVyIiwiYW5nbGVMaW5lcyIsImNpcmN1bGFyIiwicG9pbnRMYWJlbHMiLCJiaW5kIiwiX3VwZGF0ZVJhZGl1cyIsIm1pblNpemUiLCJjdXRvdXRQZXJjZW50YWdlIiwiZ2V0VmlzaWJsZURhdGFzZXRDb3VudCIsInhDZW50ZXIiLCJ5Q2VudGVyIiwiZGF0YXNldFN0YXJ0QW5nbGUiLCJnZXRJbmRleEFuZ2xlIiwiZGVmYXVsdEFuZ2xlIiwiY291bnRWaXNpYmxlRWxlbWVudHMiLCJfY29tcHV0ZUFuZ2xlIiwiZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUiLCJjb250cm9sbGVycyIsIl9fcHJvdG9fXyIsIkJhckNvbnRyb2xsZXIiLCJjYXRlZ29yeVBlcmNlbnRhZ2UiLCJiYXJQZXJjZW50YWdlIiwiZ3JvdXBlZCIsIl9pbmRleF8iLCJfdmFsdWVfIiwiaUF4aXNLZXkiLCJ2QXhpc0tleSIsImJhcnMiLCJnZXRCYXNlUGl4ZWwiLCJpc0hvcml6b250YWwiLCJydWxlciIsIl9nZXRSdWxlciIsInZwaXhlbHMiLCJoZWFkIiwiX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzIiwiaXBpeGVscyIsIl9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyIsImNlbnRlciIsIl9nZXRTdGFja3MiLCJza2lwTnVsbCIsIl9nZXRTdGFja0NvdW50IiwiX2dldFN0YWNrSW5kZXgiLCJwaXhlbHMiLCJiYXJUaGlja25lc3MiLCJfc3RhcnRQaXhlbCIsIl9lbmRQaXhlbCIsInN0YWNrQ291bnQiLCJiYXNlVmFsdWUiLCJtaW5CYXJMZW5ndGgiLCJhY3R1YWxCYXNlIiwiZmxvYXRpbmciLCJiYXJTaWduIiwic3RhcnRQaXhlbCIsImdldFBpeGVsRm9yRGVjaW1hbCIsImVuZFBpeGVsIiwiZ2V0VmFsdWVGb3JQaXhlbCIsImhhbGZHcmlkIiwiZ2V0TGluZVdpZHRoRm9yVmFsdWUiLCJtYXhCYXJUaGlja25lc3MiLCJJbmZpbml0eSIsInBlcmNlbnQiLCJjaHVuayIsImNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMiLCJ0aGlja25lc3MiLCJjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMiLCJzdGFja0luZGV4IiwicmVjdHMiLCJCdWJibGVDb250cm9sbGVyIiwiTGluZUNvbnRyb2xsZXIiLCJfZGF0YXNldCIsIl9kYXRhc2V0SW5kZXgiLCJfZGVjaW1hdGVkIiwiYW5pbWF0ZWQiLCJtYXhHYXBMZW5ndGgiLCJkaXJlY3RVcGRhdGUiLCJwb2ludHNDb3VudCIsInByZXZQYXJzZWQiLCJudWxsRGF0YSIsImxhc3RQb2ludCIsInVwZGF0ZUNvbnRyb2xQb2ludHMiLCJQaWVDb250cm9sbGVyIiwiUmFkYXJDb250cm9sbGVyIiwiX2Z1bGxMb29wIiwicG9pbnRQb3NpdGlvbiIsImdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSIsIlNjYXR0ZXJDb250cm9sbGVyIiwicmVnaXN0cnkiLCJnZXRFbGVtZW50IiwiRGF0ZUFkYXB0ZXJCYXNlIiwibWVtYmVycyIsImluaXQiLCJmb3JtYXRzIiwiZGlmZiIsInN0YXJ0T2YiLCJlbmRPZiIsImFkYXB0ZXJzIiwiYmluYXJ5U2VhcmNoIiwibWV0YXNldCIsImxvb2t1cE1ldGhvZCIsIl9yZXZlcnNlUGl4ZWxzIiwiZ2V0UmFuZ2UiLCJldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMiLCJwb3NpdGlvbiIsImhhbmRsZXIiLCJnZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzIiwiZ2V0SW50ZXJzZWN0SXRlbXMiLCJ1c2VGaW5hbFBvc2l0aW9uIiwiaXNQb2ludEluQXJlYSIsImluUmFuZ2UiLCJnZXROZWFyZXN0SXRlbXMiLCJkaXN0YW5jZU1ldHJpYyIsInVzZVgiLCJ1c2VZIiwiZGVsdGFYIiwiZGVsdGFZIiwiZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzIiwibWluRGlzdGFuY2UiLCJnZXRDZW50ZXJQb2ludCIsImdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyIsImdldFByb3BzIiwiZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zIiwiZ2V0QXhpc0l0ZW1zIiwicmFuZ2VNZXRob2QiLCJpbnRlcnNlY3RzSXRlbSIsIkludGVyYWN0aW9uIiwibW9kZXMiLCJuZWFyZXN0IiwiU1RBVElDX1BPU0lUSU9OUyIsImZpbHRlckJ5UG9zaXRpb24iLCJmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMiLCJzb3J0QnlXZWlnaHQiLCJnZXRDb21iaW5lZE1heCIsIm1heFBhZGRpbmciLCJ1cGRhdGVNYXhQYWRkaW5nIiwiYm94UGFkZGluZyIsInVwZGF0ZURpbXMiLCJwYXJhbXMiLCJsYXlvdXQiLCJnZXRQYWRkaW5nIiwibmV3V2lkdGgiLCJvdXRlcldpZHRoIiwibmV3SGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJ3aWR0aENoYW5nZWQiLCJoZWlnaHRDaGFuZ2VkIiwic2FtZSIsIm90aGVyIiwiZ2V0TWFyZ2lucyIsIm1hcmdpbkZvclBvc2l0aW9ucyIsImZpdEJveGVzIiwiYm94ZXMiLCJyZWZpdEJveGVzIiwicmVmaXQiLCJmdWxsU2l6ZSIsInNldEJveERpbXMiLCJwbGFjZUJveGVzIiwidXNlclBhZGRpbmciLCJwbGFjZWQiLCJzdGFja1dlaWdodCIsImxheW91dHMiLCJhZGRCb3giLCJfbGF5ZXJzIiwieiIsInJlbW92ZUJveCIsImxheW91dEl0ZW0iLCJtaW5QYWRkaW5nIiwiYXZhaWxhYmxlV2lkdGgiLCJhdmFpbGFibGVIZWlnaHQiLCJsYXlvdXRCb3hlcyIsIndyYXBCb3hlcyIsIndyYXAiLCJjZW50ZXJIb3Jpem9udGFsIiwiY2VudGVyVmVydGljYWwiLCJsZWZ0QW5kVG9wIiwicmlnaHRBbmRCb3R0b20iLCJ2ZXJ0aWNhbCIsImJ1aWxkTGF5b3V0Qm94ZXMiLCJ2ZXJ0aWNhbEJveGVzIiwiaG9yaXpvbnRhbEJveGVzIiwiYmVmb3JlTGF5b3V0IiwidmlzaWJsZVZlcnRpY2FsQm94Q291bnQiLCJ2Qm94TWF4V2lkdGgiLCJoQm94TWF4SGVpZ2h0IiwiYnVpbGRTdGFja3MiLCJzZXRMYXlvdXREaW1zIiwidXBkYXRlUG9zIiwiY2hhbmdlIiwiaGFuZGxlTWF4UGFkZGluZyIsIkJhc2VQbGF0Zm9ybSIsImFjcXVpcmVDb250ZXh0IiwicmVsZWFzZUNvbnRleHQiLCJnZXRNYXhpbXVtU2l6ZSIsImlzQXR0YWNoZWQiLCJ1cGRhdGVDb25maWciLCJCYXNpY1BsYXRmb3JtIiwiRVhQQU5ET19LRVkiLCJFVkVOVF9UWVBFUyIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJkb3duIiwicG9pbnRlcm1vdmUiLCJwb2ludGVydXAiLCJwb2ludGVybGVhdmUiLCJwb2ludGVyb3V0IiwiaXNOdWxsT3JFbXB0eSIsImV2ZW50TGlzdGVuZXJPcHRpb25zIiwicmVtb3ZlTGlzdGVuZXIiLCJub2RlTGlzdENvbnRhaW5zIiwibm9kZUxpc3QiLCJjb250YWlucyIsImNyZWF0ZUF0dGFjaE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiZW50cmllcyIsInRyaWdnZXIiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJjcmVhdGVEZXRhY2hPYnNlcnZlciIsImRycExpc3RlbmluZ0NoYXJ0cyIsIm9sZERldmljZVBpeGVsUmF0aW8iLCJvbldpbmRvd1Jlc2l6ZSIsImRwciIsImNyZWF0ZVJlc2l6ZU9ic2VydmVyIiwiY29udGFpbmVyIiwiY2xpZW50V2lkdGgiLCJSZXNpemVPYnNlcnZlciIsImNvbnRlbnRSZWN0IiwibGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMiLCJyZWxlYXNlT2JzZXJ2ZXIiLCJkaXNjb25uZWN0IiwidW5saXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyIsImNyZWF0ZVByb3h5QW5kTGlzdGVuIiwibmF0aXZlIiwiZnJvbU5hdGl2ZUV2ZW50IiwiYWRkTGlzdGVuZXIiLCJEb21QbGF0Zm9ybSIsInJlbmRlckhlaWdodCIsImdldEF0dHJpYnV0ZSIsInJlbmRlcldpZHRoIiwiZGlzcGxheVdpZHRoIiwiZGlzcGxheUhlaWdodCIsImluaXRDYW52YXMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJwcm94aWVzIiwiJHByb3hpZXMiLCJhdHRhY2giLCJkZXRhY2giLCJiYldpZHRoIiwiYmJIZWlnaHQiLCJtYXJnaW5zIiwiY29udGFpbmVyU2l6ZSIsImNvbnRhaW5lclN0eWxlIiwiY29udGFpbmVyQm9yZGVyIiwiY29udGFpbmVyUGFkZGluZyIsImNsaWVudEhlaWdodCIsImdldENvbnRhaW5lclNpemUiLCJpc0Nvbm5lY3RlZCIsIkVsZW1lbnQiLCJ0b29sdGlwUG9zaXRpb24iLCJoYXNWYWx1ZSIsImZpbmFsIiwibmV3VGlja3MiLCJtYWpvclN0YXJ0IiwibWFqb3JFbmQiLCJjZWlsIiwib2Zmc2V0RnJvbUVkZ2UiLCJnZXRUaWNrc0xpbWl0IiwidGlja3NMZW5ndGgiLCJtYXhUaWNrc0xpbWl0Iiwic2FtcGxlIiwibnVtSXRlbXMiLCJpbmNyZW1lbnQiLCJnZXRQaXhlbEZvckdyaWRMaW5lIiwib2Zmc2V0R3JpZExpbmVzIiwidmFsaWRJbmRleCIsImxpbmVWYWx1ZSIsImdldFRpY2tNYXJrTGVuZ3RoIiwiZ2V0VGl0bGVIZWlnaHQiLCJ0aXRsZUFsaWduIiwicmV2ZXJzZUFsaWduIiwiU2NhbGUiLCJfbWFyZ2lucyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJsYWJlbFJvdGF0aW9uIiwiX3JhbmdlIiwiX2dyaWRMaW5lSXRlbXMiLCJfbGFiZWxJdGVtcyIsIl9sYWJlbFNpemVzIiwiX21heExlbmd0aCIsIl9sb25nZXN0VGV4dENhY2hlIiwiX3VzZXJNYXgiLCJfdXNlck1pbiIsIl9zdWdnZXN0ZWRNYXgiLCJfc3VnZ2VzdGVkTWluIiwiX3RpY2tzTGVuZ3RoIiwiX2JvcmRlclZhbHVlIiwiX2RhdGFMaW1pdHNDYWNoZWQiLCJzdWdnZXN0ZWRNaW4iLCJzdWdnZXN0ZWRNYXgiLCJtZXRhcyIsImdldFRpY2tzIiwieExhYmVscyIsInlMYWJlbHMiLCJnZXRMYWJlbEl0ZW1zIiwiX2NvbXB1dGVMYWJlbEl0ZW1zIiwiYmVmb3JlVXBkYXRlIiwidGlja09wdHMiLCJzYW1wbGVTaXplIiwiYmVmb3JlU2V0RGltZW5zaW9ucyIsInNldERpbWVuc2lvbnMiLCJhZnRlclNldERpbWVuc2lvbnMiLCJiZWZvcmVEYXRhTGltaXRzIiwiZGV0ZXJtaW5lRGF0YUxpbWl0cyIsImFmdGVyRGF0YUxpbWl0cyIsIm1pbm1heCIsImtlZXBaZXJvIiwiX2FkZEdyYWNlIiwiYmVmb3JlQnVpbGRUaWNrcyIsImJ1aWxkVGlja3MiLCJhZnRlckJ1aWxkVGlja3MiLCJzYW1wbGluZ0VuYWJsZWQiLCJfY29udmVydFRpY2tzVG9MYWJlbHMiLCJiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiY2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImRldGVybWluZWRNYXhUaWNrcyIsIl90aWNrU2l6ZSIsIm1heFNjYWxlIiwibWF4Q2hhcnQiLCJkZXRlcm1pbmVNYXhUaWNrcyIsInRpY2tzTGltaXQiLCJtYWpvckluZGljZXMiLCJlbmFibGVkIiwiZ2V0TWFqb3JJbmRpY2VzIiwibnVtTWFqb3JJbmRpY2VzIiwiZmlyc3QiLCJza2lwTWFqb3JzIiwiZXZlbk1ham9yU3BhY2luZyIsImdldEV2ZW5TcGFjaW5nIiwiZmFjdG9ycyIsIl9mYWN0b3JpemUiLCJjYWxjdWxhdGVTcGFjaW5nIiwiYXZnTWFqb3JTcGFjaW5nIiwiYWZ0ZXJBdXRvU2tpcCIsImJlZm9yZUZpdCIsImZpdCIsImFmdGVyRml0IiwiYWZ0ZXJVcGRhdGUiLCJyZXZlcnNlUGl4ZWxzIiwiX2FsaWduVG9QaXhlbHMiLCJhbGlnblRvUGl4ZWxzIiwiX2NhbGxIb29rcyIsIm5vdGlmeVBsdWdpbnMiLCJiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24iLCJnZW5lcmF0ZVRpY2tMYWJlbHMiLCJhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiIsIm51bVRpY2tzIiwibWF4TGFiZWxEaWFnb25hbCIsIl9pc1Zpc2libGUiLCJsYWJlbFNpemVzIiwiX2dldExhYmVsU2l6ZXMiLCJtYXhMYWJlbFdpZHRoIiwid2lkZXN0IiwibWF4TGFiZWxIZWlnaHQiLCJoaWdoZXN0IiwiYXNpbiIsInRpdGxlT3B0cyIsImdyaWRPcHRzIiwidGl0bGVIZWlnaHQiLCJ0aWNrUGFkZGluZyIsImFuZ2xlUmFkaWFucyIsImxhYmVsSGVpZ2h0IiwibGFiZWxXaWR0aCIsIl9jYWxjdWxhdGVQYWRkaW5nIiwiX2hhbmRsZU1hcmdpbnMiLCJpc1JvdGF0ZWQiLCJsYWJlbHNCZWxvd1RpY2tzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFJpZ2h0IiwiaXNGdWxsU2l6ZSIsIl9jb21wdXRlTGFiZWxTaXplcyIsImNhY2hlcyIsIndpZHRocyIsImhlaWdodHMiLCJ0aWNrRm9udCIsImZvbnRTdHJpbmciLCJuZXN0ZWRMYWJlbCIsIndpZGVzdExhYmVsU2l6ZSIsImhpZ2hlc3RMYWJlbFNpemUiLCJfcmVzb2x2ZVRpY2tGb250T3B0aW9ucyIsInZhbHVlQXQiLCJpZHgiLCJkZWNpbWFsIiwiZ2V0RGVjaW1hbEZvclBpeGVsIiwiZ2V0QmFzZVZhbHVlIiwiY3JlYXRlVGlja0NvbnRleHQiLCJvcHRpb25UaWNrcyIsInJvdCIsIl9jb21wdXRlR3JpZExpbmVJdGVtcyIsInRsIiwiYm9yZGVyT3B0cyIsImF4aXNXaWR0aCIsImF4aXNIYWxmV2lkdGgiLCJhbGlnbkJvcmRlclZhbHVlIiwiYm9yZGVyVmFsdWUiLCJhbGlnbmVkTGluZVZhbHVlIiwidHgxIiwidHkxIiwidHgyIiwidHkyIiwieDEiLCJ5MSIsIngyIiwieTIiLCJwb3NpdGlvbkF4aXNJRCIsImxpbWl0Iiwic3RlcCIsIm9wdHNBdEluZGV4Iiwib3B0c0F0SW5kZXhCb3JkZXIiLCJsaW5lQ29sb3IiLCJ0aWNrQm9yZGVyRGFzaCIsInRpY2tCb3JkZXJEYXNoT2Zmc2V0IiwidGlja0FuZFBhZGRpbmciLCJoVGlja0FuZFBhZGRpbmciLCJsaW5lQ291bnQiLCJ0ZXh0T2Zmc2V0IiwiX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQiLCJfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCIsImhhbGZDb3VudCIsInRpY2tUZXh0QWxpZ24iLCJsYWJlbFBhZGRpbmciLCJfY29tcHV0ZUxhYmVsQXJlYSIsImRyYXdCYWNrZ3JvdW5kIiwiZmluZEluZGV4IiwiZHJhd0dyaWQiLCJkcmF3TGluZSIsInNldExpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJkcmF3Qm9yZGVyIiwibGFzdExpbmVXaWR0aCIsImRyYXdMYWJlbHMiLCJyZW5kZXJUZXh0T3B0aW9ucyIsImRyYXdUaXRsZSIsInRpdGxlWCIsInRpdGxlWSIsInRpdGxlQXJncyIsInR6IiwiZ3oiLCJieiIsImF4aXNJRCIsIl9tYXhEaWdpdHMiLCJmb250U2l6ZSIsIlR5cGVkUmVnaXN0cnkiLCJpc0ZvclR5cGUiLCJpc1Byb3RvdHlwZU9mIiwicmVnaXN0ZXIiLCJwYXJlbnRTY29wZSIsImlzSUNoYXJ0Q29tcG9uZW50IiwiaXRlbURlZmF1bHRzIiwiZGVmYXVsdFJvdXRlcyIsInJvdXRlcyIsInByb3BlcnR5UGFydHMiLCJzb3VyY2VOYW1lIiwic291cmNlU2NvcGUiLCJyb3V0ZURlZmF1bHRzIiwicmVnaXN0ZXJEZWZhdWx0cyIsInVucmVnaXN0ZXIiLCJSZWdpc3RyeSIsIl90eXBlZFJlZ2lzdHJpZXMiLCJfZWFjaCIsImFkZENvbnRyb2xsZXJzIiwiYWRkUGx1Z2lucyIsImFkZFNjYWxlcyIsImdldENvbnRyb2xsZXIiLCJfZ2V0IiwiZ2V0UGx1Z2luIiwiZ2V0U2NhbGUiLCJyZW1vdmVDb250cm9sbGVycyIsInJlbW92ZUVsZW1lbnRzIiwicmVtb3ZlUGx1Z2lucyIsInJlbW92ZVNjYWxlcyIsInR5cGVkUmVnaXN0cnkiLCJhcmciLCJyZWciLCJfZ2V0UmVnaXN0cnlGb3JUeXBlIiwiX2V4ZWMiLCJpdGVtUmVnIiwiY29tcG9uZW50IiwiY2FtZWxNZXRob2QiLCJQbHVnaW5TZXJ2aWNlIiwiX2luaXQiLCJub3RpZnkiLCJob29rIiwiX2NyZWF0ZURlc2NyaXB0b3JzIiwiZGVzY3JpcHRvciIsInBsdWdpbiIsImNhbmNlbGFibGUiLCJpbnZhbGlkYXRlIiwiX29sZENhY2hlIiwiX25vdGlmeVN0YXRlQ2hhbmdlcyIsImxvY2FsSWRzIiwiYWxsUGx1Z2lucyIsImdldE9wdHMiLCJwbHVnaW5PcHRzIiwiY3JlYXRlRGVzY3JpcHRvcnMiLCJwcmV2aW91c0Rlc2NyaXB0b3JzIiwic29tZSIsInBsdWdpblNjb3BlS2V5cyIsImdldEluZGV4QXhpcyIsImRhdGFzZXREZWZhdWx0cyIsImlkTWF0Y2hlc0F4aXMiLCJkZXRlcm1pbmVBeGlzIiwic2NhbGVPcHRpb25zIiwiZ2V0QXhpc0Zyb21EYXRhc2V0IiwiaW5pdE9wdGlvbnMiLCJjaGFydERlZmF1bHRzIiwiY29uZmlnU2NhbGVzIiwiY2hhcnRJbmRleEF4aXMiLCJzY2FsZUNvbmYiLCJlcnJvciIsImJvdW5kRHMiLCJyZXRyaWV2ZUF4aXNGcm9tRGF0YXNldHMiLCJkZWZhdWx0SWQiLCJnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzIiwiZGVmYXVsdFNjYWxlT3B0aW9ucyIsImRlZmF1bHRJRCIsImdldEF4aXNGcm9tRGVmYXVsdFNjYWxlSUQiLCJtZXJnZVNjYWxlQ29uZmlnIiwiaW5pdERhdGEiLCJrZXlDYWNoZSIsImtleXNDYWNoZWQiLCJjYWNoZWRLZXlzIiwiZ2VuZXJhdGUiLCJhZGRJZkZvdW5kIiwiQ29uZmlnIiwiX2NvbmZpZyIsImluaXRDb25maWciLCJfc2NvcGVDYWNoZSIsIl9yZXNvbHZlckNhY2hlIiwiY2xlYXJDYWNoZSIsImNsZWFyIiwiZGF0YXNldFR5cGUiLCJhZGRpdGlvbmFsT3B0aW9uU2NvcGVzIiwiX2NhY2hlZFNjb3BlcyIsIm1haW5TY29wZSIsInJlc2V0Q2FjaGUiLCJrZXlMaXN0cyIsImNoYXJ0T3B0aW9uU2NvcGVzIiwic3ViUHJlZml4ZXMiLCJnZXRSZXNvbHZlciIsImhhc0Z1bmN0aW9uIiwibmVlZENvbnRleHQiLCJyZXNvbHZlckNhY2hlIiwiS05PV05fUE9TSVRJT05TIiwicG9zaXRpb25Jc0hvcml6b250YWwiLCJjb21wYXJlMkxldmVsIiwibDEiLCJsMiIsIm9uQW5pbWF0aW9uc0NvbXBsZXRlIiwib25Db21wbGV0ZSIsIm9uQW5pbWF0aW9uUHJvZ3Jlc3MiLCJvblByb2dyZXNzIiwiZ2V0Q2FudmFzIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbnN0YW5jZXMiLCJnZXRDaGFydCIsIm1vdmVOdW1lcmljS2V5cyIsImludEtleSIsImludmFsaWRhdGVQbHVnaW5zIiwidXNlckNvbmZpZyIsImluaXRpYWxDYW52YXMiLCJleGlzdGluZ0NoYXJ0IiwiT2Zmc2NyZWVuQ2FudmFzIiwiX2RldGVjdFBsYXRmb3JtIiwiX29wdGlvbnMiLCJfYXNwZWN0UmF0aW8iLCJfbWV0YXNldHMiLCJfbGFzdEV2ZW50IiwiX2xpc3RlbmVycyIsIl9yZXNwb25zaXZlTGlzdGVuZXJzIiwiX3NvcnRlZE1ldGFzZXRzIiwiX3BsdWdpbnMiLCJfaGlkZGVuSW5kaWNlcyIsImF0dGFjaGVkIiwiX2RvUmVzaXplIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJkZWJvdW5jZSIsInJlc2l6ZURlbGF5IiwiX2luaXRpYWxpemUiLCJiaW5kRXZlbnRzIiwiX3Jlc2l6ZUJlZm9yZURyYXciLCJfcmVzaXplIiwibmV3U2l6ZSIsIm5ld1JhdGlvIiwib25SZXNpemUiLCJyZW5kZXIiLCJlbnN1cmVTY2FsZXNIYXZlSURzIiwiYXhpc09wdGlvbnMiLCJidWlsZE9yVXBkYXRlU2NhbGVzIiwic2NhbGVPcHRzIiwidXBkYXRlZCIsImlzUmFkaWFsIiwiZHBvc2l0aW9uIiwiZHR5cGUiLCJzY2FsZVR5cGUiLCJoYXNVcGRhdGVkIiwiX3VwZGF0ZU1ldGFzZXRzIiwiX2Rlc3Ryb3lEYXRhc2V0TWV0YSIsIl9yZW1vdmVVbnJlZmVyZW5jZWRNZXRhc2V0cyIsImJ1aWxkT3JVcGRhdGVDb250cm9sbGVycyIsIm5ld0NvbnRyb2xsZXJzIiwib3JkZXIiLCJDb250cm9sbGVyQ2xhc3MiLCJfcmVzZXRFbGVtZW50cyIsImFuaW1zRGlzYWJsZWQiLCJfdXBkYXRlU2NhbGVzIiwiX2NoZWNrRXZlbnRCaW5kaW5ncyIsIl91cGRhdGVIaWRkZW5JbmRpY2VzIiwiX21pblBhZGRpbmciLCJfdXBkYXRlTGF5b3V0IiwiX3VwZGF0ZURhdGFzZXRzIiwiX2V2ZW50SGFuZGxlciIsIl91cGRhdGVIb3ZlclN0eWxlcyIsImV4aXN0aW5nRXZlbnRzIiwibmV3RXZlbnRzIiwidW5iaW5kRXZlbnRzIiwiY2hhbmdlcyIsIl9nZXRVbmlmb3JtRGF0YUNoYW5nZXMiLCJkYXRhc2V0Q291bnQiLCJtYWtlU2V0IiwiY2hhbmdlU2V0Iiwibm9BcmVhIiwiX2lkeCIsIl91cGRhdGVEYXRhc2V0IiwibGF5ZXJzIiwiX2RyYXdEYXRhc2V0cyIsIl9kcmF3RGF0YXNldCIsInVzZUNsaXAiLCJnZXREYXRhc2V0QXJlYSIsImdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUiLCJzZXREYXRhc2V0VmlzaWJpbGl0eSIsIl91cGRhdGVWaXNpYmlsaXR5IiwiX3N0b3AiLCJkZXN0cm95IiwidG9CYXNlNjRJbWFnZSIsInRvRGF0YVVSTCIsImJpbmRVc2VyRXZlbnRzIiwiYmluZFJlc3BvbnNpdmVFdmVudHMiLCJfYWRkIiwiX3JlbW92ZSIsImRldGFjaGVkIiwidXBkYXRlSG92ZXJTdHlsZSIsImdldEFjdGl2ZUVsZW1lbnRzIiwic2V0QWN0aXZlRWxlbWVudHMiLCJhY3RpdmVFbGVtZW50cyIsImxhc3RBY3RpdmUiLCJwbHVnaW5JZCIsInJlcGxheSIsImhvdmVyT3B0aW9ucyIsImRlYWN0aXZhdGVkIiwiYWN0aXZhdGVkIiwiaW5DaGFydEFyZWEiLCJldmVudEZpbHRlciIsIl9oYW5kbGVFdmVudCIsIl9nZXRBY3RpdmVFbGVtZW50cyIsImlzQ2xpY2siLCJfaXNDbGlja0V2ZW50IiwibGFzdEV2ZW50IiwiZGV0ZXJtaW5lTGFzdEV2ZW50IiwiclRoZXRhVG9YWSIsInRoZXRhIiwicGF0aEFyYyIsInBpeGVsTWFyZ2luIiwiaW5uZXJSIiwic3BhY2luZ09mZnNldCIsImF2Tm9nU3BhY2luZ1JhZGl1cyIsImFuZ2xlT2Zmc2V0Iiwib3V0ZXJTdGFydCIsIm91dGVyRW5kIiwiaW5uZXJTdGFydCIsImlubmVyRW5kIiwiYW5nbGVEZWx0YSIsImJvcmRlclJhZGl1cyIsImhhbGZUaGlja25lc3MiLCJpbm5lckxpbWl0IiwiY29tcHV0ZU91dGVyTGltaXQiLCJvdXRlckFyY0xpbWl0IiwicGFyc2VCb3JkZXJSYWRpdXMkMSIsIm91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cyIsIm91dGVyRW5kQWRqdXN0ZWRSYWRpdXMiLCJvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSIsIm91dGVyRW5kQWRqdXN0ZWRBbmdsZSIsImlubmVyU3RhcnRBZGp1c3RlZFJhZGl1cyIsImlubmVyRW5kQWRqdXN0ZWRSYWRpdXMiLCJpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSIsImlubmVyRW5kQWRqdXN0ZWRBbmdsZSIsIm91dGVyTWlkQWRqdXN0ZWRBbmdsZSIsInBDZW50ZXIiLCJwNCIsImlubmVyTWlkQWRqdXN0ZWRBbmdsZSIsInA4Iiwib3V0ZXJTdGFydFgiLCJvdXRlclN0YXJ0WSIsIm91dGVyRW5kWCIsIm91dGVyRW5kWSIsInNldFN0eWxlIiwibGluZUNhcCIsImxpbmVKb2luIiwicGF0aFZhcnMiLCJwYXJhbXNTdGFydCIsInBhcmFtc0VuZCIsInNlZ21lbnRTdGFydCIsInNlZ21lbnRFbmQiLCJvdXRzaWRlIiwicGF0aFNlZ21lbnQiLCJsaW5lTWV0aG9kIiwic3RlcHBlZCIsImdldExpbmVNZXRob2QiLCJmYXN0UGF0aFNlZ21lbnQiLCJwcmV2WCIsImxhc3RZIiwiYXZnWCIsImNvdW50WCIsInBvaW50SW5kZXgiLCJkcmF3WCIsInRydW5jWCIsIl9nZXRTZWdtZW50TWV0aG9kIiwidXNlUGF0aDJEIiwiUGF0aDJEIiwiTGluZUVsZW1lbnQiLCJfcGF0aCIsIl9wb2ludHMiLCJfc2VnbWVudHMiLCJfcG9pbnRzVXBkYXRlZCIsInNlZ21lbnRPcHRpb25zIiwiZmluZFN0YXJ0QW5kRW5kIiwiY2hhcnRDb250ZXh0IiwiYmFzZVN0eWxlIiwiYWRkU3R5bGUiLCJzdCIsImRpciIsInAwIiwicDBEYXRhSW5kZXgiLCJwMURhdGFJbmRleCIsImRvU3BsaXRCeVN0eWxlcyIsInNwbGl0QnlTdHlsZXMiLCJzb2xpZFNlZ21lbnRzIiwiX2NvbXB1dGVTZWdtZW50cyIsIl9pbnRlcnBvbGF0ZSIsIl9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kIiwiaW50ZXJwb2xhdGVkIiwic2VnbWVudE1ldGhvZCIsInBhdGgiLCJzdHJva2VQYXRoV2l0aENhY2hlIiwic3Ryb2tlUGF0aERpcmVjdCIsImluUmFuZ2UkMSIsImhpdFJhZGl1cyIsImdldEJhckJvdW5kcyIsImJhciIsImhhbGYiLCJza2lwT3JMaW1pdCIsInNraXBYIiwic2tpcFkiLCJhZGROb3JtYWxSZWN0UGF0aCIsImluZmxhdGVSZWN0IiwiYW1vdW50IiwicmVmUmVjdCIsIkFyY0VsZW1lbnQiLCJmdWxsQ2lyY2xlcyIsImNoYXJ0WCIsImNoYXJ0WSIsInJBZGp1c3QiLCJiZXR3ZWVuQW5nbGVzIiwid2l0aGluUmFkaXVzIiwiaGFsZkFuZ2xlIiwiaGFsZlJhZGl1cyIsInJhZGl1c09mZnNldCIsImRyYXdBcmMiLCJpbm5lciIsImFuZ2xlTWFyZ2luIiwiY2xpcEFyYyIsIkJhckVsZW1lbnQiLCJvdXRlciIsIm1heFciLCJtYXhIIiwicGFyc2VCb3JkZXJXaWR0aCIsIm1heFIiLCJlbmFibGVCb3JkZXIiLCJwYXJzZUJvcmRlclJhZGl1cyIsImJvdW5kaW5nUmVjdHMiLCJhZGRSZWN0UGF0aCIsIm1vdXNlWCIsIm1vdXNlWSIsImluWFJhbmdlIiwiaW5ZUmFuZ2UiLCJQb2ludEVsZW1lbnQiLCJob3ZlclJhZGl1cyIsIkJPUkRFUl9DT0xPUlMiLCJCQUNLR1JPVU5EX0NPTE9SUyIsImdldEJvcmRlckNvbG9yIiwiZ2V0QmFja2dyb3VuZENvbG9yIiwiY29udGFpbnNDb2xvcnNEZWZpbml0aW9ucyIsInBsdWdpbl9jb2xvcnMiLCJmb3JjZU92ZXJyaWRlIiwiX2FyZ3MiLCJjaGFydE9wdGlvbnMiLCJjb2xvcml6ZXIiLCJjb2xvcml6ZURvdWdobnV0RGF0YXNldCIsImNvbG9yaXplUG9sYXJBcmVhRGF0YXNldCIsImNvbG9yaXplRGVmYXVsdERhdGFzZXQiLCJnZXRDb2xvcml6ZXIiLCJjbGVhbkRlY2ltYXRlZERhdGFzZXQiLCJjbGVhbkRlY2ltYXRlZERhdGEiLCJwbHVnaW5fZGVjaW1hdGlvbiIsImFsZ29yaXRobSIsImJlZm9yZUVsZW1lbnRzVXBkYXRlIiwieEF4aXMiLCJkZWNpbWF0ZWQiLCJnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzU2ltcGxpZmllZCIsInRocmVzaG9sZCIsInNhbXBsZXMiLCJidWNrZXRXaWR0aCIsInNhbXBsZWRJbmRleCIsImVuZEluZGV4IiwibWF4QXJlYVBvaW50IiwibWF4QXJlYSIsIm5leHRBIiwiYXZnWSIsImF2Z1JhbmdlU3RhcnQiLCJhdmdSYW5nZUVuZCIsImF2Z1JhbmdlTGVuZ3RoIiwicmFuZ2VPZmZzIiwicmFuZ2VUbyIsInBvaW50QXgiLCJwb2ludEF5IiwibHR0YkRlY2ltYXRpb24iLCJtaW5JbmRleCIsIm1heEluZGV4Iiwic3RhcnRJbmRleCIsInhNaW4iLCJkeCIsImxhc3RJbmRleCIsImludGVybWVkaWF0ZUluZGV4MSIsImludGVybWVkaWF0ZUluZGV4MiIsIm1pbk1heERlY2ltYXRpb24iLCJfZ2V0Qm91bmRzIiwiX2ZpbmRTZWdtZW50RW5kIiwiX2dldEVkZ2UiLCJfY3JlYXRlQm91bmRhcnlMaW5lIiwiYm91bmRhcnkiLCJsaW5lUG9pbnRzIiwiX3BvaW50c0Zyb21TZWdtZW50cyIsIl9zaG91bGRBcHBseUZpbGwiLCJfcmVzb2x2ZVRhcmdldCIsInByb3BhZ2F0ZSIsInZpc2l0ZWQiLCJfZGVjb2RlRmlsbCIsImZpbGxPcHRpb24iLCJwYXJzZUZpbGxPcHRpb24iLCJmaXJzdENoIiwiZGVjb2RlVGFyZ2V0SW5kZXgiLCJhZGRQb2ludHNCZWxvdyIsInNvdXJjZVBvaW50IiwibGluZXNCZWxvdyIsInBvc3Rwb25lZCIsImZpbmRQb2ludCIsInVuc2hpZnQiLCJwb2ludFZhbHVlIiwiZmlyc3RWYWx1ZSIsImxhc3RWYWx1ZSIsInNpbXBsZUFyYyIsIl9kcmF3ZmlsbCIsImdldExpbmVCeUluZGV4Iiwic291cmNlUG9pbnRzIiwiYmVsb3ciLCJnZXRMaW5lc0JlbG93IiwiX2J1aWxkU3RhY2tMaW5lIiwiX2dldFRhcmdldFZhbHVlIiwiY29tcHV0ZUNpcmN1bGFyQm91bmRhcnkiLCJfZ2V0VGFyZ2V0UGl4ZWwiLCJjb21wdXRlTGluZWFyQm91bmRhcnkiLCJjb21wdXRlQm91bmRhcnkiLCJsaW5lT3B0cyIsImFib3ZlIiwiY2xpcFZlcnRpY2FsIiwiZG9GaWxsIiwiY2xpcFkiLCJsaW5lTG9vcCIsInRwb2ludHMiLCJ0YXJnZXRTZWdtZW50cyIsInRndCIsInN1YkJvdW5kcyIsImZpbGxTb3VyY2VzIiwiZmlsbFNvdXJjZSIsInNyYyIsIm5vdFNoYXBlIiwiY2xpcEJvdW5kcyIsImludGVycG9sYXRlZExpbmVUbyIsInRhcmdldExvb3AiLCJpbnRlcnBvbGF0ZWRQb2ludCIsImFmdGVyRGF0YXNldHNVcGRhdGUiLCIkZmlsbGVyIiwiYmVmb3JlRHJhdyIsImRyYXdUaW1lIiwiYmVmb3JlRGF0YXNldHNEcmF3IiwiYmVmb3JlRGF0YXNldERyYXciLCJnZXRCb3hTaXplIiwibGFiZWxPcHRzIiwiYm94SGVpZ2h0IiwiYm94V2lkdGgiLCJ1c2VQb2ludFN0eWxlIiwicG9pbnRTdHlsZVdpZHRoIiwiaXRlbUhlaWdodCIsIkxlZ2VuZCIsIl9hZGRlZCIsImxlZ2VuZEhpdEJveGVzIiwiX2hvdmVyZWRJdGVtIiwiZG91Z2hudXRNb2RlIiwibGVnZW5kSXRlbXMiLCJjb2x1bW5TaXplcyIsImxpbmVXaWR0aHMiLCJidWlsZExhYmVscyIsImxhYmVsRm9udCIsIl9jb21wdXRlVGl0bGVIZWlnaHQiLCJfZml0Um93cyIsIl9maXRDb2xzIiwiaGl0Ym94ZXMiLCJ0b3RhbEhlaWdodCIsInJvdyIsIl9pdGVtSGVpZ2h0IiwiaGVpZ2h0TGltaXQiLCJ0b3RhbFdpZHRoIiwiY3VycmVudENvbFdpZHRoIiwiY3VycmVudENvbEhlaWdodCIsImNvbCIsImxlZ2VuZEl0ZW1UZXh0IiwiY2FsY3VsYXRlSXRlbVdpZHRoIiwiZm9udExpbmVIZWlnaHQiLCJjYWxjdWxhdGVMZWdlbmRJdGVtSGVpZ2h0IiwiY2FsY3VsYXRlSXRlbUhlaWdodCIsImNhbGN1bGF0ZUl0ZW1TaXplIiwiYWRqdXN0SGl0Qm94ZXMiLCJydGxIZWxwZXIiLCJoaXRib3giLCJfZHJhdyIsImRlZmF1bHRDb2xvciIsImhhbGZGb250U2l6ZSIsImN1cnNvciIsInRleHREaXJlY3Rpb24iLCJsaW5lRGFzaCIsImRyYXdPcHRpb25zIiwiU1FSVDIiLCJ5Qm94VG9wIiwieEJveExlZnQiLCJkcmF3TGVnZW5kQm94IiwiX3RleHRYIiwidGl0bGVGb250IiwidGl0bGVQYWRkaW5nIiwidG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUiLCJfZ2V0TGVnZW5kSXRlbUF0IiwiaGl0Qm94IiwibGgiLCJoYW5kbGVFdmVudCIsIm9uTGVhdmUiLCJpc0xpc3RlbmVkIiwiaG92ZXJlZEl0ZW0iLCJzYW1lSXRlbSIsInBsdWdpbl9sZWdlbmQiLCJfZWxlbWVudCIsImFmdGVyRXZlbnQiLCJjaSIsInVzZUJvcmRlclJhZGl1cyIsIlRpdGxlIiwiX3BhZGRpbmciLCJ0ZXh0U2l6ZSIsIl9kcmF3QXJncyIsImZvbnRPcHRzIiwicGx1Z2luX3RpdGxlIiwidGl0bGVCbG9jayIsImNyZWF0ZVRpdGxlIiwiV2Vha01hcCIsInBsdWdpbl9zdWJ0aXRsZSIsInBvc2l0aW9uZXJzIiwiYXZlcmFnZSIsImV2ZW50UG9zaXRpb24iLCJuZWFyZXN0RWxlbWVudCIsInRwIiwicHVzaE9yQ29uY2F0IiwidG9QdXNoIiwic3BsaXROZXdsaW5lcyIsIlN0cmluZyIsImNyZWF0ZVRvb2x0aXBJdGVtIiwiZm9ybWF0dGVkVmFsdWUiLCJnZXRUb29sdGlwU2l6ZSIsInRvb2x0aXAiLCJib2R5IiwiZm9vdGVyIiwiYm9keUZvbnQiLCJmb290ZXJGb250IiwidGl0bGVMaW5lQ291bnQiLCJmb290ZXJMaW5lQ291bnQiLCJib2R5TGluZUl0ZW1Db3VudCIsImNvbWJpbmVkQm9keUxlbmd0aCIsImJvZHlJdGVtIiwiYmVmb3JlIiwiYWZ0ZXIiLCJiZWZvcmVCb2R5IiwiYWZ0ZXJCb2R5IiwidGl0bGVTcGFjaW5nIiwidGl0bGVNYXJnaW5Cb3R0b20iLCJkaXNwbGF5Q29sb3JzIiwiYm9keVNwYWNpbmciLCJmb290ZXJNYXJnaW5Ub3AiLCJmb290ZXJTcGFjaW5nIiwid2lkdGhQYWRkaW5nIiwibWF4TGluZVdpZHRoIiwiZGV0ZXJtaW5lWEFsaWduIiwieUFsaWduIiwiY2hhcnRXaWR0aCIsInhBbGlnbiIsImNhcmV0IiwiY2FyZXRTaXplIiwiY2FyZXRQYWRkaW5nIiwiZG9lc05vdEZpdFdpdGhBbGlnbiIsImRldGVybWluZUFsaWdubWVudCIsImRldGVybWluZVlBbGlnbiIsImdldEJhY2tncm91bmRQb2ludCIsImFsaWdubWVudCIsInBhZGRpbmdBbmRTaXplIiwiYWxpZ25YIiwiYWxpZ25ZIiwiZ2V0QWxpZ25lZFgiLCJnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyIsIm92ZXJyaWRlQ2FsbGJhY2tzIiwiZGVmYXVsdENhbGxiYWNrcyIsImJlZm9yZVRpdGxlIiwidG9vbHRpcEl0ZW1zIiwibGFiZWxDb3VudCIsImFmdGVyVGl0bGUiLCJiZWZvcmVMYWJlbCIsInRvb2x0aXBJdGVtIiwibGFiZWxDb2xvciIsImxhYmVsVGV4dENvbG9yIiwiYm9keUNvbG9yIiwibGFiZWxQb2ludFN0eWxlIiwiYWZ0ZXJMYWJlbCIsImJlZm9yZUZvb3RlciIsImFmdGVyRm9vdGVyIiwiaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2siLCJUb29sdGlwIiwib3BhY2l0eSIsIl9ldmVudFBvc2l0aW9uIiwiX3NpemUiLCJfY2FjaGVkQW5pbWF0aW9ucyIsIl90b29sdGlwSXRlbXMiLCJkYXRhUG9pbnRzIiwiY2FyZXRYIiwiY2FyZXRZIiwibGFiZWxDb2xvcnMiLCJsYWJlbFBvaW50U3R5bGVzIiwibGFiZWxUZXh0Q29sb3JzIiwiZ2V0VGl0bGUiLCJnZXRCZWZvcmVCb2R5IiwiZ2V0Qm9keSIsImJvZHlJdGVtcyIsInNjb3BlZCIsImdldEFmdGVyQm9keSIsImdldEZvb3RlciIsIl9jcmVhdGVJdGVtcyIsIml0ZW1Tb3J0IiwicG9zaXRpb25BbmRTaXplIiwiYmFja2dyb3VuZFBvaW50IiwiZXh0ZXJuYWwiLCJkcmF3Q2FyZXQiLCJ0b29sdGlwUG9pbnQiLCJjYXJldFBvc2l0aW9uIiwiZ2V0Q2FyZXRQb3NpdGlvbiIsIngzIiwieTMiLCJwdFgiLCJwdFkiLCJ0aXRsZUNvbG9yIiwiX2RyYXdDb2xvckJveCIsImNvbG9yWCIsInJ0bENvbG9yWCIsInlPZmZTZXQiLCJjb2xvclkiLCJtdWx0aUtleUJhY2tncm91bmQiLCJvdXRlclgiLCJpbm5lclgiLCJzdHJva2VSZWN0IiwiZHJhd0JvZHkiLCJib2R5QWxpZ24iLCJib2R5TGluZUhlaWdodCIsInhMaW5lUGFkZGluZyIsImZpbGxMaW5lT2ZUZXh0IiwiYm9keUFsaWduRm9yQ2FsY3VsYXRpb24iLCJ0ZXh0Q29sb3IiLCJkcmF3Rm9vdGVyIiwiZm9vdGVyQWxpZ24iLCJmb290ZXJDb2xvciIsInRvb2x0aXBTaXplIiwicXVhZHJhdGljQ3VydmVUbyIsIl91cGRhdGVBbmltYXRpb25UYXJnZXQiLCJhbmltWCIsImFuaW1ZIiwiX3dpbGxSZW5kZXIiLCJoYXNUb29sdGlwQ29udGVudCIsImdsb2JhbEFscGhhIiwicG9zaXRpb25DaGFuZ2VkIiwiX3Bvc2l0aW9uQ2hhbmdlZCIsIl9pZ25vcmVSZXBsYXlFdmVudHMiLCJwbHVnaW5fdG9vbHRpcCIsImFmdGVySW5pdCIsImFmdGVyRHJhdyIsIkNvbG9ycyIsIkRlY2ltYXRpb24iLCJGaWxsZXIiLCJTdWJUaXRsZSIsIl9nZXRMYWJlbEZvclZhbHVlIiwicmVsYXRpdmVMYWJlbFNpemUiLCJtaW5TcGFjaW5nIiwiTGluZWFyU2NhbGVCYXNlIiwiX3N0YXJ0VmFsdWUiLCJfZW5kVmFsdWUiLCJfdmFsdWVSYW5nZSIsImhhbmRsZVRpY2tSYW5nZU9wdGlvbnMiLCJzZXRNaW4iLCJzZXRNYXgiLCJtaW5TaWduIiwibWF4U2lnbiIsImdldFRpY2tMaW1pdCIsIm1heFRpY2tzIiwic3RlcFNpemUiLCJjb21wdXRlVGlja0xpbWl0IiwiZ2VuZXJhdGlvbk9wdGlvbnMiLCJkYXRhUmFuZ2UiLCJwcmVjaXNpb24iLCJtYXhEaWdpdHMiLCJpbmNsdWRlQm91bmRzIiwidW5pdCIsIm1heFNwYWNlcyIsInJtaW4iLCJybWF4IiwiY291bnREZWZpbmVkIiwibmljZU1pbiIsIm5pY2VNYXgiLCJudW1TcGFjZXMiLCJyb3VuZGVkIiwiYWxtb3N0V2hvbGUiLCJkZWNpbWFsUGxhY2VzIiwiZ2VuZXJhdGVUaWNrcyQxIiwiTGluZWFyU2NhbGUiLCJsb2cxMEZsb29yIiwiY2hhbmdlRXhwb25lbnQiLCJpc01ham9yIiwidGlja1ZhbCIsInN0ZXBzIiwicmFuZ2VFeHAiLCJyYW5nZVN0ZXAiLCJMb2dhcml0aG1pY1NjYWxlIiwiX3plcm8iLCJtaW5FeHAiLCJleHAiLCJzdGFydEV4cCIsImxhc3RUaWNrIiwiZ2VuZXJhdGVUaWNrcyIsImdldFRpY2tCYWNrZHJvcEhlaWdodCIsImRldGVybWluZUxpbWl0cyIsInVwZGF0ZUxpbWl0cyIsImxpbWl0cyIsImhMaW1pdHMiLCJ2TGltaXRzIiwiY3JlYXRlUG9pbnRMYWJlbEl0ZW0iLCJpdGVtT3B0cyIsIm91dGVyRGlzdGFuY2UiLCJkcmF3aW5nQXJlYSIsImV4dHJhIiwiYWRkaXRpb25hbEFuZ2xlIiwicG9pbnRMYWJlbFBvc2l0aW9uIiwiZ2V0UG9pbnRQb3NpdGlvbiIsInlGb3JBbmdsZSIsImdldFRleHRBbGlnbkZvckFuZ2xlIiwiaXNOb3RPdmVybGFwcGVkIiwiZHJhd1BvaW50TGFiZWxCb3giLCJiYWNrZHJvcExlZnQiLCJiYWNrZHJvcFRvcCIsImJhY2tkcm9wV2lkdGgiLCJiYWNrZHJvcEhlaWdodCIsInBhdGhSYWRpdXNMaW5lIiwiUmFkaWFsTGluZWFyU2NhbGUiLCJhbmltYXRlIiwiY2VudGVyUG9pbnRMYWJlbHMiLCJfcG9pbnRMYWJlbHMiLCJfcG9pbnRMYWJlbEl0ZW1zIiwidmFsdWVDb3VudCIsInBvaW50TGFiZWxPcHRzIiwiZ2V0UG9pbnRMYWJlbENvbnRleHQiLCJwbEZvbnQiLCJzZXRDZW50ZXJQb2ludCIsImJ1aWxkUG9pbnRMYWJlbEl0ZW1zIiwiZml0V2l0aFBvaW50TGFiZWxzIiwibGVmdE1vdmVtZW50IiwicmlnaHRNb3ZlbWVudCIsInRvcE1vdmVtZW50IiwiYm90dG9tTW92ZW1lbnQiLCJzY2FsaW5nRmFjdG9yIiwiZ2V0VmFsdWVGb3JEaXN0YW5jZUZyb21DZW50ZXIiLCJzY2FsZWREaXN0YW5jZSIsInBvaW50TGFiZWwiLCJjcmVhdGVQb2ludExhYmVsQ29udGV4dCIsImRpc3RhbmNlRnJvbUNlbnRlciIsImdldEJhc2VQb3NpdGlvbiIsImdldFBvaW50TGFiZWxQb3NpdGlvbiIsImRyYXdQb2ludExhYmVscyIsImdyaWRMaW5lT3B0cyIsImRyYXdSYWRpdXNMaW5lIiwiSU5URVJWQUxTIiwibWlsbGlzZWNvbmQiLCJjb21tb24iLCJzZWNvbmQiLCJtaW51dGUiLCJob3VyIiwiZGF5Iiwid2VlayIsIm1vbnRoIiwicXVhcnRlciIsInllYXIiLCJVTklUUyIsInNvcnRlciIsImFkYXB0ZXIiLCJfYWRhcHRlciIsInBhcnNlciIsImlzb1dlZWtkYXkiLCJfcGFyc2VPcHRzIiwiZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyIsIm1pblVuaXQiLCJjYXBhY2l0eSIsImludGVydmFsIiwiTUFYX1NBRkVfSU5URUdFUiIsImFkZFRpY2siLCJ0aW1lIiwidGltZXN0YW1wcyIsInRpY2tzRnJvbVRpbWVzdGFtcHMiLCJtYWpvclVuaXQiLCJzZXRNYWpvclRpY2tzIiwiVGltZVNjYWxlIiwiZGlzcGxheUZvcm1hdHMiLCJfdW5pdCIsIl9tYWpvclVuaXQiLCJfb2Zmc2V0cyIsIl9ub3JtYWxpemVkIiwibm9ybWFsaXplZCIsIl9hcHBseUJvdW5kcyIsIl9nZXRMYWJlbEJvdW5kcyIsImdldExhYmVsVGltZXN0YW1wcyIsInRpbWVPcHRzIiwiX2dlbmVyYXRlIiwiX2ZpbHRlckJldHdlZW4iLCJfZ2V0TGFiZWxDYXBhY2l0eSIsImRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nIiwiZGV0ZXJtaW5lTWFqb3JVbml0IiwiaW5pdE9mZnNldHMiLCJvZmZzZXRBZnRlckF1dG9za2lwIiwiZ2V0RGVjaW1hbEZvclZhbHVlIiwid2Vla2RheSIsImhhc1dlZWtkYXkiLCJnZXREYXRhVGltZXN0YW1wcyIsInRvb2x0aXBGb3JtYXQiLCJkYXRldGltZSIsImZtdCIsIl90aWNrRm9ybWF0RnVuY3Rpb24iLCJtaW5vckZvcm1hdCIsIm1ham9yRm9ybWF0Iiwib2Zmc2V0cyIsIl9nZXRMYWJlbFNpemUiLCJ0aWNrc09wdHMiLCJ0aWNrTGFiZWxXaWR0aCIsImNvc1JvdGF0aW9uIiwic2luUm90YXRpb24iLCJ0aWNrRm9udFNpemUiLCJleGFtcGxlVGltZSIsImV4YW1wbGVMYWJlbCIsInByZXZTb3VyY2UiLCJuZXh0U291cmNlIiwicHJldlRhcmdldCIsIm5leHRUYXJnZXQiLCJzcGFuIiwiQ2F0ZWdvcnlTY2FsZSIsIl9hZGRlZExhYmVscyIsImFkZGVkIiwiYWRkZWRMYWJlbHMiLCJhZGRJZlN0cmluZyIsImxhc3RJbmRleE9mIiwiZmluZE9yQWRkTGFiZWwiLCJUaW1lU2VyaWVzU2NhbGUiLCJfdGFibGUiLCJfbWluUG9zIiwiX3RhYmxlUmFuZ2UiLCJfZ2V0VGltZXN0YW1wc0ZvclRhYmxlIiwiYnVpbGRMb29rdXBUYWJsZSIsInJlZ2lzdGVyYWJsZXMiLCJidXR0b24iLCJjaGFydEl0ZW0iLCJjcmVhdGVUaW1lSW5ab25lQ2hhcnQiLCJ0aW1lSW5ab25lIiwibWFpbiIsImNsaWVudCIsIlN0cmF2YUFwaUNsaWVudCIsInBvd2VyU3RyZWFtcyIsImhyU3RyZWFtcyIsImRldGFpbGVkQWN0aXZpdGllcyIsImNoYXJ0UHJvdmlkZXIiLCJDaGFydFByb3ZpZGVyIiwiaHJTdHJlYW1XaXRoSWQiLCJmaW5kIiwic3RyZWFtIiwicG93ZXJTdHJlYW1XaXRoSWQiLCJwb3dlckRpY3QiLCJoZWFydFJhdGVEaWN0IiwiYWRkU3RyZWFtc1RvQWN0aXZpdHkiLCJhZGREZXRhaWxzVG9BY3Rpdml0eSIsImxvZyIsImRhdGFDYWxjdWxhdG9yIiwiRGF0YUNhbGN1bGF0b3IiLCJkYXRlQnV0dG9uIiwidG90YWxOdW0iLCJ0ZXh0Q29udGVudCJdLCJzb3VyY2VSb290IjoiIn0=