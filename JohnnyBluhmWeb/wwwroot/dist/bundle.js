/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t=function(t,e,i,s){return new(i||(i=Promise))((function(n,o){function a(t){try{h(s.next(t))}catch(t){o(t)}}function r(t){try{h(s.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,r)}h((s=s.apply(t,e||[])).next())}))},e=function(t,e){var i,s,n,o,a={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function r(r){return function(h){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,r[0]&&(a=0)),a;)try{if(i=1,s&&(n=2&r[0]?s.return:r[0]?s.throw||((n=s.return)&&n.call(s),0):s.next)&&!(n=n.call(s,r[1])).done)return n;switch(s=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,s=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((n=(n=a.trys).length>0&&n[n.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){a.label=r[1];break}if(6===r[0]&&a.label<n[1]){a.label=n[1],n=r;break}if(n&&a.label<n[2]){a.label=n[2],a.ops.push(r);break}n[2]&&a.ops.pop(),a.trys.pop();continue}r=e.call(t,a)}catch(t){r=[6,t],s=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,h])}}},i=function(){function i(){}return i.prototype.getPowerData=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllPowerStreams")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},i.prototype.getHeartRateData=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllHrStreams")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},i}();function s(t){return t+.5|0}const n=(t,e,i)=>Math.max(Math.min(t,i),e);function o(t){return n(s(2.55*t),0,255)}function a(t){return n(s(255*t),0,255)}function r(t){return n(s(t/2.55)/100,0,1)}function h(t){return n(s(100*t),0,100)}const l={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},c=[..."0123456789ABCDEF"],d=t=>c[15&t],u=t=>c[(240&t)>>4]+c[15&t],f=t=>(240&t)>>4==(15&t);const g=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function p(t,e,i){const s=e*Math.min(i,1-i),n=(e,n=(e+t/30)%12)=>i-s*Math.max(Math.min(n-3,9-n,1),-1);return[n(0),n(8),n(4)]}function m(t,e,i){const s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}function b(t,e,i){const s=p(t,1,.5);let n;for(e+i>1&&(n=1/(e+i),e*=n,i*=n),n=0;n<3;n++)s[n]*=1-e-i,s[n]+=e;return s}function x(t){const e=t.r/255,i=t.g/255,s=t.b/255,n=Math.max(e,i,s),o=Math.min(e,i,s),a=(n+o)/2;let r,h,l;return n!==o&&(l=n-o,h=a>.5?l/(2-n-o):l/(n+o),r=function(t,e,i,s,n){return t===n?(e-i)/s+(e<i?6:0):e===n?(i-t)/s+2:(t-e)/s+4}(e,i,s,l,n),r=60*r+.5),[0|r,h||0,a]}function _(t,e,i,s){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,s)).map(a)}function y(t,e,i){return _(p,t,e,i)}function v(t){return(t%360+360)%360}const w={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},M={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let k;const S=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,P=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,D=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function C(t,e,i){if(t){let s=x(t);s[e]=Math.max(0,Math.min(s[e]+s[e]*i,0===e?360:1)),s=y(s),t.r=s[0],t.g=s[1],t.b=s[2]}}function O(t,e){return t?Object.assign(e||{},t):t}function A(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=a(t[3]))):(e=O(t,{r:0,g:0,b:0,a:1})).a=a(e.a),e}function T(t){return"r"===t.charAt(0)?function(t){const e=S.exec(t);let i,s,a,r=255;if(e){if(e[7]!==i){const t=+e[7];r=e[8]?o(t):n(255*t,0,255)}return i=+e[1],s=+e[3],a=+e[5],i=255&(e[2]?o(i):n(i,0,255)),s=255&(e[4]?o(s):n(s,0,255)),a=255&(e[6]?o(a):n(a,0,255)),{r:i,g:s,b:a,a:r}}}(t):function(t){const e=g.exec(t);let i,s=255;if(!e)return;e[5]!==i&&(s=e[6]?o(+e[5]):a(+e[5]));const n=v(+e[2]),r=+e[3]/100,h=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return _(b,t,e,i)}(n,r,h):"hsv"===e[1]?function(t,e,i){return _(m,t,e,i)}(n,r,h):y(n,r,h),{r:i[0],g:i[1],b:i[2],a:s}}(t)}class L{constructor(t){if(t instanceof L)return t;const e=typeof t;let i;var s,n,o;"object"===e?i=A(t):"string"===e&&(o=(s=t).length,"#"===s[0]&&(4===o||5===o?n={r:255&17*l[s[1]],g:255&17*l[s[2]],b:255&17*l[s[3]],a:5===o?17*l[s[4]]:255}:7!==o&&9!==o||(n={r:l[s[1]]<<4|l[s[2]],g:l[s[3]]<<4|l[s[4]],b:l[s[5]]<<4|l[s[6]],a:9===o?l[s[7]]<<4|l[s[8]]:255})),i=n||function(t){k||(k=function(){const t={},e=Object.keys(M),i=Object.keys(w);let s,n,o,a,r;for(s=0;s<e.length;s++){for(a=r=e[s],n=0;n<i.length;n++)o=i[n],r=r.replace(o,w[o]);o=parseInt(M[a],16),t[r]=[o>>16&255,o>>8&255,255&o]}return t}(),k.transparent=[0,0,0,0]);const e=k[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||T(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=O(this._rgb);return t&&(t.a=r(t.a)),t}set rgb(t){this._rgb=A(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${r(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>f(t.r)&&f(t.g)&&f(t.b)&&f(t.a))(t)?d:u,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=x(t),i=e[0],s=h(e[1]),n=h(e[2]);return t.a<255?`hsla(${i}, ${s}%, ${n}%, ${r(t.a)})`:`hsl(${i}, ${s}%, ${n}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,s=t.rgb;let n;const o=e===n?.5:e,a=2*o-1,r=i.a-s.a,h=((a*r==-1?a:(a+r)/(1+a*r))+1)/2;n=1-h,i.r=255&h*i.r+n*s.r+.5,i.g=255&h*i.g+n*s.g+.5,i.b=255&h*i.b+n*s.b+.5,i.a=o*i.a+(1-o)*s.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const s=D(r(t.r)),n=D(r(t.g)),o=D(r(t.b));return{r:a(P(s+i*(D(r(e.r))-s))),g:a(P(n+i*(D(r(e.g))-n))),b:a(P(o+i*(D(r(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new L(this.rgb)}alpha(t){return this._rgb.a=a(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=s(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return C(this._rgb,2,t),this}darken(t){return C(this._rgb,2,-t),this}saturate(t){return C(this._rgb,1,t),this}desaturate(t){return C(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=x(t);i[0]=v(i[0]+e),i=y(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function E(){}const R=(()=>{let t=0;return()=>t++})();function I(t){return null==t}function z(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function F(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function V(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function B(t,e){return V(t)?t:e}function W(t,e){return void 0===t?e:t}const N=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function H(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function j(t,e,i,s){let n,o,a;if(z(t))if(o=t.length,s)for(n=o-1;n>=0;n--)e.call(i,t[n],n);else for(n=0;n<o;n++)e.call(i,t[n],n);else if(F(t))for(a=Object.keys(t),o=a.length,n=0;n<o;n++)e.call(i,t[a[n]],a[n])}function $(t,e){let i,s,n,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,s=t.length;i<s;++i)if(n=t[i],o=e[i],n.datasetIndex!==o.datasetIndex||n.index!==o.index)return!1;return!0}function Y(t){if(z(t))return t.map(Y);if(F(t)){const e=Object.create(null),i=Object.keys(t),s=i.length;let n=0;for(;n<s;++n)e[i[n]]=Y(t[i[n]]);return e}return t}function Z(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function U(t,e,i,s){if(!Z(t))return;const n=e[t],o=i[t];F(n)&&F(o)?X(n,o,s):e[t]=Y(o)}function X(t,e,i){const s=z(e)?e:[e],n=s.length;if(!F(t))return t;const o=(i=i||{}).merger||U;let a;for(let e=0;e<n;++e){if(a=s[e],!F(a))continue;const n=Object.keys(a);for(let e=0,s=n.length;e<s;++e)o(n[e],t,a,i)}return t}function q(t,e){return X(t,e,{merger:K})}function K(t,e,i){if(!Z(t))return;const s=e[t],n=i[t];F(s)&&F(n)?q(s,n):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=Y(n))}const G={"":t=>t,x:t=>t.x,y:t=>t.y};function J(t,e){const i=G[e]||(G[e]=function(t){const e=function(t){const e=t.split("."),i=[];let s="";for(const t of e)s+=t,s.endsWith("\\")?s=s.slice(0,-1)+".":(i.push(s),s="");return i}(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function Q(t){return t.charAt(0).toUpperCase()+t.slice(1)}const tt=t=>void 0!==t,et=t=>"function"==typeof t,it=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},st=Math.PI,nt=2*st,ot=nt+st,at=Number.POSITIVE_INFINITY,rt=st/180,ht=st/2,lt=st/4,ct=2*st/3,dt=Math.log10,ut=Math.sign;function ft(t,e,i){return Math.abs(t-e)<i}function gt(t){const e=Math.round(t);t=ft(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(dt(t))),s=t/i;return(s<=1?1:s<=2?2:s<=5?5:10)*i}function pt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function mt(t,e,i){let s,n,o;for(s=0,n=t.length;s<n;s++)o=t[s][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function bt(t){return t*(st/180)}function xt(t){return t*(180/st)}function _t(t){if(!V(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function yt(t,e){const i=e.x-t.x,s=e.y-t.y,n=Math.sqrt(i*i+s*s);let o=Math.atan2(s,i);return o<-.5*st&&(o+=nt),{angle:o,distance:n}}function vt(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function wt(t,e){return(t-e+ot)%nt-st}function Mt(t){return(t%nt+nt)%nt}function kt(t,e,i,s){const n=Mt(t),o=Mt(e),a=Mt(i),r=Mt(o-n),h=Mt(a-n),l=Mt(n-o),c=Mt(n-a);return n===o||n===a||s&&o===a||r>h&&l<c}function St(t,e,i){return Math.max(e,Math.min(i,t))}function Pt(t,e,i,s=1e-6){return t>=Math.min(e,i)-s&&t<=Math.max(e,i)+s}function Dt(t,e,i){i=i||(i=>t[i]<e);let s,n=t.length-1,o=0;for(;n-o>1;)s=o+n>>1,i(s)?o=s:n=s;return{lo:o,hi:n}}const Ct=(t,e,i,s)=>Dt(t,i,s?s=>{const n=t[s][e];return n<i||n===i&&t[s+1][e]===i}:s=>t[s][e]<i),Ot=(t,e,i)=>Dt(t,i,(s=>t[s][e]>=i)),At=["push","pop","shift","splice","unshift"];function Tt(t,e){const i=t._chartjs;if(!i)return;const s=i.listeners,n=s.indexOf(e);-1!==n&&s.splice(n,1),s.length>0||(At.forEach((e=>{delete t[e]})),delete t._chartjs)}function Lt(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}const Et="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function Rt(t,e){let i=[],s=!1;return function(...n){i=n,s||(s=!0,Et.call(window,(()=>{s=!1,t.apply(e,i)})))}}const It=t=>"start"===t?"left":"end"===t?"right":"center",zt=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function Ft(t,e,i){const s=e.length;let n=0,o=s;if(t._sorted){const{iScale:a,_parsed:r}=t,h=a.axis,{min:l,max:c,minDefined:d,maxDefined:u}=a.getUserBounds();d&&(n=St(Math.min(Ct(r,a.axis,l).lo,i?s:Ct(e,h,a.getPixelForValue(l)).lo),0,s-1)),o=u?St(Math.max(Ct(r,a.axis,c,!0).hi+1,i?0:Ct(e,h,a.getPixelForValue(c),!0).hi+1),n,s)-n:s-n}return{start:n,count:o}}function Vt(t){const{xScale:e,yScale:i,_scaleRanges:s}=t,n={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!s)return t._scaleRanges=n,!0;const o=s.xmin!==e.min||s.xmax!==e.max||s.ymin!==i.min||s.ymax!==i.max;return Object.assign(s,n),o}const Bt=t=>0===t||1===t,Wt=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*nt/i),Nt=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*nt/i)+1,Ht={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*ht),easeOutSine:t=>Math.sin(t*ht),easeInOutSine:t=>-.5*(Math.cos(st*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>Bt(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>Bt(t)?t:Wt(t,.075,.3),easeOutElastic:t=>Bt(t)?t:Nt(t,.075,.3),easeInOutElastic(t){const e=.1125;return Bt(t)?t:t<.5?.5*Wt(2*t,e,.45):.5+.5*Nt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-Ht.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*Ht.easeInBounce(2*t):.5*Ht.easeOutBounce(2*t-1)+.5};function jt(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function $t(t){return jt(t)?t:new L(t)}function Yt(t){return jt(t)?t:new L(t).saturate(.5).darken(.1).hexString()}const Zt=["x","y","borderWidth","radius","tension"],Ut=["color","borderColor","backgroundColor"],Xt=new Map;function qt(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let s=Xt.get(i);return s||(s=new Intl.NumberFormat(t,e),Xt.set(i,s)),s}(e,i).format(t)}const Kt={values:t=>z(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const s=this.chart.options.locale;let n,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(n="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const a=dt(Math.abs(o)),r=isNaN(a)?1:Math.max(Math.min(-1*Math.floor(a),20),0),h={notation:n,minimumFractionDigits:r,maximumFractionDigits:r};return Object.assign(h,this.options.ticks.format),qt(t,s,h)},logarithmic(t,e,i){if(0===t)return"0";const s=i[e].significand||t/Math.pow(10,Math.floor(dt(t)));return[1,2,3,5,10,15].includes(s)||e>.8*i.length?Kt.numeric.call(this,t,e,i):""}};var Gt={formatters:Kt};const Jt=Object.create(null),Qt=Object.create(null);function te(t,e){if(!e)return t;const i=e.split(".");for(let e=0,s=i.length;e<s;++e){const s=i[e];t=t[s]||(t[s]=Object.create(null))}return t}function ee(t,e,i){return"string"==typeof e?X(te(t,e),i):X(te(t,""),e)}class ie{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Yt(e.backgroundColor),this.hoverBorderColor=(t,e)=>Yt(e.borderColor),this.hoverColor=(t,e)=>Yt(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return ee(this,t,e)}get(t){return te(this,t)}describe(t,e){return ee(Qt,t,e)}override(t,e){return ee(Jt,t,e)}route(t,e,i,s){const n=te(this,t),o=te(this,i),a="_"+e;Object.defineProperties(n,{[a]:{value:n[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[s];return F(t)?Object.assign({},e,t):W(t,e)},set(t){this[a]=t}}})}apply(t){t.forEach((t=>t(this)))}}var se=new ie({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:Ut},numbers:{type:"number",properties:Zt}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Gt.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function ne(t,e,i,s,n){let o=e[n];return o||(o=e[n]=t.measureText(n).width,i.push(n)),o>s&&(s=o),s}function oe(t,e,i,s){let n=(s=s||{}).data=s.data||{},o=s.garbageCollect=s.garbageCollect||[];s.font!==e&&(n=s.data={},o=s.garbageCollect=[],s.font=e),t.save(),t.font=e;let a=0;const r=i.length;let h,l,c,d,u;for(h=0;h<r;h++)if(d=i[h],null==d||z(d)){if(z(d))for(l=0,c=d.length;l<c;l++)u=d[l],null==u||z(u)||(a=ne(t,n,o,a,u))}else a=ne(t,n,o,a,d);t.restore();const f=o.length/2;if(f>i.length){for(h=0;h<f;h++)delete n[o[h]];o.splice(0,f)}return a}function ae(t,e,i){const s=t.currentDevicePixelRatio,n=0!==i?Math.max(i/2,.5):0;return Math.round((e-n)*s)/s+n}function re(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function he(t,e,i,s){le(t,e,i,s,null)}function le(t,e,i,s,n){let o,a,r,h,l,c,d,u;const f=e.pointStyle,g=e.rotation,p=e.radius;let m=(g||0)*rt;if(f&&"object"==typeof f&&(o=f.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,s),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(p)||p<=0)){switch(t.beginPath(),f){default:n?t.ellipse(i,s,n/2,p,0,0,nt):t.arc(i,s,p,0,nt),t.closePath();break;case"triangle":c=n?n/2:p,t.moveTo(i+Math.sin(m)*c,s-Math.cos(m)*p),m+=ct,t.lineTo(i+Math.sin(m)*c,s-Math.cos(m)*p),m+=ct,t.lineTo(i+Math.sin(m)*c,s-Math.cos(m)*p),t.closePath();break;case"rectRounded":l=.516*p,h=p-l,a=Math.cos(m+lt)*h,d=Math.cos(m+lt)*(n?n/2-l:h),r=Math.sin(m+lt)*h,u=Math.sin(m+lt)*(n?n/2-l:h),t.arc(i-d,s-r,l,m-st,m-ht),t.arc(i+u,s-a,l,m-ht,m),t.arc(i+d,s+r,l,m,m+ht),t.arc(i-u,s+a,l,m+ht,m+st),t.closePath();break;case"rect":if(!g){h=Math.SQRT1_2*p,c=n?n/2:h,t.rect(i-c,s-h,2*c,2*h);break}m+=lt;case"rectRot":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+u,s-a),t.lineTo(i+d,s+r),t.lineTo(i-u,s+a),t.closePath();break;case"crossRot":m+=lt;case"cross":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"star":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a),m+=lt,d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"line":a=n?n/2:Math.cos(m)*p,r=Math.sin(m)*p,t.moveTo(i-a,s-r),t.lineTo(i+a,s+r);break;case"dash":t.moveTo(i,s),t.lineTo(i+Math.cos(m)*(n?n/2:p),s+Math.sin(m)*p);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function ce(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function de(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function ue(t){t.restore()}function fe(t,e,i,s,n){if(!e)return t.lineTo(i.x,i.y);if("middle"===n){const s=(e.x+i.x)/2;t.lineTo(s,e.y),t.lineTo(s,i.y)}else"after"===n!=!!s?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function ge(t,e,i,s){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(s?e.cp1x:e.cp2x,s?e.cp1y:e.cp2y,s?i.cp2x:i.cp1x,s?i.cp2y:i.cp1y,i.x,i.y)}function pe(t,e,i,s,n){if(n.strikethrough||n.underline){const o=t.measureText(s),a=e-o.actualBoundingBoxLeft,r=e+o.actualBoundingBoxRight,h=i-o.actualBoundingBoxAscent,l=i+o.actualBoundingBoxDescent,c=n.strikethrough?(h+l)/2:l;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=n.decorationWidth||2,t.moveTo(a,c),t.lineTo(r,c),t.stroke()}}function me(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function be(t,e,i,s,n,o={}){const a=z(e)?e:[e],r=o.strokeWidth>0&&""!==o.strokeColor;let h,l;for(t.save(),t.font=n.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),I(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),h=0;h<a.length;++h)l=a[h],o.backdrop&&me(t,o.backdrop),r&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),I(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(l,i,s,o.maxWidth)),t.fillText(l,i,s,o.maxWidth),pe(t,i,s,l,o),s+=Number(n.lineHeight);t.restore()}function xe(t,e){const{x:i,y:s,w:n,h:o,radius:a}=e;t.arc(i+a.topLeft,s+a.topLeft,a.topLeft,-ht,st,!0),t.lineTo(i,s+o-a.bottomLeft),t.arc(i+a.bottomLeft,s+o-a.bottomLeft,a.bottomLeft,st,ht,!0),t.lineTo(i+n-a.bottomRight,s+o),t.arc(i+n-a.bottomRight,s+o-a.bottomRight,a.bottomRight,ht,0,!0),t.lineTo(i+n,s+a.topRight),t.arc(i+n-a.topRight,s+a.topRight,a.topRight,0,-ht,!0),t.lineTo(i+a.topLeft,s)}const _e=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,ye=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function ve(t,e){const i=(""+t).match(_e);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const we=t=>+t||0;function Me(t,e){const i={},s=F(e),n=s?Object.keys(e):e,o=F(t)?s?i=>W(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of n)i[t]=we(o(t));return i}function ke(t){return Me(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Se(t){return Me(t,["topLeft","topRight","bottomLeft","bottomRight"])}function Pe(t){const e=ke(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function De(t,e){t=t||{},e=e||se.font;let i=W(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let s=W(t.style,e.style);s&&!(""+s).match(ye)&&(console.warn('Invalid font style specified: "'+s+'"'),s=void 0);const n={family:W(t.family,e.family),lineHeight:ve(W(t.lineHeight,e.lineHeight),i),size:i,style:s,weight:W(t.weight,e.weight),string:""};return n.string=function(t){return!t||I(t.size)||I(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(n),n}function Ce(t,e,i,s){let n,o,a,r=!0;for(n=0,o=t.length;n<o;++n)if(a=t[n],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),r=!1),void 0!==i&&z(a)&&(a=a[i%a.length],r=!1),void 0!==a))return s&&!r&&(s.cacheable=!1),a}function Oe(t,e){return Object.assign(Object.create(t),e)}function Ae(t,e=[""],i,s,n=(()=>t[0])){const o=i||t;void 0===s&&(s=Ne("_fallback",t));const a={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:o,_fallback:s,_getTarget:n,override:i=>Ae([i,...t],e,o,s)};return new Proxy(a,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,s)=>Ie(i,s,(()=>function(t,e,i,s){let n;for(const o of e)if(n=Ne(Ee(o,t),i),void 0!==n)return Re(t,n)?Be(i,s,t,n):n}(s,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>He(t).includes(e),ownKeys:t=>He(t),set(t,e,i){const s=t._storage||(t._storage=n());return t[e]=s[e]=i,delete t._keys,!0}})}function Te(t,e,i,s){const n={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:Le(t,s),setContext:e=>Te(t,e,i,s),override:n=>Te(t.override(n),e,i,s)};return new Proxy(n,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>Ie(t,e,(()=>function(t,e,i){const{_proxy:s,_context:n,_subProxy:o,_descriptors:a}=t;let r=s[e];return et(r)&&a.isScriptable(e)&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_stack:r}=i;if(r.has(t))throw new Error("Recursion detected: "+Array.from(r).join("->")+"->"+t);r.add(t);let h=e(o,a||s);return r.delete(t),Re(t,h)&&(h=Be(n._scopes,n,t,h)),h}(e,r,t,i)),z(r)&&r.length&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_descriptors:r}=i;if(void 0!==o.index&&s(t))return e[o.index%e.length];if(F(e[0])){const i=e,s=n._scopes.filter((t=>t!==i));e=[];for(const h of i){const i=Be(s,n,t,h);e.push(Te(i,o,a&&a[t],r))}}return e}(e,r,t,a.isIndexable)),Re(e,r)&&(r=Te(r,n,o&&o[e],a)),r}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,s)=>(t[i]=s,delete e[i],!0)})}function Le(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:s=e.indexable,_allKeys:n=e.allKeys}=t;return{allKeys:n,scriptable:i,indexable:s,isScriptable:et(i)?i:()=>i,isIndexable:et(s)?s:()=>s}}const Ee=(t,e)=>t?t+Q(e):e,Re=(t,e)=>F(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function Ie(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const s=i();return t[e]=s,s}function ze(t,e,i){return et(t)?t(e,i):t}const Fe=(t,e)=>!0===t?e:"string"==typeof t?J(e,t):void 0;function Ve(t,e,i,s,n){for(const o of e){const e=Fe(i,o);if(e){t.add(e);const o=ze(e._fallback,i,n);if(void 0!==o&&o!==i&&o!==s)return o}else if(!1===e&&void 0!==s&&i!==s)return null}return!1}function Be(t,e,i,s){const n=e._rootScopes,o=ze(e._fallback,i,s),a=[...t,...n],r=new Set;r.add(s);let h=We(r,a,i,o||i,s);return null!==h&&(void 0===o||o===i||(h=We(r,a,o,h,s),null!==h))&&Ae(Array.from(r),[""],n,o,(()=>function(t,e,i){const s=t._getTarget();e in s||(s[e]={});const n=s[e];return z(n)&&F(i)?i:n||{}}(e,i,s)))}function We(t,e,i,s,n){for(;i;)i=Ve(t,e,i,s,n);return i}function Ne(t,e){for(const i of e){if(!i)continue;const e=i[t];if(void 0!==e)return e}}function He(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function je(t,e,i,s){const{iScale:n}=t,{key:o="r"}=this._parsing,a=new Array(s);let r,h,l,c;for(r=0,h=s;r<h;++r)l=r+i,c=e[l],a[r]={r:n.parse(J(c,o),l)};return a}const $e=Number.EPSILON||1e-14,Ye=(t,e)=>e<t.length&&!t[e].skip&&t[e],Ze=t=>"x"===t?"y":"x";function Ue(t,e,i,s){const n=t.skip?e:t,o=e,a=i.skip?e:i,r=vt(o,n),h=vt(a,o);let l=r/(r+h),c=h/(r+h);l=isNaN(l)?0:l,c=isNaN(c)?0:c;const d=s*l,u=s*c;return{previous:{x:o.x-d*(a.x-n.x),y:o.y-d*(a.y-n.y)},next:{x:o.x+u*(a.x-n.x),y:o.y+u*(a.y-n.y)}}}function Xe(t,e,i){return Math.max(Math.min(t,i),e)}function qe(t,e,i,s,n){let o,a,r,h;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=Ze(e),s=t.length,n=Array(s).fill(0),o=Array(s);let a,r,h,l=Ye(t,0);for(a=0;a<s;++a)if(r=h,h=l,l=Ye(t,a+1),h){if(l){const t=l[e]-h[e];n[a]=0!==t?(l[i]-h[i])/t:0}o[a]=r?l?ut(n[a-1])!==ut(n[a])?0:(n[a-1]+n[a])/2:n[a-1]:n[a]}!function(t,e,i){const s=t.length;let n,o,a,r,h,l=Ye(t,0);for(let c=0;c<s-1;++c)h=l,l=Ye(t,c+1),h&&l&&(ft(e[c],0,$e)?i[c]=i[c+1]=0:(n=i[c]/e[c],o=i[c+1]/e[c],r=Math.pow(n,2)+Math.pow(o,2),r<=9||(a=3/Math.sqrt(r),i[c]=n*a*e[c],i[c+1]=o*a*e[c])))}(t,n,o),function(t,e,i="x"){const s=Ze(i),n=t.length;let o,a,r,h=Ye(t,0);for(let l=0;l<n;++l){if(a=r,r=h,h=Ye(t,l+1),!r)continue;const n=r[i],c=r[s];a&&(o=(n-a[i])/3,r[`cp1${i}`]=n-o,r[`cp1${s}`]=c-o*e[l]),h&&(o=(h[i]-n)/3,r[`cp2${i}`]=n+o,r[`cp2${s}`]=c+o*e[l])}}(t,o,e)}(t,n);else{let i=s?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)r=t[o],h=Ue(i,r,t[Math.min(o+1,a-(s?0:1))%a],e.tension),r.cp1x=h.previous.x,r.cp1y=h.previous.y,r.cp2x=h.next.x,r.cp2y=h.next.y,i=r}e.capBezierPoints&&function(t,e){let i,s,n,o,a,r=ce(t[0],e);for(i=0,s=t.length;i<s;++i)a=o,o=r,r=i<s-1&&ce(t[i+1],e),o&&(n=t[i],a&&(n.cp1x=Xe(n.cp1x,e.left,e.right),n.cp1y=Xe(n.cp1y,e.top,e.bottom)),r&&(n.cp2x=Xe(n.cp2x,e.left,e.right),n.cp2y=Xe(n.cp2y,e.top,e.bottom)))}(t,i)}function Ke(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ge(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Je(t,e,i){let s;return"string"==typeof t?(s=parseInt(t,10),-1!==t.indexOf("%")&&(s=s/100*e.parentNode[i])):s=t,s}const Qe=t=>t.ownerDocument.defaultView.getComputedStyle(t,null),ti=["top","right","bottom","left"];function ei(t,e,i){const s={};i=i?"-"+i:"";for(let n=0;n<4;n++){const o=ti[n];s[o]=parseFloat(t[e+"-"+o+i])||0}return s.width=s.left+s.right,s.height=s.top+s.bottom,s}const ii=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function si(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:s}=e,n=Qe(i),o="border-box"===n.boxSizing,a=ei(n,"padding"),r=ei(n,"border","width"),{x:h,y:l,box:c}=function(t,e){const i=t.touches,s=i&&i.length?i[0]:t,{offsetX:n,offsetY:o}=s;let a,r,h=!1;if(ii(n,o,t.target))a=n,r=o;else{const t=e.getBoundingClientRect();a=s.clientX-t.left,r=s.clientY-t.top,h=!0}return{x:a,y:r,box:h}}(t,i),d=a.left+(c&&r.left),u=a.top+(c&&r.top);let{width:f,height:g}=e;return o&&(f-=a.width+r.width,g-=a.height+r.height),{x:Math.round((h-d)/f*i.width/s),y:Math.round((l-u)/g*i.height/s)}}const ni=t=>Math.round(10*t)/10;function oi(t,e,i){const s=e||1,n=Math.floor(t.height*s),o=Math.floor(t.width*s);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==s||a.height!==n||a.width!==o)&&(t.currentDevicePixelRatio=s,a.height=n,a.width=o,t.ctx.setTransform(s,0,0,s,0,0),!0)}const ai=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function ri(t,e){const i=function(t,e){return Qe(t).getPropertyValue(e)}(t,e),s=i&&i.match(/^(\d+)(\.\d+)?px$/);return s?+s[1]:void 0}function hi(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function li(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:"middle"===s?i<.5?t.y:e.y:"after"===s?i<1?t.y:e.y:i>0?e.y:t.y}}function ci(t,e,i,s){const n={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=hi(t,n,i),r=hi(n,o,i),h=hi(o,e,i),l=hi(a,r,i),c=hi(r,h,i);return hi(l,c,i)}function di(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function ui(t,e){let i,s;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,s=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=s)}function fi(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function gi(t){return"angle"===t?{between:kt,compare:wt,normalize:Mt}:{between:Pt,compare:(t,e)=>t-e,normalize:t=>t}}function pi({start:t,end:e,count:i,loop:s,style:n}){return{start:t%i,end:e%i,loop:s&&(e-t+1)%i==0,style:n}}function mi(t,e,i){if(!i)return[t];const{property:s,start:n,end:o}=i,a=e.length,{compare:r,between:h,normalize:l}=gi(s),{start:c,end:d,loop:u,style:f}=function(t,e,i){const{property:s,start:n,end:o}=i,{between:a,normalize:r}=gi(s),h=e.length;let l,c,{start:d,end:u,loop:f}=t;if(f){for(d+=h,u+=h,l=0,c=h;l<c&&a(r(e[d%h][s]),n,o);++l)d--,u--;d%=h,u%=h}return u<d&&(u+=h),{start:d,end:u,loop:f,style:t.style}}(t,e,i),g=[];let p,m,b,x=!1,_=null;for(let t=c,i=c;t<=d;++t)m=e[t%a],m.skip||(p=l(m[s]),p!==b&&(x=h(p,n,o),null===_&&(x||h(n,b,p)&&0!==r(n,b))&&(_=0===r(p,n)?t:i),null!==_&&(!x||0===r(o,p)||h(o,b,p))&&(g.push(pi({start:_,end:t,loop:u,count:a,style:f})),_=null),i=t,b=p));return null!==_&&g.push(pi({start:_,end:d,loop:u,count:a,style:f})),g}function bi(t,e){const i=[],s=t.segments;for(let n=0;n<s.length;n++){const o=mi(s[n],t.points,e);o.length&&i.push(...o)}return i}function xi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function _i(t,e){if(!e)return!1;const i=[],s=function(t,e){return jt(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e};return JSON.stringify(t,s)!==JSON.stringify(e,s)}class yi{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,s){const n=e.listeners[s],o=e.duration;n.forEach((s=>s({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=Et.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,s)=>{if(!i.running||!i.items.length)return;const n=i.items;let o,a=n.length-1,r=!1;for(;a>=0;--a)o=n[a],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),r=!0):(n[a]=n[n.length-1],n.pop());r&&(s.draw(),this._notify(s,i,t,"progress")),n.length||(i.running=!1,this._notify(s,i,t,"complete"),i.initial=!1),e+=n.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let s=i.length-1;for(;s>=0;--s)i[s].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var vi=new yi;const wi="transparent",Mi={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const s=$t(t||wi),n=s.valid&&$t(e||wi);return n&&n.valid?n.mix(s,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class ki{constructor(t,e,i,s){const n=e[i];s=Ce([t.to,s,n,t.from]);const o=Ce([t.from,n,s]);this._active=!0,this._fn=t.fn||Mi[t.type||typeof o],this._easing=Ht[t.easing]||Ht.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=s,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const s=this._target[this._prop],n=i-this._start,o=this._duration-n;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=n,this._loop=!!t.loop,this._to=Ce([t.to,e,s,t.from]),this._from=Ce([t.from,s,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,s=this._prop,n=this._from,o=this._loop,a=this._to;let r;if(this._active=n!==a&&(o||e<i),!this._active)return this._target[s]=a,void this._notify(!0);e<0?this._target[s]=n:(r=e/i%2,r=o&&r>1?2-r:r,r=this._easing(Math.min(1,Math.max(0,r))),this._target[s]=this._fn(n,a,r))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class Si{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!F(t))return;const e=Object.keys(se.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((s=>{const n=t[s];if(!F(n))return;const o={};for(const t of e)o[t]=n[t];(z(n.properties)&&n.properties||[s]).forEach((t=>{t!==s&&i.has(t)||i.set(t,o)}))}))}_animateOptions(t,e){const i=e.options,s=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!s)return[];const n=this._createAnimations(s,i);return i.$shared&&function(t,e){const i=[],s=Object.keys(e);for(let e=0;e<s.length;e++){const n=t[s[e]];n&&n.active()&&i.push(n.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),n}_createAnimations(t,e){const i=this._properties,s=[],n=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let r;for(r=o.length-1;r>=0;--r){const h=o[r];if("$"===h.charAt(0))continue;if("options"===h){s.push(...this._animateOptions(t,e));continue}const l=e[h];let c=n[h];const d=i.get(h);if(c){if(d&&c.active()){c.update(d,l,a);continue}c.cancel()}d&&d.duration?(n[h]=c=new ki(d,t,h,l),s.push(c)):t[h]=l}return s}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(vi.add(this._chart,i),!0):void 0}}function Pi(t,e){const i=t&&t.options||{},s=i.reverse,n=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:s?o:n,end:s?n:o}}function Di(t,e){const i=[],s=t._getSortedDatasetMetas(e);let n,o;for(n=0,o=s.length;n<o;++n)i.push(s[n].index);return i}function Ci(t,e,i,s={}){const n=t.keys,o="single"===s.mode;let a,r,h,l;if(null!==e){for(a=0,r=n.length;a<r;++a){if(h=+n[a],h===i){if(s.all)continue;break}l=t.values[h],V(l)&&(o||0===e||ut(e)===ut(l))&&(e+=l)}return e}}function Oi(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function Ai(t,e,i){const s=t[e]||(t[e]={});return s[i]||(s[i]={})}function Ti(t,e,i,s){for(const n of e.getMatchingVisibleMetas(s).reverse()){const e=t[n.index];if(i&&e>0||!i&&e<0)return n.index}return null}function Li(t,e){const{chart:i,_cachedMeta:s}=t,n=i._stacks||(i._stacks={}),{iScale:o,vScale:a,index:r}=s,h=o.axis,l=a.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,a,s),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[h]:o,[l]:d}=i;u=(i._stacks||(i._stacks={}))[l]=Ai(n,c,o),u[r]=d,u._top=Ti(u,a,!0,s.type),u._bottom=Ti(u,a,!1,s.type),(u._visualValues||(u._visualValues={}))[r]=d}}function Ei(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function Ri(t,e){const i=t.controller.index,s=t.vScale&&t.vScale.axis;if(s){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[s]||void 0===e[s][i])return;delete e[s][i],void 0!==e[s]._visualValues&&void 0!==e[s]._visualValues[i]&&delete e[s]._visualValues[i]}}}const Ii=t=>"reset"===t||"none"===t,zi=(t,e)=>e?t:Object.assign({},t);class Fi{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Oi(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&Ri(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),s=(t,e,i,s)=>"x"===t?e:"r"===t?s:i,n=e.xAxisID=W(i.xAxisID,Ei(t,"x")),o=e.yAxisID=W(i.yAxisID,Ei(t,"y")),a=e.rAxisID=W(i.rAxisID,Ei(t,"r")),r=e.indexAxis,h=e.iAxisID=s(r,n,o,a),l=e.vAxisID=s(r,o,n,a);e.xScale=this.getScaleForId(n),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(h),e.vScale=this.getScaleForId(l)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&Tt(this._data,this),t._stacked&&Ri(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(F(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s],i[s]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){Tt(i,this);const t=this._cachedMeta;Ri(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(s=e)._chartjs?s._chartjs.listeners.push(this):(Object.defineProperty(s,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),At.forEach((t=>{const e="_onData"+Q(t),i=s[t];Object.defineProperty(s,t,{configurable:!0,enumerable:!1,value(...t){const n=i.apply(this,t);return s._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),n}})})))),this._syncList=[],this._data=e}var s}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let s=!1;this._dataCheck();const n=e._stacked;e._stacked=Oi(e.vScale,e),e.stack!==i.stack&&(s=!0,Ri(e),e.stack=i.stack),this._resyncElements(t),(s||n!==e._stacked)&&Li(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:s}=this,{iScale:n,_stacked:o}=i,a=n.axis;let r,h,l,c=0===t&&e===s.length||i._sorted,d=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=s,i._sorted=!0,l=s;else{l=z(s[t])?this.parseArrayData(i,s,t,e):F(s[t])?this.parseObjectData(i,s,t,e):this.parsePrimitiveData(i,s,t,e);const n=()=>null===h[a]||d&&h[a]<d[a];for(r=0;r<e;++r)i._parsed[r+t]=h=l[r],c&&(n()&&(c=!1),d=h);i._sorted=c}o&&Li(this,l)}parsePrimitiveData(t,e,i,s){const{iScale:n,vScale:o}=t,a=n.axis,r=o.axis,h=n.getLabels(),l=n===o,c=new Array(s);let d,u,f;for(d=0,u=s;d<u;++d)f=d+i,c[d]={[a]:l||n.parse(h[f],f),[r]:o.parse(e[f],f)};return c}parseArrayData(t,e,i,s){const{xScale:n,yScale:o}=t,a=new Array(s);let r,h,l,c;for(r=0,h=s;r<h;++r)l=r+i,c=e[l],a[r]={x:n.parse(c[0],l),y:o.parse(c[1],l)};return a}parseObjectData(t,e,i,s){const{xScale:n,yScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,h=new Array(s);let l,c,d,u;for(l=0,c=s;l<c;++l)d=l+i,u=e[d],h[l]={x:n.parse(J(u,a),d),y:o.parse(J(u,r),d)};return h}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const s=this.chart,n=this._cachedMeta,o=e[t.axis];return Ci({keys:Di(s,!0),values:e._stacks[t.axis]._visualValues},o,n.index,{mode:i})}updateRangeFromParsed(t,e,i,s){const n=i[e.axis];let o=null===n?NaN:n;const a=s&&i._stacks[e.axis];s&&a&&(s.values=a,o=Ci(s,n,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,s=i._parsed,n=i._sorted&&t===i.iScale,o=s.length,a=this._getOtherScale(t),r=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:Di(i,!0),values:null})(e,i,this.chart),h={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:l,max:c}=function(t){const{min:e,max:i,minDefined:s,maxDefined:n}=t.getUserBounds();return{min:s?e:Number.NEGATIVE_INFINITY,max:n?i:Number.POSITIVE_INFINITY}}(a);let d,u;function f(){u=s[d];const e=u[a.axis];return!V(u[t.axis])||l>e||c<e}for(d=0;d<o&&(f()||(this.updateRangeFromParsed(h,t,u,r),!n));++d);if(n)for(d=o-1;d>=0;--d)if(!f()){this.updateRangeFromParsed(h,t,u,r);break}return h}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s][t.axis],V(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,s=e.vScale,n=this.getParsed(t);return{label:i?""+i.getLabelForValue(n[i.axis]):"",value:s?""+s.getLabelForValue(n[s.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,s,n;return F(t)?(e=t.top,i=t.right,s=t.bottom,n=t.left):e=i=s=n=t,{top:e,right:i,bottom:s,left:n,disabled:!1===t}}(W(this.options.clip,function(t,e,i){if(!1===i)return!1;const s=Pi(t,i),n=Pi(e,i);return{top:n.end,right:s.end,bottom:n.start,left:s.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,s=i.data||[],n=e.chartArea,o=[],a=this._drawStart||0,r=this._drawCount||s.length-a,h=this.options.drawActiveElementsOnTop;let l;for(i.dataset&&i.dataset.draw(t,n,a,r),l=a;l<a+r;++l){const e=s[l];e.hidden||(e.active&&h?o.push(e):e.draw(t,n))}for(l=0;l<o.length;++l)o[l].draw(t,n)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const s=this.getDataset();let n;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];n=e.$context||(e.$context=function(t,e,i){return Oe(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),n.parsed=this.getParsed(t),n.raw=s.data[t],n.index=n.dataIndex=t}else n=this.$context||(this.$context=function(t,e){return Oe(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),n.dataset=s,n.index=n.datasetIndex=this.index;return n.active=!!e,n.mode=i,n}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const s="active"===e,n=this._cachedDataOpts,o=t+"-"+e,a=n[o],r=this.enableOptionSharing&&tt(i);if(a)return zi(a,r);const h=this.chart.config,l=h.datasetElementScopeKeys(this._type,t),c=s?[`${t}Hover`,"hover",t,""]:[t,""],d=h.getOptionScopes(this.getDataset(),l),u=Object.keys(se.elements[t]),f=h.resolveNamedOptions(d,u,(()=>this.getContext(i,s,e)),c);return f.$shared&&(f.$shared=r,n[o]=Object.freeze(zi(f,r))),f}_resolveAnimations(t,e,i){const s=this.chart,n=this._cachedDataOpts,o=`animation-${e}`,a=n[o];if(a)return a;let r;if(!1!==s.options.animation){const s=this.chart.config,n=s.datasetAnimationScopeKeys(this._type,e),o=s.getOptionScopes(this.getDataset(),n);r=s.createResolver(o,this.getContext(t,i,e))}const h=new Si(s,r&&r.animations);return r&&r._cacheable&&(n[o]=Object.freeze(h)),h}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Ii(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),s=this._sharedOptions,n=this.getSharedOptions(i),o=this.includeOptions(e,n)||n!==s;return this.updateSharedOptions(n,e,i),{sharedOptions:n,includeOptions:o}}updateElement(t,e,i,s){Ii(s)?Object.assign(t,i):this._resolveAnimations(e,s).update(t,i)}updateSharedOptions(t,e,i){t&&!Ii(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,s){t.active=s;const n=this.getStyle(e,s);this._resolveAnimations(e,i,s).update(t,{options:!s&&this.getSharedOptions(n)||n})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const s=i.length,n=e.length,o=Math.min(n,s);o&&this.parse(0,o),n>s?this._insertElements(s,n-s,t):n<s&&this._removeElements(n,s-n)}_insertElements(t,e,i=!0){const s=this._cachedMeta,n=s.data,o=t+e;let a;const r=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(r(n),a=t;a<o;++a)n[a]=new this.dataElementType;this._parsing&&r(s._parsed),this.parse(t,e),i&&this.updateElements(n,t,e,"reset")}updateElements(t,e,i,s){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const s=i._parsed.splice(t,e);i._stacked&&Ri(i,s)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,s]=t;this[e](i,s)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function Vi(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let s=[];for(let e=0,n=i.length;e<n;e++)s=s.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=Lt(s.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let s,n,o,a,r=e._length;const h=()=>{32767!==o&&-32768!==o&&(tt(a)&&(r=Math.min(r,Math.abs(o-a)||r)),a=o)};for(s=0,n=i.length;s<n;++s)o=e.getPixelForValue(i[s]),h();for(a=void 0,s=0,n=e.ticks.length;s<n;++s)o=e.getPixelForTick(s),h();return r}function Bi(t,e,i,s){return z(t)?function(t,e,i,s){const n=i.parse(t[0],s),o=i.parse(t[1],s),a=Math.min(n,o),r=Math.max(n,o);let h=a,l=r;Math.abs(a)>Math.abs(r)&&(h=r,l=a),e[i.axis]=l,e._custom={barStart:h,barEnd:l,start:n,end:o,min:a,max:r}}(t,e,i,s):e[i.axis]=i.parse(t,s),e}function Wi(t,e,i,s){const n=t.iScale,o=t.vScale,a=n.getLabels(),r=n===o,h=[];let l,c,d,u;for(l=i,c=i+s;l<c;++l)u=e[l],d={},d[n.axis]=r||n.parse(a[l],l),h.push(Bi(u,d,o,l));return h}function Ni(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Hi(t,e,i,s){let n=e.borderSkipped;const o={};if(!n)return void(t.borderSkipped=o);if(!0===n)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:a,end:r,reverse:h,top:l,bottom:c}=function(t){let e,i,s,n,o;return t.horizontal?(e=t.base>t.x,i="left",s="right"):(e=t.base<t.y,i="bottom",s="top"),e?(n="end",o="start"):(n="start",o="end"),{start:i,end:s,reverse:e,top:n,bottom:o}}(t);"middle"===n&&i&&(t.enableBorderRadius=!0,(i._top||0)===s?n=l:(i._bottom||0)===s?n=c:(o[ji(c,a,r,h)]=!0,n=l)),o[ji(n,a,r,h)]=!0,t.borderSkipped=o}function ji(t,e,i,s){var n,o,a;return s?(a=i,t=$i(t=(n=t)===(o=e)?a:n===a?o:n,i,e)):t=$i(t,e,i),t}function $i(t,e,i){return"start"===t?e:"end"===t?i:t}function Yi(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class Zi extends Fi{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=i;else{let n,o,a=t=>+i[t];if(F(i[t])){const{key:t="value"}=this._parsing;a=e=>+J(i[e],t)}for(n=t,o=t+e;n<o;++n)s._parsed[n]=a(n)}}_getRotation(){return bt(this.options.rotation-90)}_getCircumference(){return bt(this.options.circumference)}_getRotationExtents(){let t=nt,e=-nt;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const s=this.chart.getDatasetMeta(i).controller,n=s._getRotation(),o=s._getCircumference();t=Math.min(t,n),e=Math.max(e,n+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,s=this._cachedMeta,n=s.data,o=this.getMaxBorderWidth()+this.getMaxOffset(n)+this.options.spacing,a=Math.max((Math.min(i.width,i.height)-o)/2,0),r=Math.min((l=a,"string"==typeof(h=this.options.cutout)&&h.endsWith("%")?parseFloat(h)/100:+h/l),1);var h,l;const c=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:f,ratioY:g,offsetX:p,offsetY:m}=function(t,e,i){let s=1,n=1,o=0,a=0;if(e<nt){const r=t,h=r+e,l=Math.cos(r),c=Math.sin(r),d=Math.cos(h),u=Math.sin(h),f=(t,e,s)=>kt(t,r,h,!0)?1:Math.max(e,e*i,s,s*i),g=(t,e,s)=>kt(t,r,h,!0)?-1:Math.min(e,e*i,s,s*i),p=f(0,l,d),m=f(ht,c,u),b=g(st,l,d),x=g(st+ht,c,u);s=(p-b)/2,n=(m-x)/2,o=-(p+b)/2,a=-(m+x)/2}return{ratioX:s,ratioY:n,offsetX:o,offsetY:a}}(u,d,r),b=(i.width-o)/f,x=(i.height-o)/g,_=Math.max(Math.min(b,x)/2,0),y=N(this.options.radius,_),v=(y-Math.max(y*r,0))/this._getVisibleDatasetWeightTotal();this.offsetX=p*y,this.offsetY=m*y,s.total=this.calculateTotal(),this.outerRadius=y-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*c,0),this.updateElements(n,0,n.length,t)}_circumference(t,e){const i=this.options,s=this._cachedMeta,n=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===s._parsed[t]||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*n/nt)}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.chartArea,r=o.options.animation,h=(a.left+a.right)/2,l=(a.top+a.bottom)/2,c=n&&r.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,{sharedOptions:f,includeOptions:g}=this._getSharedOptions(e,s);let p,m=this._getRotation();for(p=0;p<e;++p)m+=this._circumference(p,n);for(p=e;p<e+i;++p){const e=this._circumference(p,n),i=t[p],o={x:h+this.offsetX,y:l+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};g&&(o.options=f||this.resolveDataElementOptions(p,i.active?"active":s)),m+=e,this.updateElement(i,p,o,s)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,s=0;for(i=0;i<e.length;i++){const n=t._parsed[i];null===n||isNaN(n)||!this.chart.getDataVisibility(i)||e[i].hidden||(s+=Math.abs(n))}return s}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?nt*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=qt(e._parsed[t],i.options.locale);return{label:s[t]||"",value:n}}getMaxBorderWidth(t){let e=0;const i=this.chart;let s,n,o,a,r;if(!t)for(s=0,n=i.data.datasets.length;s<n;++s)if(i.isDatasetVisible(s)){o=i.getDatasetMeta(s),t=o.data,a=o.controller;break}if(!t)return 0;for(s=0,n=t.length;s<n;++s)r=a.resolveDataElementOptions(s),"inner"!==r.borderAlign&&(e=Math.max(e,r.borderWidth||0,r.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,s=t.length;i<s;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(W(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class Ui extends Fi{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=qt(e._parsed[t].r,i.options.locale);return{label:s[t]||"",value:n}}parseObjectData(t,e,i,s){return je.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const s=this.getParsed(i).r;!isNaN(s)&&this.chart.getDataVisibility(i)&&(s<e.min&&(e.min=s),s>e.max&&(e.max=s))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,s=Math.min(e.right-e.left,e.bottom-e.top),n=Math.max(s/2,0),o=(n-Math.max(i.cutoutPercentage?n/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=n-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.options.animation,r=this._cachedMeta.rScale,h=r.xCenter,l=r.yCenter,c=r.getIndexAngle(0)-.5*st;let d,u=c;const f=360/this.countVisibleElements();for(d=0;d<e;++d)u+=this._computeAngle(d,s,f);for(d=e;d<e+i;d++){const e=t[d];let i=u,g=u+this._computeAngle(d,s,f),p=o.getDataVisibility(d)?r.getDistanceFromCenterForValue(this.getParsed(d).r):0;u=g,n&&(a.animateScale&&(p=0),a.animateRotate&&(i=g=c));const m={x:h,y:l,innerRadius:0,outerRadius:p,startAngle:i,endAngle:g,options:this.resolveDataElementOptions(d,e.active?"active":s)};this.updateElement(e,d,m,s)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?bt(this.resolveDataElementOptions(t,e).angle||i):0}}var Xi=Object.freeze({__proto__:null,BarController:class extends Fi{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,s){return Wi(t,e,i,s)}parseArrayData(t,e,i,s){return Wi(t,e,i,s)}parseObjectData(t,e,i,s){const{iScale:n,vScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,h="x"===n.axis?a:r,l="x"===o.axis?a:r,c=[];let d,u,f,g;for(d=i,u=i+s;d<u;++d)g=e[d],f={},f[n.axis]=n.parse(J(g,h),d),c.push(Bi(J(g,l),f,o,d));return c}updateRangeFromParsed(t,e,i,s){super.updateRangeFromParsed(t,e,i,s);const n=i._custom;n&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,n.min),t.max=Math.max(t.max,n.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:s}=e,n=this.getParsed(t),o=n._custom,a=Ni(o)?"["+o.start+", "+o.end+"]":""+s.getLabelForValue(n[s.axis]);return{label:""+i.getLabelForValue(n[i.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,s){const n="reset"===s,{index:o,_cachedMeta:{vScale:a}}=this,r=a.getBasePixel(),h=a.isHorizontal(),l=this._getRuler(),{sharedOptions:c,includeOptions:d}=this._getSharedOptions(e,s);for(let u=e;u<e+i;u++){const e=this.getParsed(u),i=n||I(e[a.axis])?{base:r,head:r}:this._calculateBarValuePixels(u),f=this._calculateBarIndexPixels(u,l),g=(e._stacks||{})[a.axis],p={horizontal:h,base:i.base,enableBorderRadius:!g||Ni(e._custom)||o===g._top||o===g._bottom,x:h?i.head:f.center,y:h?f.center:i.head,height:h?f.size:Math.abs(i.size),width:h?Math.abs(i.size):f.size};d&&(p.options=c||this.resolveDataElementOptions(u,t[u].active?"active":s));const m=p.options||t[u].options;Hi(p,m,g,o),Yi(p,m,l.ratio),this.updateElement(t[u],u,p,s)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,s=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),n=i.options.stacked,o=[],a=t=>{const i=t.controller.getParsed(e),s=i&&i[t.vScale.axis];if(I(s)||isNaN(s))return!0};for(const i of s)if((void 0===e||!a(i))&&((!1===n||-1===o.indexOf(i.stack)||void 0===n&&void 0===i.stack)&&o.push(i.stack),i.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const s=this._getStacks(t,i),n=void 0!==e?s.indexOf(e):-1;return-1===n?s.length-1:n}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,s=[];let n,o;for(n=0,o=e.data.length;n<o;++n)s.push(i.getPixelForValue(this.getParsed(n)[i.axis],n));const a=t.barThickness;return{min:a||Vi(e),pixels:s,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:s},options:{base:n,minBarLength:o}}=this,a=n||0,r=this.getParsed(t),h=r._custom,l=Ni(h);let c,d,u=r[e.axis],f=0,g=i?this.applyStack(e,r,i):u;g!==u&&(f=g-u,g=u),l&&(u=h.barStart,g=h.barEnd-h.barStart,0!==u&&ut(u)!==ut(h.barEnd)&&(f=0),f+=u);const p=I(n)||l?f:n;let m=e.getPixelForValue(p);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(f+g):m,d=c-m,Math.abs(d)<o){d=function(t,e,i){return 0!==t?ut(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,a)*o,u===a&&(m-=d/2);const t=e.getPixelForDecimal(0),n=e.getPixelForDecimal(1),h=Math.min(t,n),f=Math.max(t,n);m=Math.max(Math.min(m,f),h),c=m+d,i&&!l&&(r._stacks[e.axis]._visualValues[s]=e.getValueForPixel(c)-e.getValueForPixel(m))}if(m===e.getPixelForValue(a)){const t=ut(d)*e.getLineWidthForValue(a)/2;m+=t,d-=t}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,s=this.options,n=s.skipNull,o=W(s.maxBarThickness,1/0);let a,r;if(e.grouped){const i=n?this._getStackCount(t):e.stackCount,h="flex"===s.barThickness?function(t,e,i,s){const n=e.pixels,o=n[t];let a=t>0?n[t-1]:null,r=t<n.length-1?n[t+1]:null;const h=i.categoryPercentage;null===a&&(a=o-(null===r?e.end-e.start:r-o)),null===r&&(r=o+o-a);const l=o-(o-Math.min(a,r))/2*h;return{chunk:Math.abs(r-a)/2*h/s,ratio:i.barPercentage,start:l}}(t,e,s,i):function(t,e,i,s){const n=i.barThickness;let o,a;return I(n)?(o=e.min*i.categoryPercentage,a=i.barPercentage):(o=n*s,a=1),{chunk:o/s,ratio:a,start:e.pixels[t]-o/2}}(t,e,s,i),l=this._getStackIndex(this.index,this._cachedMeta.stack,n?t:void 0);a=h.start+h.chunk*l+h.chunk/2,r=Math.min(o,h.chunk*h.ratio)}else a=i.getPixelForValue(this.getParsed(t)[i.axis],t),r=Math.min(o,e.min*e.ratio);return{base:a-r/2,head:a+r/2,center:a,size:r}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,s=i.length;let n=0;for(;n<s;++n)null!==this.getParsed(n)[e.axis]&&i[n].draw(this._ctx)}},BubbleController:class extends Fi{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,s){const n=super.parsePrimitiveData(t,e,i,s);for(let t=0;t<n.length;t++)n[t]._custom=this.resolveDataElementOptions(t+i).radius;return n}parseArrayData(t,e,i,s){const n=super.parseArrayData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=W(s[2],this.resolveDataElementOptions(t+i).radius)}return n}parseObjectData(t,e,i,s){const n=super.parseObjectData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=W(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return n}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y),h=o._custom;return{label:i[t]||"",value:"("+a+", "+r+(h?", "+h:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:r,includeOptions:h}=this._getSharedOptions(e,s),l=o.axis,c=a.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!n&&this.getParsed(d),u={},f=u[l]=n?o.getPixelForDecimal(.5):o.getPixelForValue(i[l]),g=u[c]=n?a.getBasePixel():a.getPixelForValue(i[c]);u.skip=isNaN(f)||isNaN(g),h&&(u.options=r||this.resolveDataElementOptions(d,e.active?"active":s),n&&(u.options.radius=0)),this.updateElement(e,d,u,s)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let s=super.resolveDataElementOptions(t,e);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const n=s.radius;return"active"!==e&&(s.radius=0),s.radius+=W(i&&i._custom,n),s}},DoughnutController:Zi,LineController:class extends Fi{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:s=[],_dataset:n}=e,o=this.chart._animationsDisabled;let{start:a,count:r}=Ft(e,s,o);this._drawStart=a,this._drawCount=r,Vt(e)&&(a=0,r=s.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!n._decimated,i.points=s;const h=this.resolveDatasetElementOptions(t);this.options.showLine||(h.borderWidth=0),h.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:h},t),this.updateElements(s,a,r,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a,_stacked:r,_dataset:h}=this._cachedMeta,{sharedOptions:l,includeOptions:c}=this._getSharedOptions(e,s),d=o.axis,u=a.axis,{spanGaps:f,segment:g}=this.options,p=pt(f)?f:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||n||"none"===s,b=e+i,x=t.length;let _=e>0&&this.getParsed(e-1);for(let i=0;i<x;++i){const f=t[i],x=m?f:{};if(i<e||i>=b){x.skip=!0;continue}const y=this.getParsed(i),v=I(y[u]),w=x[d]=o.getPixelForValue(y[d],i),M=x[u]=n||v?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,y,r):y[u],i);x.skip=isNaN(w)||isNaN(M)||v,x.stop=i>0&&Math.abs(y[d]-_[d])>p,g&&(x.parsed=y,x.raw=h.data[i]),c&&(x.options=l||this.resolveDataElementOptions(i,f.active?"active":s)),m||this.updateElement(f,i,x,s),_=y}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,s=t.data||[];if(!s.length)return i;const n=s[0].size(this.resolveDataElementOptions(0)),o=s[s.length-1].size(this.resolveDataElementOptions(s.length-1));return Math.max(i,n,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}},PieController:class extends Zi{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},PolarAreaController:Ui,RadarController:class extends Fi{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,s){return je.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta,i=e.dataset,s=e.data||[],n=e.iScale.getLabels();if(i.points=s,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:n.length===s.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(s,0,s.length,t)}updateElements(t,e,i,s){const n=this._cachedMeta.rScale,o="reset"===s;for(let a=e;a<e+i;a++){const e=t[a],i=this.resolveDataElementOptions(a,e.active?"active":s),r=n.getPointPositionForValue(a,this.getParsed(a).r),h=o?n.xCenter:r.x,l=o?n.yCenter:r.y,c={x:h,y:l,angle:r.angle,skip:isNaN(h)||isNaN(l),options:i};this.updateElement(e,a,c,s)}}},ScatterController:class extends Fi{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y);return{label:i[t]||"",value:"("+a+", "+r+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,s=this.chart._animationsDisabled;let{start:n,count:o}=Ft(e,i,s);if(this._drawStart=n,this._drawCount=o,Vt(e)&&(n=0,o=i.length),this.options.showLine){const{dataset:n,_dataset:o}=e;n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!o._decimated,n.points=i;const a=this.resolveDatasetElementOptions(t);a.segment=this.options.segment,this.updateElement(n,void 0,{animated:!s,options:a},t)}this.updateElements(i,n,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a,_stacked:r,_dataset:h}=this._cachedMeta,l=this.resolveDataElementOptions(e,s),c=this.getSharedOptions(l),d=this.includeOptions(s,c),u=o.axis,f=a.axis,{spanGaps:g,segment:p}=this.options,m=pt(g)?g:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||n||"none"===s;let x=e>0&&this.getParsed(e-1);for(let l=e;l<e+i;++l){const e=t[l],i=this.getParsed(l),g=b?e:{},_=I(i[f]),y=g[u]=o.getPixelForValue(i[u],l),v=g[f]=n||_?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,i,r):i[f],l);g.skip=isNaN(y)||isNaN(v)||_,g.stop=l>0&&Math.abs(i[u]-x[u])>m,p&&(g.parsed=i,g.raw=h.data[l]),d&&(g.options=c||this.resolveDataElementOptions(l,e.active?"active":s)),b||this.updateElement(e,l,g,s),x=i}this.updateSharedOptions(c,s,l)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,s=i.options&&i.options.borderWidth||0;if(!e.length)return s;const n=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(s,n,o)/2}}});function qi(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Ki{static override(t){Object.assign(Ki.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return qi()}parse(){return qi()}format(){return qi()}add(){return qi()}diff(){return qi()}startOf(){return qi()}endOf(){return qi()}}var Gi=Ki;function Ji(t,e,i,s){const{controller:n,data:o,_sorted:a}=t,r=n._cachedMeta.iScale;if(r&&e===r.axis&&"r"!==e&&a&&o.length){const t=r._reversePixels?Ot:Ct;if(!s)return t(o,e,i);if(n._sharedOptions){const s=o[0],n="function"==typeof s.getRange&&s.getRange(e);if(n){const s=t(o,e,i-n),a=t(o,e,i+n);return{lo:s.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function Qi(t,e,i,s,n){const o=t.getSortedVisibleDatasetMetas(),a=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:r}=o[t],{lo:h,hi:l}=Ji(o[t],e,a,n);for(let t=h;t<=l;++t){const e=r[t];e.skip||s(e,i,t)}}}function ts(t,e,i,s,n){const o=[];return n||t.isPointInArea(e)?(Qi(t,i,e,(function(i,a,r){(n||ce(i,t.chartArea,0))&&i.inRange(e.x,e.y,s)&&o.push({element:i,datasetIndex:a,index:r})}),!0),o):o}function es(t,e,i,s,n,o){return o||t.isPointInArea(e)?"r"!==i||s?function(t,e,i,s,n,o){let a=[];const r=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,s){const n=e?Math.abs(t.x-s.x):0,o=i?Math.abs(t.y-s.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(o,2))}}(i);let h=Number.POSITIVE_INFINITY;return Qi(t,i,e,(function(i,l,c){const d=i.inRange(e.x,e.y,n);if(s&&!d)return;const u=i.getCenterPoint(n);if(!o&&!t.isPointInArea(u)&&!d)return;const f=r(e,u);f<h?(a=[{element:i,datasetIndex:l,index:c}],h=f):f===h&&a.push({element:i,datasetIndex:l,index:c})})),a}(t,e,i,s,n,o):function(t,e,i,s){let n=[];return Qi(t,i,e,(function(t,i,o){const{startAngle:a,endAngle:r}=t.getProps(["startAngle","endAngle"],s),{angle:h}=yt(t,{x:e.x,y:e.y});kt(h,a,r)&&n.push({element:t,datasetIndex:i,index:o})})),n}(t,e,i,n):[]}function is(t,e,i,s,n){const o=[],a="x"===i?"inXRange":"inYRange";let r=!1;return Qi(t,i,e,((t,s,h)=>{t[a](e[i],n)&&(o.push({element:t,datasetIndex:s,index:h}),r=r||t.inRange(e.x,e.y,n))})),s&&!r?[]:o}var ss={evaluateInteractionItems:Qi,modes:{index(t,e,i,s){const n=si(e,t),o=i.axis||"x",a=i.includeInvisible||!1,r=i.intersect?ts(t,n,o,s,a):es(t,n,o,!1,s,a),h=[];return r.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=r[0].index,i=t.data[e];i&&!i.skip&&h.push({element:i,datasetIndex:t.index,index:e})})),h):[]},dataset(t,e,i,s){const n=si(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;let r=i.intersect?ts(t,n,o,s,a):es(t,n,o,!1,s,a);if(r.length>0){const e=r[0].datasetIndex,i=t.getDatasetMeta(e).data;r=[];for(let t=0;t<i.length;++t)r.push({element:i[t],datasetIndex:e,index:t})}return r},point:(t,e,i,s)=>ts(t,si(e,t),i.axis||"xy",s,i.includeInvisible||!1),nearest(t,e,i,s){const n=si(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;return es(t,n,o,i.intersect,s,a)},x:(t,e,i,s)=>is(t,si(e,t),"x",i.intersect,s),y:(t,e,i,s)=>is(t,si(e,t),"y",i.intersect,s)}};const ns=["left","top","right","bottom"];function os(t,e){return t.filter((t=>t.pos===e))}function as(t,e){return t.filter((t=>-1===ns.indexOf(t.pos)&&t.box.axis===e))}function rs(t,e){return t.sort(((t,i)=>{const s=e?i:t,n=e?t:i;return s.weight===n.weight?s.index-n.index:s.weight-n.weight}))}function hs(t,e,i,s){return Math.max(t[i],e[i])+Math.max(t[s],e[s])}function ls(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function cs(t,e,i,s){const{pos:n,box:o}=i,a=t.maxPadding;if(!F(n)){i.size&&(t[n]-=i.size);const e=s[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[n]+=i.size}o.getPadding&&ls(a,o.getPadding());const r=Math.max(0,e.outerWidth-hs(a,t,"left","right")),h=Math.max(0,e.outerHeight-hs(a,t,"top","bottom")),l=r!==t.w,c=h!==t.h;return t.w=r,t.h=h,i.horizontal?{same:l,other:c}:{same:c,other:l}}function ds(t,e){const i=e.maxPadding;return function(t){const s={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{s[t]=Math.max(e[t],i[t])})),s}(t?["left","right"]:["top","bottom"])}function us(t,e,i,s){const n=[];let o,a,r,h,l,c;for(o=0,a=t.length,l=0;o<a;++o){r=t[o],h=r.box,h.update(r.width||e.w,r.height||e.h,ds(r.horizontal,e));const{same:a,other:d}=cs(e,i,r,s);l|=a&&n.length,c=c||d,h.fullSize||n.push(r)}return l&&us(n,e,i,s)||c}function fs(t,e,i,s,n){t.top=i,t.left=e,t.right=e+s,t.bottom=i+n,t.width=s,t.height=n}function gs(t,e,i,s){const n=i.padding;let{x:o,y:a}=e;for(const r of t){const t=r.box,h=s[r.stack]||{count:1,placed:0,weight:1},l=r.stackWeight/h.weight||1;if(r.horizontal){const s=e.w*l,o=h.size||t.height;tt(h.start)&&(a=h.start),t.fullSize?fs(t,n.left,a,i.outerWidth-n.right-n.left,o):fs(t,e.left+h.placed,a,s,o),h.start=a,h.placed+=s,a=t.bottom}else{const s=e.h*l,a=h.size||t.width;tt(h.start)&&(o=h.start),t.fullSize?fs(t,o,n.top,a,i.outerHeight-n.bottom-n.top):fs(t,o,e.top+h.placed,a,s),h.start=o,h.placed+=s,o=t.right}}e.x=o,e.y=a}var ps={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,s){if(!t)return;const n=Pe(t.options.layout.padding),o=Math.max(e-n.width,0),a=Math.max(i-n.height,0),r=function(t){const e=function(t){const e=[];let i,s,n,o,a,r;for(i=0,s=(t||[]).length;i<s;++i)n=t[i],({position:o,options:{stack:a,stackWeight:r=1}}=n),e.push({index:i,box:n,pos:o,horizontal:n.isHorizontal(),weight:n.weight,stack:a&&o+a,stackWeight:r});return e}(t),i=rs(e.filter((t=>t.box.fullSize)),!0),s=rs(os(e,"left"),!0),n=rs(os(e,"right")),o=rs(os(e,"top"),!0),a=rs(os(e,"bottom")),r=as(e,"x"),h=as(e,"y");return{fullSize:i,leftAndTop:s.concat(o),rightAndBottom:n.concat(h).concat(a).concat(r),chartArea:os(e,"chartArea"),vertical:s.concat(n).concat(h),horizontal:o.concat(a).concat(r)}}(t.boxes),h=r.vertical,l=r.horizontal;j(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=h.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:n,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/c,hBoxMaxHeight:a/2}),u=Object.assign({},n);ls(u,Pe(s));const f=Object.assign({maxPadding:u,w:o,h:a,x:n.left,y:n.top},n),g=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:s,stackWeight:n}=i;if(!t||!ns.includes(s))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=n}return e}(t),{vBoxMaxWidth:s,hBoxMaxHeight:n}=e;let o,a,r;for(o=0,a=t.length;o<a;++o){r=t[o];const{fullSize:a}=r.box,h=i[r.stack],l=h&&r.stackWeight/h.weight;r.horizontal?(r.width=l?l*s:a&&e.availableWidth,r.height=n):(r.width=s,r.height=l?l*n:a&&e.availableHeight)}return i}(h.concat(l),d);us(r.fullSize,f,d,g),us(h,f,d,g),us(l,f,d,g)&&us(h,f,d,g),function(t){const e=t.maxPadding;function i(i){const s=Math.max(e[i]-t[i],0);return t[i]+=s,s}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),gs(r.leftAndTop,f,d,g),f.x+=f.w,f.y+=f.h,gs(r.rightAndBottom,f,d,g),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},j(r.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class ms{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,s){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,s?Math.floor(e/s):i)}}isAttached(t){return!0}updateConfig(t){}}class bs extends ms{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const xs="$chartjs",_s={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ys=t=>null===t||""===t,vs=!!ai&&{passive:!0};function ws(t,e,i){t.canvas.removeEventListener(e,i,vs)}function Ms(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function ks(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Ms(i.addedNodes,s),e=e&&!Ms(i.removedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}function Ss(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Ms(i.removedNodes,s),e=e&&!Ms(i.addedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}const Ps=new Map;let Ds=0;function Cs(){const t=window.devicePixelRatio;t!==Ds&&(Ds=t,Ps.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function Os(t,e,i){const s=t.canvas,n=s&&Ge(s);if(!n)return;const o=Rt(((t,e)=>{const s=n.clientWidth;i(t,e),s<n.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,s=e.contentRect.height;0===i&&0===s||o(i,s)}));return a.observe(n),function(t,e){Ps.size||window.addEventListener("resize",Cs),Ps.set(t,e)}(t,o),a}function As(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){Ps.delete(t),Ps.size||window.removeEventListener("resize",Cs)}(t)}function Ts(t,e,i){const s=t.canvas,n=Rt((e=>{null!==t.ctx&&i(function(t,e){const i=_s[t.type]||t.type,{x:s,y:n}=si(t,e);return{type:i,chart:e,native:t,x:void 0!==s?s:null,y:void 0!==n?n:null}}(e,t))}),t);return function(t,e,i){t.addEventListener(e,i,vs)}(s,e,n),n}class Ls extends ms{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,s=t.getAttribute("height"),n=t.getAttribute("width");if(t[xs]={initial:{height:s,width:n,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",ys(n)){const e=ri(t,"width");void 0!==e&&(t.width=e)}if(ys(s))if(""===t.style.height)t.height=t.width/(e||2);else{const e=ri(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[xs])return!1;const i=e[xs].initial;["height","width"].forEach((t=>{const s=i[t];I(s)?e.removeAttribute(t):e.setAttribute(t,s)}));const s=i.style||{};return Object.keys(s).forEach((t=>{e.style[t]=s[t]})),e.width=e.width,delete e[xs],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const s=t.$proxies||(t.$proxies={}),n={attach:ks,detach:Ss,resize:Os}[e]||Ts;s[e]=n(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),s=i[e];s&&(({attach:As,detach:As,resize:As}[e]||ws)(t,e,s),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,s){return function(t,e,i,s){const n=Qe(t),o=ei(n,"margin"),a=Je(n.maxWidth,t,"clientWidth")||at,r=Je(n.maxHeight,t,"clientHeight")||at,h=function(t,e,i){let s,n;if(void 0===e||void 0===i){const o=Ge(t);if(o){const t=o.getBoundingClientRect(),a=Qe(o),r=ei(a,"border","width"),h=ei(a,"padding");e=t.width-h.width-r.width,i=t.height-h.height-r.height,s=Je(a.maxWidth,o,"clientWidth"),n=Je(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:s||at,maxHeight:n||at}}(t,e,i);let{width:l,height:c}=h;if("content-box"===n.boxSizing){const t=ei(n,"border","width"),e=ei(n,"padding");l-=e.width+t.width,c-=e.height+t.height}return l=Math.max(0,l-o.width),c=Math.max(0,s?l/s:c-o.height),l=ni(Math.min(l,a,h.maxWidth)),c=ni(Math.min(c,r,h.maxHeight)),l&&!c&&(c=ni(l/2)),(void 0!==e||void 0!==i)&&s&&h.height&&c>h.height&&(c=h.height,l=ni(Math.floor(c*s))),{width:l,height:c}}(t,e,i,s)}isAttached(t){const e=Ge(t);return!(!e||!e.isConnected)}}class Es{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return pt(this.x)&&pt(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const s={};return t.forEach((t=>{s[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),s}}function Rs(t,e,i,s,n){const o=W(s,0),a=Math.min(W(n,t.length),t.length);let r,h,l,c=0;for(i=Math.ceil(i),n&&(r=n-s,i=r/Math.floor(r/i)),l=o;l<0;)c++,l=Math.round(o+c*i);for(h=Math.max(o,0);h<a;h++)h===l&&(e.push(t[h]),c++,l=Math.round(o+c*i))}const Is=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,zs=(t,e)=>Math.min(e||t,t);function Fs(t,e){const i=[],s=t.length/e,n=t.length;let o=0;for(;o<n;o+=s)i.push(t[Math.floor(o)]);return i}function Vs(t,e,i){const s=t.ticks.length,n=Math.min(e,s-1),o=t._startPixel,a=t._endPixel,r=1e-6;let h,l=t.getPixelForTick(n);if(!(i&&(h=1===s?Math.max(l-o,a-l):0===e?(t.getPixelForTick(1)-l)/2:(l-t.getPixelForTick(n-1))/2,l+=n<e?h:-h,l<o-r||l>a+r)))return l}function Bs(t){return t.drawTicks?t.tickLength:0}function Ws(t,e){if(!t.display)return 0;const i=De(t.font,e),s=Pe(t.padding);return(z(t.text)?t.text.length:1)*i.lineHeight+s.height}function Ns(t,e,i){let s=It(t);return(i&&"right"!==e||!i&&"right"===e)&&(s=(t=>"left"===t?"right":"right"===t?"left":t)(s)),s}class Hs extends Es{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:s}=this;return t=B(t,Number.POSITIVE_INFINITY),e=B(e,Number.NEGATIVE_INFINITY),i=B(i,Number.POSITIVE_INFINITY),s=B(s,Number.NEGATIVE_INFINITY),{min:B(t,i),max:B(e,s),minDefined:V(t),maxDefined:V(e)}}getMinMax(t){let e,{min:i,max:s,minDefined:n,maxDefined:o}=this.getUserBounds();if(n&&o)return{min:i,max:s};const a=this.getMatchingVisibleMetas();for(let r=0,h=a.length;r<h;++r)e=a[r].controller.getMinMax(this,t),n||(i=Math.min(i,e.min)),o||(s=Math.max(s,e.max));return i=o&&i>s?s:i,s=n&&i>s?i:s,{min:B(i,B(s,i)),max:B(s,B(i,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){H(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:s,grace:n,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:s,max:n}=t,o=N(e,(n-s)/2),a=(t,e)=>i&&0===t?0:t+e;return{min:a(s,-Math.abs(o)),max:a(n,o)}}(this,n,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const r=a<this.ticks.length;this._convertTicksToLabels(r?Fs(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const i=t.options.ticks,s=function(t){const e=t.options.offset,i=t._tickSize(),s=t._length/i+(e?0:1),n=t._maxLength/i;return Math.floor(Math.min(s,n))}(t),n=Math.min(i.maxTicksLimit||s,s),o=i.major.enabled?function(t){const e=[];let i,s;for(i=0,s=t.length;i<s;i++)t[i].major&&e.push(i);return e}(e):[],a=o.length,r=o[0],h=o[a-1],l=[];if(a>n)return function(t,e,i,s){let n,o=0,a=i[0];for(s=Math.ceil(s),n=0;n<t.length;n++)n===a&&(e.push(t[n]),o++,a=i[o*s])}(e,l,o,a/n),l;const c=function(t,e,i){const s=function(t){const e=t.length;let i,s;if(e<2)return!1;for(s=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==s)return!1;return s}(t),n=e.length/i;if(!s)return Math.max(n,1);const o=function(t){const e=[],i=Math.sqrt(t);let s;for(s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(s);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>n)return e}return Math.max(n,1)}(o,e,n);if(a>0){let t,i;const s=a>1?Math.round((h-r)/(a-1)):null;for(Rs(e,l,c,I(s)?0:r-s,r),t=0,i=a-1;t<i;t++)Rs(e,l,c,o[t],o[t+1]);return Rs(e,l,c,h,I(s)?e.length:h+s),l}return Rs(e,l,c),l}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),r&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){H(this.options.afterUpdate,[this])}beforeSetDimensions(){H(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){H(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),H(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){H(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,s,n;for(i=0,s=t.length;i<s;i++)n=t[i],n.label=H(e.callback,[n.value,i,t],this)}afterTickToLabelConversion(){H(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){H(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=zs(this.ticks.length,t.ticks.maxTicksLimit),s=e.minRotation||0,n=e.maxRotation;let o,a,r,h=s;if(!this._isVisible()||!e.display||s>=n||i<=1||!this.isHorizontal())return void(this.labelRotation=s);const l=this._getLabelSizes(),c=l.widest.width,d=l.highest.height,u=St(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),a=this.maxHeight-Bs(t.grid)-e.padding-Ws(t.title,this.chart.options.font),r=Math.sqrt(c*c+d*d),h=xt(Math.min(Math.asin(St((l.highest.height+6)/o,-1,1)),Math.asin(St(a/r,-1,1))-Math.asin(St(d/r,-1,1)))),h=Math.max(s,Math.min(n,h))),this.labelRotation=h}afterCalculateLabelRotation(){H(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){H(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:s,grid:n}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=Ws(s,e.options.font);if(a?(t.width=this.maxWidth,t.height=Bs(n)+o):(t.height=this.maxHeight,t.width=Bs(n)+o),i.display&&this.ticks.length){const{first:e,last:s,widest:n,highest:o}=this._getLabelSizes(),r=2*i.padding,h=bt(this.labelRotation),l=Math.cos(h),c=Math.sin(h);if(a){const e=i.mirror?0:c*n.width+l*o.height;t.height=Math.min(this.maxHeight,t.height+e+r)}else{const e=i.mirror?0:l*n.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+r)}this._calculatePadding(e,s,c,l)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,s){const{ticks:{align:n,padding:o},position:a}=this.options,r=0!==this.labelRotation,h="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,l=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;r?h?(c=s*t.width,d=i*e.height):(c=i*t.height,d=s*e.width):"start"===n?d=e.width:"end"===n?c=t.width:"inner"!==n&&(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((d-l+o)*this.width/(this.width-l),0)}else{let i=e.height/2,s=t.height/2;"start"===n?(i=0,s=t.height):"end"===n&&(i=e.height,s=0),this.paddingTop=i+o,this.paddingBottom=s+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){H(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)I(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Fs(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:s,_longestTextCache:n}=this,o=[],a=[],r=Math.floor(e/zs(e,i));let h,l,c,d,u,f,g,p,m,b,x,_=0,y=0;for(h=0;h<e;h+=r){if(d=t[h].label,u=this._resolveTickFontOptions(h),s.font=f=u.string,g=n[f]=n[f]||{data:{},gc:[]},p=u.lineHeight,m=b=0,I(d)||z(d)){if(z(d))for(l=0,c=d.length;l<c;++l)x=d[l],I(x)||z(x)||(m=ne(s,g.data,g.gc,m,x),b+=p)}else m=ne(s,g.data,g.gc,m,d),b=p;o.push(m),a.push(b),_=Math.max(m,_),y=Math.max(b,y)}!function(t,e){j(t,(t=>{const i=t.gc,s=i.length/2;let n;if(s>e){for(n=0;n<s;++n)delete t.data[i[n]];i.splice(0,s)}}))}(n,e);const v=o.indexOf(_),w=a.indexOf(y),M=t=>({width:o[t]||0,height:a[t]||0});return{first:M(0),last:M(e-1),widest:M(v),highest:M(w),widths:o,heights:a}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return St(this._alignToPixels?ae(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return Oe(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=Oe(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=bt(this.labelRotation),i=Math.abs(Math.cos(e)),s=Math.abs(Math.sin(e)),n=this._getLabelSizes(),o=t.autoSkipPadding||0,a=n?n.widest.width+o:0,r=n?n.highest.height+o:0;return this.isHorizontal()?r*i>a*s?a/i:r/s:r*s<a*i?r/i:a/s}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,s=this.options,{grid:n,position:o,border:a}=s,r=n.offset,h=this.isHorizontal(),l=this.ticks.length+(r?1:0),c=Bs(n),d=[],u=a.setContext(this.getContext()),f=u.display?u.width:0,g=f/2,p=function(t){return ae(i,t,f)};let m,b,x,_,y,v,w,M,k,S,P,D;if("top"===o)m=p(this.bottom),v=this.bottom-c,M=m-g,S=p(t.top)+g,D=t.bottom;else if("bottom"===o)m=p(this.top),S=t.top,D=p(t.bottom)-g,v=m+g,M=this.top+c;else if("left"===o)m=p(this.right),y=this.right-c,w=m-g,k=p(t.left)+g,P=t.right;else if("right"===o)m=p(this.left),k=t.left,P=p(t.right)-g,y=m+g,w=this.left+c;else if("x"===e){if("center"===o)m=p((t.top+t.bottom)/2+.5);else if(F(o)){const t=Object.keys(o)[0],e=o[t];m=p(this.chart.scales[t].getPixelForValue(e))}S=t.top,D=t.bottom,v=m+g,M=v+c}else if("y"===e){if("center"===o)m=p((t.left+t.right)/2);else if(F(o)){const t=Object.keys(o)[0],e=o[t];m=p(this.chart.scales[t].getPixelForValue(e))}y=m-g,w=y-c,k=t.left,P=t.right}const C=W(s.ticks.maxTicksLimit,l),O=Math.max(1,Math.ceil(l/C));for(b=0;b<l;b+=O){const t=this.getContext(b),e=n.setContext(t),s=a.setContext(t),o=e.lineWidth,l=e.color,c=s.dash||[],u=s.dashOffset,f=e.tickWidth,g=e.tickColor,p=e.tickBorderDash||[],m=e.tickBorderDashOffset;x=Vs(this,b,r),void 0!==x&&(_=ae(i,x,o),h?y=w=k=P=_:v=M=S=D=_,d.push({tx1:y,ty1:v,tx2:w,ty2:M,x1:k,y1:S,x2:P,y2:D,width:o,color:l,borderDash:c,borderDashOffset:u,tickWidth:f,tickColor:g,tickBorderDash:p,tickBorderDashOffset:m}))}return this._ticksLength=l,this._borderValue=m,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:s,ticks:n}=i,o=this.isHorizontal(),a=this.ticks,{align:r,crossAlign:h,padding:l,mirror:c}=n,d=Bs(i.grid),u=d+l,f=c?-l:u,g=-bt(this.labelRotation),p=[];let m,b,x,_,y,v,w,M,k,S,P,D,C="middle";if("top"===s)v=this.bottom-f,w=this._getXAxisLabelAlignment();else if("bottom"===s)v=this.top+f,w=this._getXAxisLabelAlignment();else if("left"===s){const t=this._getYAxisLabelAlignment(d);w=t.textAlign,y=t.x}else if("right"===s){const t=this._getYAxisLabelAlignment(d);w=t.textAlign,y=t.x}else if("x"===e){if("center"===s)v=(t.top+t.bottom)/2+u;else if(F(s)){const t=Object.keys(s)[0],e=s[t];v=this.chart.scales[t].getPixelForValue(e)+u}w=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===s)y=(t.left+t.right)/2-u;else if(F(s)){const t=Object.keys(s)[0],e=s[t];y=this.chart.scales[t].getPixelForValue(e)}w=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===r?C="top":"end"===r&&(C="bottom"));const O=this._getLabelSizes();for(m=0,b=a.length;m<b;++m){x=a[m],_=x.label;const t=n.setContext(this.getContext(m));M=this.getPixelForTick(m)+n.labelOffset,k=this._resolveTickFontOptions(m),S=k.lineHeight,P=z(_)?_.length:1;const e=P/2,i=t.color,r=t.textStrokeColor,l=t.textStrokeWidth;let d,u=w;if(o?(y=M,"inner"===w&&(u=m===b-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),D="top"===s?"near"===h||0!==g?-P*S+S/2:"center"===h?-O.highest.height/2-e*S+S:-O.highest.height+S/2:"near"===h||0!==g?S/2:"center"===h?O.highest.height/2-e*S:O.highest.height-P*S,c&&(D*=-1),0===g||t.showLabelBackdrop||(y+=S/2*Math.sin(g))):(v=M,D=(1-P)*S/2),t.showLabelBackdrop){const e=Pe(t.backdropPadding),i=O.heights[m],s=O.widths[m];let n=D-e.top,o=0-e.left;switch(C){case"middle":n-=i/2;break;case"bottom":n-=i}switch(w){case"center":o-=s/2;break;case"right":o-=s}d={left:o,top:n,width:s+e.width,height:i+e.height,color:t.backdropColor}}p.push({label:_,font:k,textOffset:D,options:{rotation:g,color:i,strokeColor:r,strokeWidth:l,textAlign:u,textBaseline:C,translation:[y,v],backdrop:d}})}return p}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-bt(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:s,padding:n}}=this.options,o=t+n,a=this._getLabelSizes().widest.width;let r,h;return"left"===e?s?(h=this.right+n,"near"===i?r="left":"center"===i?(r="center",h+=a/2):(r="right",h+=a)):(h=this.right-o,"near"===i?r="right":"center"===i?(r="center",h-=a/2):(r="left",h=this.left)):"right"===e?s?(h=this.left+n,"near"===i?r="right":"center"===i?(r="center",h-=a/2):(r="left",h-=a)):(h=this.left+o,"near"===i?r="left":"center"===i?(r="center",h+=a/2):(r="right",h=this.right)):r="right",{textAlign:r,x:h}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:s,width:n,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,s,n,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,s=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let n,o;const a=(t,e,s)=>{s.width&&s.color&&(i.save(),i.lineWidth=s.width,i.strokeStyle=s.color,i.setLineDash(s.borderDash||[]),i.lineDashOffset=s.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(n=0,o=s.length;n<o;++n){const t=s[n];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:s}}=this,n=i.setContext(this.getContext()),o=i.display?n.width:0;if(!o)return;const a=s.setContext(this.getContext(0)).lineWidth,r=this._borderValue;let h,l,c,d;this.isHorizontal()?(h=ae(t,this.left,o)-o/2,l=ae(t,this.right,a)+a/2,c=d=r):(c=ae(t,this.top,o)-o/2,d=ae(t,this.bottom,a)+a/2,h=l=r),e.save(),e.lineWidth=n.width,e.strokeStyle=n.color,e.beginPath(),e.moveTo(h,c),e.lineTo(l,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&de(e,i);const s=this.getLabelItems(t);for(const t of s){const i=t.options,s=t.font;be(e,t.label,0,t.textOffset,s,i)}i&&ue(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:s}}=this;if(!i.display)return;const n=De(i.font),o=Pe(i.padding),a=i.align;let r=n.lineHeight/2;"bottom"===e||"center"===e||F(e)?(r+=o.bottom,z(i.text)&&(r+=n.lineHeight*(i.text.length-1))):r+=o.top;const{titleX:h,titleY:l,maxWidth:c,rotation:d}=function(t,e,i,s){const{top:n,left:o,bottom:a,right:r,chart:h}=t,{chartArea:l,scales:c}=h;let d,u,f,g=0;const p=a-n,m=r-o;if(t.isHorizontal()){if(u=zt(s,o,r),F(i)){const t=Object.keys(i)[0],s=i[t];f=c[t].getPixelForValue(s)+p-e}else f="center"===i?(l.bottom+l.top)/2+p-e:Is(t,i,e);d=r-o}else{if(F(i)){const t=Object.keys(i)[0],s=i[t];u=c[t].getPixelForValue(s)-m+e}else u="center"===i?(l.left+l.right)/2-m+e:Is(t,i,e);f=zt(s,a,n),g="left"===i?-ht:ht}return{titleX:u,titleY:f,maxWidth:d,rotation:g}}(this,r,e,a);be(t,i.text,0,0,n,{color:i.color,maxWidth:c,rotation:d,textAlign:Ns(a,e,s),textBaseline:"middle",translation:[h,l]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=W(t.grid&&t.grid.z,-1),s=W(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Hs.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:s,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",s=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];o[i]!==this.id||t&&o.type!==t||s.push(o)}return s}_resolveTickFontOptions(t){return De(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class js{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const s=this.items,n=t.id,o=this.scope+"."+n;if(!n)throw new Error("class does not have id: "+t);return n in s||(s[n]=t,function(t,e,i){const s=X(Object.create(null),[i?se.get(i):{},se.get(e),t.defaults]);se.set(e,s),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const s=i.split("."),n=s.pop(),o=[t].concat(s).join("."),a=e[i].split("."),r=a.pop(),h=a.join(".");se.route(o,n,h,r)}))}(e,t.defaultRoutes),t.descriptors&&se.describe(e,t.descriptors)}(t,o,i),this.override&&se.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,s=this.scope;i in e&&delete e[i],s&&i in se[s]&&(delete se[s][i],this.override&&delete Jt[i])}}class $s{constructor(){this.controllers=new js(Fi,"datasets",!0),this.elements=new js(Es,"elements"),this.plugins=new js(Object,"plugins"),this.scales=new js(Hs,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const s=i||this._getRegistryForType(e);i||s.isForType(e)||s===this.plugins&&e.id?this._exec(t,s,e):j(e,(e=>{const s=i||this._getRegistryForType(e);this._exec(t,s,e)}))}))}_exec(t,e,i){const s=Q(t);H(i["before"+s],[],i),e[t](i),H(i["after"+s],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const s=e.get(t);if(void 0===s)throw new Error('"'+t+'" is not a registered '+i+".");return s}}var Ys=new $s;class Zs{constructor(){this._init=[]}notify(t,e,i,s){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const n=s?this._descriptors(t).filter(s):this._descriptors(t),o=this._notify(n,t,e,i);return"afterDestroy"===e&&(this._notify(n,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,s){s=s||{};for(const n of t){const t=n.plugin;if(!1===H(t[i],[e,s,n.options],t)&&s.cancelable)return!1}return!0}invalidate(){I(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,s=W(i.options&&i.options.plugins,{}),n=function(t){const e={},i=[],s=Object.keys(Ys.plugins.items);for(let t=0;t<s.length;t++)i.push(Ys.getPlugin(s[t]));const n=t.plugins||[];for(let t=0;t<n.length;t++){const s=n[t];-1===i.indexOf(s)&&(i.push(s),e[s.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==s||e?function(t,{plugins:e,localIds:i},s,n){const o=[],a=t.getContext();for(const r of e){const e=r.id,h=Us(s[e],n);null!==h&&o.push({plugin:r,options:Xs(t.config,{plugin:r,local:i[e]},h,a)})}return o}(t,n,s,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,s=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(s(e,i),t,"stop"),this._notify(s(i,e),t,"start")}}function Us(t,e){return e||!1!==t?!0===t?{}:t:null}function Xs(t,{plugin:e,local:i},s,n){const o=t.pluginScopeKeys(e),a=t.getOptionScopes(s,o);return i&&e.defaults&&a.push(e.defaults),t.createResolver(a,n,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function qs(t,e){const i=se.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Ks(t){if("x"===t||"y"===t||"r"===t)return t}function Gs(t,...e){if(Ks(t))return t;for(const s of e){const e=s.axis||("top"===(i=s.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&Ks(t[0].toLowerCase());if(e)return e}var i;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function Js(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function Qs(t){const e=t.options||(t.options={});e.plugins=W(e.plugins,{}),e.scales=function(t,e){const i=Jt[t.type]||{scales:{}},s=e.scales||{},n=qs(t.type,e),o=Object.create(null);return Object.keys(s).forEach((e=>{const a=s[e];if(!F(a))return console.error(`Invalid scale configuration for scale: ${e}`);if(a._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const r=Gs(e,a,function(t,e){if(e.data&&e.data.datasets){const i=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(i.length)return Js(t,"x",i[0])||Js(t,"y",i[0])}return{}}(e,t),se.scales[a.type]),h=function(t,e){return t===e?"_index_":"_value_"}(r,n),l=i.scales||{};o[e]=q(Object.create(null),[{axis:r},a,l[r],l[h]])})),t.data.datasets.forEach((i=>{const n=i.type||t.type,a=i.indexAxis||qs(n,e),r=(Jt[n]||{}).scales||{};Object.keys(r).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,a),n=i[e+"AxisID"]||e;o[n]=o[n]||Object.create(null),q(o[n],[{axis:e},s[n],r[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];q(e,[se.scales[e.type],se.scale])})),o}(t,e)}function tn(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const en=new Map,sn=new Set;function nn(t,e){let i=en.get(t);return i||(i=e(),en.set(t,i),sn.add(i)),i}const on=(t,e,i)=>{const s=J(e,i);void 0!==s&&t.add(s)};class an{constructor(t){this._config=function(t){return(t=t||{}).data=tn(t.data),Qs(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=tn(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Qs(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return nn(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return nn(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return nn(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return nn(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let s=i.get(t);return s&&!e||(s=new Map,i.set(t,s)),s}getOptionScopes(t,e,i){const{options:s,type:n}=this,o=this._cachedScopes(t,i),a=o.get(e);if(a)return a;const r=new Set;e.forEach((e=>{t&&(r.add(t),e.forEach((e=>on(r,t,e)))),e.forEach((t=>on(r,s,t))),e.forEach((t=>on(r,Jt[n]||{},t))),e.forEach((t=>on(r,se,t))),e.forEach((t=>on(r,Qt,t)))}));const h=Array.from(r);return 0===h.length&&h.push(Object.create(null)),sn.has(e)&&o.set(e,h),h}chartOptionScopes(){const{options:t,type:e}=this;return[t,Jt[e]||{},se.datasets[e]||{},{type:e},se,Qt]}resolveNamedOptions(t,e,i,s=[""]){const n={$shared:!0},{resolver:o,subPrefixes:a}=rn(this._resolverCache,t,s);let r=o;(function(t,e){const{isScriptable:i,isIndexable:s}=Le(t);for(const n of e){const e=i(n),o=s(n),a=(o||e)&&t[n];if(e&&(et(a)||hn(a))||o&&z(a))return!0}return!1})(o,e)&&(n.$shared=!1,r=Te(o,i=et(i)?i():i,this.createResolver(t,i,a)));for(const t of e)n[t]=r[t];return n}createResolver(t,e,i=[""],s){const{resolver:n}=rn(this._resolverCache,t,i);return F(e)?Te(n,e,void 0,s):n}}function rn(t,e,i){let s=t.get(e);s||(s=new Map,t.set(e,s));const n=i.join();let o=s.get(n);return o||(o={resolver:Ae(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},s.set(n,o)),o}const hn=t=>F(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||et(t[i])),!1),ln=["top","bottom","left","right","chartArea"];function cn(t,e){return"top"===t||"bottom"===t||-1===ln.indexOf(t)&&"x"===e}function dn(t,e){return function(i,s){return i[t]===s[t]?i[e]-s[e]:i[t]-s[t]}}function un(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),H(i&&i.onComplete,[t],e)}function fn(t){const e=t.chart,i=e.options.animation;H(i&&i.onProgress,[t],e)}function gn(t){return Ke()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const pn={},mn=t=>{const e=gn(t);return Object.values(pn).filter((t=>t.canvas===e)).pop()};function bn(t,e,i){const s=Object.keys(t);for(const n of s){const s=+n;if(s>=e){const o=t[n];delete t[n],(i>0||s>e)&&(t[s+i]=o)}}}class xn{static defaults=se;static instances=pn;static overrides=Jt;static registry=Ys;static version="4.3.0";static getChart=mn;static register(...t){Ys.add(...t),_n()}static unregister(...t){Ys.remove(...t),_n()}constructor(t,e){const i=this.config=new an(e),s=gn(t),n=mn(s);if(n)throw new Error("Canvas is already in use. Chart with ID '"+n.id+"' must be destroyed before the canvas with ID '"+n.canvas.id+"' can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!Ke()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?bs:Ls}(s)),this.platform.updateConfig(i);const a=this.platform.acquireContext(s,o.aspectRatio),r=a&&a.canvas,h=r&&r.height,l=r&&r.width;this.id=R(),this.ctx=a,this.canvas=r,this.width=l,this.height=h,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Zs,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...s){return e?(clearTimeout(i),i=setTimeout(t,e,s)):t.apply(this,s),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],pn[this.id]=this,a&&r?(vi.listen(this,"complete",un),vi.listen(this,"progress",fn),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:s,_aspectRatio:n}=this;return I(t)?e&&n?n:s?i/s:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return Ys}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():oi(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return re(this.canvas,this.ctx),this}stop(){return vi.stop(this),this}resize(t,e){vi.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,s=this.canvas,n=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(s,t,e,n),a=i.devicePixelRatio||this.platform.getDevicePixelRatio(),r=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,oi(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),H(i.onResize,[this,o],this),this.attached&&this._doResize(r)&&this.render())}ensureScalesHaveIDs(){j(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,s=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let n=[];e&&(n=n.concat(Object.keys(e).map((t=>{const i=e[t],s=Gs(t,i),n="r"===s,o="x"===s;return{options:i,dposition:n?"chartArea":o?"bottom":"left",dtype:n?"radialLinear":o?"category":"linear"}})))),j(n,(e=>{const n=e.options,o=n.id,a=Gs(o,n),r=W(n.type,e.dtype);void 0!==n.position&&cn(n.position,a)===cn(e.dposition)||(n.position=e.dposition),s[o]=!0;let h=null;o in i&&i[o].type===r?h=i[o]:(h=new(Ys.getScale(r))({id:o,type:r,ctx:this.ctx,chart:this}),i[h.id]=h),h.init(n,t)})),j(s,((t,e)=>{t||delete i[e]})),j(i,(t=>{ps.configure(this,t,t.options),ps.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(dn("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,s;for(this._removeUnreferencedMetasets(),i=0,s=e.length;i<s;i++){const s=e[i];let n=this.getDatasetMeta(i);const o=s.type||this.config.type;if(n.type&&n.type!==o&&(this._destroyDatasetMeta(i),n=this.getDatasetMeta(i)),n.type=o,n.indexAxis=s.indexAxis||qs(o,this.options),n.order=s.order||0,n.index=i,n.label=""+s.label,n.visible=this.isDatasetVisible(i),n.controller)n.controller.updateIndex(i),n.controller.linkScales();else{const e=Ys.getController(o),{datasetElementType:s,dataElementType:a}=se.datasets[o];Object.assign(e,{dataElementType:Ys.getElement(a),datasetElementType:s&&Ys.getElement(s)}),n.controller=new e(this,i),t.push(n.controller)}}return this._updateMetasets(),t}_resetElements(){j(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const n=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!s&&-1===n.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),s||j(n,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(dn("z","_idx"));const{_active:a,_lastEvent:r}=this;r?this._eventHandler(r,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){j(this.scales,(t=>{ps.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);it(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:s,count:n}of e)bn(t,s,"_removeElements"===i?-n:n)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),s=i(0);for(let t=1;t<e;t++)if(!it(s,i(t)))return;return Array.from(s).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;ps.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],j(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,et(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),s={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",s)&&(i.controller._update(e),s.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",s))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(vi.has(this)?this.attached&&!vi.running(this)&&vi.start(this):(this.draw(),un({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let s,n;for(s=0,n=e.length;s<n;++s){const n=e[s];t&&!n.visible||i.push(n)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,s=!i.disabled,n=function(t){const{xScale:e,yScale:i}=t;if(e&&i)return{left:e.left,right:e.right,top:i.top,bottom:i.bottom}}(t)||this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(s&&de(e,{left:!1===i.left?0:n.left-i.left,right:!1===i.right?this.width:n.right+i.right,top:!1===i.top?0:n.top-i.top,bottom:!1===i.bottom?this.height:n.bottom+i.bottom}),t.controller.draw(),s&&ue(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return ce(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,s){const n=ss.modes[e];return"function"==typeof n?n(this,t,i,s):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let s=i.filter((t=>t&&t._dataset===e)).pop();return s||(s={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(s)),s}getContext(){return this.$context||(this.$context=Oe(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const s=i?"show":"hide",n=this.getDatasetMeta(t),o=n.controller._resolveAnimations(void 0,s);tt(e)?(n.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(n,{visible:i}),this.update((e=>e.datasetIndex===t?s:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),vi.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),re(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete pn[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};j(this.options.events,(t=>i(t,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(i,s)=>{t[i]&&(e.removeEventListener(this,i,s),delete t[i])},n=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{s("attach",a),this.attached=!0,this.resize(),i("resize",n),i("detach",o)};o=()=>{this.attached=!1,s("resize",n),this._stop(),this._resize(0,0),i("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){j(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},j(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const s=i?"set":"remove";let n,o,a,r;for("dataset"===e&&(n=this.getDatasetMeta(t[0].datasetIndex),n.controller["_"+s+"DatasetHoverStyle"]()),a=0,r=t.length;a<r;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[s+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!$(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const s=this.options.hover,n=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=n(e,t),a=i?t:n(t,e);o.length&&this.updateHoverStyle(o,s.mode,!1),a.length&&s.mode&&this.updateHoverStyle(a,s.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},s=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,s))return;const n=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,s),(n||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:s=[],options:n}=this,o=e,a=this._getActiveElements(t,s,i,o),r=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),h=function(t,e,i,s){return i&&"mouseout"!==t.type?s?e:t:null}(t,this._lastEvent,i,r);i&&(this._lastEvent=null,H(n.onHover,[t,a,this],this),r&&H(n.onClick,[t,a,this],this));const l=!$(a,s);return(l||e)&&(this._active=a,this._updateHoverStyles(a,s,e)),this._lastEvent=h,l}_getActiveElements(t,e,i,s){if("mouseout"===t.type)return[];if(!i)return e;const n=this.options.hover;return this.getElementsAtEventForMode(t,n.mode,n,s)}}function _n(){return j(xn.instances,(t=>t._plugins.invalidate()))}function yn(t,e,i,s){return{x:i+t*Math.cos(e),y:s+t*Math.sin(e)}}function vn(t,e,i,s,n,o){const{x:a,y:r,startAngle:h,pixelMargin:l,innerRadius:c}=e,d=Math.max(e.outerRadius+s+i-l,0),u=c>0?c+s+i+l:0;let f=0;const g=n-h;if(s){const t=((c>0?c-s:0)+(d>0?d-s:0))/2;f=(g-(0!==t?g*t/(t+s):g))/2}const p=(g-Math.max(.001,g*d-i/st)/d)/2,m=h+p+f,b=n-p-f,{outerStart:x,outerEnd:_,innerStart:y,innerEnd:v}=function(t,e,i,s){const n=Me(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,a=Math.min(o,s*e/2),r=t=>{const e=(i-Math.min(o,t))*s/2;return St(t,0,Math.min(o,e))};return{outerStart:r(n.outerStart),outerEnd:r(n.outerEnd),innerStart:St(n.innerStart,0,a),innerEnd:St(n.innerEnd,0,a)}}(e,u,d,b-m),w=d-x,M=d-_,k=m+x/w,S=b-_/M,P=u+y,D=u+v,C=m+y/P,O=b-v/D;if(t.beginPath(),o){const e=(k+S)/2;if(t.arc(a,r,d,k,e),t.arc(a,r,d,e,S),_>0){const e=yn(M,S,a,r);t.arc(e.x,e.y,_,S,b+ht)}const i=yn(D,b,a,r);if(t.lineTo(i.x,i.y),v>0){const e=yn(D,O,a,r);t.arc(e.x,e.y,v,b+ht,O+Math.PI)}const s=(b-v/u+(m+y/u))/2;if(t.arc(a,r,u,b-v/u,s,!0),t.arc(a,r,u,s,m+y/u,!0),y>0){const e=yn(P,C,a,r);t.arc(e.x,e.y,y,C+Math.PI,m-ht)}const n=yn(w,m,a,r);if(t.lineTo(n.x,n.y),x>0){const e=yn(w,k,a,r);t.arc(e.x,e.y,x,m-ht,k)}}else{t.moveTo(a,r);const e=Math.cos(k)*d+a,i=Math.sin(k)*d+r;t.lineTo(e,i);const s=Math.cos(S)*d+a,n=Math.sin(S)*d+r;t.lineTo(s,n)}t.closePath()}function wn(t,e,i=e){t.lineCap=W(i.borderCapStyle,e.borderCapStyle),t.setLineDash(W(i.borderDash,e.borderDash)),t.lineDashOffset=W(i.borderDashOffset,e.borderDashOffset),t.lineJoin=W(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=W(i.borderWidth,e.borderWidth),t.strokeStyle=W(i.borderColor,e.borderColor)}function Mn(t,e,i){t.lineTo(i.x,i.y)}function kn(t,e,i={}){const s=t.length,{start:n=0,end:o=s-1}=i,{start:a,end:r}=e,h=Math.max(n,a),l=Math.min(o,r),c=n<a&&o<a||n>r&&o>r;return{count:s,start:h,loop:e.loop,ilen:l<h&&!c?s+l-h:l-h}}function Sn(t,e,i,s){const{points:n,options:o}=e,{count:a,start:r,loop:h,ilen:l}=kn(n,i,s),c=function(t){return t.stepped?fe:t.tension||"monotone"===t.cubicInterpolationMode?ge:Mn}(o);let d,u,f,{move:g=!0,reverse:p}=s||{};for(d=0;d<=l;++d)u=n[(r+(p?l-d:d))%a],u.skip||(g?(t.moveTo(u.x,u.y),g=!1):c(t,f,u,p,o.stepped),f=u);return h&&(u=n[(r+(p?l:0))%a],c(t,f,u,p,o.stepped)),!!h}function Pn(t,e,i,s){const n=e.points,{count:o,start:a,ilen:r}=kn(n,i,s),{move:h=!0,reverse:l}=s||{};let c,d,u,f,g,p,m=0,b=0;const x=t=>(a+(l?r-t:t))%o,_=()=>{f!==g&&(t.lineTo(m,g),t.lineTo(m,f),t.lineTo(m,p))};for(h&&(d=n[x(0)],t.moveTo(d.x,d.y)),c=0;c<=r;++c){if(d=n[x(c)],d.skip)continue;const e=d.x,i=d.y,s=0|e;s===u?(i<f?f=i:i>g&&(g=i),m=(b*m+e)/++b):(_(),t.lineTo(e,i),u=s,b=0,f=g=i),p=i}_()}function Dn(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?Sn:Pn}const Cn="function"==typeof Path2D;class On extends Es{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const s=i.spanGaps?this._loop:this._fullLoop;qe(this._points,i,t,s,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,s=t.options.spanGaps,n=i.length;if(!n)return[];const o=!!t._loop,{start:a,end:r}=function(t,e,i,s){let n=0,o=e-1;if(i&&!s)for(;n<e&&!t[n].skip;)n++;for(;n<e&&t[n].skip;)n++;for(n%=e,i&&(o+=n);o>n&&t[o%e].skip;)o--;return o%=e,{start:n,end:o}}(i,n,o,s);return function(t,e,i,s){return s&&s.setContext&&i?function(t,e,i,s){const n=t._chart.getContext(),o=xi(t.options),{_datasetIndex:a,options:{spanGaps:r}}=t,h=i.length,l=[];let c=o,d=e[0].start,u=d;function f(t,e,s,n){const o=r?-1:1;if(t!==e){for(t+=h;i[t%h].skip;)t-=o;for(;i[e%h].skip;)e+=o;t%h!=e%h&&(l.push({start:t%h,end:e%h,loop:s,style:n}),c=n,d=e%h)}}for(const t of e){d=r?d:t.start;let e,o=i[d%h];for(u=d+1;u<=t.end;u++){const r=i[u%h];e=xi(s.setContext(Oe(n,{type:"segment",p0:o,p1:r,p0DataIndex:(u-1)%h,p1DataIndex:u%h,datasetIndex:a}))),_i(e,c)&&f(d,u-1,t.loop,c),o=r,c=e}d<u-1&&f(d,u-1,t.loop,c)}return l}(t,e,i,s):e}(t,!0===s?[{start:a,end:r,loop:o}]:function(t,e,i,s){const n=t.length,o=[];let a,r=e,h=t[e];for(a=e+1;a<=i;++a){const i=t[a%n];i.skip||i.stop?h.skip||(s=!1,o.push({start:e%n,end:(a-1)%n,loop:s}),e=r=i.stop?a:null):(r=a,h.skip&&(e=a)),h=i}return null!==r&&o.push({start:e%n,end:r%n,loop:s}),o}(i,a,r<a?r+n:r,!!t._fullLoop&&0===a&&r===n-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,s=t[e],n=this.points,o=bi(this,{property:e,start:s,end:s});if(!o.length)return;const a=[],r=function(t){return t.stepped?li:t.tension||"monotone"===t.cubicInterpolationMode?ci:hi}(i);let h,l;for(h=0,l=o.length;h<l;++h){const{start:l,end:c}=o[h],d=n[l],u=n[c];if(d===u){a.push(d);continue}const f=r(d,u,Math.abs((s-d[e])/(u[e]-d[e])),i.stepped);f[e]=t[e],a.push(f)}return 1===a.length?a[0]:a}pathSegment(t,e,i){return Dn(this)(t,this,e,i)}path(t,e,i){const s=this.segments,n=Dn(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const a of s)o&=n(t,this,a,{start:e,end:e+i-1});return!!o}draw(t,e,i,s){const n=this.options||{};(this.points||[]).length&&n.borderWidth&&(t.save(),function(t,e,i,s){Cn&&!e.options.segment?function(t,e,i,s){let n=e._path;n||(n=e._path=new Path2D,e.path(n,i,s)&&n.closePath()),wn(t,e.options),t.stroke(n)}(t,e,i,s):function(t,e,i,s){const{segments:n,options:o}=e,a=Dn(e);for(const r of n)wn(t,o,r.style),t.beginPath(),a(t,e,r,{start:i,end:i+s-1})&&t.closePath(),t.stroke()}(t,e,i,s)}(t,this,i,s),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function An(t,e,i,s){const n=t.options,{[i]:o}=t.getProps([i],s);return Math.abs(e-o)<n.radius+n.hitRadius}function Tn(t,e){const{x:i,y:s,base:n,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let r,h,l,c,d;return t.horizontal?(d=a/2,r=Math.min(i,n),h=Math.max(i,n),l=s-d,c=s+d):(d=o/2,r=i-d,h=i+d,l=Math.min(s,n),c=Math.max(s,n)),{left:r,top:l,right:h,bottom:c}}function Ln(t,e,i,s){return t?0:St(e,i,s)}function En(t,e,i,s){const n=null===e,o=null===i,a=t&&!(n&&o)&&Tn(t,s);return a&&(n||Pt(e,a.left,a.right))&&(o||Pt(i,a.top,a.bottom))}function Rn(t,e){t.rect(e.x,e.y,e.w,e.h)}function In(t,e,i={}){const s=t.x!==i.x?-e:0,n=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-s,a=(t.y+t.h!==i.y+i.h?e:0)-n;return{x:t.x+s,y:t.y+n,w:t.w+o,h:t.h+a,radius:t.radius}}var zn=Object.freeze({__proto__:null,ArcElement:class extends Es{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.getProps(["x","y"],i),{angle:n,distance:o}=yt(s,{x:t,y:e}),{startAngle:a,endAngle:r,innerRadius:h,outerRadius:l,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=(this.options.spacing+this.options.borderWidth)/2,u=W(c,r-a)>=nt||kt(n,a,r),f=Pt(o,h+d,l+d);return u&&f}getCenterPoint(t){const{x:e,y:i,startAngle:s,endAngle:n,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:r,spacing:h}=this.options,l=(s+n)/2,c=(o+a+h+r)/2;return{x:e+Math.cos(l)*c,y:i+Math.sin(l)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,s=(e.offset||0)/4,n=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>nt?Math.floor(i/nt):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const a=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(a)*s,Math.sin(a)*s);const r=s*(1-Math.sin(Math.min(st,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,s,n){const{fullCircles:o,startAngle:a,circumference:r}=e;let h=e.endAngle;if(o){vn(t,e,i,s,h,n);for(let e=0;e<o;++e)t.fill();isNaN(r)||(h=a+(r%nt||nt))}vn(t,e,i,s,h,n),t.fill()}(t,this,r,n,o),function(t,e,i,s,n){const{fullCircles:o,startAngle:a,circumference:r,options:h}=e,{borderWidth:l,borderJoinStyle:c,borderDash:d,borderDashOffset:u}=h,f="inner"===h.borderAlign;if(!l)return;t.setLineDash(d||[]),t.lineDashOffset=u,f?(t.lineWidth=2*l,t.lineJoin=c||"round"):(t.lineWidth=l,t.lineJoin=c||"bevel");let g=e.endAngle;if(o){vn(t,e,i,s,g,n);for(let e=0;e<o;++e)t.stroke();isNaN(r)||(g=a+(r%nt||nt))}f&&function(t,e,i){const{startAngle:s,pixelMargin:n,x:o,y:a,outerRadius:r,innerRadius:h}=e;let l=n/r;t.beginPath(),t.arc(o,a,r,s-l,i+l),h>n?(l=n/h,t.arc(o,a,h,i+l,s-l,!0)):t.arc(o,a,n,i+ht,s-ht),t.closePath(),t.clip()}(t,e,g),o||(vn(t,e,i,s,g,n),t.stroke())}(t,this,r,n,o),t.restore()}},BarElement:class extends Es{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:s}}=this,{inner:n,outer:o}=function(t){const e=Tn(t),i=e.right-e.left,s=e.bottom-e.top,n=function(t,e,i){const s=t.options.borderWidth,n=t.borderSkipped,o=ke(s);return{t:Ln(n.top,o.top,0,i),r:Ln(n.right,o.right,0,e),b:Ln(n.bottom,o.bottom,0,i),l:Ln(n.left,o.left,0,e)}}(t,i/2,s/2),o=function(t,e,i){const{enableBorderRadius:s}=t.getProps(["enableBorderRadius"]),n=t.options.borderRadius,o=Se(n),a=Math.min(e,i),r=t.borderSkipped,h=s||F(n);return{topLeft:Ln(!h||r.top||r.left,o.topLeft,0,a),topRight:Ln(!h||r.top||r.right,o.topRight,0,a),bottomLeft:Ln(!h||r.bottom||r.left,o.bottomLeft,0,a),bottomRight:Ln(!h||r.bottom||r.right,o.bottomRight,0,a)}}(t,i/2,s/2);return{outer:{x:e.left,y:e.top,w:i,h:s,radius:o},inner:{x:e.left+n.l,y:e.top+n.t,w:i-n.l-n.r,h:s-n.t-n.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(n.t,n.l)),topRight:Math.max(0,o.topRight-Math.max(n.t,n.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(n.b,n.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(n.b,n.r))}}}}(this),a=(r=o.radius).topLeft||r.topRight||r.bottomLeft||r.bottomRight?xe:Rn;var r;t.save(),o.w===n.w&&o.h===n.h||(t.beginPath(),a(t,In(o,e,n)),t.clip(),a(t,In(n,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),a(t,In(n,e)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,e,i){return En(this,t,e,i)}inXRange(t,e){return En(this,t,null,e)}inYRange(t,e){return En(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:s,horizontal:n}=this.getProps(["x","y","base","horizontal"],t);return{x:n?(e+s)/2:e,y:n?i:(i+s)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}},LineElement:On,PointElement:class extends Es{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.options,{x:n,y:o}=this.getProps(["x","y"],i);return Math.pow(t-n,2)+Math.pow(e-o,2)<Math.pow(s.hitRadius+s.radius,2)}inXRange(t,e){return An(this,t,"x",e)}inYRange(t,e){return An(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!ce(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,he(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}});const Fn=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],Vn=Fn.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function Bn(t){return Fn[t%Fn.length]}function Wn(t){return Vn[t%Vn.length]}function Nn(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var Hn={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:s},options:n}=t.config,{elements:o}=n;if(!i.forceOverride&&(Nn(s)||(a=n)&&(a.borderColor||a.backgroundColor)||o&&Nn(o)))return;var a;const r=function(t){let e=0;return(i,s)=>{const n=t.getDatasetMeta(s).controller;n instanceof Zi?e=function(t,e){return t.backgroundColor=t.data.map((()=>Bn(e++))),e}(i,e):n instanceof Ui?e=function(t,e){return t.backgroundColor=t.data.map((()=>Wn(e++))),e}(i,e):n&&(e=function(t,e){return t.borderColor=Bn(e),t.backgroundColor=Wn(e),++e}(i,e))}}(t);s.forEach(r)}};function jn(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function $n(t){t.data.datasets.forEach((t=>{jn(t)}))}var Yn={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void $n(t);const s=t.width;t.data.datasets.forEach(((e,n)=>{const{_data:o,indexAxis:a}=e,r=t.getDatasetMeta(n),h=o||e.data;if("y"===Ce([a,t.options.indexAxis]))return;if(!r.controller.supportsDecimation)return;const l=t.scales[r.xAxisID];if("linear"!==l.type&&"time"!==l.type)return;if(t.options.parsing)return;let c,{start:d,count:u}=function(t,e){const i=e.length;let s,n=0;const{iScale:o}=t,{min:a,max:r,minDefined:h,maxDefined:l}=o.getUserBounds();return h&&(n=St(Ct(e,o.axis,a).lo,0,i-1)),s=l?St(Ct(e,o.axis,r).hi+1,n,i)-n:i-n,{start:n,count:s}}(r,h);if(u<=(i.threshold||4*s))jn(e);else{switch(I(o)&&(e._data=h,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":c=function(t,e,i,s,n){const o=n.samples||s;if(o>=i)return t.slice(e,e+i);const a=[],r=(i-2)/(o-2);let h=0;const l=e+i-1;let c,d,u,f,g,p=e;for(a[h++]=t[p],c=0;c<o-2;c++){let s,n=0,o=0;const l=Math.floor((c+1)*r)+1+e,m=Math.min(Math.floor((c+2)*r)+1,i)+e,b=m-l;for(s=l;s<m;s++)n+=t[s].x,o+=t[s].y;n/=b,o/=b;const x=Math.floor(c*r)+1+e,_=Math.min(Math.floor((c+1)*r)+1,i)+e,{x:y,y:v}=t[p];for(u=f=-1,s=x;s<_;s++)f=.5*Math.abs((y-n)*(t[s].y-v)-(y-t[s].x)*(o-v)),f>u&&(u=f,d=t[s],g=s);a[h++]=d,p=g}return a[h++]=t[l],a}(h,d,u,s,i);break;case"min-max":c=function(t,e,i,s){let n,o,a,r,h,l,c,d,u,f,g=0,p=0;const m=[],b=e+i-1,x=t[e].x,_=t[b].x-x;for(n=e;n<e+i;++n){o=t[n],a=(o.x-x)/_*s,r=o.y;const e=0|a;if(e===h)r<u?(u=r,l=n):r>f&&(f=r,c=n),g=(p*g+o.x)/++p;else{const i=n-1;if(!I(l)&&!I(c)){const e=Math.min(l,c),s=Math.max(l,c);e!==d&&e!==i&&m.push({...t[e],x:g}),s!==d&&s!==i&&m.push({...t[s],x:g})}n>0&&i!==d&&m.push(t[i]),m.push(o),h=e,p=0,u=f=r,l=c=d=n}}return m}(h,d,u,s);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=c}}))},destroy(t){$n(t)}};function Zn(t,e,i,s){if(s)return;let n=e[t],o=i[t];return"angle"===t&&(n=Mt(n),o=Mt(o)),{property:t,start:n,end:o}}function Un(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Xn(t,e,i,s){return t&&e?s(t[i],e[i]):t?t[i]:e?e[i]:0}function qn(t,e){let i=[],s=!1;return z(t)?(s=!0,i=t):i=function(t,e){const{x:i=null,y:s=null}=t||{},n=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Un(t,e,n);const a=n[t],r=n[e];null!==s?(o.push({x:a.x,y:s}),o.push({x:r.x,y:s})):null!==i&&(o.push({x:i,y:a.y}),o.push({x:i,y:r.y}))})),o}(t,e),i.length?new On({points:i,options:{tension:0},_loop:s,_fullLoop:s}):null}function Kn(t){return t&&!1!==t.fill}function Gn(t,e,i){let s=t[e].fill;const n=[e];let o;if(!i)return s;for(;!1!==s&&-1===n.indexOf(s);){if(!V(s))return s;if(o=t[s],!o)return!1;if(o.visible)return s;n.push(s),s=o.fill}return!1}function Jn(t,e,i){const s=function(t){const e=t.options,i=e.fill;let s=W(i&&i.target,i);return void 0===s&&(s=!!e.backgroundColor),!1!==s&&null!==s&&(!0===s?"origin":s)}(t);if(F(s))return!isNaN(s.value)&&s;let n=parseFloat(s);return V(n)&&Math.floor(n)===n?function(t,e,i,s){return"-"!==t&&"+"!==t||(i=e+i),!(i===e||i<0||i>=s)&&i}(s[0],e,n,i):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}function Qn(t,e,i){const s=[];for(let n=0;n<i.length;n++){const o=i[n],{first:a,last:r,point:h}=to(o,e,"x");if(!(!h||a&&r))if(a)s.unshift(h);else if(t.push(h),!r)break}t.push(...s)}function to(t,e,i){const s=t.interpolate(e,i);if(!s)return{};const n=s[i],o=t.segments,a=t.points;let r=!1,h=!1;for(let t=0;t<o.length;t++){const e=o[t],s=a[e.start][i],l=a[e.end][i];if(Pt(n,s,l)){r=n===s,h=n===l;break}}return{first:r,last:h,point:s}}class eo{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:s,y:n,radius:o}=this;return e=e||{start:0,end:nt},t.arc(s,n,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:s}=this,n=t.angle;return{x:e+Math.cos(n)*s,y:i+Math.sin(n)*s,angle:n}}}function io(t,e,i){const s=function(t){const{chart:e,fill:i,line:s}=t;if(V(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:s}=t,n=[],o=s.segments,a=s.points,r=function(t,e){const i=[],s=t.getMatchingVisibleMetas("line");for(let t=0;t<s.length;t++){const n=s[t];if(n.index===e)break;n.hidden||i.unshift(n.dataset)}return i}(e,i);r.push(qn({x:null,y:e.bottom},s));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)Qn(n,a[t],r)}return new On({points:n,options:{}})}(t);if("shape"===i)return!0;const n=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,s=e.options,n=e.getLabels().length,o=s.reverse?e.max:e.min,a=function(t,e,i){let s;return s="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:F(t)?t.value:e.getBaseValue(),s}(i,e,o),r=[];if(s.grid.circular){const t=e.getPointPositionForValue(0,o);return new eo({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(a)})}for(let t=0;t<n;++t)r.push(e.getPointPositionForValue(t,a));return r}(t):function(t){const{scale:e={},fill:i}=t,s=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:F(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(V(s)){const t=e.isHorizontal();return{x:t?s:null,y:t?null:s}}return null}(t)}(t);return n instanceof eo?n:qn(n,s)}(e),{line:n,scale:o,axis:a}=e,r=n.options,h=r.fill,l=r.backgroundColor,{above:c=l,below:d=l}=h||{};s&&n.points.length&&(de(t,i),function(t,e){const{line:i,target:s,above:n,below:o,area:a,scale:r}=e,h=i._loop?"angle":e.axis;t.save(),"x"===h&&o!==n&&(so(t,s,a.top),no(t,{line:i,target:s,color:n,scale:r,property:h}),t.restore(),t.save(),so(t,s,a.bottom)),no(t,{line:i,target:s,color:o,scale:r,property:h}),t.restore()}(t,{line:n,target:s,above:c,below:d,area:i,scale:o,axis:a}),ue(t))}function so(t,e,i){const{segments:s,points:n}=e;let o=!0,a=!1;t.beginPath();for(const r of s){const{start:s,end:h}=r,l=n[s],c=n[Un(s,h,n)];o?(t.moveTo(l.x,l.y),o=!1):(t.lineTo(l.x,i),t.lineTo(l.x,l.y)),a=!!e.pathSegment(t,r,{move:a}),a?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function no(t,e){const{line:i,target:s,property:n,color:o,scale:a}=e,r=function(t,e,i){const s=t.segments,n=t.points,o=e.points,a=[];for(const t of s){let{start:s,end:r}=t;r=Un(s,r,n);const h=Zn(i,n[s],n[r],t.loop);if(!e.segments){a.push({source:t,target:h,start:n[s],end:n[r]});continue}const l=bi(e,h);for(const e of l){const s=Zn(i,o[e.start],o[e.end],e.loop),r=mi(t,n,s);for(const t of r)a.push({source:t,target:e,start:{[i]:Xn(h,s,"start",Math.max)},end:{[i]:Xn(h,s,"end",Math.min)}})}}return a}(i,s,n);for(const{source:e,target:h,start:l,end:c}of r){const{style:{backgroundColor:r=o}={}}=e,d=!0!==s;t.save(),t.fillStyle=r,oo(t,a,d&&Zn(n,l,c)),t.beginPath();const u=!!i.pathSegment(t,e);let f;if(d){u?t.closePath():ao(t,s,c,n);const e=!!s.pathSegment(t,h,{move:u,reverse:!0});f=u&&e,f||ao(t,s,l,n)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function oo(t,e,i){const{top:s,bottom:n}=e.chart.chartArea,{property:o,start:a,end:r}=i||{};"x"===o&&(t.beginPath(),t.rect(a,s,r-a,n-s),t.clip())}function ao(t,e,i,s){const n=e.interpolate(i,s);n&&t.lineTo(n.x,n.y)}var ro={id:"filler",afterDatasetsUpdate(t,e,i){const s=(t.data.datasets||[]).length,n=[];let o,a,r,h;for(a=0;a<s;++a)o=t.getDatasetMeta(a),r=o.dataset,h=null,r&&r.options&&r instanceof On&&(h={visible:t.isDatasetVisible(a),index:a,fill:Jn(r,a,s),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:r}),o.$filler=h,n.push(h);for(a=0;a<s;++a)h=n[a],h&&!1!==h.fill&&(h.fill=Gn(n,a,i.propagate))},beforeDraw(t,e,i){const s="beforeDraw"===i.drawTime,n=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),s&&i.fill&&io(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const s=t.getSortedVisibleDatasetMetas();for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;Kn(i)&&io(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const s=e.meta.$filler;Kn(s)&&"beforeDatasetDraw"===i.drawTime&&io(t.ctx,s,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const ho=(t,e)=>{let{boxHeight:i=e,boxWidth:s=e}=t;return t.usePointStyle&&(i=Math.min(i,e),s=t.pointStyleWidth||Math.min(s,e)),{boxWidth:s,boxHeight:i,itemHeight:Math.max(e,i)}};class lo extends Es{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=H(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,s=De(i.font),n=s.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:r}=ho(i,n);let h,l;e.font=s.string,this.isHorizontal()?(h=this.maxWidth,l=this._fitRows(o,n,a,r)+10):(l=this.maxHeight,h=this._fitCols(o,s,a,r)+10),this.width=Math.min(h,t.maxWidth||this.maxWidth),this.height=Math.min(l,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,s){const{ctx:n,maxWidth:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],h=this.lineWidths=[0],l=s+a;let c=t;n.textAlign="left",n.textBaseline="middle";let d=-1,u=-l;return this.legendItems.forEach(((t,f)=>{const g=i+e/2+n.measureText(t.text).width;(0===f||h[h.length-1]+g+2*a>o)&&(c+=l,h[h.length-(f>0?0:1)]=0,u+=l,d++),r[f]={left:0,top:u,row:d,width:g,height:s},h[h.length-1]+=g+a})),c}_fitCols(t,e,i,s){const{ctx:n,maxHeight:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],h=this.columnSizes=[],l=o-t;let c=a,d=0,u=0,f=0,g=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:p,itemHeight:m}=function(t,e,i,s,n){const o=function(t,e,i,s){let n=t.text;return n&&"string"!=typeof n&&(n=n.reduce(((t,e)=>t.length>e.length?t:e))),e+i.size/2+s.measureText(n).width}(s,t,e,i),a=function(t,e,i){let s=t;return"string"!=typeof e.text&&(s=co(e,i)),s}(n,s,e.lineHeight);return{itemWidth:o,itemHeight:a}}(i,e,n,t,s);o>0&&u+m+2*a>l&&(c+=d+a,h.push({width:d,height:u}),f+=d+a,g++,d=u=0),r[o]={left:f,top:u,col:g,width:p,height:m},d=Math.max(d,p),u+=m+a})),c+=d,h.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:s},rtl:n}}=this,o=di(n,this.left,this.width);if(this.isHorizontal()){let n=0,a=zt(i,this.left+s,this.right-this.lineWidths[n]);for(const r of e)n!==r.row&&(n=r.row,a=zt(i,this.left+s,this.right-this.lineWidths[n])),r.top+=this.top+t+s,r.left=o.leftForLtr(o.x(a),r.width),a+=r.width+s}else{let n=0,a=zt(i,this.top+t+s,this.bottom-this.columnSizes[n].height);for(const r of e)r.col!==n&&(n=r.col,a=zt(i,this.top+t+s,this.bottom-this.columnSizes[n].height)),r.top=a,r.left+=this.left+s,r.left=o.leftForLtr(o.x(r.left),r.width),a+=r.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;de(t,this),this._draw(),ue(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:s}=this,{align:n,labels:o}=t,a=se.color,r=di(t.rtl,this.left,this.width),h=De(o.font),{padding:l}=o,c=h.size,d=c/2;let u;this.drawTitle(),s.textAlign=r.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=h.string;const{boxWidth:f,boxHeight:g,itemHeight:p}=ho(o,c),m=this.isHorizontal(),b=this._computeTitleHeight();u=m?{x:zt(n,this.left+l,this.right-i[0]),y:this.top+l+b,line:0}:{x:this.left+l,y:zt(n,this.top+b+l,this.bottom-e[0].height),line:0},ui(this.ctx,t.textDirection);const x=p+l;this.legendItems.forEach(((_,y)=>{s.strokeStyle=_.fontColor,s.fillStyle=_.fontColor;const v=s.measureText(_.text).width,w=r.textAlign(_.textAlign||(_.textAlign=o.textAlign)),M=f+d+v;let k=u.x,S=u.y;if(r.setWidth(this.width),m?y>0&&k+M+l>this.right&&(S=u.y+=x,u.line++,k=u.x=zt(n,this.left+l,this.right-i[u.line])):y>0&&S+x>this.bottom&&(k=u.x=k+e[u.line].width+l,u.line++,S=u.y=zt(n,this.top+b+l,this.bottom-e[u.line].height)),function(t,e,i){if(isNaN(f)||f<=0||isNaN(g)||g<0)return;s.save();const n=W(i.lineWidth,1);if(s.fillStyle=W(i.fillStyle,a),s.lineCap=W(i.lineCap,"butt"),s.lineDashOffset=W(i.lineDashOffset,0),s.lineJoin=W(i.lineJoin,"miter"),s.lineWidth=n,s.strokeStyle=W(i.strokeStyle,a),s.setLineDash(W(i.lineDash,[])),o.usePointStyle){const a={radius:g*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:n},h=r.xPlus(t,f/2);le(s,a,h,e+d,o.pointStyleWidth&&f)}else{const o=e+Math.max((c-g)/2,0),a=r.leftForLtr(t,f),h=Se(i.borderRadius);s.beginPath(),Object.values(h).some((t=>0!==t))?xe(s,{x:a,y:o,w:f,h:g,radius:h}):s.rect(a,o,f,g),s.fill(),0!==n&&s.stroke()}s.restore()}(r.x(k),S,_),k=((t,e,i,s)=>t===(s?"left":"right")?i:"center"===t?(e+i)/2:e)(w,k+f+d,m?k+M:this.right,t.rtl),function(t,e,i){be(s,i.text,t,e+p/2,h,{strikethrough:i.hidden,textAlign:r.textAlign(i.textAlign)})}(r.x(k),S,_),m)u.x+=M+l;else if("string"!=typeof _.text){const t=h.lineHeight;u.y+=co(_,t)}else u.y+=x})),fi(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=De(e.font),s=Pe(e.padding);if(!e.display)return;const n=di(t.rtl,this.left,this.width),o=this.ctx,a=e.position,r=i.size/2,h=s.top+r;let l,c=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),l=this.top+h,c=zt(t.align,c,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);l=h+zt(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=zt(a,c,c+d);o.textAlign=n.textAlign(It(a)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,be(o,e.text,u,l,i)}_computeTitleHeight(){const t=this.options.title,e=De(t.font),i=Pe(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,s,n;if(Pt(t,this.left,this.right)&&Pt(e,this.top,this.bottom))for(n=this.legendHitBoxes,i=0;i<n.length;++i)if(s=n[i],Pt(t,s.left,s.left+s.width)&&Pt(e,s.top,s.top+s.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,a=(n=i,null!==(s=o)&&null!==n&&s.datasetIndex===n.datasetIndex&&s.index===n.index);o&&!a&&H(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!a&&H(e.onHover,[t,i,this],this)}else i&&H(e.onClick,[t,i,this],this);var s,n}}function co(t,e){return e*(t.text?t.text.length+.5:0)}var uo={id:"legend",_element:lo,start(t,e,i){const s=t.legend=new lo({ctx:t.ctx,options:i,chart:t});ps.configure(t,s,i),ps.addBox(t,s)},stop(t){ps.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const s=t.legend;ps.configure(t,s,i),s.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const s=e.datasetIndex,n=i.chart;n.isDatasetVisible(s)?(n.hide(s),e.hidden=!0):(n.show(s),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:s,textAlign:n,color:o,useBorderRadius:a,borderRadius:r}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const h=t.controller.getStyle(i?0:void 0),l=Pe(h.borderWidth);return{text:e[t.index].label,fillStyle:h.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:h.borderCapStyle,lineDash:h.borderDash,lineDashOffset:h.borderDashOffset,lineJoin:h.borderJoinStyle,lineWidth:(l.width+l.height)/4,strokeStyle:h.borderColor,pointStyle:s||h.pointStyle,rotation:h.rotation,textAlign:n||h.textAlign,borderRadius:a&&(r||h.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class fo extends Es{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const s=z(i.text)?i.text.length:1;this._padding=Pe(i.padding);const n=s*De(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=n:this.width=n}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:s,right:n,options:o}=this,a=o.align;let r,h,l,c=0;return this.isHorizontal()?(h=zt(a,i,n),l=e+t,r=n-i):("left"===o.position?(h=i+t,l=zt(a,s,e),c=-.5*st):(h=n-t,l=zt(a,e,s),c=.5*st),r=s-e),{titleX:h,titleY:l,maxWidth:r,rotation:c}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=De(e.font),s=i.lineHeight/2+this._padding.top,{titleX:n,titleY:o,maxWidth:a,rotation:r}=this._drawArgs(s);be(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:r,textAlign:It(e.align),textBaseline:"middle",translation:[n,o]})}}var go={id:"title",_element:fo,start(t,e,i){!function(t,e){const i=new fo({ctx:t.ctx,options:e,chart:t});ps.configure(t,i,e),ps.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;ps.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const s=t.titleBlock;ps.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const po=new WeakMap;var mo={id:"subtitle",start(t,e,i){const s=new fo({ctx:t.ctx,options:i,chart:t});ps.configure(t,s,i),ps.addBox(t,s),po.set(t,s)},stop(t){ps.removeBox(t,po.get(t)),po.delete(t)},beforeUpdate(t,e,i){const s=po.get(t);ps.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const bo={average(t){if(!t.length)return!1;let e,i,s=0,n=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();s+=t.x,n+=t.y,++o}}return{x:s/o,y:n/o}},nearest(t,e){if(!t.length)return!1;let i,s,n,o=e.x,a=e.y,r=Number.POSITIVE_INFINITY;for(i=0,s=t.length;i<s;++i){const s=t[i].element;if(s&&s.hasValue()){const t=vt(e,s.getCenterPoint());t<r&&(r=t,n=s)}}if(n){const t=n.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function xo(t,e){return e&&(z(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function _o(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function yo(t,e){const{element:i,datasetIndex:s,index:n}=e,o=t.getDatasetMeta(s).controller,{label:a,value:r}=o.getLabelAndValue(n);return{chart:t,label:a,parsed:o.getParsed(n),raw:t.data.datasets[s].data[n],formattedValue:r,dataset:o.getDataset(),dataIndex:n,datasetIndex:s,element:i}}function vo(t,e){const i=t.chart.ctx,{body:s,footer:n,title:o}=t,{boxWidth:a,boxHeight:r}=e,h=De(e.bodyFont),l=De(e.titleFont),c=De(e.footerFont),d=o.length,u=n.length,f=s.length,g=Pe(e.padding);let p=g.height,m=0,b=s.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,d&&(p+=d*l.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b&&(p+=f*(e.displayColors?Math.max(r,h.lineHeight):h.lineHeight)+(b-f)*h.lineHeight+(b-1)*e.bodySpacing),u&&(p+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let x=0;const _=function(t){m=Math.max(m,i.measureText(t).width+x)};return i.save(),i.font=l.string,j(t.title,_),i.font=h.string,j(t.beforeBody.concat(t.afterBody),_),x=e.displayColors?a+2+e.boxPadding:0,j(s,(t=>{j(t.before,_),j(t.lines,_),j(t.after,_)})),x=0,i.font=c.string,j(t.footer,_),i.restore(),m+=g.width,{width:m,height:p}}function wo(t,e,i,s){const{x:n,width:o}=i,{width:a,chartArea:{left:r,right:h}}=t;let l="center";return"center"===s?l=n<=(r+h)/2?"left":"right":n<=o/2?l="left":n>=a-o/2&&(l="right"),function(t,e,i,s){const{x:n,width:o}=s,a=i.caretSize+i.caretPadding;return"left"===t&&n+o+a>e.width||"right"===t&&n-o-a<0||void 0}(l,t,e,i)&&(l="center"),l}function Mo(t,e,i){const s=i.yAlign||e.yAlign||function(t,e){const{y:i,height:s}=e;return i<s/2?"top":i>t.height-s/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||wo(t,e,i,s),yAlign:s}}function ko(t,e,i,s){const{caretSize:n,caretPadding:o,cornerRadius:a}=t,{xAlign:r,yAlign:h}=i,l=n+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=Se(a);let g=function(t,e){let{x:i,width:s}=t;return"right"===e?i-=s:"center"===e&&(i-=s/2),i}(e,r);const p=function(t,e,i){let{y:s,height:n}=t;return"top"===e?s+=i:s-="bottom"===e?n+i:n/2,s}(e,h,l);return"center"===h?"left"===r?g+=l:"right"===r&&(g-=l):"left"===r?g-=Math.max(c,u)+n:"right"===r&&(g+=Math.max(d,f)+n),{x:St(g,0,s.width-e.width),y:St(p,0,s.height-e.height)}}function So(t,e,i){const s=Pe(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-s.right:t.x+s.left}function Po(t){return xo([],_o(t))}function Do(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const Co={beforeTitle:E,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,s=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(s>0&&e.dataIndex<s)return i[e.dataIndex]}return""},afterTitle:E,beforeBody:E,beforeLabel:E,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return I(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:E,afterBody:E,beforeFooter:E,footer:E,afterFooter:E};function Oo(t,e,i,s){const n=t[e].call(i,s);return void 0===n?Co[e].call(i,s):n}class Ao extends Es{static positioners=bo;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),s=i.enabled&&e.options.animation&&i.animations,n=new Si(this.chart,s);return s._cacheable&&(this._cachedAnimations=Object.freeze(n)),n}getContext(){return this.$context||(this.$context=(this,Oe(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,s=Oo(i,"beforeTitle",this,t),n=Oo(i,"title",this,t),o=Oo(i,"afterTitle",this,t);let a=[];return a=xo(a,_o(s)),a=xo(a,_o(n)),a=xo(a,_o(o)),a}getBeforeBody(t,e){return Po(Oo(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,s=[];return j(t,(t=>{const e={before:[],lines:[],after:[]},n=Do(i,t);xo(e.before,_o(Oo(n,"beforeLabel",this,t))),xo(e.lines,Oo(n,"label",this,t)),xo(e.after,_o(Oo(n,"afterLabel",this,t))),s.push(e)})),s}getAfterBody(t,e){return Po(Oo(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,s=Oo(i,"beforeFooter",this,t),n=Oo(i,"footer",this,t),o=Oo(i,"afterFooter",this,t);let a=[];return a=xo(a,_o(s)),a=xo(a,_o(n)),a=xo(a,_o(o)),a}_createItems(t){const e=this._active,i=this.chart.data,s=[],n=[],o=[];let a,r,h=[];for(a=0,r=e.length;a<r;++a)h.push(yo(this.chart,e[a]));return t.filter&&(h=h.filter(((e,s,n)=>t.filter(e,s,n,i)))),t.itemSort&&(h=h.sort(((e,s)=>t.itemSort(e,s,i)))),j(h,(e=>{const i=Do(t.callbacks,e);s.push(Oo(i,"labelColor",this,e)),n.push(Oo(i,"labelPointStyle",this,e)),o.push(Oo(i,"labelTextColor",this,e))})),this.labelColors=s,this.labelPointStyles=n,this.labelTextColors=o,this.dataPoints=h,h}update(t,e){const i=this.options.setContext(this.getContext()),s=this._active;let n,o=[];if(s.length){const t=bo[i.position].call(this,s,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=vo(this,i),a=Object.assign({},t,e),r=Mo(this.chart,i,a),h=ko(i,a,r,this.chart);this.xAlign=r.xAlign,this.yAlign=r.yAlign,n={opacity:1,x:h.x,y:h.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(n={opacity:0});this._tooltipItems=o,this.$context=void 0,n&&this._resolveAnimations().update(this,n),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,s){const n=this.getCaretPosition(t,i,s);e.lineTo(n.x1,n.y1),e.lineTo(n.x2,n.y2),e.lineTo(n.x3,n.y3)}getCaretPosition(t,e,i){const{xAlign:s,yAlign:n}=this,{caretSize:o,cornerRadius:a}=i,{topLeft:r,topRight:h,bottomLeft:l,bottomRight:c}=Se(a),{x:d,y:u}=t,{width:f,height:g}=e;let p,m,b,x,_,y;return"center"===n?(_=u+g/2,"left"===s?(p=d,m=p-o,x=_+o,y=_-o):(p=d+f,m=p+o,x=_-o,y=_+o),b=p):(m="left"===s?d+Math.max(r,l)+o:"right"===s?d+f-Math.max(h,c)-o:this.caretX,"top"===n?(x=u,_=x-o,p=m-o,b=m+o):(x=u+g,_=x+o,p=m+o,b=m-o),y=x),{x1:p,x2:m,x3:b,y1:x,y2:_,y3:y}}drawTitle(t,e,i){const s=this.title,n=s.length;let o,a,r;if(n){const h=di(i.rtl,this.x,this.width);for(t.x=So(this,i.titleAlign,i),e.textAlign=h.textAlign(i.titleAlign),e.textBaseline="middle",o=De(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,r=0;r<n;++r)e.fillText(s[r],h.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,r+1===n&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,s,n){const o=this.labelColors[i],a=this.labelPointStyles[i],{boxHeight:r,boxWidth:h}=n,l=De(n.bodyFont),c=So(this,"left",n),d=s.x(c),u=r<l.lineHeight?(l.lineHeight-r)/2:0,f=e.y+u;if(n.usePointStyle){const e={radius:Math.min(h,r)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},i=s.leftForLtr(d,h)+h/2,l=f+r/2;t.strokeStyle=n.multiKeyBackground,t.fillStyle=n.multiKeyBackground,he(t,e,i,l),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,he(t,e,i,l)}else{t.lineWidth=F(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=s.leftForLtr(d,h),i=s.leftForLtr(s.xPlus(d,1),h-2),a=Se(o.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=n.multiKeyBackground,xe(t,{x:e,y:f,w:h,h:r,radius:a}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),xe(t,{x:i,y:f+1,w:h-2,h:r-2,radius:a}),t.fill()):(t.fillStyle=n.multiKeyBackground,t.fillRect(e,f,h,r),t.strokeRect(e,f,h,r),t.fillStyle=o.backgroundColor,t.fillRect(i,f+1,h-2,r-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:s}=this,{bodySpacing:n,bodyAlign:o,displayColors:a,boxHeight:r,boxWidth:h,boxPadding:l}=i,c=De(i.bodyFont);let d=c.lineHeight,u=0;const f=di(i.rtl,this.x,this.width),g=function(i){e.fillText(i,f.x(t.x+u),t.y+d/2),t.y+=d+n},p=f.textAlign(o);let m,b,x,_,y,v,w;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=So(this,p,i),e.fillStyle=i.bodyColor,j(this.beforeBody,g),u=a&&"right"!==p?"center"===o?h/2+l:h+2+l:0,_=0,v=s.length;_<v;++_){for(m=s[_],b=this.labelTextColors[_],e.fillStyle=b,j(m.before,g),x=m.lines,a&&x.length&&(this._drawColorBox(e,t,_,f,i),d=Math.max(c.lineHeight,r)),y=0,w=x.length;y<w;++y)g(x[y]),d=c.lineHeight;j(m.after,g)}u=0,d=c.lineHeight,j(this.afterBody,g),t.y-=n}drawFooter(t,e,i){const s=this.footer,n=s.length;let o,a;if(n){const r=di(i.rtl,this.x,this.width);for(t.x=So(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=r.textAlign(i.footerAlign),e.textBaseline="middle",o=De(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,a=0;a<n;++a)e.fillText(s[a],r.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,s){const{xAlign:n,yAlign:o}=this,{x:a,y:r}=t,{width:h,height:l}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=Se(s.cornerRadius);e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,e.lineWidth=s.borderWidth,e.beginPath(),e.moveTo(a+c,r),"top"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+h-d,r),e.quadraticCurveTo(a+h,r,a+h,r+d),"center"===o&&"right"===n&&this.drawCaret(t,e,i,s),e.lineTo(a+h,r+l-f),e.quadraticCurveTo(a+h,r+l,a+h-f,r+l),"bottom"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+u,r+l),e.quadraticCurveTo(a,r+l,a,r+l-u),"center"===o&&"left"===n&&this.drawCaret(t,e,i,s),e.lineTo(a,r+c),e.quadraticCurveTo(a,r,a+c,r),e.closePath(),e.fill(),s.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,s=i&&i.x,n=i&&i.y;if(s||n){const i=bo[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=vo(this,t),a=Object.assign({},i,this._size),r=Mo(e,t,a),h=ko(t,a,r,e);s._to===h.x&&n._to===h.y||(this.xAlign=r.xAlign,this.yAlign=r.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,h))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const s={width:this.width,height:this.height},n={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=Pe(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=i,this.drawBackground(n,t,s,e),ui(t,e.textDirection),n.y+=o.top,this.drawTitle(n,t,e),this.drawBody(n,t,e),this.drawFooter(n,t,e),fi(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,s=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),n=!$(i,s),o=this._positionChanged(s,e);(n||o)&&(this._active=s,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,n=this._active||[],o=this._getActiveElements(t,n,e,i),a=this._positionChanged(o,t),r=e||!$(o,n)||a;return r&&(this._active=o,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),r}_getActiveElements(t,e,i,s){const n=this.options;if("mouseout"===t.type)return[];if(!s)return e;const o=this.chart.getElementsAtEventForMode(t,n.mode,n,i);return n.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:s,options:n}=this,o=bo[n.position].call(this,t,e);return!1!==o&&(i!==o.x||s!==o.y)}}var To={id:"tooltip",_element:Ao,positioners:bo,afterInit(t,e,i){i&&(t.tooltip=new Ao({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:Co},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Lo=Object.freeze({__proto__:null,Colors:Hn,Decimation:Yn,Filler:ro,Legend:uo,SubTitle:mo,Title:go,Tooltip:To});function Eo(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function Ro(t,e,{horizontal:i,minRotation:s}){const n=bt(s),o=(i?Math.sin(n):Math.cos(n))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}class Io extends Hs{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return I(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:s,max:n}=this;const o=t=>s=e?s:t,a=t=>n=i?n:t;if(t){const t=ut(s),e=ut(n);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(s===n){let e=0===n?1:Math.abs(.05*n);a(n+e),t||o(s-e)}this.min=s,this.max=n}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:s}=t;return s?(e=Math.ceil(this.max/s)-Math.floor(this.min/s)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const s=function(t,e){const i=[],{bounds:s,step:n,min:o,max:a,precision:r,count:h,maxTicks:l,maxDigits:c,includeBounds:d}=t,u=n||1,f=l-1,{min:g,max:p}=e,m=!I(o),b=!I(a),x=!I(h),_=(p-g)/(c+1);let y,v,w,M,k=gt((p-g)/f/u)*u;if(k<1e-14&&!m&&!b)return[{value:g},{value:p}];M=Math.ceil(p/k)-Math.floor(g/k),M>f&&(k=gt(M*k/f/u)*u),I(r)||(y=Math.pow(10,r),k=Math.ceil(k*y)/y),"ticks"===s?(v=Math.floor(g/k)*k,w=Math.ceil(p/k)*k):(v=g,w=p),m&&b&&n&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((a-o)/n,k/1e3)?(M=Math.round(Math.min((a-o)/k,l)),k=(a-o)/M,v=o,w=a):x?(v=m?o:v,w=b?a:w,M=h-1,k=(w-v)/M):(M=(w-v)/k,M=ft(M,Math.round(M),k/1e3)?Math.round(M):Math.ceil(M));const S=Math.max(_t(k),_t(v));y=Math.pow(10,I(r)?S:r),v=Math.round(v*y)/y,w=Math.round(w*y)/y;let P=0;for(m&&(d&&v!==o?(i.push({value:o}),v<o&&P++,ft(Math.round((v+P*k)*y)/y,o,Ro(o,_,t))&&P++):v<o&&P++);P<M;++P){const t=Math.round((v+P*k)*y)/y;if(b&&t>a)break;i.push({value:t})}return b&&d&&w!==a?i.length&&ft(i[i.length-1].value,a,Ro(a,_,t))?i[i.length-1].value=a:i.push({value:a}):b&&w!==a||i.push({value:w}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&mt(s,this,"value"),t.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const s=(i-e)/Math.max(t.length-1,1)/2;e-=s,i+=s}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return qt(t,this.chart.options.locale,this.options.ticks.format)}}class zo extends Io{static id="linear";static defaults={ticks:{callback:Gt.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=V(t)?t:0,this.max=V(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=bt(this.options.ticks.minRotation),s=(t?Math.sin(i):Math.cos(i))||.001,n=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,n.lineHeight/s))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const Fo=t=>Math.floor(dt(t)),Vo=(t,e)=>Math.pow(10,Fo(t)+e);function Bo(t){return 1==t/Math.pow(10,Fo(t))}function Wo(t,e,i){const s=Math.pow(10,i),n=Math.floor(t/s);return Math.ceil(e/s)-n}class No extends Hs{static id="logarithmic";static defaults={ticks:{callback:Gt.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=Io.prototype.parse.apply(this,[t,e]);if(0!==i)return V(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=V(t)?Math.max(0,t):null,this.max=V(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!V(this._userMin)&&(this.min=t===Vo(this.min,0)?Vo(this.min,-1):Vo(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,s=this.max;const n=e=>i=t?i:e,o=t=>s=e?s:t;i===s&&(i<=0?(n(1),o(10)):(n(Vo(i,-1)),o(Vo(s,1)))),i<=0&&n(Vo(s,-1)),s<=0&&o(Vo(i,1)),this.min=i,this.max=s}buildTicks(){const t=this.options,e=function(t,{min:e,max:i}){e=B(t.min,e);const s=[],n=Fo(e);let o=function(t,e){let i=Fo(e-t);for(;Wo(t,e,i)>10;)i++;for(;Wo(t,e,i)<10;)i--;return Math.min(i,Fo(t))}(e,i),a=o<0?Math.pow(10,Math.abs(o)):1;const r=Math.pow(10,o),h=n>o?Math.pow(10,n):0,l=Math.round((e-h)*a)/a,c=Math.floor((e-h)/r/10)*r*10;let d=Math.floor((l-c)/Math.pow(10,o)),u=B(t.min,Math.round((h+c+d*Math.pow(10,o))*a)/a);for(;u<i;)s.push({value:u,major:Bo(u),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(o++,d=2,a=o>=0?1:a),u=Math.round((h+c+d*Math.pow(10,o))*a)/a;const f=B(t.max,u);return s.push({value:f,major:Bo(f),significand:d}),s}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&mt(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":qt(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=dt(t),this._valueRange=dt(this.max)-dt(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(dt(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Ho(t){const e=t.ticks;if(e.display&&t.display){const t=Pe(e.backdropPadding);return W(e.font&&e.font.size,se.font.size)+t.height}return 0}function jo(t,e,i,s,n){return t===s||t===n?{start:e-i/2,end:e+i/2}:t<s||t>n?{start:e-i,end:e}:{start:e,end:e+i}}function $o(t,e,i,s,n){const o=Math.abs(Math.sin(i)),a=Math.abs(Math.cos(i));let r=0,h=0;s.start<e.l?(r=(e.l-s.start)/o,t.l=Math.min(t.l,e.l-r)):s.end>e.r&&(r=(s.end-e.r)/o,t.r=Math.max(t.r,e.r+r)),n.start<e.t?(h=(e.t-n.start)/a,t.t=Math.min(t.t,e.t-h)):n.end>e.b&&(h=(n.end-e.b)/a,t.b=Math.max(t.b,e.b+h))}function Yo(t,e,i){const s=t.drawingArea,{extra:n,additionalAngle:o,padding:a,size:r}=i,h=t.getPointPosition(e,s+n+a,o),l=Math.round(xt(Mt(h.angle+ht))),c=function(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}(h.y,r.h,l),d=function(t){return 0===t||180===t?"center":t<180?"left":"right"}(l),u=(f=h.x,g=r.w,"right"===(p=d)?f-=g:"center"===p&&(f-=g/2),f);var f,g,p;return{visible:!0,x:h.x,y:c,textAlign:d,left:u,top:c,right:u+r.w,bottom:c+r.h}}function Zo(t,e){if(!e)return!0;const{left:i,top:s,right:n,bottom:o}=t;return!(ce({x:i,y:s},e)||ce({x:i,y:o},e)||ce({x:n,y:s},e)||ce({x:n,y:o},e))}function Uo(t,e,i){const{left:s,top:n,right:o,bottom:a}=i,{backdropColor:r}=e;if(!I(r)){const i=Se(e.borderRadius),h=Pe(e.backdropPadding);t.fillStyle=r;const l=s-h.left,c=n-h.top,d=o-s+h.width,u=a-n+h.height;Object.values(i).some((t=>0!==t))?(t.beginPath(),xe(t,{x:l,y:c,w:d,h:u,radius:i}),t.fill()):t.fillRect(l,c,d,u)}}function Xo(t,e,i,s){const{ctx:n}=t;if(i)n.arc(t.xCenter,t.yCenter,e,0,nt);else{let i=t.getPointPosition(0,e);n.moveTo(i.x,i.y);for(let o=1;o<s;o++)i=t.getPointPosition(o,e),n.lineTo(i.x,i.y)}}class qo extends Io{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Gt.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=Pe(Ho(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=V(t)&&!isNaN(t)?t:0,this.max=V(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Ho(this.options))}generateTickLabels(t){Io.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=H(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),s=[],n=[],o=t._pointLabels.length,a=t.options.pointLabels,r=a.centerPointLabels?st/o:0;for(let d=0;d<o;d++){const o=a.setContext(t.getPointLabelContext(d));n[d]=o.padding;const u=t.getPointPosition(d,t.drawingArea+n[d],r),f=De(o.font),g=(h=t.ctx,l=f,c=z(c=t._pointLabels[d])?c:[c],{w:oe(h,l.string,c),h:c.length*l.lineHeight});s[d]=g;const p=Mt(t.getIndexAngle(d)+r),m=Math.round(xt(p));$o(i,e,p,jo(m,u.x,g.w,0,180),jo(m,u.y,g.h,90,270))}var h,l,c;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const s=[],n=t._pointLabels.length,o=t.options,{centerPointLabels:a,display:r}=o.pointLabels,h={extra:Ho(o)/2,additionalAngle:a?st/n:0};let l;for(let o=0;o<n;o++){h.padding=i[o],h.size=e[o];const n=Yo(t,o,h);s.push(n),"auto"===r&&(n.visible=Zo(n,l),n.visible&&(l=n))}return s}(t,s,n)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,s){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-s)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,s))}getIndexAngle(t){return Mt(t*(nt/(this._pointLabels.length||1))+bt(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(I(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(I(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return Oe(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const s=this.getIndexAngle(t)-ht+i;return{x:Math.cos(s)*e+this.xCenter,y:Math.sin(s)*e+this.yCenter,angle:s}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:s,bottom:n}=this._pointLabelItems[t];return{left:e,top:i,right:s,bottom:n}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Xo(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:s,border:n}=e,o=this._pointLabels.length;let a,r,h;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:s}}=t;for(let n=e-1;n>=0;n--){const e=t._pointLabelItems[n];if(!e.visible)continue;const o=s.setContext(t.getPointLabelContext(n));Uo(i,o,e);const a=De(o.font),{x:r,y:h,textAlign:l}=e;be(i,t._pointLabels[n],r,h+a.lineHeight/2,a,{color:o.color,textAlign:l,textBaseline:"middle"})}}(this,o),s.display&&this.ticks.forEach(((t,e)=>{if(0!==e){r=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),a=s.setContext(i),h=n.setContext(i);!function(t,e,i,s,n){const o=t.ctx,a=e.circular,{color:r,lineWidth:h}=e;!a&&!s||!r||!h||i<0||(o.save(),o.strokeStyle=r,o.lineWidth=h,o.setLineDash(n.dash),o.lineDashOffset=n.dashOffset,o.beginPath(),Xo(t,i,a,s),o.closePath(),o.stroke(),o.restore())}(this,a,r,o,h)}})),i.display){for(t.save(),a=o-1;a>=0;a--){const s=i.setContext(this.getPointLabelContext(a)),{color:n,lineWidth:o}=s;o&&n&&(t.lineWidth=o,t.strokeStyle=n,t.setLineDash(s.borderDash),t.lineDashOffset=s.borderDashOffset,r=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),h=this.getPointPosition(a,r),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(h.x,h.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const s=this.getIndexAngle(0);let n,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(s),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&!e.reverse)return;const r=i.setContext(this.getContext(a)),h=De(r.font);if(n=this.getDistanceFromCenterForValue(this.ticks[a].value),r.showLabelBackdrop){t.font=h.string,o=t.measureText(s.label).width,t.fillStyle=r.backdropColor;const e=Pe(r.backdropPadding);t.fillRect(-o/2-e.left,-n-h.size/2-e.top,o+e.width,h.size+e.height)}be(t,s.label,0,-n,h,{color:r.color})})),t.restore()}drawTitle(){}}const Ko={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Go=Object.keys(Ko);function Jo(t,e){return t-e}function Qo(t,e){if(I(e))return null;const i=t._adapter,{parser:s,round:n,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof s&&(a=s(a)),V(a)||(a="string"==typeof s?i.parse(a,s):i.parse(a)),null===a?null:(n&&(a="week"!==n||!pt(o)&&!0!==o?i.startOf(a,n):i.startOf(a,"isoWeek",o)),+a)}function ta(t,e,i,s){const n=Go.length;for(let o=Go.indexOf(t);o<n-1;++o){const t=Ko[Go[o]],n=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(n*t.size))<=s)return Go[o]}return Go[n-1]}function ea(t,e,i){if(i){if(i.length){const{lo:s,hi:n}=Dt(i,e);t[i[s]>=e?i[s]:i[n]]=!0}}else t[e]=!0}function ia(t,e,i){const s=[],n={},o=e.length;let a,r;for(a=0;a<o;++a)r=e[a],n[r]=a,s.push({value:r,major:!1});return 0!==o&&i?function(t,e,i,s){const n=t._adapter,o=+n.startOf(e[0].value,s),a=e[e.length-1].value;let r,h;for(r=o;r<=a;r=+n.add(r,1,s))h=i[r],h>=0&&(e[h].major=!0);return e}(t,s,n,i):s}class sa extends Hs{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),s=this._adapter=new Gi(t.adapters.date);s.init(e),q(i.displayFormats,s.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Qo(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:s,max:n,minDefined:o,maxDefined:a}=this.getUserBounds();function r(t){o||isNaN(t.min)||(s=Math.min(s,t.min)),a||isNaN(t.max)||(n=Math.max(n,t.max))}o&&a||(r(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||r(this.getMinMax(!1))),s=V(s)&&!isNaN(s)?s:+e.startOf(Date.now(),i),n=V(n)&&!isNaN(n)?n:+e.endOf(Date.now(),i)+1,this.min=Math.min(s,n-1),this.max=Math.max(s+1,n)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,s="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const n=this.min,o=function(t,e,i){let s=0,n=t.length;for(;s<n&&t[s]<e;)s++;for(;n>s&&t[n-1]>i;)n--;return s>0||n<t.length?t.slice(s,n):t}(s,n,this.max);return this._unit=e.unit||(i.autoSkip?ta(e.minUnit,this.min,this.max,this._getLabelCapacity(n)):function(t,e,i,s,n){for(let o=Go.length-1;o>=Go.indexOf(i);o--){const i=Go[o];if(Ko[i].common&&t._adapter.diff(n,s,i)>=e-1)return i}return Go[i?Go.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=Go.indexOf(t)+1,i=Go.length;e<i;++e)if(Ko[Go[e]].common)return Go[e]}(this._unit):void 0,this.initOffsets(s),t.reverse&&o.reverse(),ia(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,s=0,n=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),s=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),n=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;s=St(s,0,o),n=St(n,0,o),this._offsets={start:s,end:n,factor:1/(s+1+n)}}_generate(){const t=this._adapter,e=this.min,i=this.max,s=this.options,n=s.time,o=n.unit||ta(n.minUnit,e,i,this._getLabelCapacity(e)),a=W(s.ticks.stepSize,1),r="week"===o&&n.isoWeekday,h=pt(r)||!0===r,l={};let c,d,u=e;if(h&&(u=+t.startOf(u,"isoWeek",r)),u=+t.startOf(u,h?"day":o),t.diff(i,e,o)>1e5*a)throw new Error(e+" and "+i+" are too far apart with stepSize of "+a+" "+o);const f="data"===s.ticks.source&&this.getDataTimestamps();for(c=u,d=0;c<i;c=+t.add(c,a,o),d++)ea(l,c,f);return c!==i&&"ticks"!==s.bounds&&1!==d||ea(l,c,f),Object.keys(l).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,s=this._unit,n=e||i[s];return this._adapter.format(t,n)}_tickFormatFunction(t,e,i,s){const n=this.options,o=n.ticks.callback;if(o)return H(o,[t,e,i],this);const a=n.time.displayFormats,r=this._unit,h=this._majorUnit,l=r&&a[r],c=h&&a[h],d=i[e],u=h&&c&&d&&d.major;return this._adapter.format(t,s||(u?c:l))}generateTickLabels(t){let e,i,s;for(e=0,i=t.length;e<i;++e)s=t[e],s.label=this._tickFormatFunction(s.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,s=bt(this.isHorizontal()?e.maxRotation:e.minRotation),n=Math.cos(s),o=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:i*n+a*o,h:i*o+a*n}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,s=i[e.unit]||i.millisecond,n=this._tickFormatFunction(t,0,ia(this,[t],this._majorUnit),s),o=this._getLabelSize(n),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const s=this.getMatchingVisibleMetas();if(this._normalized&&s.length)return this._cache.data=s[0].controller.getAllParsedValues(this);for(t=0,e=s.length;t<e;++t)i=i.concat(s[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const s=this.getLabels();for(e=0,i=s.length;e<i;++e)t.push(Qo(this,s[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return Lt(t.sort(Jo))}}function na(t,e,i){let s,n,o,a,r=0,h=t.length-1;i?(e>=t[r].pos&&e<=t[h].pos&&({lo:r,hi:h}=Ct(t,"pos",e)),({pos:s,time:o}=t[r]),({pos:n,time:a}=t[h])):(e>=t[r].time&&e<=t[h].time&&({lo:r,hi:h}=Ct(t,"time",e)),({time:s,pos:o}=t[r]),({time:n,pos:a}=t[h]));const l=n-s;return l?o+(a-o)*(e-s)/l:o}var oa=Object.freeze({__proto__:null,CategoryScale:class extends Hs{static id="category";static defaults={ticks:{callback:Eo}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:s}of e)t[i]===s&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(I(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:St(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,s){const n=t.indexOf(e);return-1===n?((t,e,i,s)=>("string"==typeof e?(i=t.push(e)-1,s.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,s):n!==t.lastIndexOf(e)?i:n}(i,t,W(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:s}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(s=this.getLabels().length-1)),this.min=i,this.max=s}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,s=[];let n=this.getLabels();n=0===t&&e===n.length-1?n:n.slice(t,e+1),this._valueRange=Math.max(n.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)s.push({value:i});return s}getLabelForValue(t){return Eo.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:zo,LogarithmicScale:No,RadialLinearScale:qo,TimeScale:sa,TimeSeriesScale:class extends sa{static id="timeseries";static defaults=sa.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=na(e,this.min),this._tableRange=na(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,s=[],n=[];let o,a,r,h,l;for(o=0,a=t.length;o<a;++o)h=t[o],h>=e&&h<=i&&s.push(h);if(s.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,a=s.length;o<a;++o)l=s[o+1],r=s[o-1],h=s[o],Math.round((l+r)/2)!==h&&n.push({time:h,pos:o/(a-1)});return n}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(na(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return na(this._table,i*this._tableRange+this._minPos,!0)}}});const aa=[Xi,zn,Lo,oa];xn.register(...aa);var ra,ha=function(){},la=(ra=function(t,e){return ra=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},ra(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}ra(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),ca=function(t){function e(e){var i=t.call(this)||this;return i.data=i.getTimeInZoneList(e),i.button=document.getElementById("switchHr"),i.chartItem=document.getElementById("hrChart"),i}return la(e,t),e.prototype.createHoursChart=function(){null==this.chart&&null==this.chart||this.chart.destroy(),this.chart=new xn(this.chartItem,{type:"bar",data:{labels:["Zone 1","Zone 2","Zone 3","Zone 4","Zone 5"],datasets:[{label:"Time in Zone (hours)",data:this.data.map((function(t){return t/3600})),borderWidth:1}]},options:{scales:{y:{beginAtZero:!0}}}}),this.isMinutes=!1},e.prototype.createMinutesChart=function(){null==this.chart&&null==this.chart||this.chart.destroy(),this.chart=new xn(this.chartItem,{type:"bar",data:{labels:["Zone 1","Zone 2","Zone 3","Zone 4","Zone 5"],datasets:[{label:"Time in Zone (minutes)",data:this.data.map((function(t){return t/60})),borderWidth:1}]},options:{responsive:!0,scales:{y:{beginAtZero:!0}}}}),this.isMinutes=!0},e.prototype.toggleTimeUnits=function(){this.isMinutes?this.createHoursChart():this.createMinutesChart()},e.prototype.toggleChartType=function(){"pie"==this.chart.config.type?this.createHoursChart():this.createPieChart()},e.prototype.createPieChart=function(){null==this.chart&&null==this.chart||this.chart.destroy();var t={labels:["Zone 1","Zone 2","Zone 3","Zone 4","Zone 5"],datasets:[{label:"Time in Zone (hours)",data:this.data.map((function(t){return t/3600})),hoverOffset:4}]};this.chart=new xn(this.chartItem,{type:"pie",data:t}),this.isMinutes=!1},e.prototype.getZone=function(t){var e=Number.parseInt(t);return e<=118?1:e>118&&e<=156?2:e>156&&e<=175?3:e>175&&e<=194?4:e>194?5:1},e.prototype.getTimeInZoneList=function(t){for(var e={1:0,2:0,3:0,4:0,5:0},i=0,s=t;i<s.length;i++){var n=s[i];for(var o in n.heartRateDict){var a=n.heartRateDict[o];e[this.getZone(o).toString()]+=Number.parseInt(a)}}return Object.values(e)},e}(ha),da=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function s(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(s.prototype=i.prototype,new s)}}(),ua=function(t){function e(e){var i=t.call(this)||this;return i.data=i.getTimeInZoneList(e),i.button=document.getElementById("switchPower"),i.chartItem=document.getElementById("powerChart"),i}return da(e,t),e.prototype.createHoursChart=function(){null==this.chart&&null==this.chart||this.chart.destroy(),this.chart=new xn(this.chartItem,{type:"bar",data:{labels:["Zone 1","Zone 2","Zone 3","Zone 4","Zone 5","Zone 6","Zone 7"],datasets:[{label:"Time in Zone (hours)",data:this.data.map((function(t){return t/3600})),borderWidth:1}]},options:{scales:{y:{beginAtZero:!0}}}}),this.isMinutes=!1},e.prototype.createMinutesChart=function(){null==this.chart&&null==this.chart||this.chart.destroy(),this.chart=new xn(this.chartItem,{type:"bar",data:{labels:["Zone 1","Zone 2","Zone 3","Zone 4","Zone 5","Zone 6","Zone 7"],datasets:[{label:"Time in Zone (minutes)",data:this.data.map((function(t){return t/60})),borderWidth:1}]},options:{scales:{y:{beginAtZero:!0}}}}),this.isMinutes=!0},e.prototype.toggleTimeUnits=function(){this.isMinutes?this.createHoursChart():this.createMinutesChart()},e.prototype.toggleChartType=function(){"pie"==this.chart.config.type?this.createHoursChart():this.createPieChart()},e.prototype.createPieChart=function(){null==this.chart&&null==this.chart||this.chart.destroy();var t={labels:["Zone 1","Zone 2","Zone 3","Zone 4","Zone 5","Zone 6","Zone 7"],datasets:[{label:"Time in Zone (hours)",data:this.data.map((function(t){return t/3600})),hoverOffset:4}]};this.chart=new xn(this.chartItem,{type:"pie",data:t}),this.isMinutes=!1},e.prototype.getTimeInZoneList=function(t){for(var e={1:0,2:0,3:0,4:0,5:0,6:0,7:0},i=0,s=t;i<s.length;i++){var n=s[i];for(var o in n.powerDict){var a=n.powerDict[o];e[this.getZone(o).toString()]+=Number.parseInt(a)}}return Object.values(e)},e.prototype.getZone=function(t){var e=Number.parseInt(t);return e<=132?1:e>132&&e<=180?2:e>180&&e<=216?3:e>216&&e<=252?4:e>252&&e<=288?5:e>288&&e<=360?6:e>=360?7:1},e}(ha),fa=function(t,e,i,s){return new(i||(i=Promise))((function(n,o){function a(t){try{h(s.next(t))}catch(t){o(t)}}function r(t){try{h(s.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,r)}h((s=s.apply(t,e||[])).next())}))},ga=function(t,e){var i,s,n,o,a={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function r(r){return function(h){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,r[0]&&(a=0)),a;)try{if(i=1,s&&(n=2&r[0]?s.return:r[0]?s.throw||((n=s.return)&&n.call(s),0):s.next)&&!(n=n.call(s,r[1])).done)return n;switch(s=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,s=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((n=(n=a.trys).length>0&&n[n.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){a.label=r[1];break}if(6===r[0]&&a.label<n[1]){a.label=n[1],n=r;break}if(n&&a.label<n[2]){a.label=n[2],a.ops.push(r);break}n[2]&&a.ops.pop(),a.trys.pop();continue}r=e.call(t,a)}catch(t){r=[6,t],s=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,h])}}};function pa(){return fa(this,void 0,void 0,(function(){var t,e,s,n,o,a,r;return ga(this,(function(h){switch(h.label){case 0:return t=document.getElementById("convertPower"),e=document.getElementById("convertHr"),[4,(s=new i).getPowerData()];case 1:return n=h.sent(),[4,s.getHeartRateData()];case 2:return o=h.sent(),console.log(o),console.log(n),(a=new ua(n)).createPieChart(),t.addEventListener("click",(function(){return a.toggleChartType()})),(r=new ca(o)).createPieChart(),e.addEventListener("click",(function(){return r.toggleChartType()})),[2]}}))}))}fa(void 0,void 0,void 0,(function(){var t;return ga(this,(function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,pa()];case 1:return e.sent(),[3,3];case 2:return t=e.sent(),console.error(t),[3,3];case 3:return[2]}}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFHLEtBQ0gyQyxFQUFHLEtBQ0hDLEVBQUcsS0FDSDNDLEVBQUcsS0FDSEMsRUFBRyxRQUNIQyxFQUFHLFFBQ0gwQyxFQUFHLEtBQ0hDLEVBQUcsV0FDSDFDLEVBQUcsS0FDSDJDLEVBQUcsS0FDSEMsRUFBRyxLQUNIQyxFQUFHLEtBQ0hDLEVBQUcsS0FDSEMsRUFBRyxRQUNIOUMsRUFBRyxLQUNIK0MsRUFBRyxLQUNIQyxFQUFHLE9BQ0hDLEVBQUcsS0FDSEMsRUFBRyxRQUNIQyxFQUFHLE1BRUNDLEVBQVUsQ0FDZEMsT0FBUSxTQUNSQyxZQUFhLFNBQ2JDLEtBQU0sT0FDTkMsVUFBVyxTQUNYQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsT0FBUSxTQUNSQyxNQUFPLElBQ1BDLGFBQWMsU0FDZEMsR0FBSSxLQUNKQyxRQUFTLFNBQ1RDLEtBQU0sU0FDTkMsVUFBVyxTQUNYQyxPQUFRLFNBQ1JDLFNBQVUsU0FDVkMsUUFBUyxTQUNUQyxJQUFLLFNBQ0xDLFlBQWEsU0FDYkMsUUFBUyxTQUNUQyxRQUFTLFNBQ1RDLEtBQU0sT0FDTkMsSUFBSyxLQUNMQyxNQUFPLE9BQ1BDLFFBQVMsU0FDVEMsS0FBTSxTQUNOQyxLQUFNLE9BQ05DLEtBQU0sU0FDTkMsT0FBUSxTQUNSQyxRQUFTLFNBQ1RDLFNBQVUsU0FDVkMsT0FBUSxTQUNSQyxNQUFPLFNBQ1BDLElBQUssU0FDTEMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLEtBQU0sU0FDTkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLElBQUssT0FDTEMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLFNBQVUsT0FDVkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLFNBQVUsU0FDVkMsU0FBVSxTQUNWQyxTQUFVLFNBQ1ZDLFNBQVUsU0FDVkMsT0FBUSxTQUNSQyxRQUFTLFNBQ1RDLFVBQVcsU0FDWEMsSUFBSyxTQUNMQyxPQUFRLFNBQ1JDLElBQUssU0FDTEMsSUFBSyxPQUNMQyxNQUFPLFNBQ1BDLElBQUssU0FDTEMsUUFBUyxTQUNUQyxPQUFRLFNBQ1JDLFFBQVMsU0FDVEMsTUFBTyxTQUNQQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsT0FBUSxTQUNSQyxVQUFXLFNBQ1hDLFFBQVMsU0FDVEMsV0FBWSxTQUNaQyxJQUFLLFNBQ0xDLEtBQU0sU0FDTkMsTUFBTyxTQUNQQyxVQUFXLFNBQ1hDLEtBQU0sU0FDTkMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLE9BQVEsU0FDUkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLFFBQVMsU0FDVEMsSUFBSyxTQUNMQyxLQUFNLE9BQ05DLFFBQVMsU0FDVEMsSUFBSyxTQUNMQyxPQUFRLFNBQ1JDLE1BQU8sU0FDUEMsV0FBWSxTQUNaQyxJQUFLLEtBQ0xDLE1BQU8sU0FDUEMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLEtBQU0sU0FDTkMsVUFBVyxPQUNYQyxJQUFLLFNBQ0xDLFNBQVUsU0FDVkMsV0FBWSxTQUNaQyxRQUFTLFNBQ1RDLFNBQVUsU0FDVkMsUUFBUyxTQUNUQyxXQUFZLFNBQ1pDLEtBQU0sS0FDTkMsT0FBUSxTQUNSQyxLQUFNLFNBQ05DLFFBQVMsU0FDVEMsTUFBTyxTQUNQQyxRQUFTLFNBQ1RDLEtBQU0sU0FDTkMsVUFBVyxTQUNYQyxPQUFRLFNBQ1JDLE1BQU8sU0FDUEMsV0FBWSxTQUNaQyxVQUFXLFNBQ1hDLFFBQVMsU0FDVEMsS0FBTSxTQUNOQyxJQUFLLFNBQ0xDLEtBQU0sU0FDTkMsUUFBUyxTQUNUQyxNQUFPLFNBQ1BDLFlBQWEsU0FDYkMsR0FBSSxTQUNKQyxTQUFVLFNBQ1ZDLE1BQU8sU0FDUEMsVUFBVyxTQUNYQyxNQUFPLFNBQ1BDLFVBQVcsU0FDWEMsTUFBTyxTQUNQQyxRQUFTLFNBQ1RDLE1BQU8sU0FDUEMsT0FBUSxTQUNSQyxNQUFPLFNBQ1BDLElBQUssU0FDTEMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsU0FBVSxPQUNWQyxPQUFRLFNBQ1JDLElBQUssU0FDTEMsSUFBSyxPQUNMQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsR0FBSSxTQUNKQyxN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R0FBTVEsRUFBTzNvRixrQ0FBekI2b0YsRUFBWSxTQUVoQjczRCxRQUFRODNELElBQUlELEdBQ1o3M0QsUUFBUTgzRCxJQUFJWCxJQUVSWSxFQUFzQixJQUFJQyxHQUFvQmIsSUFDOUJWLGlCQUVwQmdCLEVBQXVCL3NELGlCQUFpQixTQUFTLFdBQU0sT0FBQXF0RCxFQUFvQnZCLGlCQUFwQixLQUVuRHlCLEVBQW1CLElBQUlDLEdBQXdCTCxJQUNsQ3BCLGlCQUVqQmlCLEVBQW9CaHRELGlCQUFpQixTQUFTLFdBQU0sT0FBQXV0RCxFQUFpQnpCLGlCQUFqQixlQUl2RCw2RkFFTyxnQ0FBTWdCLG9CQUFOLHdDQUVBeDNELFFBQVFnbEMsTUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0cmF2YS8uL3NyYy9hcGlDbGllbnQudHMiLCJ3ZWJwYWNrOi8vc3RyYXZhLy4vbm9kZV9tb2R1bGVzL0BrdXJrbGUvY29sb3IvZGlzdC9jb2xvci5lc20uanMiLCJ3ZWJwYWNrOi8vc3RyYXZhLy4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL2Rpc3QvY2h1bmtzL2hlbHBlcnMuc2VnbWVudC5qcyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvZGlzdC9jaGFydC5qcyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvYXV0by9hdXRvLmpzIiwid2VicGFjazovL3N0cmF2YS8uL3NyYy9jaGFydEdlbmVyYXRvci50cyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9zcmMvaGVhcnRSYXRlQ2hhcnRHZW5lcmF0b3IudHMiLCJ3ZWJwYWNrOi8vc3RyYXZhLy4vc3JjL3Bvd2VyQ2hhcnRHZW5lcmF0b3IudHMiLCJ3ZWJwYWNrOi8vc3RyYXZhLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0cmVhbSB9IGZyb20gXCIuL21vZGVscy9zdHJlYW1cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdHJhdmFBcGlDbGllbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0UG93ZXJEYXRhKCk6IFByb21pc2U8U3RyZWFtW10+IHtcclxuICAgICAgICB2YXIgdXJsID0gXCJodHRwczovL2xvY2FsaG9zdDo3MDM4L2FwaS9zdHJhdmFNb25nby9HZXRBbGxQb3dlclN0cmVhbXNcIjtcclxuXHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IGZldGNoKHVybCk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBhd2FpdCByZXN1bHQuanNvbigpIGFzIFN0cmVhbVtdO1xyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEhlYXJ0UmF0ZURhdGEoKTogUHJvbWlzZTxTdHJlYW1bXT4ge1xyXG4gICAgICAgIHZhciB1cmwgPSBcImh0dHBzOi8vbG9jYWxob3N0OjcwMzgvYXBpL3N0cmF2YU1vbmdvL0dldEFsbEhyU3RyZWFtc1wiO1xyXG5cclxuICAgICAgICB2YXIgcmVzdWx0ID0gYXdhaXQgZmV0Y2godXJsKTtcclxuICAgICAgICB2YXIgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCkgYXMgU3RyZWFtW107XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcbn0iLCIvKiFcbiAqIEBrdXJrbGUvY29sb3IgdjAuMy4yXG4gKiBodHRwczovL2dpdGh1Yi5jb20va3Vya2xlL2NvbG9yI3JlYWRtZVxuICogKGMpIDIwMjMgSnVra2EgS3Vya2VsYVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmZ1bmN0aW9uIHJvdW5kKHYpIHtcbiAgcmV0dXJuIHYgKyAwLjUgfCAwO1xufVxuY29uc3QgbGltID0gKHYsIGwsIGgpID0+IE1hdGgubWF4KE1hdGgubWluKHYsIGgpLCBsKTtcbmZ1bmN0aW9uIHAyYih2KSB7XG4gIHJldHVybiBsaW0ocm91bmQodiAqIDIuNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gYjJwKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2IC8gMi41NSksIDAsIDEwMCk7XG59XG5mdW5jdGlvbiBuMmIodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgKiAyNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gYjJuKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2IC8gMi41NSkgLyAxMDAsIDAsIDEpO1xufVxuZnVuY3Rpb24gbjJwKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2ICogMTAwKSwgMCwgMTAwKTtcbn1cblxuY29uc3QgbWFwJDEgPSB7MDogMCwgMTogMSwgMjogMiwgMzogMywgNDogNCwgNTogNSwgNjogNiwgNzogNywgODogOCwgOTogOSwgQTogMTAsIEI6IDExLCBDOiAxMiwgRDogMTMsIEU6IDE0LCBGOiAxNSwgYTogMTAsIGI6IDExLCBjOiAxMiwgZDogMTMsIGU6IDE0LCBmOiAxNX07XG5jb25zdCBoZXggPSBbLi4uJzAxMjM0NTY3ODlBQkNERUYnXTtcbmNvbnN0IGgxID0gYiA9PiBoZXhbYiAmIDB4Rl07XG5jb25zdCBoMiA9IGIgPT4gaGV4WyhiICYgMHhGMCkgPj4gNF0gKyBoZXhbYiAmIDB4Rl07XG5jb25zdCBlcSA9IGIgPT4gKChiICYgMHhGMCkgPj4gNCkgPT09IChiICYgMHhGKTtcbmNvbnN0IGlzU2hvcnQgPSB2ID0+IGVxKHYucikgJiYgZXEodi5nKSAmJiBlcSh2LmIpICYmIGVxKHYuYSk7XG5mdW5jdGlvbiBoZXhQYXJzZShzdHIpIHtcbiAgdmFyIGxlbiA9IHN0ci5sZW5ndGg7XG4gIHZhciByZXQ7XG4gIGlmIChzdHJbMF0gPT09ICcjJykge1xuICAgIGlmIChsZW4gPT09IDQgfHwgbGVuID09PSA1KSB7XG4gICAgICByZXQgPSB7XG4gICAgICAgIHI6IDI1NSAmIG1hcCQxW3N0clsxXV0gKiAxNyxcbiAgICAgICAgZzogMjU1ICYgbWFwJDFbc3RyWzJdXSAqIDE3LFxuICAgICAgICBiOiAyNTUgJiBtYXAkMVtzdHJbM11dICogMTcsXG4gICAgICAgIGE6IGxlbiA9PT0gNSA/IG1hcCQxW3N0cls0XV0gKiAxNyA6IDI1NVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gNyB8fCBsZW4gPT09IDkpIHtcbiAgICAgIHJldCA9IHtcbiAgICAgICAgcjogbWFwJDFbc3RyWzFdXSA8PCA0IHwgbWFwJDFbc3RyWzJdXSxcbiAgICAgICAgZzogbWFwJDFbc3RyWzNdXSA8PCA0IHwgbWFwJDFbc3RyWzRdXSxcbiAgICAgICAgYjogbWFwJDFbc3RyWzVdXSA8PCA0IHwgbWFwJDFbc3RyWzZdXSxcbiAgICAgICAgYTogbGVuID09PSA5ID8gKG1hcCQxW3N0cls3XV0gPDwgNCB8IG1hcCQxW3N0cls4XV0pIDogMjU1XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuY29uc3QgYWxwaGEgPSAoYSwgZikgPT4gYSA8IDI1NSA/IGYoYSkgOiAnJztcbmZ1bmN0aW9uIGhleFN0cmluZyh2KSB7XG4gIHZhciBmID0gaXNTaG9ydCh2KSA/IGgxIDogaDI7XG4gIHJldHVybiB2XG4gICAgPyAnIycgKyBmKHYucikgKyBmKHYuZykgKyBmKHYuYikgKyBhbHBoYSh2LmEsIGYpXG4gICAgOiB1bmRlZmluZWQ7XG59XG5cbmNvbnN0IEhVRV9SRSA9IC9eKGhzbGE/fGh3Ynxoc3YpXFwoXFxzKihbLSsuZVxcZF0rKSg/OmRlZyk/W1xccyxdKyhbLSsuZVxcZF0rKSVbXFxzLF0rKFstKy5lXFxkXSspJSg/OltcXHMsXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiBoc2wycmdibihoLCBzLCBsKSB7XG4gIGNvbnN0IGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIHJldHVybiBbZigwKSwgZig4KSwgZig0KV07XG59XG5mdW5jdGlvbiBoc3YycmdibihoLCBzLCB2KSB7XG4gIGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDYwKSAlIDYpID0+IHYgLSB2ICogcyAqIE1hdGgubWF4KE1hdGgubWluKGssIDQgLSBrLCAxKSwgMCk7XG4gIHJldHVybiBbZig1KSwgZigzKSwgZigxKV07XG59XG5mdW5jdGlvbiBod2IycmdibihoLCB3LCBiKSB7XG4gIGNvbnN0IHJnYiA9IGhzbDJyZ2JuKGgsIDEsIDAuNSk7XG4gIGxldCBpO1xuICBpZiAodyArIGIgPiAxKSB7XG4gICAgaSA9IDEgLyAodyArIGIpO1xuICAgIHcgKj0gaTtcbiAgICBiICo9IGk7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIHJnYltpXSAqPSAxIC0gdyAtIGI7XG4gICAgcmdiW2ldICs9IHc7XG4gIH1cbiAgcmV0dXJuIHJnYjtcbn1cbmZ1bmN0aW9uIGh1ZVZhbHVlKHIsIGcsIGIsIGQsIG1heCkge1xuICBpZiAociA9PT0gbWF4KSB7XG4gICAgcmV0dXJuICgoZyAtIGIpIC8gZCkgKyAoZyA8IGIgPyA2IDogMCk7XG4gIH1cbiAgaWYgKGcgPT09IG1heCkge1xuICAgIHJldHVybiAoYiAtIHIpIC8gZCArIDI7XG4gIH1cbiAgcmV0dXJuIChyIC0gZykgLyBkICsgNDtcbn1cbmZ1bmN0aW9uIHJnYjJoc2wodikge1xuICBjb25zdCByYW5nZSA9IDI1NTtcbiAgY29uc3QgciA9IHYuciAvIHJhbmdlO1xuICBjb25zdCBnID0gdi5nIC8gcmFuZ2U7XG4gIGNvbnN0IGIgPSB2LmIgLyByYW5nZTtcbiAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gIGNvbnN0IG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICBjb25zdCBsID0gKG1heCArIG1pbikgLyAyO1xuICBsZXQgaCwgcywgZDtcbiAgaWYgKG1heCAhPT0gbWluKSB7XG4gICAgZCA9IG1heCAtIG1pbjtcbiAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgaCA9IGh1ZVZhbHVlKHIsIGcsIGIsIGQsIG1heCk7XG4gICAgaCA9IGggKiA2MCArIDAuNTtcbiAgfVxuICByZXR1cm4gW2ggfCAwLCBzIHx8IDAsIGxdO1xufVxuZnVuY3Rpb24gY2FsbG4oZiwgYSwgYiwgYykge1xuICByZXR1cm4gKFxuICAgIEFycmF5LmlzQXJyYXkoYSlcbiAgICAgID8gZihhWzBdLCBhWzFdLCBhWzJdKVxuICAgICAgOiBmKGEsIGIsIGMpXG4gICkubWFwKG4yYik7XG59XG5mdW5jdGlvbiBoc2wycmdiKGgsIHMsIGwpIHtcbiAgcmV0dXJuIGNhbGxuKGhzbDJyZ2JuLCBoLCBzLCBsKTtcbn1cbmZ1bmN0aW9uIGh3YjJyZ2IoaCwgdywgYikge1xuICByZXR1cm4gY2FsbG4oaHdiMnJnYm4sIGgsIHcsIGIpO1xufVxuZnVuY3Rpb24gaHN2MnJnYihoLCBzLCB2KSB7XG4gIHJldHVybiBjYWxsbihoc3YycmdibiwgaCwgcywgdik7XG59XG5mdW5jdGlvbiBodWUoaCkge1xuICByZXR1cm4gKGggJSAzNjAgKyAzNjApICUgMzYwO1xufVxuZnVuY3Rpb24gaHVlUGFyc2Uoc3RyKSB7XG4gIGNvbnN0IG0gPSBIVUVfUkUuZXhlYyhzdHIpO1xuICBsZXQgYSA9IDI1NTtcbiAgbGV0IHY7XG4gIGlmICghbSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobVs1XSAhPT0gdikge1xuICAgIGEgPSBtWzZdID8gcDJiKCttWzVdKSA6IG4yYigrbVs1XSk7XG4gIH1cbiAgY29uc3QgaCA9IGh1ZSgrbVsyXSk7XG4gIGNvbnN0IHAxID0gK21bM10gLyAxMDA7XG4gIGNvbnN0IHAyID0gK21bNF0gLyAxMDA7XG4gIGlmIChtWzFdID09PSAnaHdiJykge1xuICAgIHYgPSBod2IycmdiKGgsIHAxLCBwMik7XG4gIH0gZWxzZSBpZiAobVsxXSA9PT0gJ2hzdicpIHtcbiAgICB2ID0gaHN2MnJnYihoLCBwMSwgcDIpO1xuICB9IGVsc2Uge1xuICAgIHYgPSBoc2wycmdiKGgsIHAxLCBwMik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByOiB2WzBdLFxuICAgIGc6IHZbMV0sXG4gICAgYjogdlsyXSxcbiAgICBhOiBhXG4gIH07XG59XG5mdW5jdGlvbiByb3RhdGUodiwgZGVnKSB7XG4gIHZhciBoID0gcmdiMmhzbCh2KTtcbiAgaFswXSA9IGh1ZShoWzBdICsgZGVnKTtcbiAgaCA9IGhzbDJyZ2IoaCk7XG4gIHYuciA9IGhbMF07XG4gIHYuZyA9IGhbMV07XG4gIHYuYiA9IGhbMl07XG59XG5mdW5jdGlvbiBoc2xTdHJpbmcodikge1xuICBpZiAoIXYpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYSA9IHJnYjJoc2wodik7XG4gIGNvbnN0IGggPSBhWzBdO1xuICBjb25zdCBzID0gbjJwKGFbMV0pO1xuICBjb25zdCBsID0gbjJwKGFbMl0pO1xuICByZXR1cm4gdi5hIDwgMjU1XG4gICAgPyBgaHNsYSgke2h9LCAke3N9JSwgJHtsfSUsICR7YjJuKHYuYSl9KWBcbiAgICA6IGBoc2woJHtofSwgJHtzfSUsICR7bH0lKWA7XG59XG5cbmNvbnN0IG1hcCA9IHtcbiAgeDogJ2RhcmsnLFxuICBaOiAnbGlnaHQnLFxuICBZOiAncmUnLFxuICBYOiAnYmx1JyxcbiAgVzogJ2dyJyxcbiAgVjogJ21lZGl1bScsXG4gIFU6ICdzbGF0ZScsXG4gIEE6ICdlZScsXG4gIFQ6ICdvbCcsXG4gIFM6ICdvcicsXG4gIEI6ICdyYScsXG4gIEM6ICdsYXRlZycsXG4gIEQ6ICdpZ2h0cycsXG4gIFI6ICdpbicsXG4gIFE6ICd0dXJxdW9pcycsXG4gIEU6ICdoaScsXG4gIFA6ICdybycsXG4gIE86ICdhbCcsXG4gIE46ICdsZScsXG4gIE06ICdkZScsXG4gIEw6ICd5ZWxsbycsXG4gIEY6ICdlbicsXG4gIEs6ICdjaCcsXG4gIEc6ICdhcmtzJyxcbiAgSDogJ2VhJyxcbiAgSTogJ2lnaHRnJyxcbiAgSjogJ3doJ1xufTtcbmNvbnN0IG5hbWVzJDEgPSB7XG4gIE9pY2VYZTogJ2YwZjhmZicsXG4gIGFudGlxdWV3RXRlOiAnZmFlYmQ3JyxcbiAgYXF1YTogJ2ZmZmYnLFxuICBhcXVhbWFyUmU6ICc3ZmZmZDQnLFxuICBhenVZOiAnZjBmZmZmJyxcbiAgYmVpZ2U6ICdmNWY1ZGMnLFxuICBiaXNxdWU6ICdmZmU0YzQnLFxuICBibGFjazogJzAnLFxuICBibGFuS2VkT21vbmQ6ICdmZmViY2QnLFxuICBYZTogJ2ZmJyxcbiAgWGV2aVRldDogJzhhMmJlMicsXG4gIGJQd246ICdhNTJhMmEnLFxuICBidXJseXdvb2Q6ICdkZWI4ODcnLFxuICBjYU10WGU6ICc1ZjllYTAnLFxuICBLYXJ0WXVzZTogJzdmZmYwMCcsXG4gIEtvY1RhdGU6ICdkMjY5MWUnLFxuICBjU086ICdmZjdmNTAnLFxuICBjU25mbG93ZXJYZTogJzY0OTVlZCcsXG4gIGNTbnNpbGs6ICdmZmY4ZGMnLFxuICBjcmltc29uOiAnZGMxNDNjJyxcbiAgY3lhbjogJ2ZmZmYnLFxuICB4WGU6ICc4YicsXG4gIHhjeWFuOiAnOGI4YicsXG4gIHhnVE1uUGQ6ICdiODg2MGInLFxuICB4V2F5OiAnYTlhOWE5JyxcbiAgeGdZRjogJzY0MDAnLFxuICB4Z1l5OiAnYTlhOWE5JyxcbiAgeGtoYWtpOiAnYmRiNzZiJyxcbiAgeG1hZ0Z0YTogJzhiMDA4YicsXG4gIHhUaXZlZ1lGOiAnNTU2YjJmJyxcbiAgeFNhbmdlOiAnZmY4YzAwJyxcbiAgeFNjRWQ6ICc5OTMyY2MnLFxuICB4WWQ6ICc4YjAwMDAnLFxuICB4c09tb246ICdlOTk2N2EnLFxuICB4c0hnWUY6ICc4ZmJjOGYnLFxuICB4VVhlOiAnNDgzZDhiJyxcbiAgeFVXYXk6ICcyZjRmNGYnLFxuICB4VWdZeTogJzJmNGY0ZicsXG4gIHhRZTogJ2NlZDEnLFxuICB4dmlUZXQ6ICc5NDAwZDMnLFxuICBkQXBwUms6ICdmZjE0OTMnLFxuICBkQXBza3lYZTogJ2JmZmYnLFxuICBkaW1XYXk6ICc2OTY5NjknLFxuICBkaW1nWXk6ICc2OTY5NjknLFxuICBkb2RnZXJYZTogJzFlOTBmZicsXG4gIGZpWWJyaWNrOiAnYjIyMjIyJyxcbiAgZmxTT3dFdGU6ICdmZmZhZjAnLFxuICBmb1lzdFdBbjogJzIyOGIyMicsXG4gIGZ1S3NpYTogJ2ZmMDBmZicsXG4gIGdhUnNiU286ICdkY2RjZGMnLFxuICBnaG9zdHdFdGU6ICdmOGY4ZmYnLFxuICBnVGQ6ICdmZmQ3MDAnLFxuICBnVE1uUGQ6ICdkYWE1MjAnLFxuICBXYXk6ICc4MDgwODAnLFxuICBnWUY6ICc4MDAwJyxcbiAgZ1lGTHc6ICdhZGZmMmYnLFxuICBnWXk6ICc4MDgwODAnLFxuICBob25leU13OiAnZjBmZmYwJyxcbiAgaG90cFJrOiAnZmY2OWI0JyxcbiAgUmRpYW5ZZDogJ2NkNWM1YycsXG4gIFJkaWdvOiAnNGIwMDgyJyxcbiAgaXZTeTogJ2ZmZmZmMCcsXG4gIGtoYWtpOiAnZjBlNjhjJyxcbiAgbGF2Rk1yOiAnZTZlNmZhJyxcbiAgbGF2Rk1yWHNoOiAnZmZmMGY1JyxcbiAgbGF3bmdZRjogJzdjZmMwMCcsXG4gIE5tb25jRWZmb246ICdmZmZhY2QnLFxuICBaWGU6ICdhZGQ4ZTYnLFxuICBaY1NPOiAnZjA4MDgwJyxcbiAgWmN5YW46ICdlMGZmZmYnLFxuICBaZ1RNblBkTHc6ICdmYWZhZDInLFxuICBaV2F5OiAnZDNkM2QzJyxcbiAgWmdZRjogJzkwZWU5MCcsXG4gIFpnWXk6ICdkM2QzZDMnLFxuICBacFJrOiAnZmZiNmMxJyxcbiAgWnNPbW9uOiAnZmZhMDdhJyxcbiAgWnNIZ1lGOiAnMjBiMmFhJyxcbiAgWnNreVhlOiAnODdjZWZhJyxcbiAgWlVXYXk6ICc3Nzg4OTknLFxuICBaVWdZeTogJzc3ODg5OScsXG4gIFpzdEFsWGU6ICdiMGM0ZGUnLFxuICBaTHc6ICdmZmZmZTAnLFxuICBsaW1lOiAnZmYwMCcsXG4gIGxpbWVnWUY6ICczMmNkMzInLFxuICBsUkY6ICdmYWYwZTYnLFxuICBtYWdGdGE6ICdmZjAwZmYnLFxuICBtYVBvbjogJzgwMDAwMCcsXG4gIFZhcXVhbWFyUmU6ICc2NmNkYWEnLFxuICBWWGU6ICdjZCcsXG4gIFZTY0VkOiAnYmE1NWQzJyxcbiAgVnB1cnBOOiAnOTM3MGRiJyxcbiAgVnNIZ1lGOiAnM2NiMzcxJyxcbiAgVlVYZTogJzdiNjhlZScsXG4gIFZzcHJSZ2dZRjogJ2ZhOWEnLFxuICBWUWU6ICc0OGQxY2MnLFxuICBWdmlUZXRZZDogJ2M3MTU4NScsXG4gIG1pZG5pZ2h0WGU6ICcxOTE5NzAnLFxuICBtUnRjWWFtOiAnZjVmZmZhJyxcbiAgbWlzdHlQc2U6ICdmZmU0ZTEnLFxuICBtb2NjYXNSOiAnZmZlNGI1JyxcbiAgbmF2YWpvd0V0ZTogJ2ZmZGVhZCcsXG4gIG5hdnk6ICc4MCcsXG4gIFRkbGFjZTogJ2ZkZjVlNicsXG4gIFRpdmU6ICc4MDgwMDAnLFxuICBUaXZlZEJiOiAnNmI4ZTIzJyxcbiAgU2FuZ2U6ICdmZmE1MDAnLFxuICBTYW5nZVlkOiAnZmY0NTAwJyxcbiAgU2NFZDogJ2RhNzBkNicsXG4gIHBPZWdUTW5QZDogJ2VlZThhYScsXG4gIHBPZWdZRjogJzk4ZmI5OCcsXG4gIHBPZVFlOiAnYWZlZWVlJyxcbiAgcE9ldmlUZXRZZDogJ2RiNzA5MycsXG4gIHBhcGF5YXdFcDogJ2ZmZWZkNScsXG4gIHBIS3B1ZmY6ICdmZmRhYjknLFxuICBwZXJ1OiAnY2Q4NTNmJyxcbiAgcFJrOiAnZmZjMGNiJyxcbiAgcGx1bTogJ2RkYTBkZCcsXG4gIHBvd01yWGU6ICdiMGUwZTYnLFxuICBwdXJwTjogJzgwMDA4MCcsXG4gIFliZWNjYXB1cnBOOiAnNjYzMzk5JyxcbiAgWWQ6ICdmZjAwMDAnLFxuICBQc3licm93bjogJ2JjOGY4ZicsXG4gIFB5T1hlOiAnNDE2OWUxJyxcbiAgc2FkZE5iUHduOiAnOGI0NTEzJyxcbiAgc09tb246ICdmYTgwNzInLFxuICBzYW5keWJQd246ICdmNGE0NjAnLFxuICBzSGdZRjogJzJlOGI1NycsXG4gIHNIc2hlbGw6ICdmZmY1ZWUnLFxuICBzaUZuYTogJ2EwNTIyZCcsXG4gIHNpbHZlcjogJ2MwYzBjMCcsXG4gIHNreVhlOiAnODdjZWViJyxcbiAgVVhlOiAnNmE1YWNkJyxcbiAgVVdheTogJzcwODA5MCcsXG4gIFVnWXk6ICc3MDgwOTAnLFxuICBzbm93OiAnZmZmYWZhJyxcbiAgc3ByUmdnWUY6ICdmZjdmJyxcbiAgc3RBbFhlOiAnNDY4MmI0JyxcbiAgdGFuOiAnZDJiNDhjJyxcbiAgdGVPOiAnODA4MCcsXG4gIHRFc3ROOiAnZDhiZmQ4JyxcbiAgdG9tYXRvOiAnZmY2MzQ3JyxcbiAgUWU6ICc0MGUwZDAnLFxuICB2aVRldDogJ2VlODJlZScsXG4gIEpIdDogJ2Y1ZGViMycsXG4gIHdFdGU6ICdmZmZmZmYnLFxuICB3RXRlc21va2U6ICdmNWY1ZjUnLFxuICBMdzogJ2ZmZmYwMCcsXG4gIEx3Z1lGOiAnOWFjZDMyJ1xufTtcbmZ1bmN0aW9uIHVucGFjaygpIHtcbiAgY29uc3QgdW5wYWNrZWQgPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG5hbWVzJDEpO1xuICBjb25zdCB0a2V5cyA9IE9iamVjdC5rZXlzKG1hcCk7XG4gIGxldCBpLCBqLCBrLCBvaywgbms7XG4gIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgb2sgPSBuayA9IGtleXNbaV07XG4gICAgZm9yIChqID0gMDsgaiA8IHRrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICBrID0gdGtleXNbal07XG4gICAgICBuayA9IG5rLnJlcGxhY2UoaywgbWFwW2tdKTtcbiAgICB9XG4gICAgayA9IHBhcnNlSW50KG5hbWVzJDFbb2tdLCAxNik7XG4gICAgdW5wYWNrZWRbbmtdID0gW2sgPj4gMTYgJiAweEZGLCBrID4+IDggJiAweEZGLCBrICYgMHhGRl07XG4gIH1cbiAgcmV0dXJuIHVucGFja2VkO1xufVxuXG5sZXQgbmFtZXM7XG5mdW5jdGlvbiBuYW1lUGFyc2Uoc3RyKSB7XG4gIGlmICghbmFtZXMpIHtcbiAgICBuYW1lcyA9IHVucGFjaygpO1xuICAgIG5hbWVzLnRyYW5zcGFyZW50ID0gWzAsIDAsIDAsIDBdO1xuICB9XG4gIGNvbnN0IGEgPSBuYW1lc1tzdHIudG9Mb3dlckNhc2UoKV07XG4gIHJldHVybiBhICYmIHtcbiAgICByOiBhWzBdLFxuICAgIGc6IGFbMV0sXG4gICAgYjogYVsyXSxcbiAgICBhOiBhLmxlbmd0aCA9PT0gNCA/IGFbM10gOiAyNTVcbiAgfTtcbn1cblxuY29uc3QgUkdCX1JFID0gL15yZ2JhP1xcKFxccyooWy0rLlxcZF0rKSglKT9bXFxzLF0rKFstKy5lXFxkXSspKCUpP1tcXHMsXSsoWy0rLmVcXGRdKykoJSk/KD86W1xccywvXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiByZ2JQYXJzZShzdHIpIHtcbiAgY29uc3QgbSA9IFJHQl9SRS5leGVjKHN0cik7XG4gIGxldCBhID0gMjU1O1xuICBsZXQgciwgZywgYjtcbiAgaWYgKCFtKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtWzddICE9PSByKSB7XG4gICAgY29uc3QgdiA9ICttWzddO1xuICAgIGEgPSBtWzhdID8gcDJiKHYpIDogbGltKHYgKiAyNTUsIDAsIDI1NSk7XG4gIH1cbiAgciA9ICttWzFdO1xuICBnID0gK21bM107XG4gIGIgPSArbVs1XTtcbiAgciA9IDI1NSAmIChtWzJdID8gcDJiKHIpIDogbGltKHIsIDAsIDI1NSkpO1xuICBnID0gMjU1ICYgKG1bNF0gPyBwMmIoZykgOiBsaW0oZywgMCwgMjU1KSk7XG4gIGIgPSAyNTUgJiAobVs2XSA/IHAyYihiKSA6IGxpbShiLCAwLCAyNTUpKTtcbiAgcmV0dXJuIHtcbiAgICByOiByLFxuICAgIGc6IGcsXG4gICAgYjogYixcbiAgICBhOiBhXG4gIH07XG59XG5mdW5jdGlvbiByZ2JTdHJpbmcodikge1xuICByZXR1cm4gdiAmJiAoXG4gICAgdi5hIDwgMjU1XG4gICAgICA/IGByZ2JhKCR7di5yfSwgJHt2Lmd9LCAke3YuYn0sICR7YjJuKHYuYSl9KWBcbiAgICAgIDogYHJnYigke3Yucn0sICR7di5nfSwgJHt2LmJ9KWBcbiAgKTtcbn1cblxuY29uc3QgdG8gPSB2ID0+IHYgPD0gMC4wMDMxMzA4ID8gdiAqIDEyLjkyIDogTWF0aC5wb3codiwgMS4wIC8gMi40KSAqIDEuMDU1IC0gMC4wNTU7XG5jb25zdCBmcm9tID0gdiA9PiB2IDw9IDAuMDQwNDUgPyB2IC8gMTIuOTIgOiBNYXRoLnBvdygodiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUocmdiMSwgcmdiMiwgdCkge1xuICBjb25zdCByID0gZnJvbShiMm4ocmdiMS5yKSk7XG4gIGNvbnN0IGcgPSBmcm9tKGIybihyZ2IxLmcpKTtcbiAgY29uc3QgYiA9IGZyb20oYjJuKHJnYjEuYikpO1xuICByZXR1cm4ge1xuICAgIHI6IG4yYih0byhyICsgdCAqIChmcm9tKGIybihyZ2IyLnIpKSAtIHIpKSksXG4gICAgZzogbjJiKHRvKGcgKyB0ICogKGZyb20oYjJuKHJnYjIuZykpIC0gZykpKSxcbiAgICBiOiBuMmIodG8oYiArIHQgKiAoZnJvbShiMm4ocmdiMi5iKSkgLSBiKSkpLFxuICAgIGE6IHJnYjEuYSArIHQgKiAocmdiMi5hIC0gcmdiMS5hKVxuICB9O1xufVxuXG5mdW5jdGlvbiBtb2RIU0wodiwgaSwgcmF0aW8pIHtcbiAgaWYgKHYpIHtcbiAgICBsZXQgdG1wID0gcmdiMmhzbCh2KTtcbiAgICB0bXBbaV0gPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0bXBbaV0gKyB0bXBbaV0gKiByYXRpbywgaSA9PT0gMCA/IDM2MCA6IDEpKTtcbiAgICB0bXAgPSBoc2wycmdiKHRtcCk7XG4gICAgdi5yID0gdG1wWzBdO1xuICAgIHYuZyA9IHRtcFsxXTtcbiAgICB2LmIgPSB0bXBbMl07XG4gIH1cbn1cbmZ1bmN0aW9uIGNsb25lKHYsIHByb3RvKSB7XG4gIHJldHVybiB2ID8gT2JqZWN0LmFzc2lnbihwcm90byB8fCB7fSwgdikgOiB2O1xufVxuZnVuY3Rpb24gZnJvbU9iamVjdChpbnB1dCkge1xuICB2YXIgdiA9IHtyOiAwLCBnOiAwLCBiOiAwLCBhOiAyNTV9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICBpZiAoaW5wdXQubGVuZ3RoID49IDMpIHtcbiAgICAgIHYgPSB7cjogaW5wdXRbMF0sIGc6IGlucHV0WzFdLCBiOiBpbnB1dFsyXSwgYTogMjU1fTtcbiAgICAgIGlmIChpbnB1dC5sZW5ndGggPiAzKSB7XG4gICAgICAgIHYuYSA9IG4yYihpbnB1dFszXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHYgPSBjbG9uZShpbnB1dCwge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDF9KTtcbiAgICB2LmEgPSBuMmIodi5hKTtcbiAgfVxuICByZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uUGFyc2Uoc3RyKSB7XG4gIGlmIChzdHIuY2hhckF0KDApID09PSAncicpIHtcbiAgICByZXR1cm4gcmdiUGFyc2Uoc3RyKTtcbiAgfVxuICByZXR1cm4gaHVlUGFyc2Uoc3RyKTtcbn1cbmNsYXNzIENvbG9yIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBDb2xvcikge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGlucHV0O1xuICAgIGxldCB2O1xuICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdiA9IGZyb21PYmplY3QoaW5wdXQpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHYgPSBoZXhQYXJzZShpbnB1dCkgfHwgbmFtZVBhcnNlKGlucHV0KSB8fCBmdW5jdGlvblBhcnNlKGlucHV0KTtcbiAgICB9XG4gICAgdGhpcy5fcmdiID0gdjtcbiAgICB0aGlzLl92YWxpZCA9ICEhdjtcbiAgfVxuICBnZXQgdmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkO1xuICB9XG4gIGdldCByZ2IoKSB7XG4gICAgdmFyIHYgPSBjbG9uZSh0aGlzLl9yZ2IpO1xuICAgIGlmICh2KSB7XG4gICAgICB2LmEgPSBiMm4odi5hKTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH1cbiAgc2V0IHJnYihvYmopIHtcbiAgICB0aGlzLl9yZ2IgPSBmcm9tT2JqZWN0KG9iaik7XG4gIH1cbiAgcmdiU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWxpZCA/IHJnYlN0cmluZyh0aGlzLl9yZ2IpIDogdW5kZWZpbmVkO1xuICB9XG4gIGhleFN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQgPyBoZXhTdHJpbmcodGhpcy5fcmdiKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBoc2xTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkID8gaHNsU3RyaW5nKHRoaXMuX3JnYikgOiB1bmRlZmluZWQ7XG4gIH1cbiAgbWl4KGNvbG9yLCB3ZWlnaHQpIHtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbnN0IGMxID0gdGhpcy5yZ2I7XG4gICAgICBjb25zdCBjMiA9IGNvbG9yLnJnYjtcbiAgICAgIGxldCB3MjtcbiAgICAgIGNvbnN0IHAgPSB3ZWlnaHQgPT09IHcyID8gMC41IDogd2VpZ2h0O1xuICAgICAgY29uc3QgdyA9IDIgKiBwIC0gMTtcbiAgICAgIGNvbnN0IGEgPSBjMS5hIC0gYzIuYTtcbiAgICAgIGNvbnN0IHcxID0gKCh3ICogYSA9PT0gLTEgPyB3IDogKHcgKyBhKSAvICgxICsgdyAqIGEpKSArIDEpIC8gMi4wO1xuICAgICAgdzIgPSAxIC0gdzE7XG4gICAgICBjMS5yID0gMHhGRiAmIHcxICogYzEuciArIHcyICogYzIuciArIDAuNTtcbiAgICAgIGMxLmcgPSAweEZGICYgdzEgKiBjMS5nICsgdzIgKiBjMi5nICsgMC41O1xuICAgICAgYzEuYiA9IDB4RkYgJiB3MSAqIGMxLmIgKyB3MiAqIGMyLmIgKyAwLjU7XG4gICAgICBjMS5hID0gcCAqIGMxLmEgKyAoMSAtIHApICogYzIuYTtcbiAgICAgIHRoaXMucmdiID0gYzE7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGludGVycG9sYXRlKGNvbG9yLCB0KSB7XG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICB0aGlzLl9yZ2IgPSBpbnRlcnBvbGF0ZSh0aGlzLl9yZ2IsIGNvbG9yLl9yZ2IsIHQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IENvbG9yKHRoaXMucmdiKTtcbiAgfVxuICBhbHBoYShhKSB7XG4gICAgdGhpcy5fcmdiLmEgPSBuMmIoYSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgY2xlYXJlcihyYXRpbykge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICByZ2IuYSAqPSAxIC0gcmF0aW87XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ3JleXNjYWxlKCkge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICBjb25zdCB2YWwgPSByb3VuZChyZ2IuciAqIDAuMyArIHJnYi5nICogMC41OSArIHJnYi5iICogMC4xMSk7XG4gICAgcmdiLnIgPSByZ2IuZyA9IHJnYi5iID0gdmFsO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9wYXF1ZXIocmF0aW8pIHtcbiAgICBjb25zdCByZ2IgPSB0aGlzLl9yZ2I7XG4gICAgcmdiLmEgKj0gMSArIHJhdGlvO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG5lZ2F0ZSgpIHtcbiAgICBjb25zdCB2ID0gdGhpcy5fcmdiO1xuICAgIHYuciA9IDI1NSAtIHYucjtcbiAgICB2LmcgPSAyNTUgLSB2Lmc7XG4gICAgdi5iID0gMjU1IC0gdi5iO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGxpZ2h0ZW4ocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAyLCByYXRpbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZGFya2VuKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMiwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzYXR1cmF0ZShyYXRpbykge1xuICAgIG1vZEhTTCh0aGlzLl9yZ2IsIDEsIHJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBkZXNhdHVyYXRlKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMSwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByb3RhdGUoZGVnKSB7XG4gICAgcm90YXRlKHRoaXMuX3JnYiwgZGVnKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleF9lc20oaW5wdXQpIHtcbiAgcmV0dXJuIG5ldyBDb2xvcihpbnB1dCk7XG59XG5cbmV4cG9ydCB7IENvbG9yLCBiMm4sIGIycCwgaW5kZXhfZXNtIGFzIGRlZmF1bHQsIGhleFBhcnNlLCBoZXhTdHJpbmcsIGhzbDJyZ2IsIGhzbFN0cmluZywgaHN2MnJnYiwgaHVlUGFyc2UsIGh3YjJyZ2IsIGxpbSwgbjJiLCBuMnAsIG5hbWVQYXJzZSwgcDJiLCByZ2IyaHNsLCByZ2JQYXJzZSwgcmdiU3RyaW5nLCByb3RhdGUsIHJvdW5kIH07XG4iLCIvKiFcbiAqIENoYXJ0LmpzIHY0LjMuMFxuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDIzIENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnQGt1cmtsZS9jb2xvcic7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzXG4gKi8gLyoqXG4gKiBBbiBlbXB0eSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkLCBmb3IgZXhhbXBsZSwgZm9yIG9wdGlvbmFsIGNhbGxiYWNrLlxuICovIGZ1bmN0aW9uIG5vb3AoKSB7XG4vKiBub29wICovIH1cbi8qKlxuICogUmV0dXJucyBhIHVuaXF1ZSBpZCwgc2VxdWVudGlhbGx5IGdlbmVyYXRlZCBmcm9tIGEgZ2xvYmFsIHZhcmlhYmxlLlxuICovIGNvbnN0IHVpZCA9ICgoKT0+e1xuICAgIGxldCBpZCA9IDA7XG4gICAgcmV0dXJuICgpPT5pZCsrO1xufSkoKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgbmVpdGhlciBudWxsIG5vciB1bmRlZmluZWQsIGVsc2UgcmV0dXJucyBmYWxzZS5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICogQHNpbmNlIDIuNy4wXG4gKi8gZnVuY3Rpb24gaXNOdWxsT3JVbmRlZih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSAoaW5jbHVkaW5nIHR5cGVkIGFycmF5cyksIGVsc2UgcmV0dXJucyBmYWxzZS5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICogQGZ1bmN0aW9uXG4gKi8gZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5ICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICBpZiAodHlwZS5zbGljZSgwLCA3KSA9PT0gJ1tvYmplY3QnICYmIHR5cGUuc2xpY2UoLTYpID09PSAnQXJyYXldJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QgKGV4Y2x1ZGluZyBudWxsKSwgZWxzZSByZXR1cm5zIGZhbHNlLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QuXG4gKiBAc2luY2UgMi43LjBcbiAqLyBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIHJldHVybnMgZmFsc2VcbiAqIEBwYXJhbSB2YWx1ZSAgLSBUaGUgdmFsdWUgdG8gdGVzdC5cbiAqLyBmdW5jdGlvbiBpc051bWJlckZpbml0ZSh2YWx1ZSkge1xuICAgIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcikgJiYgaXNGaW5pdGUoK3ZhbHVlKTtcbn1cbi8qKlxuICogUmV0dXJucyBgdmFsdWVgIGlmIGZpbml0ZSwgZWxzZSByZXR1cm5zIGBkZWZhdWx0VmFsdWVgLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBkZWZpbmVkLlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlYCBpcyBub3QgZmluaXRlLlxuICovIGZ1bmN0aW9uIGZpbml0ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuLyoqXG4gKiBSZXR1cm5zIGB2YWx1ZWAgaWYgZGVmaW5lZCwgZWxzZSByZXR1cm5zIGBkZWZhdWx0VmFsdWVgLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBkZWZpbmVkLlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXG4gKi8gZnVuY3Rpb24gdmFsdWVPckRlZmF1bHQodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG59XG5jb25zdCB0b1BlcmNlbnRhZ2UgPSAodmFsdWUsIGRpbWVuc2lvbik9PnR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJyUnKSA/IHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwIDogK3ZhbHVlIC8gZGltZW5zaW9uO1xuY29uc3QgdG9EaW1lbnNpb24gPSAodmFsdWUsIGRpbWVuc2lvbik9PnR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJyUnKSA/IHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwICogZGltZW5zaW9uIDogK3ZhbHVlO1xuLyoqXG4gKiBDYWxscyBgZm5gIHdpdGggdGhlIGdpdmVuIGBhcmdzYCBpbiB0aGUgc2NvcGUgZGVmaW5lZCBieSBgdGhpc0FyZ2AgYW5kIHJldHVybnMgdGhlXG4gKiB2YWx1ZSByZXR1cm5lZCBieSBgZm5gLiBJZiBgZm5gIGlzIG5vdCBhIGZ1bmN0aW9uLCB0aGlzIG1ldGhvZCByZXR1cm5zIHVuZGVmaW5lZC5cbiAqIEBwYXJhbSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsLlxuICogQHBhcmFtIGFyZ3MgLSBUaGUgYXJndW1lbnRzIHdpdGggd2hpY2ggYGZuYCBzaG91bGQgYmUgY2FsbGVkLlxuICogQHBhcmFtIFt0aGlzQXJnXSAtIFRoZSB2YWx1ZSBvZiBgdGhpc2AgcHJvdmlkZWQgZm9yIHRoZSBjYWxsIHRvIGBmbmAuXG4gKi8gZnVuY3Rpb24gY2FsbGJhY2soZm4sIGFyZ3MsIHRoaXNBcmcpIHtcbiAgICBpZiAoZm4gJiYgdHlwZW9mIGZuLmNhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVhY2gobG9vcGFibGUsIGZuLCB0aGlzQXJnLCByZXZlcnNlKSB7XG4gICAgbGV0IGksIGxlbiwga2V5cztcbiAgICBpZiAoaXNBcnJheShsb29wYWJsZSkpIHtcbiAgICAgICAgbGVuID0gbG9vcGFibGUubGVuZ3RoO1xuICAgICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICAgICAgZm9yKGkgPSBsZW4gLSAxOyBpID49IDA7IGktLSl7XG4gICAgICAgICAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxvb3BhYmxlKSkge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXMobG9vcGFibGUpO1xuICAgICAgICBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspe1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtrZXlzW2ldXSwga2V5c1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYGEwYCBhbmQgYGExYCBhcnJheXMgaGF2ZSB0aGUgc2FtZSBjb250ZW50LCBlbHNlIHJldHVybnMgZmFsc2UuXG4gKiBAcGFyYW0gYTAgLSBUaGUgYXJyYXkgdG8gY29tcGFyZVxuICogQHBhcmFtIGExIC0gVGhlIGFycmF5IHRvIGNvbXBhcmVcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2VsZW1lbnRzRXF1YWwoYTAsIGExKSB7XG4gICAgbGV0IGksIGlsZW4sIHYwLCB2MTtcbiAgICBpZiAoIWEwIHx8ICFhMSB8fCBhMC5sZW5ndGggIT09IGExLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvcihpID0gMCwgaWxlbiA9IGEwLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIHYwID0gYTBbaV07XG4gICAgICAgIHYxID0gYTFbaV07XG4gICAgICAgIGlmICh2MC5kYXRhc2V0SW5kZXggIT09IHYxLmRhdGFzZXRJbmRleCB8fCB2MC5pbmRleCAhPT0gdjEuaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogUmV0dXJucyBhIGRlZXAgY29weSBvZiBgc291cmNlYCB3aXRob3V0IGtlZXBpbmcgcmVmZXJlbmNlcyBvbiBvYmplY3RzIGFuZCBhcnJheXMuXG4gKiBAcGFyYW0gc291cmNlIC0gVGhlIHZhbHVlIHRvIGNsb25lLlxuICovIGZ1bmN0aW9uIGNsb25lKHNvdXJjZSkge1xuICAgIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5tYXAoY2xvbmUpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICAgICAgY29uc3Qga2xlbiA9IGtleXMubGVuZ3RoO1xuICAgICAgICBsZXQgayA9IDA7XG4gICAgICAgIGZvcig7IGsgPCBrbGVuOyArK2spe1xuICAgICAgICAgICAgdGFyZ2V0W2tleXNba11dID0gY2xvbmUoc291cmNlW2tleXNba11dKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xufVxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICAnX19wcm90b19fJyxcbiAgICAgICAgJ3Byb3RvdHlwZScsXG4gICAgICAgICdjb25zdHJ1Y3RvcidcbiAgICBdLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG59XG4vKipcbiAqIFRoZSBkZWZhdWx0IG1lcmdlciB3aGVuIENoYXJ0LmhlbHBlcnMubWVyZ2UgaXMgY2FsbGVkIHdpdGhvdXQgbWVyZ2VyIG9wdGlvbi5cbiAqIE5vdGUoU0IpOiBhbHNvIHVzZWQgYnkgbWVyZ2VDb25maWcgYW5kIG1lcmdlU2NhbGVDb25maWcgYXMgZmFsbGJhY2suXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9tZXJnZXIoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgIGlmICghaXNWYWxpZEtleShrZXkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdHZhbCA9IHRhcmdldFtrZXldO1xuICAgIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAoaXNPYmplY3QodHZhbCkgJiYgaXNPYmplY3Qoc3ZhbCkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICBtZXJnZSh0dmFsLCBzdmFsLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRba2V5XSA9IGNsb25lKHN2YWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc291cmNlcyA9IGlzQXJyYXkoc291cmNlKSA/IHNvdXJjZSA6IFtcbiAgICAgICAgc291cmNlXG4gICAgXTtcbiAgICBjb25zdCBpbGVuID0gc291cmNlcy5sZW5ndGg7XG4gICAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IG1lcmdlciA9IG9wdGlvbnMubWVyZ2VyIHx8IF9tZXJnZXI7XG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGN1cnJlbnQgPSBzb3VyY2VzW2ldO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGN1cnJlbnQpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY3VycmVudCk7XG4gICAgICAgIGZvcihsZXQgayA9IDAsIGtsZW4gPSBrZXlzLmxlbmd0aDsgayA8IGtsZW47ICsrayl7XG4gICAgICAgICAgICBtZXJnZXIoa2V5c1trXSwgdGFyZ2V0LCBjdXJyZW50LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gbWVyZ2VJZih0YXJnZXQsIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICByZXR1cm4gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIHtcbiAgICAgICAgbWVyZ2VyOiBfbWVyZ2VySWZcbiAgICB9KTtcbn1cbi8qKlxuICogTWVyZ2VzIHNvdXJjZVtrZXldIGluIHRhcmdldFtrZXldIG9ubHkgaWYgdGFyZ2V0W2tleV0gaXMgdW5kZWZpbmVkLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfbWVyZ2VySWYoa2V5LCB0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICghaXNWYWxpZEtleShrZXkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdHZhbCA9IHRhcmdldFtrZXldO1xuICAgIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAoaXNPYmplY3QodHZhbCkgJiYgaXNPYmplY3Qoc3ZhbCkpIHtcbiAgICAgICAgbWVyZ2VJZih0dmFsLCBzdmFsKTtcbiAgICB9IGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gY2xvbmUoc3ZhbCk7XG4gICAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9kZXByZWNhdGVkKHNjb3BlLCB2YWx1ZSwgcHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLndhcm4oc2NvcGUgKyAnOiBcIicgKyBwcmV2aW91cyArICdcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiJyArIGN1cnJlbnQgKyAnXCIgaW5zdGVhZCcpO1xuICAgIH1cbn1cbi8vIHJlc29sdmVPYmplY3RLZXkgcmVzb2x2ZXIgY2FjaGVcbmNvbnN0IGtleVJlc29sdmVycyA9IHtcbiAgICAvLyBDaGFydC5oZWxwZXJzLmNvcmUgcmVzb2x2ZU9iamVjdEtleSBzaG91bGQgcmVzb2x2ZSBlbXB0eSBrZXkgdG8gcm9vdCBvYmplY3RcbiAgICAnJzogKHYpPT52LFxuICAgIC8vIGRlZmF1bHQgcmVzb2x2ZXJzXG4gICAgeDogKG8pPT5vLngsXG4gICAgeTogKG8pPT5vLnlcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3NwbGl0S2V5KGtleSkge1xuICAgIGNvbnN0IHBhcnRzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgY29uc3Qga2V5cyA9IFtdO1xuICAgIGxldCB0bXAgPSAnJztcbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpe1xuICAgICAgICB0bXAgKz0gcGFydDtcbiAgICAgICAgaWYgKHRtcC5lbmRzV2l0aCgnXFxcXCcpKSB7XG4gICAgICAgICAgICB0bXAgPSB0bXAuc2xpY2UoMCwgLTEpICsgJy4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga2V5cy5wdXNoKHRtcCk7XG4gICAgICAgICAgICB0bXAgPSAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIF9nZXRLZXlSZXNvbHZlcihrZXkpIHtcbiAgICBjb25zdCBrZXlzID0gX3NwbGl0S2V5KGtleSk7XG4gICAgcmV0dXJuIChvYmopPT57XG4gICAgICAgIGZvciAoY29uc3QgayBvZiBrZXlzKXtcbiAgICAgICAgICAgIGlmIChrID09PSAnJykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqID0gb2JqICYmIG9ialtrXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlT2JqZWN0S2V5KG9iaiwga2V5KSB7XG4gICAgY29uc3QgcmVzb2x2ZXIgPSBrZXlSZXNvbHZlcnNba2V5XSB8fCAoa2V5UmVzb2x2ZXJzW2tleV0gPSBfZ2V0S2V5UmVzb2x2ZXIoa2V5KSk7XG4gICAgcmV0dXJuIHJlc29sdmVyKG9iaik7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2NhcGl0YWxpemUoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn1cbmNvbnN0IGRlZmluZWQgPSAodmFsdWUpPT50eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWx1ZSk9PnR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMTEyODg1NS9jb21wYXJpbmctZWNtYTYtc2V0cy1mb3ItZXF1YWxpdHkjMzExMjkzODRcbmNvbnN0IHNldHNFcXVhbCA9IChhLCBiKT0+e1xuICAgIGlmIChhLnNpemUgIT09IGIuc2l6ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBhKXtcbiAgICAgICAgaWYgKCFiLmhhcyhpdGVtKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogQHBhcmFtIGUgLSBUaGUgZXZlbnRcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2lzQ2xpY2tFdmVudChlKSB7XG4gICAgcmV0dXJuIGUudHlwZSA9PT0gJ21vdXNldXAnIHx8IGUudHlwZSA9PT0gJ2NsaWNrJyB8fCBlLnR5cGUgPT09ICdjb250ZXh0bWVudSc7XG59XG5cbi8qKlxuICogQGFsaWFzIENoYXJ0LmhlbHBlcnMubWF0aFxuICogQG5hbWVzcGFjZVxuICovIGNvbnN0IFBJID0gTWF0aC5QSTtcbmNvbnN0IFRBVSA9IDIgKiBQSTtcbmNvbnN0IFBJVEFVID0gVEFVICsgUEk7XG5jb25zdCBJTkZJTklUWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbmNvbnN0IFJBRF9QRVJfREVHID0gUEkgLyAxODA7XG5jb25zdCBIQUxGX1BJID0gUEkgLyAyO1xuY29uc3QgUVVBUlRFUl9QSSA9IFBJIC8gNDtcbmNvbnN0IFRXT19USElSRFNfUEkgPSBQSSAqIDIgLyAzO1xuY29uc3QgbG9nMTAgPSBNYXRoLmxvZzEwO1xuY29uc3Qgc2lnbiA9IE1hdGguc2lnbjtcbmZ1bmN0aW9uIGFsbW9zdEVxdWFscyh4LCB5LCBlcHNpbG9uKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggLSB5KSA8IGVwc2lsb247XG59XG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSBuaWNlIG51bWJlciBhbGdvcml0aG0gdXNlZCBpbiBkZXRlcm1pbmluZyB3aGVyZSBheGlzIGxhYmVscyB3aWxsIGdvXG4gKi8gZnVuY3Rpb24gbmljZU51bShyYW5nZSkge1xuICAgIGNvbnN0IHJvdW5kZWRSYW5nZSA9IE1hdGgucm91bmQocmFuZ2UpO1xuICAgIHJhbmdlID0gYWxtb3N0RXF1YWxzKHJhbmdlLCByb3VuZGVkUmFuZ2UsIHJhbmdlIC8gMTAwMCkgPyByb3VuZGVkUmFuZ2UgOiByYW5nZTtcbiAgICBjb25zdCBuaWNlUmFuZ2UgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChyYW5nZSkpKTtcbiAgICBjb25zdCBmcmFjdGlvbiA9IHJhbmdlIC8gbmljZVJhbmdlO1xuICAgIGNvbnN0IG5pY2VGcmFjdGlvbiA9IGZyYWN0aW9uIDw9IDEgPyAxIDogZnJhY3Rpb24gPD0gMiA/IDIgOiBmcmFjdGlvbiA8PSA1ID8gNSA6IDEwO1xuICAgIHJldHVybiBuaWNlRnJhY3Rpb24gKiBuaWNlUmFuZ2U7XG59XG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgZmFjdG9ycyBzb3J0ZWQgZnJvbSAxIHRvIHNxcnQodmFsdWUpXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9mYWN0b3JpemUodmFsdWUpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBzcXJ0ID0gTWF0aC5zcXJ0KHZhbHVlKTtcbiAgICBsZXQgaTtcbiAgICBmb3IoaSA9IDE7IGkgPCBzcXJ0OyBpKyspe1xuICAgICAgICBpZiAodmFsdWUgJSBpID09PSAwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlIC8gaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNxcnQgPT09IChzcXJ0IHwgMCkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goc3FydCk7XG4gICAgfVxuICAgIHJlc3VsdC5zb3J0KChhLCBiKT0+YSAtIGIpLnBvcCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpc051bWJlcihuKSB7XG4gICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cbmZ1bmN0aW9uIGFsbW9zdFdob2xlKHgsIGVwc2lsb24pIHtcbiAgICBjb25zdCByb3VuZGVkID0gTWF0aC5yb3VuZCh4KTtcbiAgICByZXR1cm4gcm91bmRlZCAtIGVwc2lsb24gPD0geCAmJiByb3VuZGVkICsgZXBzaWxvbiA+PSB4O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9zZXRNaW5BbmRNYXhCeUtleShhcnJheSwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICB2YWx1ZSA9IGFycmF5W2ldW3Byb3BlcnR5XTtcbiAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRhcmdldC5taW4gPSBNYXRoLm1pbih0YXJnZXQubWluLCB2YWx1ZSk7XG4gICAgICAgICAgICB0YXJnZXQubWF4ID0gTWF0aC5tYXgodGFyZ2V0Lm1heCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdG9SYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIChQSSAvIDE4MCk7XG59XG5mdW5jdGlvbiB0b0RlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogKDE4MCAvIFBJKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzXG4gKiBpLmUuIHRoZSBudW1iZXIgb2YgZGlnaXRzIGFmdGVyIHRoZSBkZWNpbWFsIHBvaW50LCBvZiB0aGUgdmFsdWUgb2YgdGhpcyBOdW1iZXIuXG4gKiBAcGFyYW0geCAtIEEgbnVtYmVyLlxuICogQHJldHVybnMgVGhlIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcy5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2RlY2ltYWxQbGFjZXMoeCkge1xuICAgIGlmICghaXNOdW1iZXJGaW5pdGUoeCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZSA9IDE7XG4gICAgbGV0IHAgPSAwO1xuICAgIHdoaWxlKE1hdGgucm91bmQoeCAqIGUpIC8gZSAhPT0geCl7XG4gICAgICAgIGUgKj0gMTA7XG4gICAgICAgIHArKztcbiAgICB9XG4gICAgcmV0dXJuIHA7XG59XG4vLyBHZXRzIHRoZSBhbmdsZSBmcm9tIHZlcnRpY2FsIHVwcmlnaHQgdG8gdGhlIHBvaW50IGFib3V0IGEgY2VudHJlLlxuZnVuY3Rpb24gZ2V0QW5nbGVGcm9tUG9pbnQoY2VudHJlUG9pbnQsIGFuZ2xlUG9pbnQpIHtcbiAgICBjb25zdCBkaXN0YW5jZUZyb21YQ2VudGVyID0gYW5nbGVQb2ludC54IC0gY2VudHJlUG9pbnQueDtcbiAgICBjb25zdCBkaXN0YW5jZUZyb21ZQ2VudGVyID0gYW5nbGVQb2ludC55IC0gY2VudHJlUG9pbnQueTtcbiAgICBjb25zdCByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIgPSBNYXRoLnNxcnQoZGlzdGFuY2VGcm9tWENlbnRlciAqIGRpc3RhbmNlRnJvbVhDZW50ZXIgKyBkaXN0YW5jZUZyb21ZQ2VudGVyICogZGlzdGFuY2VGcm9tWUNlbnRlcik7XG4gICAgbGV0IGFuZ2xlID0gTWF0aC5hdGFuMihkaXN0YW5jZUZyb21ZQ2VudGVyLCBkaXN0YW5jZUZyb21YQ2VudGVyKTtcbiAgICBpZiAoYW5nbGUgPCAtMC41ICogUEkpIHtcbiAgICAgICAgYW5nbGUgKz0gVEFVOyAvLyBtYWtlIHN1cmUgdGhlIHJldHVybmVkIGFuZ2xlIGlzIGluIHRoZSByYW5nZSBvZiAoLVBJLzIsIDNQSS8yXVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhbmdsZSxcbiAgICAgICAgZGlzdGFuY2U6IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlclxuICAgIH07XG59XG5mdW5jdGlvbiBkaXN0YW5jZUJldHdlZW5Qb2ludHMocHQxLCBwdDIpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHB0Mi54IC0gcHQxLngsIDIpICsgTWF0aC5wb3cocHQyLnkgLSBwdDEueSwgMikpO1xufVxuLyoqXG4gKiBTaG9ydGVzdCBkaXN0YW5jZSBiZXR3ZWVuIGFuZ2xlcywgaW4gZWl0aGVyIGRpcmVjdGlvbi5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2FuZ2xlRGlmZihhLCBiKSB7XG4gICAgcmV0dXJuIChhIC0gYiArIFBJVEFVKSAlIFRBVSAtIFBJO1xufVxuLyoqXG4gKiBOb3JtYWxpemUgYW5nbGUgdG8gYmUgYmV0d2VlbiAwIGFuZCAyKlBJXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9ub3JtYWxpemVBbmdsZShhKSB7XG4gICAgcmV0dXJuIChhICUgVEFVICsgVEFVKSAlIFRBVTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydCwgZW5kLCBzYW1lQW5nbGVJc0Z1bGxDaXJjbGUpIHtcbiAgICBjb25zdCBhID0gX25vcm1hbGl6ZUFuZ2xlKGFuZ2xlKTtcbiAgICBjb25zdCBzID0gX25vcm1hbGl6ZUFuZ2xlKHN0YXJ0KTtcbiAgICBjb25zdCBlID0gX25vcm1hbGl6ZUFuZ2xlKGVuZCk7XG4gICAgY29uc3QgYW5nbGVUb1N0YXJ0ID0gX25vcm1hbGl6ZUFuZ2xlKHMgLSBhKTtcbiAgICBjb25zdCBhbmdsZVRvRW5kID0gX25vcm1hbGl6ZUFuZ2xlKGUgLSBhKTtcbiAgICBjb25zdCBzdGFydFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIHMpO1xuICAgIGNvbnN0IGVuZFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIGUpO1xuICAgIHJldHVybiBhID09PSBzIHx8IGEgPT09IGUgfHwgc2FtZUFuZ2xlSXNGdWxsQ2lyY2xlICYmIHMgPT09IGUgfHwgYW5nbGVUb1N0YXJ0ID4gYW5nbGVUb0VuZCAmJiBzdGFydFRvQW5nbGUgPCBlbmRUb0FuZ2xlO1xufVxuLyoqXG4gKiBMaW1pdCBgdmFsdWVgIGJldHdlZW4gYG1pbmAgYW5kIGBtYXhgXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBtaW5cbiAqIEBwYXJhbSBtYXhcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2xpbWl0VmFsdWUodmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCB2YWx1ZSkpO1xufVxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2ludDE2UmFuZ2UodmFsdWUpIHtcbiAgICByZXR1cm4gX2xpbWl0VmFsdWUodmFsdWUsIC0zMjc2OCwgMzI3NjcpO1xufVxuLyoqXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBzdGFydFxuICogQHBhcmFtIGVuZFxuICogQHBhcmFtIFtlcHNpbG9uXVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaXNCZXR3ZWVuKHZhbHVlLCBzdGFydCwgZW5kLCBlcHNpbG9uID0gMWUtNikge1xuICAgIHJldHVybiB2YWx1ZSA+PSBNYXRoLm1pbihzdGFydCwgZW5kKSAtIGVwc2lsb24gJiYgdmFsdWUgPD0gTWF0aC5tYXgoc3RhcnQsIGVuZCkgKyBlcHNpbG9uO1xufVxuXG5mdW5jdGlvbiBfbG9va3VwKHRhYmxlLCB2YWx1ZSwgY21wKSB7XG4gICAgY21wID0gY21wIHx8ICgoaW5kZXgpPT50YWJsZVtpbmRleF0gPCB2YWx1ZSk7XG4gICAgbGV0IGhpID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgICBsZXQgbG8gPSAwO1xuICAgIGxldCBtaWQ7XG4gICAgd2hpbGUoaGkgLSBsbyA+IDEpe1xuICAgICAgICBtaWQgPSBsbyArIGhpID4+IDE7XG4gICAgICAgIGlmIChjbXAobWlkKSkge1xuICAgICAgICAgICAgbG8gPSBtaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaSA9IG1pZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBsbyxcbiAgICAgICAgaGlcbiAgICB9O1xufVxuLyoqXG4gKiBCaW5hcnkgc2VhcmNoXG4gKiBAcGFyYW0gdGFibGUgLSB0aGUgdGFibGUgc2VhcmNoLiBtdXN0IGJlIHNvcnRlZCFcbiAqIEBwYXJhbSBrZXkgLSBwcm9wZXJ0eSBuYW1lIGZvciB0aGUgdmFsdWUgaW4gZWFjaCBlbnRyeVxuICogQHBhcmFtIHZhbHVlIC0gdmFsdWUgdG8gZmluZFxuICogQHBhcmFtIGxhc3QgLSBsb29rdXAgbGFzdCBpbmRleFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBfbG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUsIGxhc3QpPT5fbG9va3VwKHRhYmxlLCB2YWx1ZSwgbGFzdCA/IChpbmRleCk9PntcbiAgICAgICAgY29uc3QgdGkgPSB0YWJsZVtpbmRleF1ba2V5XTtcbiAgICAgICAgcmV0dXJuIHRpIDwgdmFsdWUgfHwgdGkgPT09IHZhbHVlICYmIHRhYmxlW2luZGV4ICsgMV1ba2V5XSA9PT0gdmFsdWU7XG4gICAgfSA6IChpbmRleCk9PnRhYmxlW2luZGV4XVtrZXldIDwgdmFsdWUpO1xuLyoqXG4gKiBSZXZlcnNlIGJpbmFyeSBzZWFyY2hcbiAqIEBwYXJhbSB0YWJsZSAtIHRoZSB0YWJsZSBzZWFyY2guIG11c3QgYmUgc29ydGVkIVxuICogQHBhcmFtIGtleSAtIHByb3BlcnR5IG5hbWUgZm9yIHRoZSB2YWx1ZSBpbiBlYWNoIGVudHJ5XG4gKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZSB0byBmaW5kXG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF9ybG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUpPT5fbG9va3VwKHRhYmxlLCB2YWx1ZSwgKGluZGV4KT0+dGFibGVbaW5kZXhdW2tleV0gPj0gdmFsdWUpO1xuLyoqXG4gKiBSZXR1cm4gc3Vic2V0IG9mIGB2YWx1ZXNgIGJldHdlZW4gYG1pbmAgYW5kIGBtYXhgIGluY2x1c2l2ZS5cbiAqIFZhbHVlcyBhcmUgYXNzdW1lZCB0byBiZSBpbiBzb3J0ZWQgb3JkZXIuXG4gKiBAcGFyYW0gdmFsdWVzIC0gc29ydGVkIGFycmF5IG9mIHZhbHVlc1xuICogQHBhcmFtIG1pbiAtIG1pbiB2YWx1ZVxuICogQHBhcmFtIG1heCAtIG1heCB2YWx1ZVxuICovIGZ1bmN0aW9uIF9maWx0ZXJCZXR3ZWVuKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBlbmQgPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHdoaWxlKHN0YXJ0IDwgZW5kICYmIHZhbHVlc1tzdGFydF0gPCBtaW4pe1xuICAgICAgICBzdGFydCsrO1xuICAgIH1cbiAgICB3aGlsZShlbmQgPiBzdGFydCAmJiB2YWx1ZXNbZW5kIC0gMV0gPiBtYXgpe1xuICAgICAgICBlbmQtLTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0ID4gMCB8fCBlbmQgPCB2YWx1ZXMubGVuZ3RoID8gdmFsdWVzLnNsaWNlKHN0YXJ0LCBlbmQpIDogdmFsdWVzO1xufVxuY29uc3QgYXJyYXlFdmVudHMgPSBbXG4gICAgJ3B1c2gnLFxuICAgICdwb3AnLFxuICAgICdzaGlmdCcsXG4gICAgJ3NwbGljZScsXG4gICAgJ3Vuc2hpZnQnXG5dO1xuZnVuY3Rpb24gbGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gICAgaWYgKGFycmF5Ll9jaGFydGpzKSB7XG4gICAgICAgIGFycmF5Ll9jaGFydGpzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksICdfY2hhcnRqcycsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIGxpc3RlbmVyczogW1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyXG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBhcnJheUV2ZW50cy5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdfb25EYXRhJyArIF9jYXBpdGFsaXplKGtleSk7XG4gICAgICAgIGNvbnN0IGJhc2UgPSBhcnJheVtrZXldO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksIGtleSwge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZSAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGJhc2UuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgYXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLmZvckVhY2goKG9iamVjdCk9PntcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmplY3RbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0W21ldGhvZF0oLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gICAgY29uc3Qgc3R1YiA9IGFycmF5Ll9jaGFydGpzO1xuICAgIGlmICghc3R1Yikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHN0dWIubGlzdGVuZXJzO1xuICAgIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFycmF5RXZlbnRzLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgZGVsZXRlIGFycmF5W2tleV07XG4gICAgfSk7XG4gICAgZGVsZXRlIGFycmF5Ll9jaGFydGpzO1xufVxuLyoqXG4gKiBAcGFyYW0gaXRlbXNcbiAqLyBmdW5jdGlvbiBfYXJyYXlVbmlxdWUoaXRlbXMpIHtcbiAgICBjb25zdCBzZXQgPSBuZXcgU2V0KGl0ZW1zKTtcbiAgICBpZiAoc2V0LnNpemUgPT09IGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG59XG5cbmZ1bmN0aW9uIGZvbnRTdHJpbmcocGl4ZWxTaXplLCBmb250U3R5bGUsIGZvbnRGYW1pbHkpIHtcbiAgICByZXR1cm4gZm9udFN0eWxlICsgJyAnICsgcGl4ZWxTaXplICsgJ3B4ICcgKyBmb250RmFtaWx5O1xufVxuLyoqXG4qIFJlcXVlc3QgYW5pbWF0aW9uIHBvbHlmaWxsXG4qLyBjb25zdCByZXF1ZXN0QW5pbUZyYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xufSgpO1xuLyoqXG4gKiBUaHJvdHRsZXMgY2FsbGluZyBgZm5gIG9uY2UgcGVyIGFuaW1hdGlvbiBmcmFtZVxuICogTGF0ZXN0IGFyZ3VtZW50cyBhcmUgdXNlZCBvbiB0aGUgYWN0dWFsIGNhbGxcbiAqLyBmdW5jdGlvbiB0aHJvdHRsZWQoZm4sIHRoaXNBcmcpIHtcbiAgICBsZXQgYXJnc1RvVXNlID0gW107XG4gICAgbGV0IHRpY2tpbmcgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICAvLyBTYXZlIHRoZSBhcmdzIGZvciB1c2UgbGF0ZXJcbiAgICAgICAgYXJnc1RvVXNlID0gYXJncztcbiAgICAgICAgaWYgKCF0aWNraW5nKSB7XG4gICAgICAgICAgICB0aWNraW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csICgpPT57XG4gICAgICAgICAgICAgICAgdGlja2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3NUb1VzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIERlYm91bmNlcyBjYWxsaW5nIGBmbmAgZm9yIGBkZWxheWAgbXNcbiAqLyBmdW5jdGlvbiBkZWJvdW5jZShmbiwgZGVsYXkpIHtcbiAgICBsZXQgdGltZW91dDtcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZuLCBkZWxheSwgYXJncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVsYXk7XG4gICAgfTtcbn1cbi8qKlxuICogQ29udmVydHMgJ3N0YXJ0JyB0byAnbGVmdCcsICdlbmQnIHRvICdyaWdodCcgYW5kIG90aGVycyB0byAnY2VudGVyJ1xuICogQHByaXZhdGVcbiAqLyBjb25zdCBfdG9MZWZ0UmlnaHRDZW50ZXIgPSAoYWxpZ24pPT5hbGlnbiA9PT0gJ3N0YXJ0JyA/ICdsZWZ0JyA6IGFsaWduID09PSAnZW5kJyA/ICdyaWdodCcgOiAnY2VudGVyJztcbi8qKlxuICogUmV0dXJucyBgc3RhcnRgLCBgZW5kYCBvciBgKHN0YXJ0ICsgZW5kKSAvIDJgIGRlcGVuZGluZyBvbiBgYWxpZ25gLiBEZWZhdWx0cyB0byBgY2VudGVyYFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBfYWxpZ25TdGFydEVuZCA9IChhbGlnbiwgc3RhcnQsIGVuZCk9PmFsaWduID09PSAnc3RhcnQnID8gc3RhcnQgOiBhbGlnbiA9PT0gJ2VuZCcgPyBlbmQgOiAoc3RhcnQgKyBlbmQpIC8gMjtcbi8qKlxuICogUmV0dXJucyBgbGVmdGAsIGByaWdodGAgb3IgYChsZWZ0ICsgcmlnaHQpIC8gMmAgZGVwZW5kaW5nIG9uIGBhbGlnbmAuIERlZmF1bHRzIHRvIGBsZWZ0YFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBfdGV4dFggPSAoYWxpZ24sIGxlZnQsIHJpZ2h0LCBydGwpPT57XG4gICAgY29uc3QgY2hlY2sgPSBydGwgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIHJldHVybiBhbGlnbiA9PT0gY2hlY2sgPyByaWdodCA6IGFsaWduID09PSAnY2VudGVyJyA/IChsZWZ0ICsgcmlnaHQpIC8gMiA6IGxlZnQ7XG59O1xuLyoqXG4gKiBSZXR1cm4gc3RhcnQgYW5kIGNvdW50IG9mIHZpc2libGUgcG9pbnRzLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyhtZXRhLCBwb2ludHMsIGFuaW1hdGlvbnNEaXNhYmxlZCkge1xuICAgIGNvbnN0IHBvaW50Q291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGNvdW50ID0gcG9pbnRDb3VudDtcbiAgICBpZiAobWV0YS5fc29ydGVkKSB7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgX3BhcnNlZCAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggLCBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IGlTY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgICAgIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgICAgICAgICBzdGFydCA9IF9saW1pdFZhbHVlKE1hdGgubWluKC8vIEB0cy1leHBlY3QtZXJyb3IgTmVlZCB0byB0eXBlIF9wYXJzZWRcbiAgICAgICAgICAgIF9sb29rdXBCeUtleShfcGFyc2VkLCBpU2NhbGUuYXhpcywgbWluKS5sbywgLy8gQHRzLWV4cGVjdC1lcnJvciBOZWVkIHRvIGZpeCB0eXBlcyBvbiBfbG9va3VwQnlLZXlcbiAgICAgICAgICAgIGFuaW1hdGlvbnNEaXNhYmxlZCA/IHBvaW50Q291bnQgOiBfbG9va3VwQnlLZXkocG9pbnRzLCBheGlzLCBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShtaW4pKS5sbyksIDAsIHBvaW50Q291bnQgLSAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgY291bnQgPSBfbGltaXRWYWx1ZShNYXRoLm1heCgvLyBAdHMtZXhwZWN0LWVycm9yIE5lZWQgdG8gdHlwZSBfcGFyc2VkXG4gICAgICAgICAgICBfbG9va3VwQnlLZXkoX3BhcnNlZCwgaVNjYWxlLmF4aXMsIG1heCwgdHJ1ZSkuaGkgKyAxLCAvLyBAdHMtZXhwZWN0LWVycm9yIE5lZWQgdG8gZml4IHR5cGVzIG9uIF9sb29rdXBCeUtleVxuICAgICAgICAgICAgYW5pbWF0aW9uc0Rpc2FibGVkID8gMCA6IF9sb29rdXBCeUtleShwb2ludHMsIGF4aXMsIGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKG1heCksIHRydWUpLmhpICsgMSksIHN0YXJ0LCBwb2ludENvdW50KSAtIHN0YXJ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY291bnQgPSBwb2ludENvdW50IC0gc3RhcnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGNvdW50XG4gICAgfTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBzY2FsZSByYW5nZXMgaGF2ZSBjaGFuZ2VkLlxuICogQHBhcmFtIHtvYmplY3R9IG1ldGEgLSBkYXRhc2V0IG1ldGEuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3NjYWxlUmFuZ2VzQ2hhbmdlZChtZXRhKSB7XG4gICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgLCBfc2NhbGVSYW5nZXMgIH0gPSBtZXRhO1xuICAgIGNvbnN0IG5ld1JhbmdlcyA9IHtcbiAgICAgICAgeG1pbjogeFNjYWxlLm1pbixcbiAgICAgICAgeG1heDogeFNjYWxlLm1heCxcbiAgICAgICAgeW1pbjogeVNjYWxlLm1pbixcbiAgICAgICAgeW1heDogeVNjYWxlLm1heFxuICAgIH07XG4gICAgaWYgKCFfc2NhbGVSYW5nZXMpIHtcbiAgICAgICAgbWV0YS5fc2NhbGVSYW5nZXMgPSBuZXdSYW5nZXM7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBjaGFuZ2VkID0gX3NjYWxlUmFuZ2VzLnhtaW4gIT09IHhTY2FsZS5taW4gfHwgX3NjYWxlUmFuZ2VzLnhtYXggIT09IHhTY2FsZS5tYXggfHwgX3NjYWxlUmFuZ2VzLnltaW4gIT09IHlTY2FsZS5taW4gfHwgX3NjYWxlUmFuZ2VzLnltYXggIT09IHlTY2FsZS5tYXg7XG4gICAgT2JqZWN0LmFzc2lnbihfc2NhbGVSYW5nZXMsIG5ld1Jhbmdlcyk7XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG59XG5cbmNvbnN0IGF0RWRnZSA9ICh0KT0+dCA9PT0gMCB8fCB0ID09PSAxO1xuY29uc3QgZWxhc3RpY0luID0gKHQsIHMsIHApPT4tKE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgLSBzKSAqIFRBVSAvIHApKTtcbmNvbnN0IGVsYXN0aWNPdXQgPSAodCwgcywgcCk9Pk1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHQgLSBzKSAqIFRBVSAvIHApICsgMTtcbi8qKlxuICogRWFzaW5nIGZ1bmN0aW9ucyBhZGFwdGVkIGZyb20gUm9iZXJ0IFBlbm5lcidzIGVhc2luZyBlcXVhdGlvbnMuXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmhlbHBlcnMuZWFzaW5nLmVmZmVjdHNcbiAqIEBzZWUgaHR0cDovL3d3dy5yb2JlcnRwZW5uZXIuY29tL2Vhc2luZy9cbiAqLyBjb25zdCBlZmZlY3RzID0ge1xuICAgIGxpbmVhcjogKHQpPT50LFxuICAgIGVhc2VJblF1YWQ6ICh0KT0+dCAqIHQsXG4gICAgZWFzZU91dFF1YWQ6ICh0KT0+LXQgKiAodCAtIDIpLFxuICAgIGVhc2VJbk91dFF1YWQ6ICh0KT0+KHQgLz0gMC41KSA8IDEgPyAwLjUgKiB0ICogdCA6IC0wLjUgKiAoLS10ICogKHQgLSAyKSAtIDEpLFxuICAgIGVhc2VJbkN1YmljOiAodCk9PnQgKiB0ICogdCxcbiAgICBlYXNlT3V0Q3ViaWM6ICh0KT0+KHQgLT0gMSkgKiB0ICogdCArIDEsXG4gICAgZWFzZUluT3V0Q3ViaWM6ICh0KT0+KHQgLz0gMC41KSA8IDEgPyAwLjUgKiB0ICogdCAqIHQgOiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCArIDIpLFxuICAgIGVhc2VJblF1YXJ0OiAodCk9PnQgKiB0ICogdCAqIHQsXG4gICAgZWFzZU91dFF1YXJ0OiAodCk9Pi0oKHQgLT0gMSkgKiB0ICogdCAqIHQgLSAxKSxcbiAgICBlYXNlSW5PdXRRdWFydDogKHQpPT4odCAvPSAwLjUpIDwgMSA/IDAuNSAqIHQgKiB0ICogdCAqIHQgOiAtMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMiksXG4gICAgZWFzZUluUXVpbnQ6ICh0KT0+dCAqIHQgKiB0ICogdCAqIHQsXG4gICAgZWFzZU91dFF1aW50OiAodCk9Pih0IC09IDEpICogdCAqIHQgKiB0ICogdCArIDEsXG4gICAgZWFzZUluT3V0UXVpbnQ6ICh0KT0+KHQgLz0gMC41KSA8IDEgPyAwLjUgKiB0ICogdCAqIHQgKiB0ICogdCA6IDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAqIHQgKyAyKSxcbiAgICBlYXNlSW5TaW5lOiAodCk9Pi1NYXRoLmNvcyh0ICogSEFMRl9QSSkgKyAxLFxuICAgIGVhc2VPdXRTaW5lOiAodCk9Pk1hdGguc2luKHQgKiBIQUxGX1BJKSxcbiAgICBlYXNlSW5PdXRTaW5lOiAodCk9Pi0wLjUgKiAoTWF0aC5jb3MoUEkgKiB0KSAtIDEpLFxuICAgIGVhc2VJbkV4cG86ICh0KT0+dCA9PT0gMCA/IDAgOiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpLFxuICAgIGVhc2VPdXRFeHBvOiAodCk9PnQgPT09IDEgPyAxIDogLU1hdGgucG93KDIsIC0xMCAqIHQpICsgMSxcbiAgICBlYXNlSW5PdXRFeHBvOiAodCk9PmF0RWRnZSh0KSA/IHQgOiB0IDwgMC41ID8gMC41ICogTWF0aC5wb3coMiwgMTAgKiAodCAqIDIgLSAxKSkgOiAwLjUgKiAoLU1hdGgucG93KDIsIC0xMCAqICh0ICogMiAtIDEpKSArIDIpLFxuICAgIGVhc2VJbkNpcmM6ICh0KT0+dCA+PSAxID8gdCA6IC0oTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKSxcbiAgICBlYXNlT3V0Q2lyYzogKHQpPT5NYXRoLnNxcnQoMSAtICh0IC09IDEpICogdCksXG4gICAgZWFzZUluT3V0Q2lyYzogKHQpPT4odCAvPSAwLjUpIDwgMSA/IC0wLjUgKiAoTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKSA6IDAuNSAqIChNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKSxcbiAgICBlYXNlSW5FbGFzdGljOiAodCk9PmF0RWRnZSh0KSA/IHQgOiBlbGFzdGljSW4odCwgMC4wNzUsIDAuMyksXG4gICAgZWFzZU91dEVsYXN0aWM6ICh0KT0+YXRFZGdlKHQpID8gdCA6IGVsYXN0aWNPdXQodCwgMC4wNzUsIDAuMyksXG4gICAgZWFzZUluT3V0RWxhc3RpYyAodCkge1xuICAgICAgICBjb25zdCBzID0gMC4xMTI1O1xuICAgICAgICBjb25zdCBwID0gMC40NTtcbiAgICAgICAgcmV0dXJuIGF0RWRnZSh0KSA/IHQgOiB0IDwgMC41ID8gMC41ICogZWxhc3RpY0luKHQgKiAyLCBzLCBwKSA6IDAuNSArIDAuNSAqIGVsYXN0aWNPdXQodCAqIDIgLSAxLCBzLCBwKTtcbiAgICB9LFxuICAgIGVhc2VJbkJhY2sgKHQpIHtcbiAgICAgICAgY29uc3QgcyA9IDEuNzAxNTg7XG4gICAgICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuICAgIH0sXG4gICAgZWFzZU91dEJhY2sgKHQpIHtcbiAgICAgICAgY29uc3QgcyA9IDEuNzAxNTg7XG4gICAgICAgIHJldHVybiAodCAtPSAxKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG4gICAgfSxcbiAgICBlYXNlSW5PdXRCYWNrICh0KSB7XG4gICAgICAgIGxldCBzID0gMS43MDE1ODtcbiAgICAgICAgaWYgKCh0IC89IDAuNSkgPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gMC41ICogKHQgKiB0ICogKCgocyAqPSAxLjUyNSkgKyAxKSAqIHQgLSBzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiAoKChzICo9IDEuNTI1KSArIDEpICogdCArIHMpICsgMik7XG4gICAgfSxcbiAgICBlYXNlSW5Cb3VuY2U6ICh0KT0+MSAtIGVmZmVjdHMuZWFzZU91dEJvdW5jZSgxIC0gdCksXG4gICAgZWFzZU91dEJvdW5jZSAodCkge1xuICAgICAgICBjb25zdCBtID0gNy41NjI1O1xuICAgICAgICBjb25zdCBkID0gMi43NTtcbiAgICAgICAgaWYgKHQgPCAxIC8gZCkge1xuICAgICAgICAgICAgcmV0dXJuIG0gKiB0ICogdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA8IDIgLyBkKSB7XG4gICAgICAgICAgICByZXR1cm4gbSAqICh0IC09IDEuNSAvIGQpICogdCArIDAuNzU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHQgPCAyLjUgLyBkKSB7XG4gICAgICAgICAgICByZXR1cm4gbSAqICh0IC09IDIuMjUgLyBkKSAqIHQgKyAwLjkzNzU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0gKiAodCAtPSAyLjYyNSAvIGQpICogdCArIDAuOTg0Mzc1O1xuICAgIH0sXG4gICAgZWFzZUluT3V0Qm91bmNlOiAodCk9PnQgPCAwLjUgPyBlZmZlY3RzLmVhc2VJbkJvdW5jZSh0ICogMikgKiAwLjUgOiBlZmZlY3RzLmVhc2VPdXRCb3VuY2UodCAqIDIgLSAxKSAqIDAuNSArIDAuNVxufTtcblxuZnVuY3Rpb24gaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gdHlwZSA9PT0gJ1tvYmplY3QgQ2FudmFzUGF0dGVybl0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IENhbnZhc0dyYWRpZW50XSc7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNvbG9yKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpID8gdmFsdWUgOiBuZXcgQ29sb3IodmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0SG92ZXJDb2xvcih2YWx1ZSkge1xuICAgIHJldHVybiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSA/IHZhbHVlIDogbmV3IENvbG9yKHZhbHVlKS5zYXR1cmF0ZSgwLjUpLmRhcmtlbigwLjEpLmhleFN0cmluZygpO1xufVxuXG5jb25zdCBudW1iZXJzID0gW1xuICAgICd4JyxcbiAgICAneScsXG4gICAgJ2JvcmRlcldpZHRoJyxcbiAgICAncmFkaXVzJyxcbiAgICAndGVuc2lvbidcbl07XG5jb25zdCBjb2xvcnMgPSBbXG4gICAgJ2NvbG9yJyxcbiAgICAnYm9yZGVyQ29sb3InLFxuICAgICdiYWNrZ3JvdW5kQ29sb3InXG5dO1xuZnVuY3Rpb24gYXBwbHlBbmltYXRpb25zRGVmYXVsdHMoZGVmYXVsdHMpIHtcbiAgICBkZWZhdWx0cy5zZXQoJ2FuaW1hdGlvbicsIHtcbiAgICAgICAgZGVsYXk6IHVuZGVmaW5lZCxcbiAgICAgICAgZHVyYXRpb246IDEwMDAsXG4gICAgICAgIGVhc2luZzogJ2Vhc2VPdXRRdWFydCcsXG4gICAgICAgIGZuOiB1bmRlZmluZWQsXG4gICAgICAgIGZyb206IHVuZGVmaW5lZCxcbiAgICAgICAgbG9vcDogdW5kZWZpbmVkLFxuICAgICAgICB0bzogdW5kZWZpbmVkLFxuICAgICAgICB0eXBlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnYW5pbWF0aW9uJywge1xuICAgICAgICBfZmFsbGJhY2s6IGZhbHNlLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ29uUHJvZ3Jlc3MnICYmIG5hbWUgIT09ICdvbkNvbXBsZXRlJyAmJiBuYW1lICE9PSAnZm4nXG4gICAgfSk7XG4gICAgZGVmYXVsdHMuc2V0KCdhbmltYXRpb25zJywge1xuICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAgIHR5cGU6ICdjb2xvcicsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBjb2xvcnNcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBudW1iZXJzXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnYW5pbWF0aW9ucycsIHtcbiAgICAgICAgX2ZhbGxiYWNrOiAnYW5pbWF0aW9uJ1xuICAgIH0pO1xuICAgIGRlZmF1bHRzLnNldCgndHJhbnNpdGlvbnMnLCB7XG4gICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDQwMFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNpemU6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNob3c6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogJ3RyYW5zcGFyZW50J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdmlzaWJsZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBoaWRlOiB7XG4gICAgICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICAgICAgY29sb3JzOiB7XG4gICAgICAgICAgICAgICAgICAgIHRvOiAndHJhbnNwYXJlbnQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICAgICAgZm46ICh2KT0+diB8IDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlMYXlvdXRzRGVmYXVsdHMoZGVmYXVsdHMpIHtcbiAgICBkZWZhdWx0cy5zZXQoJ2xheW91dCcsIHtcbiAgICAgICAgYXV0b1BhZGRpbmc6IHRydWUsXG4gICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgbGVmdDogMFxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmNvbnN0IGludGxDYWNoZSA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldE51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCBjYWNoZUtleSA9IGxvY2FsZSArIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xuICAgIGxldCBmb3JtYXR0ZXIgPSBpbnRsQ2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICBpZiAoIWZvcm1hdHRlcikge1xuICAgICAgICBmb3JtYXR0ZXIgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKTtcbiAgICAgICAgaW50bENhY2hlLnNldChjYWNoZUtleSwgZm9ybWF0dGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdHRlcjtcbn1cbmZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW0sIGxvY2FsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBnZXROdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKS5mb3JtYXQobnVtKTtcbn1cblxuY29uc3QgZm9ybWF0dGVycyA9IHtcbiB2YWx1ZXMgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/ICB2YWx1ZSA6ICcnICsgdmFsdWU7XG4gICAgfSxcbiBudW1lcmljICh0aWNrVmFsdWUsIGluZGV4LCB0aWNrcykge1xuICAgICAgICBpZiAodGlja1ZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJzAnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvY2FsZSA9IHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGU7XG4gICAgICAgIGxldCBub3RhdGlvbjtcbiAgICAgICAgbGV0IGRlbHRhID0gdGlja1ZhbHVlO1xuICAgICAgICBpZiAodGlja3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc3QgbWF4VGljayA9IE1hdGgubWF4KE1hdGguYWJzKHRpY2tzWzBdLnZhbHVlKSwgTWF0aC5hYnModGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWUpKTtcbiAgICAgICAgICAgIGlmIChtYXhUaWNrIDwgMWUtNCB8fCBtYXhUaWNrID4gMWUrMTUpIHtcbiAgICAgICAgICAgICAgICBub3RhdGlvbiA9ICdzY2llbnRpZmljJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbHRhID0gY2FsY3VsYXRlRGVsdGEodGlja1ZhbHVlLCB0aWNrcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9nRGVsdGEgPSBsb2cxMChNYXRoLmFicyhkZWx0YSkpO1xuICAgICAgICBjb25zdCBudW1EZWNpbWFsID0gaXNOYU4obG9nRGVsdGEpID8gMSA6IE1hdGgubWF4KE1hdGgubWluKC0xICogTWF0aC5mbG9vcihsb2dEZWx0YSksIDIwKSwgMCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBub3RhdGlvbixcbiAgICAgICAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogbnVtRGVjaW1hbCxcbiAgICAgICAgICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogbnVtRGVjaW1hbFxuICAgICAgICB9O1xuICAgICAgICBPYmplY3QuYXNzaWduKG9wdGlvbnMsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICAgICAgICByZXR1cm4gZm9ybWF0TnVtYmVyKHRpY2tWYWx1ZSwgbG9jYWxlLCBvcHRpb25zKTtcbiAgICB9LFxuIGxvZ2FyaXRobWljICh0aWNrVmFsdWUsIGluZGV4LCB0aWNrcykge1xuICAgICAgICBpZiAodGlja1ZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJzAnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlbWFpbiA9IHRpY2tzW2luZGV4XS5zaWduaWZpY2FuZCB8fCB0aWNrVmFsdWUgLyBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMCh0aWNrVmFsdWUpKSk7XG4gICAgICAgIGlmIChbXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAxNVxuICAgICAgICBdLmluY2x1ZGVzKHJlbWFpbikgfHwgaW5kZXggPiAwLjggKiB0aWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXJzLm51bWVyaWMuY2FsbCh0aGlzLCB0aWNrVmFsdWUsIGluZGV4LCB0aWNrcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn07XG5mdW5jdGlvbiBjYWxjdWxhdGVEZWx0YSh0aWNrVmFsdWUsIHRpY2tzKSB7XG4gICAgbGV0IGRlbHRhID0gdGlja3MubGVuZ3RoID4gMyA/IHRpY2tzWzJdLnZhbHVlIC0gdGlja3NbMV0udmFsdWUgOiB0aWNrc1sxXS52YWx1ZSAtIHRpY2tzWzBdLnZhbHVlO1xuICAgIGlmIChNYXRoLmFicyhkZWx0YSkgPj0gMSAmJiB0aWNrVmFsdWUgIT09IE1hdGguZmxvb3IodGlja1ZhbHVlKSkge1xuICAgICAgICBkZWx0YSA9IHRpY2tWYWx1ZSAtIE1hdGguZmxvb3IodGlja1ZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlbHRhO1xufVxuIHZhciBUaWNrcyA9IHtcbiAgICBmb3JtYXR0ZXJzXG59O1xuXG5mdW5jdGlvbiBhcHBseVNjYWxlRGVmYXVsdHMoZGVmYXVsdHMpIHtcbiAgICBkZWZhdWx0cy5zZXQoJ3NjYWxlJywge1xuICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICBvZmZzZXQ6IGZhbHNlLFxuICAgICAgICByZXZlcnNlOiBmYWxzZSxcbiAgICAgICAgYmVnaW5BdFplcm86IGZhbHNlLFxuIGJvdW5kczogJ3RpY2tzJyxcbiBncmFjZTogMCxcbiAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGxpbmVXaWR0aDogMSxcbiAgICAgICAgICAgIGRyYXdPbkNoYXJ0QXJlYTogdHJ1ZSxcbiAgICAgICAgICAgIGRyYXdUaWNrczogdHJ1ZSxcbiAgICAgICAgICAgIHRpY2tMZW5ndGg6IDgsXG4gICAgICAgICAgICB0aWNrV2lkdGg6IChfY3R4LCBvcHRpb25zKT0+b3B0aW9ucy5saW5lV2lkdGgsXG4gICAgICAgICAgICB0aWNrQ29sb3I6IChfY3R4LCBvcHRpb25zKT0+b3B0aW9ucy5jb2xvcixcbiAgICAgICAgICAgIG9mZnNldDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYm9yZGVyOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgZGFzaDogW10sXG4gICAgICAgICAgICBkYXNoT2Zmc2V0OiAwLjAsXG4gICAgICAgICAgICB3aWR0aDogMVxuICAgICAgICB9LFxuICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgICAgICB0ZXh0OiAnJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgICAgICB0b3A6IDQsXG4gICAgICAgICAgICAgICAgYm90dG9tOiA0XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBtaW5Sb3RhdGlvbjogMCxcbiAgICAgICAgICAgIG1heFJvdGF0aW9uOiA1MCxcbiAgICAgICAgICAgIG1pcnJvcjogZmFsc2UsXG4gICAgICAgICAgICB0ZXh0U3Ryb2tlV2lkdGg6IDAsXG4gICAgICAgICAgICB0ZXh0U3Ryb2tlQ29sb3I6ICcnLFxuICAgICAgICAgICAgcGFkZGluZzogMyxcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBhdXRvU2tpcDogdHJ1ZSxcbiAgICAgICAgICAgIGF1dG9Ta2lwUGFkZGluZzogMyxcbiAgICAgICAgICAgIGxhYmVsT2Zmc2V0OiAwLFxuICAgICAgICAgICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMudmFsdWVzLFxuICAgICAgICAgICAgbWlub3I6IHt9LFxuICAgICAgICAgICAgbWFqb3I6IHt9LFxuICAgICAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgY3Jvc3NBbGlnbjogJ25lYXInLFxuICAgICAgICAgICAgc2hvd0xhYmVsQmFja2Ryb3A6IGZhbHNlLFxuICAgICAgICAgICAgYmFja2Ryb3BDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSknLFxuICAgICAgICAgICAgYmFja2Ryb3BQYWRkaW5nOiAyXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBkZWZhdWx0cy5yb3V0ZSgnc2NhbGUudGlja3MnLCAnY29sb3InLCAnJywgJ2NvbG9yJyk7XG4gICAgZGVmYXVsdHMucm91dGUoJ3NjYWxlLmdyaWQnLCAnY29sb3InLCAnJywgJ2JvcmRlckNvbG9yJyk7XG4gICAgZGVmYXVsdHMucm91dGUoJ3NjYWxlLmJvcmRlcicsICdjb2xvcicsICcnLCAnYm9yZGVyQ29sb3InKTtcbiAgICBkZWZhdWx0cy5yb3V0ZSgnc2NhbGUudGl0bGUnLCAnY29sb3InLCAnJywgJ2NvbG9yJyk7XG4gICAgZGVmYXVsdHMuZGVzY3JpYmUoJ3NjYWxlJywge1xuICAgICAgICBfZmFsbGJhY2s6IGZhbHNlLFxuICAgICAgICBfc2NyaXB0YWJsZTogKG5hbWUpPT4hbmFtZS5zdGFydHNXaXRoKCdiZWZvcmUnKSAmJiAhbmFtZS5zdGFydHNXaXRoKCdhZnRlcicpICYmIG5hbWUgIT09ICdjYWxsYmFjaycgJiYgbmFtZSAhPT0gJ3BhcnNlcicsXG4gICAgICAgIF9pbmRleGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2JvcmRlckRhc2gnICYmIG5hbWUgIT09ICd0aWNrQm9yZGVyRGFzaCcgJiYgbmFtZSAhPT0gJ2Rhc2gnXG4gICAgfSk7XG4gICAgZGVmYXVsdHMuZGVzY3JpYmUoJ3NjYWxlcycsIHtcbiAgICAgICAgX2ZhbGxiYWNrOiAnc2NhbGUnXG4gICAgfSk7XG4gICAgZGVmYXVsdHMuZGVzY3JpYmUoJ3NjYWxlLnRpY2tzJywge1xuICAgICAgICBfc2NyaXB0YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnYmFja2Ryb3BQYWRkaW5nJyAmJiBuYW1lICE9PSAnY2FsbGJhY2snLFxuICAgICAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdiYWNrZHJvcFBhZGRpbmcnXG4gICAgfSk7XG59XG5cbmNvbnN0IG92ZXJyaWRlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5jb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gZnVuY3Rpb24gZ2V0U2NvcGUkMShub2RlLCBrZXkpIHtcbiAgICBpZiAoIWtleSkge1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgY29uc3Qga2V5cyA9IGtleS5zcGxpdCgnLicpO1xuICAgIGZvcihsZXQgaSA9IDAsIG4gPSBrZXlzLmxlbmd0aDsgaSA8IG47ICsraSl7XG4gICAgICAgIGNvbnN0IGsgPSBrZXlzW2ldO1xuICAgICAgICBub2RlID0gbm9kZVtrXSB8fCAobm9kZVtrXSA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIHNldChyb290LCBzY29wZSwgdmFsdWVzKSB7XG4gICAgaWYgKHR5cGVvZiBzY29wZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKGdldFNjb3BlJDEocm9vdCwgc2NvcGUpLCB2YWx1ZXMpO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2UoZ2V0U2NvcGUkMShyb290LCAnJyksIHNjb3BlKTtcbn1cbiBjbGFzcyBEZWZhdWx0cyB7XG4gICAgY29uc3RydWN0b3IoX2Rlc2NyaXB0b3JzLCBfYXBwbGllcnMpe1xuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgwLDAsMCwwLjEpJztcbiAgICAgICAgdGhpcy5ib3JkZXJDb2xvciA9ICdyZ2JhKDAsMCwwLDAuMSknO1xuICAgICAgICB0aGlzLmNvbG9yID0gJyM2NjYnO1xuICAgICAgICB0aGlzLmRhdGFzZXRzID0ge307XG4gICAgICAgIHRoaXMuZGV2aWNlUGl4ZWxSYXRpbyA9IChjb250ZXh0KT0+Y29udGV4dC5jaGFydC5wbGF0Zm9ybS5nZXREZXZpY2VQaXhlbFJhdGlvKCk7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSB7fTtcbiAgICAgICAgdGhpcy5ldmVudHMgPSBbXG4gICAgICAgICAgICAnbW91c2Vtb3ZlJyxcbiAgICAgICAgICAgICdtb3VzZW91dCcsXG4gICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgJ3RvdWNoc3RhcnQnLFxuICAgICAgICAgICAgJ3RvdWNobW92ZSdcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5mb250ID0ge1xuICAgICAgICAgICAgZmFtaWx5OiBcIidIZWx2ZXRpY2EgTmV1ZScsICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICBzaXplOiAxMixcbiAgICAgICAgICAgIHN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgICAgICAgIHdlaWdodDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhvdmVyID0ge307XG4gICAgICAgIHRoaXMuaG92ZXJCYWNrZ3JvdW5kQ29sb3IgPSAoY3R4LCBvcHRpb25zKT0+Z2V0SG92ZXJDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvcik7XG4gICAgICAgIHRoaXMuaG92ZXJCb3JkZXJDb2xvciA9IChjdHgsIG9wdGlvbnMpPT5nZXRIb3ZlckNvbG9yKG9wdGlvbnMuYm9yZGVyQ29sb3IpO1xuICAgICAgICB0aGlzLmhvdmVyQ29sb3IgPSAoY3R4LCBvcHRpb25zKT0+Z2V0SG92ZXJDb2xvcihvcHRpb25zLmNvbG9yKTtcbiAgICAgICAgdGhpcy5pbmRleEF4aXMgPSAneCc7XG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpb24gPSB7XG4gICAgICAgICAgICBtb2RlOiAnbmVhcmVzdCcsXG4gICAgICAgICAgICBpbnRlcnNlY3Q6IHRydWUsXG4gICAgICAgICAgICBpbmNsdWRlSW52aXNpYmxlOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm1haW50YWluQXNwZWN0UmF0aW8gPSB0cnVlO1xuICAgICAgICB0aGlzLm9uSG92ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLm9uQ2xpY2sgPSBudWxsO1xuICAgICAgICB0aGlzLnBhcnNpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnBsdWdpbnMgPSB7fTtcbiAgICAgICAgdGhpcy5yZXNwb25zaXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zY2FsZXMgPSB7fTtcbiAgICAgICAgdGhpcy5zaG93TGluZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZHJhd0FjdGl2ZUVsZW1lbnRzT25Ub3AgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlc2NyaWJlKF9kZXNjcmlwdG9ycyk7XG4gICAgICAgIHRoaXMuYXBwbHkoX2FwcGxpZXJzKTtcbiAgICB9XG4gc2V0KHNjb3BlLCB2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHNldCh0aGlzLCBzY29wZSwgdmFsdWVzKTtcbiAgICB9XG4gZ2V0KHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBnZXRTY29wZSQxKHRoaXMsIHNjb3BlKTtcbiAgICB9XG4gZGVzY3JpYmUoc2NvcGUsIHZhbHVlcykge1xuICAgICAgICByZXR1cm4gc2V0KGRlc2NyaXB0b3JzLCBzY29wZSwgdmFsdWVzKTtcbiAgICB9XG4gICAgb3ZlcnJpZGUoc2NvcGUsIHZhbHVlcykge1xuICAgICAgICByZXR1cm4gc2V0KG92ZXJyaWRlcywgc2NvcGUsIHZhbHVlcyk7XG4gICAgfVxuIHJvdXRlKHNjb3BlLCBuYW1lLCB0YXJnZXRTY29wZSwgdGFyZ2V0TmFtZSkge1xuICAgICAgICBjb25zdCBzY29wZU9iamVjdCA9IGdldFNjb3BlJDEodGhpcywgc2NvcGUpO1xuICAgICAgICBjb25zdCB0YXJnZXRTY29wZU9iamVjdCA9IGdldFNjb3BlJDEodGhpcywgdGFyZ2V0U2NvcGUpO1xuICAgICAgICBjb25zdCBwcml2YXRlTmFtZSA9ICdfJyArIG5hbWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHNjb3BlT2JqZWN0LCB7XG4gICAgICAgICAgICBbcHJpdmF0ZU5hbWVdOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHNjb3BlT2JqZWN0W25hbWVdLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW25hbWVdOiB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQgKCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NhbCA9IHRoaXNbcHJpdmF0ZU5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0YXJnZXRTY29wZU9iamVjdFt0YXJnZXROYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGxvY2FsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRhcmdldCwgbG9jYWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZU9yRGVmYXVsdChsb2NhbCwgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldCAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1twcml2YXRlTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhcHBseShhcHBsaWVycykge1xuICAgICAgICBhcHBsaWVycy5mb3JFYWNoKChhcHBseSk9PmFwcGx5KHRoaXMpKTtcbiAgICB9XG59XG52YXIgZGVmYXVsdHMgPSAvKiAjX19QVVJFX18gKi8gbmV3IERlZmF1bHRzKHtcbiAgICBfc2NyaXB0YWJsZTogKG5hbWUpPT4hbmFtZS5zdGFydHNXaXRoKCdvbicpLFxuICAgIF9pbmRleGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2V2ZW50cycsXG4gICAgaG92ZXI6IHtcbiAgICAgICAgX2ZhbGxiYWNrOiAnaW50ZXJhY3Rpb24nXG4gICAgfSxcbiAgICBpbnRlcmFjdGlvbjoge1xuICAgICAgICBfc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgICAgIF9pbmRleGFibGU6IGZhbHNlXG4gICAgfVxufSwgW1xuICAgIGFwcGx5QW5pbWF0aW9uc0RlZmF1bHRzLFxuICAgIGFwcGx5TGF5b3V0c0RlZmF1bHRzLFxuICAgIGFwcGx5U2NhbGVEZWZhdWx0c1xuXSk7XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIGZvbnQgb2JqZWN0IGludG8gYSBDU1MgZm9udCBzdHJpbmcuXG4gKiBAcGFyYW0gZm9udCAtIEEgZm9udCBvYmplY3QuXG4gKiBAcmV0dXJuIFRoZSBDU1MgZm9udCBzdHJpbmcuIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udFxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiB0b0ZvbnRTdHJpbmcoZm9udCkge1xuICAgIGlmICghZm9udCB8fCBpc051bGxPclVuZGVmKGZvbnQuc2l6ZSkgfHwgaXNOdWxsT3JVbmRlZihmb250LmZhbWlseSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAoZm9udC5zdHlsZSA/IGZvbnQuc3R5bGUgKyAnICcgOiAnJykgKyAoZm9udC53ZWlnaHQgPyBmb250LndlaWdodCArICcgJyA6ICcnKSArIGZvbnQuc2l6ZSArICdweCAnICsgZm9udC5mYW1pbHk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIHN0cmluZykge1xuICAgIGxldCB0ZXh0V2lkdGggPSBkYXRhW3N0cmluZ107XG4gICAgaWYgKCF0ZXh0V2lkdGgpIHtcbiAgICAgICAgdGV4dFdpZHRoID0gZGF0YVtzdHJpbmddID0gY3R4Lm1lYXN1cmVUZXh0KHN0cmluZykud2lkdGg7XG4gICAgICAgIGdjLnB1c2goc3RyaW5nKTtcbiAgICB9XG4gICAgaWYgKHRleHRXaWR0aCA+IGxvbmdlc3QpIHtcbiAgICAgICAgbG9uZ2VzdCA9IHRleHRXaWR0aDtcbiAgICB9XG4gICAgcmV0dXJuIGxvbmdlc3Q7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIF9sb25nZXN0VGV4dChjdHgsIGZvbnQsIGFycmF5T2ZUaGluZ3MsIGNhY2hlKSB7XG4gICAgY2FjaGUgPSBjYWNoZSB8fCB7fTtcbiAgICBsZXQgZGF0YSA9IGNhY2hlLmRhdGEgPSBjYWNoZS5kYXRhIHx8IHt9O1xuICAgIGxldCBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgfHwgW107XG4gICAgaWYgKGNhY2hlLmZvbnQgIT09IGZvbnQpIHtcbiAgICAgICAgZGF0YSA9IGNhY2hlLmRhdGEgPSB7fTtcbiAgICAgICAgZ2MgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCA9IFtdO1xuICAgICAgICBjYWNoZS5mb250ID0gZm9udDtcbiAgICB9XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZm9udCA9IGZvbnQ7XG4gICAgbGV0IGxvbmdlc3QgPSAwO1xuICAgIGNvbnN0IGlsZW4gPSBhcnJheU9mVGhpbmdzLmxlbmd0aDtcbiAgICBsZXQgaSwgaiwgamxlbiwgdGhpbmcsIG5lc3RlZFRoaW5nO1xuICAgIGZvcihpID0gMDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgIHRoaW5nID0gYXJyYXlPZlRoaW5nc1tpXTtcbiAgICAgICAgLy8gVW5kZWZpbmVkIHN0cmluZ3MgYW5kIGFycmF5cyBzaG91bGQgbm90IGJlIG1lYXN1cmVkXG4gICAgICAgIGlmICh0aGluZyAhPT0gdW5kZWZpbmVkICYmIHRoaW5nICE9PSBudWxsICYmICFpc0FycmF5KHRoaW5nKSkge1xuICAgICAgICAgICAgbG9uZ2VzdCA9IF9tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCB0aGluZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheSh0aGluZykpIHtcbiAgICAgICAgICAgIC8vIGlmIGl0IGlzIGFuIGFycmF5IGxldHMgbWVhc3VyZSBlYWNoIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIHRvIGRvIG1heWJlIHNpbXBsaWZ5IHRoaXMgZnVuY3Rpb24gYSBiaXQgc28gd2UgY2FuIGRvIHRoaXMgbW9yZSByZWN1cnNpdmVseT9cbiAgICAgICAgICAgIGZvcihqID0gMCwgamxlbiA9IHRoaW5nLmxlbmd0aDsgaiA8IGpsZW47IGorKyl7XG4gICAgICAgICAgICAgICAgbmVzdGVkVGhpbmcgPSB0aGluZ1tqXTtcbiAgICAgICAgICAgICAgICAvLyBVbmRlZmluZWQgc3RyaW5ncyBhbmQgYXJyYXlzIHNob3VsZCBub3QgYmUgbWVhc3VyZWRcbiAgICAgICAgICAgICAgICBpZiAobmVzdGVkVGhpbmcgIT09IHVuZGVmaW5lZCAmJiBuZXN0ZWRUaGluZyAhPT0gbnVsbCAmJiAhaXNBcnJheShuZXN0ZWRUaGluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9uZ2VzdCA9IF9tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCBuZXN0ZWRUaGluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgY29uc3QgZ2NMZW4gPSBnYy5sZW5ndGggLyAyO1xuICAgIGlmIChnY0xlbiA+IGFycmF5T2ZUaGluZ3MubGVuZ3RoKSB7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGdjTGVuOyBpKyspe1xuICAgICAgICAgICAgZGVsZXRlIGRhdGFbZ2NbaV1dO1xuICAgICAgICB9XG4gICAgICAgIGdjLnNwbGljZSgwLCBnY0xlbik7XG4gICAgfVxuICAgIHJldHVybiBsb25nZXN0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhbGlnbmVkIHBpeGVsIHZhbHVlIHRvIGF2b2lkIGFudGktYWxpYXNpbmcgYmx1clxuICogQHBhcmFtIGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlLlxuICogQHBhcmFtIHBpeGVsIC0gQSBwaXhlbCB2YWx1ZS5cbiAqIEBwYXJhbSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudC5cbiAqIEByZXR1cm5zIFRoZSBhbGlnbmVkIHBpeGVsIHZhbHVlLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYWxpZ25QaXhlbChjaGFydCwgcGl4ZWwsIHdpZHRoKSB7XG4gICAgY29uc3QgZGV2aWNlUGl4ZWxSYXRpbyA9IGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvO1xuICAgIGNvbnN0IGhhbGZXaWR0aCA9IHdpZHRoICE9PSAwID8gTWF0aC5tYXgod2lkdGggLyAyLCAwLjUpIDogMDtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgocGl4ZWwgLSBoYWxmV2lkdGgpICogZGV2aWNlUGl4ZWxSYXRpbykgLyBkZXZpY2VQaXhlbFJhdGlvICsgaGFsZldpZHRoO1xufVxuLyoqXG4gKiBDbGVhcnMgdGhlIGVudGlyZSBjYW52YXMuXG4gKi8gZnVuY3Rpb24gY2xlYXJDYW52YXMoY2FudmFzLCBjdHgpIHtcbiAgICBjdHggPSBjdHggfHwgY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY3R4LnNhdmUoKTtcbiAgICAvLyBjYW52YXMud2lkdGggYW5kIGNhbnZhcy5oZWlnaHQgZG8gbm90IGNvbnNpZGVyIHRoZSBjYW52YXMgdHJhbnNmb3JtLFxuICAgIC8vIHdoaWxlIGNsZWFyUmVjdCBkb2VzXG4gICAgY3R4LnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBkcmF3UG9pbnQoY3R4LCBvcHRpb25zLCB4LCB5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgIGRyYXdQb2ludExlZ2VuZChjdHgsIG9wdGlvbnMsIHgsIHksIG51bGwpO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIGRyYXdQb2ludExlZ2VuZChjdHgsIG9wdGlvbnMsIHgsIHksIHcpIHtcbiAgICBsZXQgdHlwZSwgeE9mZnNldCwgeU9mZnNldCwgc2l6ZSwgY29ybmVyUmFkaXVzLCB3aWR0aCwgeE9mZnNldFcsIHlPZmZzZXRXO1xuICAgIGNvbnN0IHN0eWxlID0gb3B0aW9ucy5wb2ludFN0eWxlO1xuICAgIGNvbnN0IHJvdGF0aW9uID0gb3B0aW9ucy5yb3RhdGlvbjtcbiAgICBjb25zdCByYWRpdXMgPSBvcHRpb25zLnJhZGl1cztcbiAgICBsZXQgcmFkID0gKHJvdGF0aW9uIHx8IDApICogUkFEX1BFUl9ERUc7XG4gICAgaWYgKHN0eWxlICYmIHR5cGVvZiBzdHlsZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdHlwZSA9IHN0eWxlLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmICh0eXBlID09PSAnW29iamVjdCBIVE1MSW1hZ2VFbGVtZW50XScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgSFRNTENhbnZhc0VsZW1lbnRdJykge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoeCwgeSk7XG4gICAgICAgICAgICBjdHgucm90YXRlKHJhZCk7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKHN0eWxlLCAtc3R5bGUud2lkdGggLyAyLCAtc3R5bGUuaGVpZ2h0IC8gMiwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc05hTihyYWRpdXMpIHx8IHJhZGl1cyA8PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIHN3aXRjaChzdHlsZSl7XG4gICAgICAgIC8vIERlZmF1bHQgaW5jbHVkZXMgY2lyY2xlXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAodykge1xuICAgICAgICAgICAgICAgIGN0eC5lbGxpcHNlKHgsIHksIHcgLyAyLCByYWRpdXMsIDAsIDAsIFRBVSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN0eC5hcmMoeCwgeSwgcmFkaXVzLCAwLCBUQVUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RyaWFuZ2xlJzpcbiAgICAgICAgICAgIHdpZHRoID0gdyA/IHcgLyAyIDogcmFkaXVzO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHdpZHRoLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgICAgICAgICByYWQgKz0gVFdPX1RISVJEU19QSTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIE1hdGguc2luKHJhZCkgKiB3aWR0aCwgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgICAgICAgICAgcmFkICs9IFRXT19USElSRFNfUEk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyBNYXRoLnNpbihyYWQpICogd2lkdGgsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyZWN0Um91bmRlZCc6XG4gICAgICAgICAgICAvLyBOT1RFOiB0aGUgcm91bmRlZCByZWN0IGltcGxlbWVudGF0aW9uIGNoYW5nZWQgdG8gdXNlIGBhcmNgIGluc3RlYWQgb2ZcbiAgICAgICAgICAgIC8vIGBxdWFkcmF0aWNDdXJ2ZVRvYCBzaW5jZSBpdCBnZW5lcmF0ZXMgYmV0dGVyIHJlc3VsdHMgd2hlbiByZWN0IGlzXG4gICAgICAgICAgICAvLyBhbG1vc3QgYSBjaXJjbGUuIDAuNTE2IChpbnN0ZWFkIG9mIDAuNSkgcHJvZHVjZXMgcmVzdWx0cyB3aXRoIHZpc3VhbGx5XG4gICAgICAgICAgICAvLyBjbG9zZXIgcHJvcG9ydGlvbiB0byB0aGUgcHJldmlvdXMgaW1wbCBhbmQgaXQgaXMgaW5zY3JpYmVkIGluIHRoZVxuICAgICAgICAgICAgLy8gY2lyY2xlIHdpdGggYHJhZGl1c2AuIEZvciBtb3JlIGRldGFpbHMsIHNlZSB0aGUgZm9sbG93aW5nIFBSczpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81NTk3XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNTg1OFxuICAgICAgICAgICAgY29ybmVyUmFkaXVzID0gcmFkaXVzICogMC41MTY7XG4gICAgICAgICAgICBzaXplID0gcmFkaXVzIC0gY29ybmVyUmFkaXVzO1xuICAgICAgICAgICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCArIFFVQVJURVJfUEkpICogc2l6ZTtcbiAgICAgICAgICAgIHhPZmZzZXRXID0gTWF0aC5jb3MocmFkICsgUVVBUlRFUl9QSSkgKiAodyA/IHcgLyAyIC0gY29ybmVyUmFkaXVzIDogc2l6ZSk7XG4gICAgICAgICAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkICsgUVVBUlRFUl9QSSkgKiBzaXplO1xuICAgICAgICAgICAgeU9mZnNldFcgPSBNYXRoLnNpbihyYWQgKyBRVUFSVEVSX1BJKSAqICh3ID8gdyAvIDIgLSBjb3JuZXJSYWRpdXMgOiBzaXplKTtcbiAgICAgICAgICAgIGN0eC5hcmMoeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBQSSwgcmFkIC0gSEFMRl9QSSk7XG4gICAgICAgICAgICBjdHguYXJjKHggKyB5T2Zmc2V0VywgeSAtIHhPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkIC0gSEFMRl9QSSwgcmFkKTtcbiAgICAgICAgICAgIGN0eC5hcmMoeCArIHhPZmZzZXRXLCB5ICsgeU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQsIHJhZCArIEhBTEZfUEkpO1xuICAgICAgICAgICAgY3R4LmFyYyh4IC0geU9mZnNldFcsIHkgKyB4T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCArIEhBTEZfUEksIHJhZCArIFBJKTtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyZWN0JzpcbiAgICAgICAgICAgIGlmICghcm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICBzaXplID0gTWF0aC5TUVJUMV8yICogcmFkaXVzO1xuICAgICAgICAgICAgICAgIHdpZHRoID0gdyA/IHcgLyAyIDogc2l6ZTtcbiAgICAgICAgICAgICAgICBjdHgucmVjdCh4IC0gd2lkdGgsIHkgLSBzaXplLCAyICogd2lkdGgsIDIgKiBzaXplKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovIGNhc2UgJ3JlY3RSb3QnOlxuICAgICAgICAgICAgeE9mZnNldFcgPSBNYXRoLmNvcyhyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldFcgPSBNYXRoLnNpbihyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0VywgeSAtIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeU9mZnNldFcsIHkgLSB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXRXLCB5ICsgeU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0VywgeSArIHhPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Nyb3NzUm90JzpcbiAgICAgICAgICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovIGNhc2UgJ2Nyb3NzJzpcbiAgICAgICAgICAgIHhPZmZzZXRXID0gTWF0aC5jb3MocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXRXID0gTWF0aC5zaW4ocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldFcsIHkgLSB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXRXLCB5ICsgeU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0VywgeSAtIHhPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldFcsIHkgKyB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzdGFyJzpcbiAgICAgICAgICAgIHhPZmZzZXRXID0gTWF0aC5jb3MocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXRXID0gTWF0aC5zaW4ocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldFcsIHkgLSB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXRXLCB5ICsgeU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0VywgeSAtIHhPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldFcsIHkgKyB4T2Zmc2V0KTtcbiAgICAgICAgICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICAgICAgICAgICAgeE9mZnNldFcgPSBNYXRoLmNvcyhyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldFcgPSBNYXRoLnNpbihyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0VywgeSAtIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXRXLCB5IC0geE9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0VywgeSArIHhPZmZzZXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2xpbmUnOlxuICAgICAgICAgICAgeE9mZnNldCA9IHcgPyB3IC8gMiA6IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkYXNoJzpcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCwgeSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyBNYXRoLmNvcyhyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyksIHkgKyBNYXRoLnNpbihyYWQpICogcmFkaXVzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGZhbHNlOlxuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGN0eC5maWxsKCk7XG4gICAgaWYgKG9wdGlvbnMuYm9yZGVyV2lkdGggPiAwKSB7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcG9pbnQgaXMgaW5zaWRlIHRoZSByZWN0YW5nbGVcbiAqIEBwYXJhbSBwb2ludCAtIFRoZSBwb2ludCB0byB0ZXN0XG4gKiBAcGFyYW0gYXJlYSAtIFRoZSByZWN0YW5nbGVcbiAqIEBwYXJhbSBtYXJnaW4gLSBhbGxvd2VkIG1hcmdpblxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaXNQb2ludEluQXJlYShwb2ludCwgYXJlYSwgbWFyZ2luKSB7XG4gICAgbWFyZ2luID0gbWFyZ2luIHx8IDAuNTsgLy8gbWFyZ2luIC0gZGVmYXVsdCBpcyB0byBtYXRjaCByb3VuZGVkIGRlY2ltYWxzXG4gICAgcmV0dXJuICFhcmVhIHx8IHBvaW50ICYmIHBvaW50LnggPiBhcmVhLmxlZnQgLSBtYXJnaW4gJiYgcG9pbnQueCA8IGFyZWEucmlnaHQgKyBtYXJnaW4gJiYgcG9pbnQueSA+IGFyZWEudG9wIC0gbWFyZ2luICYmIHBvaW50LnkgPCBhcmVhLmJvdHRvbSArIG1hcmdpbjtcbn1cbmZ1bmN0aW9uIGNsaXBBcmVhKGN0eCwgYXJlYSkge1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5yZWN0KGFyZWEubGVmdCwgYXJlYS50b3AsIGFyZWEucmlnaHQgLSBhcmVhLmxlZnQsIGFyZWEuYm90dG9tIC0gYXJlYS50b3ApO1xuICAgIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiB1bmNsaXBBcmVhKGN0eCkge1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3N0ZXBwZWRMaW5lVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwLCBtb2RlKSB7XG4gICAgaWYgKCFwcmV2aW91cykge1xuICAgICAgICByZXR1cm4gY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xuICAgIH1cbiAgICBpZiAobW9kZSA9PT0gJ21pZGRsZScpIHtcbiAgICAgICAgY29uc3QgbWlkcG9pbnQgPSAocHJldmlvdXMueCArIHRhcmdldC54KSAvIDIuMDtcbiAgICAgICAgY3R4LmxpbmVUbyhtaWRwb2ludCwgcHJldmlvdXMueSk7XG4gICAgICAgIGN0eC5saW5lVG8obWlkcG9pbnQsIHRhcmdldC55KTtcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdhZnRlcicgIT09ICEhZmxpcCkge1xuICAgICAgICBjdHgubGluZVRvKHByZXZpb3VzLngsIHRhcmdldC55KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjdHgubGluZVRvKHRhcmdldC54LCBwcmV2aW91cy55KTtcbiAgICB9XG4gICAgY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9iZXppZXJDdXJ2ZVRvKGN0eCwgcHJldmlvdXMsIHRhcmdldCwgZmxpcCkge1xuICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgICAgcmV0dXJuIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbiAgICB9XG4gICAgY3R4LmJlemllckN1cnZlVG8oZmxpcCA/IHByZXZpb3VzLmNwMXggOiBwcmV2aW91cy5jcDJ4LCBmbGlwID8gcHJldmlvdXMuY3AxeSA6IHByZXZpb3VzLmNwMnksIGZsaXAgPyB0YXJnZXQuY3AyeCA6IHRhcmdldC5jcDF4LCBmbGlwID8gdGFyZ2V0LmNwMnkgOiB0YXJnZXQuY3AxeSwgdGFyZ2V0LngsIHRhcmdldC55KTtcbn1cbmZ1bmN0aW9uIHNldFJlbmRlck9wdHMoY3R4LCBvcHRzKSB7XG4gICAgaWYgKG9wdHMudHJhbnNsYXRpb24pIHtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZShvcHRzLnRyYW5zbGF0aW9uWzBdLCBvcHRzLnRyYW5zbGF0aW9uWzFdKTtcbiAgICB9XG4gICAgaWYgKCFpc051bGxPclVuZGVmKG9wdHMucm90YXRpb24pKSB7XG4gICAgICAgIGN0eC5yb3RhdGUob3B0cy5yb3RhdGlvbik7XG4gICAgfVxuICAgIGlmIChvcHRzLmNvbG9yKSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzLmNvbG9yO1xuICAgIH1cbiAgICBpZiAob3B0cy50ZXh0QWxpZ24pIHtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IG9wdHMudGV4dEFsaWduO1xuICAgIH1cbiAgICBpZiAob3B0cy50ZXh0QmFzZWxpbmUpIHtcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9IG9wdHMudGV4dEJhc2VsaW5lO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlY29yYXRlVGV4dChjdHgsIHgsIHksIGxpbmUsIG9wdHMpIHtcbiAgICBpZiAob3B0cy5zdHJpa2V0aHJvdWdoIHx8IG9wdHMudW5kZXJsaW5lKSB7XG4gICAgICAgIC8qKlxuICAgICAqIE5vdyB0aGF0IElFMTEgc3VwcG9ydCBoYXMgYmVlbiBkcm9wcGVkLCB3ZSBjYW4gdXNlIG1vcmVcbiAgICAgKiBvZiB0aGUgVGV4dE1ldHJpY3Mgb2JqZWN0LiBUaGUgYWN0dWFsIGJvdW5kaW5nIGJveGVzXG4gICAgICogYXJlIHVuZmxhZ2dlZCBpbiBDaHJvbWUsIEZpcmVmb3gsIEVkZ2UsIGFuZCBTYWZhcmkgc28gdGhleVxuICAgICAqIGNhbiBiZSBzYWZlbHkgdXNlZC5cbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1RleHRNZXRyaWNzI0Jyb3dzZXJfY29tcGF0aWJpbGl0eVxuICAgICAqLyBjb25zdCBtZXRyaWNzID0gY3R4Lm1lYXN1cmVUZXh0KGxpbmUpO1xuICAgICAgICBjb25zdCBsZWZ0ID0geCAtIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hMZWZ0O1xuICAgICAgICBjb25zdCByaWdodCA9IHggKyBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94UmlnaHQ7XG4gICAgICAgIGNvbnN0IHRvcCA9IHkgLSBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94QXNjZW50O1xuICAgICAgICBjb25zdCBib3R0b20gPSB5ICsgbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveERlc2NlbnQ7XG4gICAgICAgIGNvbnN0IHlEZWNvcmF0aW9uID0gb3B0cy5zdHJpa2V0aHJvdWdoID8gKHRvcCArIGJvdHRvbSkgLyAyIDogYm90dG9tO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBjdHguZmlsbFN0eWxlO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRzLmRlY29yYXRpb25XaWR0aCB8fCAyO1xuICAgICAgICBjdHgubW92ZVRvKGxlZnQsIHlEZWNvcmF0aW9uKTtcbiAgICAgICAgY3R4LmxpbmVUbyhyaWdodCwgeURlY29yYXRpb24pO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZHJhd0JhY2tkcm9wKGN0eCwgb3B0cykge1xuICAgIGNvbnN0IG9sZENvbG9yID0gY3R4LmZpbGxTdHlsZTtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0cy5jb2xvcjtcbiAgICBjdHguZmlsbFJlY3Qob3B0cy5sZWZ0LCBvcHRzLnRvcCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBvbGRDb2xvcjtcbn1cbi8qKlxuICogUmVuZGVyIHRleHQgb250byB0aGUgY2FudmFzXG4gKi8gZnVuY3Rpb24gcmVuZGVyVGV4dChjdHgsIHRleHQsIHgsIHksIGZvbnQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IGxpbmVzID0gaXNBcnJheSh0ZXh0KSA/IHRleHQgOiBbXG4gICAgICAgIHRleHRcbiAgICBdO1xuICAgIGNvbnN0IHN0cm9rZSA9IG9wdHMuc3Ryb2tlV2lkdGggPiAwICYmIG9wdHMuc3Ryb2tlQ29sb3IgIT09ICcnO1xuICAgIGxldCBpLCBsaW5lO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmZvbnQgPSBmb250LnN0cmluZztcbiAgICBzZXRSZW5kZXJPcHRzKGN0eCwgb3B0cyk7XG4gICAgZm9yKGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpe1xuICAgICAgICBsaW5lID0gbGluZXNbaV07XG4gICAgICAgIGlmIChvcHRzLmJhY2tkcm9wKSB7XG4gICAgICAgICAgICBkcmF3QmFja2Ryb3AoY3R4LCBvcHRzLmJhY2tkcm9wKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3Ryb2tlKSB7XG4gICAgICAgICAgICBpZiAob3B0cy5zdHJva2VDb2xvcikge1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdHMuc3Ryb2tlQ29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYob3B0cy5zdHJva2VXaWR0aCkpIHtcbiAgICAgICAgICAgICAgICBjdHgubGluZVdpZHRoID0gb3B0cy5zdHJva2VXaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5zdHJva2VUZXh0KGxpbmUsIHgsIHksIG9wdHMubWF4V2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsVGV4dChsaW5lLCB4LCB5LCBvcHRzLm1heFdpZHRoKTtcbiAgICAgICAgZGVjb3JhdGVUZXh0KGN0eCwgeCwgeSwgbGluZSwgb3B0cyk7XG4gICAgICAgIHkgKz0gTnVtYmVyKGZvbnQubGluZUhlaWdodCk7XG4gICAgfVxuICAgIGN0eC5yZXN0b3JlKCk7XG59XG4vKipcbiAqIEFkZCBhIHBhdGggb2YgYSByZWN0YW5nbGUgd2l0aCByb3VuZGVkIGNvcm5lcnMgdG8gdGhlIGN1cnJlbnQgc3ViLXBhdGhcbiAqIEBwYXJhbSBjdHggLSBDb250ZXh0XG4gKiBAcGFyYW0gcmVjdCAtIEJvdW5kaW5nIHJlY3RcbiAqLyBmdW5jdGlvbiBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCByZWN0KSB7XG4gICAgY29uc3QgeyB4ICwgeSAsIHcgLCBoICwgcmFkaXVzICB9ID0gcmVjdDtcbiAgICAvLyB0b3AgbGVmdCBhcmNcbiAgICBjdHguYXJjKHggKyByYWRpdXMudG9wTGVmdCwgeSArIHJhZGl1cy50b3BMZWZ0LCByYWRpdXMudG9wTGVmdCwgLUhBTEZfUEksIFBJLCB0cnVlKTtcbiAgICAvLyBsaW5lIGZyb20gdG9wIGxlZnQgdG8gYm90dG9tIGxlZnRcbiAgICBjdHgubGluZVRvKHgsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbUxlZnQpO1xuICAgIC8vIGJvdHRvbSBsZWZ0IGFyY1xuICAgIGN0eC5hcmMoeCArIHJhZGl1cy5ib3R0b21MZWZ0LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21MZWZ0LCByYWRpdXMuYm90dG9tTGVmdCwgUEksIEhBTEZfUEksIHRydWUpO1xuICAgIC8vIGxpbmUgZnJvbSBib3R0b20gbGVmdCB0byBib3R0b20gcmlnaHRcbiAgICBjdHgubGluZVRvKHggKyB3IC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCB5ICsgaCk7XG4gICAgLy8gYm90dG9tIHJpZ2h0IGFyY1xuICAgIGN0eC5hcmMoeCArIHcgLSByYWRpdXMuYm90dG9tUmlnaHQsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCByYWRpdXMuYm90dG9tUmlnaHQsIEhBTEZfUEksIDAsIHRydWUpO1xuICAgIC8vIGxpbmUgZnJvbSBib3R0b20gcmlnaHQgdG8gdG9wIHJpZ2h0XG4gICAgY3R4LmxpbmVUbyh4ICsgdywgeSArIHJhZGl1cy50b3BSaWdodCk7XG4gICAgLy8gdG9wIHJpZ2h0IGFyY1xuICAgIGN0eC5hcmMoeCArIHcgLSByYWRpdXMudG9wUmlnaHQsIHkgKyByYWRpdXMudG9wUmlnaHQsIHJhZGl1cy50b3BSaWdodCwgMCwgLUhBTEZfUEksIHRydWUpO1xuICAgIC8vIGxpbmUgZnJvbSB0b3AgcmlnaHQgdG8gdG9wIGxlZnRcbiAgICBjdHgubGluZVRvKHggKyByYWRpdXMudG9wTGVmdCwgeSk7XG59XG5cbmNvbnN0IExJTkVfSEVJR0hUID0gL14obm9ybWFsfChcXGQrKD86XFwuXFxkKyk/KShweHxlbXwlKT8pJC87XG5jb25zdCBGT05UX1NUWUxFID0gL14obm9ybWFsfGl0YWxpY3xpbml0aWFsfGluaGVyaXR8dW5zZXR8KG9ibGlxdWUoIC0/WzAtOV0/WzAtOV1kZWcpPykpJC87XG4vKipcbiAqIEBhbGlhcyBDaGFydC5oZWxwZXJzLm9wdGlvbnNcbiAqIEBuYW1lc3BhY2VcbiAqLyAvKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBsaW5lIGhlaWdodCBgdmFsdWVgIGluIHBpeGVscyBmb3IgYSBzcGVjaWZpYyBmb250IGBzaXplYC5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBsaW5lSGVpZ2h0IHRvIHBhcnNlIChlZy4gMS42LCAnMTRweCcsICc3NSUnLCAnMS42ZW0nKS5cbiAqIEBwYXJhbSBzaXplIC0gVGhlIGZvbnQgc2l6ZSAoaW4gcGl4ZWxzKSB1c2VkIHRvIHJlc29sdmUgcmVsYXRpdmUgYHZhbHVlYC5cbiAqIEByZXR1cm5zIFRoZSBlZmZlY3RpdmUgbGluZSBoZWlnaHQgaW4gcGl4ZWxzIChzaXplICogMS4yIGlmIHZhbHVlIGlzIGludmFsaWQpLlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbGluZS1oZWlnaHRcbiAqIEBzaW5jZSAyLjcuMFxuICovIGZ1bmN0aW9uIHRvTGluZUhlaWdodCh2YWx1ZSwgc2l6ZSkge1xuICAgIGNvbnN0IG1hdGNoZXMgPSAoJycgKyB2YWx1ZSkubWF0Y2goTElORV9IRUlHSFQpO1xuICAgIGlmICghbWF0Y2hlcyB8fCBtYXRjaGVzWzFdID09PSAnbm9ybWFsJykge1xuICAgICAgICByZXR1cm4gc2l6ZSAqIDEuMjtcbiAgICB9XG4gICAgdmFsdWUgPSArbWF0Y2hlc1syXTtcbiAgICBzd2l0Y2gobWF0Y2hlc1szXSl7XG4gICAgICAgIGNhc2UgJ3B4JzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgY2FzZSAnJSc6XG4gICAgICAgICAgICB2YWx1ZSAvPSAxMDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHNpemUgKiB2YWx1ZTtcbn1cbmNvbnN0IG51bWJlck9yWmVybyA9ICh2KT0+K3YgfHwgMDtcbmZ1bmN0aW9uIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBwcm9wcykge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIGNvbnN0IG9ialByb3BzID0gaXNPYmplY3QocHJvcHMpO1xuICAgIGNvbnN0IGtleXMgPSBvYmpQcm9wcyA/IE9iamVjdC5rZXlzKHByb3BzKSA6IHByb3BzO1xuICAgIGNvbnN0IHJlYWQgPSBpc09iamVjdCh2YWx1ZSkgPyBvYmpQcm9wcyA/IChwcm9wKT0+dmFsdWVPckRlZmF1bHQodmFsdWVbcHJvcF0sIHZhbHVlW3Byb3BzW3Byb3BdXSkgOiAocHJvcCk9PnZhbHVlW3Byb3BdIDogKCk9PnZhbHVlO1xuICAgIGZvciAoY29uc3QgcHJvcCBvZiBrZXlzKXtcbiAgICAgICAgcmV0W3Byb3BdID0gbnVtYmVyT3JaZXJvKHJlYWQocHJvcCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdmFsdWUgaW50byBhIFRSQkwgb2JqZWN0LlxuICogQHBhcmFtIHZhbHVlIC0gSWYgYSBudW1iZXIsIHNldCB0aGUgdmFsdWUgdG8gYWxsIFRSQkwgY29tcG9uZW50LFxuICogIGVsc2UsIGlmIGFuIG9iamVjdCwgdXNlIGRlZmluZWQgcHJvcGVydGllcyBhbmQgc2V0cyB1bmRlZmluZWQgb25lcyB0byAwLlxuICogIHggLyB5IGFyZSBzaG9ydGhhbmRzIGZvciBzYW1lIHZhbHVlIGZvciBsZWZ0L3JpZ2h0IGFuZCB0b3AvYm90dG9tLlxuICogQHJldHVybnMgVGhlIHBhZGRpbmcgdmFsdWVzICh0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQpXG4gKiBAc2luY2UgMy4wLjBcbiAqLyBmdW5jdGlvbiB0b1RSQkwodmFsdWUpIHtcbiAgICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIHtcbiAgICAgICAgdG9wOiAneScsXG4gICAgICAgIHJpZ2h0OiAneCcsXG4gICAgICAgIGJvdHRvbTogJ3knLFxuICAgICAgICBsZWZ0OiAneCdcbiAgICB9KTtcbn1cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIHZhbHVlIGludG8gYSBUUkJMIGNvcm5lcnMgb2JqZWN0IChzaW1pbGFyIHdpdGggY3NzIGJvcmRlci1yYWRpdXMpLlxuICogQHBhcmFtIHZhbHVlIC0gSWYgYSBudW1iZXIsIHNldCB0aGUgdmFsdWUgdG8gYWxsIFRSQkwgY29ybmVyIGNvbXBvbmVudHMsXG4gKiAgZWxzZSwgaWYgYW4gb2JqZWN0LCB1c2UgZGVmaW5lZCBwcm9wZXJ0aWVzIGFuZCBzZXRzIHVuZGVmaW5lZCBvbmVzIHRvIDAuXG4gKiBAcmV0dXJucyBUaGUgVFJCTCBjb3JuZXIgdmFsdWVzICh0b3BMZWZ0LCB0b3BSaWdodCwgYm90dG9tTGVmdCwgYm90dG9tUmlnaHQpXG4gKiBAc2luY2UgMy4wLjBcbiAqLyBmdW5jdGlvbiB0b1RSQkxDb3JuZXJzKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBbXG4gICAgICAgICd0b3BMZWZ0JyxcbiAgICAgICAgJ3RvcFJpZ2h0JyxcbiAgICAgICAgJ2JvdHRvbUxlZnQnLFxuICAgICAgICAnYm90dG9tUmlnaHQnXG4gICAgXSk7XG59XG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGEgcGFkZGluZyBvYmplY3Qgd2l0aCBwcmUtY29tcHV0ZWQgd2lkdGgvaGVpZ2h0LlxuICogQHBhcmFtIHZhbHVlIC0gSWYgYSBudW1iZXIsIHNldCB0aGUgdmFsdWUgdG8gYWxsIFRSQkwgY29tcG9uZW50LFxuICogIGVsc2UsIGlmIGFuIG9iamVjdCwgdXNlIGRlZmluZWQgcHJvcGVydGllcyBhbmQgc2V0cyB1bmRlZmluZWQgb25lcyB0byAwLlxuICogIHggLyB5IGFyZSBzaG9ydGhhbmRzIGZvciBzYW1lIHZhbHVlIGZvciBsZWZ0L3JpZ2h0IGFuZCB0b3AvYm90dG9tLlxuICogQHJldHVybnMgVGhlIHBhZGRpbmcgdmFsdWVzICh0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsIHdpZHRoLCBoZWlnaHQpXG4gKiBAc2luY2UgMi43LjBcbiAqLyBmdW5jdGlvbiB0b1BhZGRpbmcodmFsdWUpIHtcbiAgICBjb25zdCBvYmogPSB0b1RSQkwodmFsdWUpO1xuICAgIG9iai53aWR0aCA9IG9iai5sZWZ0ICsgb2JqLnJpZ2h0O1xuICAgIG9iai5oZWlnaHQgPSBvYmoudG9wICsgb2JqLmJvdHRvbTtcbiAgICByZXR1cm4gb2JqO1xufVxuLyoqXG4gKiBQYXJzZXMgZm9udCBvcHRpb25zIGFuZCByZXR1cm5zIHRoZSBmb250IG9iamVjdC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gQSBvYmplY3QgdGhhdCBjb250YWlucyBmb250IG9wdGlvbnMgdG8gYmUgcGFyc2VkLlxuICogQHBhcmFtIGZhbGxiYWNrIC0gQSBvYmplY3QgdGhhdCBjb250YWlucyBmYWxsYmFjayBmb250IG9wdGlvbnMuXG4gKiBAcmV0dXJuIFRoZSBmb250IG9iamVjdC5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gdG9Gb250KG9wdGlvbnMsIGZhbGxiYWNrKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgZmFsbGJhY2sgPSBmYWxsYmFjayB8fCBkZWZhdWx0cy5mb250O1xuICAgIGxldCBzaXplID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5zaXplLCBmYWxsYmFjay5zaXplKTtcbiAgICBpZiAodHlwZW9mIHNpemUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHNpemUgPSBwYXJzZUludChzaXplLCAxMCk7XG4gICAgfVxuICAgIGxldCBzdHlsZSA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuc3R5bGUsIGZhbGxiYWNrLnN0eWxlKTtcbiAgICBpZiAoc3R5bGUgJiYgISgnJyArIHN0eWxlKS5tYXRjaChGT05UX1NUWUxFKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgZm9udCBzdHlsZSBzcGVjaWZpZWQ6IFwiJyArIHN0eWxlICsgJ1wiJyk7XG4gICAgICAgIHN0eWxlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBmb250ID0ge1xuICAgICAgICBmYW1pbHk6IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuZmFtaWx5LCBmYWxsYmFjay5mYW1pbHkpLFxuICAgICAgICBsaW5lSGVpZ2h0OiB0b0xpbmVIZWlnaHQodmFsdWVPckRlZmF1bHQob3B0aW9ucy5saW5lSGVpZ2h0LCBmYWxsYmFjay5saW5lSGVpZ2h0KSwgc2l6ZSksXG4gICAgICAgIHNpemUsXG4gICAgICAgIHN0eWxlLFxuICAgICAgICB3ZWlnaHQ6IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMud2VpZ2h0LCBmYWxsYmFjay53ZWlnaHQpLFxuICAgICAgICBzdHJpbmc6ICcnXG4gICAgfTtcbiAgICBmb250LnN0cmluZyA9IHRvRm9udFN0cmluZyhmb250KTtcbiAgICByZXR1cm4gZm9udDtcbn1cbi8qKlxuICogRXZhbHVhdGVzIHRoZSBnaXZlbiBgaW5wdXRzYCBzZXF1ZW50aWFsbHkgYW5kIHJldHVybnMgdGhlIGZpcnN0IGRlZmluZWQgdmFsdWUuXG4gKiBAcGFyYW0gaW5wdXRzIC0gQW4gYXJyYXkgb2YgdmFsdWVzLCBmYWxsaW5nIGJhY2sgdG8gdGhlIGxhc3QgdmFsdWUuXG4gKiBAcGFyYW0gY29udGV4dCAtIElmIGRlZmluZWQgYW5kIHRoZSBjdXJyZW50IHZhbHVlIGlzIGEgZnVuY3Rpb24sIHRoZSB2YWx1ZVxuICogaXMgY2FsbGVkIHdpdGggYGNvbnRleHRgIGFzIGZpcnN0IGFyZ3VtZW50IGFuZCB0aGUgcmVzdWx0IGJlY29tZXMgdGhlIG5ldyBpbnB1dC5cbiAqIEBwYXJhbSBpbmRleCAtIElmIGRlZmluZWQgYW5kIHRoZSBjdXJyZW50IHZhbHVlIGlzIGFuIGFycmF5LCB0aGUgdmFsdWVcbiAqIGF0IGBpbmRleGAgYmVjb21lIHRoZSBuZXcgaW5wdXQuXG4gKiBAcGFyYW0gaW5mbyAtIG9iamVjdCB0byByZXR1cm4gaW5mb3JtYXRpb24gYWJvdXQgcmVzb2x1dGlvbiBpblxuICogQHBhcmFtIGluZm8uY2FjaGVhYmxlIC0gV2lsbCBiZSBzZXQgdG8gYGZhbHNlYCBpZiBvcHRpb24gaXMgbm90IGNhY2hlYWJsZS5cbiAqIEBzaW5jZSAyLjcuMFxuICovIGZ1bmN0aW9uIHJlc29sdmUoaW5wdXRzLCBjb250ZXh0LCBpbmRleCwgaW5mbykge1xuICAgIGxldCBjYWNoZWFibGUgPSB0cnVlO1xuICAgIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBpbnB1dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgdmFsdWUgPSBpbnB1dHNbaV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZShjb250ZXh0KTtcbiAgICAgICAgICAgIGNhY2hlYWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlW2luZGV4ICUgdmFsdWUubGVuZ3RoXTtcbiAgICAgICAgICAgIGNhY2hlYWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoaW5mbyAmJiAhY2FjaGVhYmxlKSB7XG4gICAgICAgICAgICAgICAgaW5mby5jYWNoZWFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIG1pbm1heFxuICogQHBhcmFtIGdyYWNlXG4gKiBAcGFyYW0gYmVnaW5BdFplcm9cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2FkZEdyYWNlKG1pbm1heCwgZ3JhY2UsIGJlZ2luQXRaZXJvKSB7XG4gICAgY29uc3QgeyBtaW4gLCBtYXggIH0gPSBtaW5tYXg7XG4gICAgY29uc3QgY2hhbmdlID0gdG9EaW1lbnNpb24oZ3JhY2UsIChtYXggLSBtaW4pIC8gMik7XG4gICAgY29uc3Qga2VlcFplcm8gPSAodmFsdWUsIGFkZCk9PmJlZ2luQXRaZXJvICYmIHZhbHVlID09PSAwID8gMCA6IHZhbHVlICsgYWRkO1xuICAgIHJldHVybiB7XG4gICAgICAgIG1pbjoga2VlcFplcm8obWluLCAtTWF0aC5hYnMoY2hhbmdlKSksXG4gICAgICAgIG1heDoga2VlcFplcm8obWF4LCBjaGFuZ2UpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQocGFyZW50Q29udGV4dCwgY29udGV4dCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUocGFyZW50Q29udGV4dCksIGNvbnRleHQpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBQcm94eSBmb3IgcmVzb2x2aW5nIHJhdyB2YWx1ZXMgZm9yIG9wdGlvbnMuXG4gKiBAcGFyYW0gc2NvcGVzIC0gVGhlIG9wdGlvbiBzY29wZXMgdG8gbG9vayBmb3IgdmFsdWVzLCBpbiByZXNvbHV0aW9uIG9yZGVyXG4gKiBAcGFyYW0gcHJlZml4ZXMgLSBUaGUgcHJlZml4ZXMgZm9yIHZhbHVlcywgaW4gcmVzb2x1dGlvbiBvcmRlci5cbiAqIEBwYXJhbSByb290U2NvcGVzIC0gVGhlIHJvb3Qgb3B0aW9uIHNjb3Blc1xuICogQHBhcmFtIGZhbGxiYWNrIC0gUGFyZW50IHNjb3BlcyBmYWxsYmFja1xuICogQHBhcmFtIGdldFRhcmdldCAtIGNhbGxiYWNrIGZvciBnZXR0aW5nIHRoZSB0YXJnZXQgZm9yIGNoYW5nZWQgdmFsdWVzXG4gKiBAcmV0dXJucyBQcm94eVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBwcmVmaXhlcyA9IFtcbiAgICAnJ1xuXSwgcm9vdFNjb3BlcywgZmFsbGJhY2ssIGdldFRhcmdldCA9ICgpPT5zY29wZXNbMF0pIHtcbiAgICBjb25zdCBmaW5hbFJvb3RTY29wZXMgPSByb290U2NvcGVzIHx8IHNjb3BlcztcbiAgICBpZiAodHlwZW9mIGZhbGxiYWNrID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBmYWxsYmFjayA9IF9yZXNvbHZlKCdfZmFsbGJhY2snLCBzY29wZXMpO1xuICAgIH1cbiAgICBjb25zdCBjYWNoZSA9IHtcbiAgICAgICAgW1N5bWJvbC50b1N0cmluZ1RhZ106ICdPYmplY3QnLFxuICAgICAgICBfY2FjaGVhYmxlOiB0cnVlLFxuICAgICAgICBfc2NvcGVzOiBzY29wZXMsXG4gICAgICAgIF9yb290U2NvcGVzOiBmaW5hbFJvb3RTY29wZXMsXG4gICAgICAgIF9mYWxsYmFjazogZmFsbGJhY2ssXG4gICAgICAgIF9nZXRUYXJnZXQ6IGdldFRhcmdldCxcbiAgICAgICAgb3ZlcnJpZGU6IChzY29wZSk9Pl9jcmVhdGVSZXNvbHZlcihbXG4gICAgICAgICAgICAgICAgc2NvcGUsXG4gICAgICAgICAgICAgICAgLi4uc2NvcGVzXG4gICAgICAgICAgICBdLCBwcmVmaXhlcywgZmluYWxSb290U2NvcGVzLCBmYWxsYmFjaylcbiAgICB9O1xuICAgIHJldHVybiBuZXcgUHJveHkoY2FjaGUsIHtcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciB0aGUgZGVsZXRlIG9wZXJhdG9yLlxuICAgICAqLyBkZWxldGVQcm9wZXJ0eSAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0W3Byb3BdOyAvLyByZW1vdmUgZnJvbSBjYWNoZVxuICAgICAgICAgICAgZGVsZXRlIHRhcmdldC5fa2V5czsgLy8gcmVtb3ZlIGNhY2hlZCBrZXlzXG4gICAgICAgICAgICBkZWxldGUgc2NvcGVzWzBdW3Byb3BdOyAvLyByZW1vdmUgZnJvbSB0b3AgbGV2ZWwgc2NvcGVcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIGdldHRpbmcgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqLyBnZXQgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jYWNoZWQodGFyZ2V0LCBwcm9wLCAoKT0+X3Jlc29sdmVXaXRoUHJlZml4ZXMocHJvcCwgcHJlZml4ZXMsIHNjb3BlcywgdGFyZ2V0KSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvci5cbiAgICAgKiBBbHNvIHVzZWQgYnkgT2JqZWN0Lmhhc093blByb3BlcnR5LlxuICAgICAqLyBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldC5fc2NvcGVzWzBdLCBwcm9wKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YuXG4gICAgICovIGdldFByb3RvdHlwZU9mICgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHNjb3Blc1swXSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgdGhlIGluIG9wZXJhdG9yLlxuICAgICAqLyBoYXMgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEtleXNGcm9tQWxsU2NvcGVzKHRhcmdldCkuaW5jbHVkZXMocHJvcCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgYW5kIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMuXG4gICAgICovIG93bktleXMgKHRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEtleXNGcm9tQWxsU2NvcGVzKHRhcmdldCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3Igc2V0dGluZyBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICovIHNldCAodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3Qgc3RvcmFnZSA9IHRhcmdldC5fc3RvcmFnZSB8fCAodGFyZ2V0Ll9zdG9yYWdlID0gZ2V0VGFyZ2V0KCkpO1xuICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gc3RvcmFnZVtwcm9wXSA9IHZhbHVlOyAvLyBzZXQgdG8gdG9wIGxldmVsIHNjb3BlICsgY2FjaGVcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXQuX2tleXM7IC8vIHJlbW92ZSBjYWNoZWQga2V5c1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBQcm94eSBmb3IgcmVzb2x2aW5nIG9wdGlvbiB2YWx1ZXMgd2l0aCBjb250ZXh0LlxuICogQHBhcmFtIHByb3h5IC0gVGhlIFByb3h5IHJldHVybmVkIGJ5IGBfY3JlYXRlUmVzb2x2ZXJgXG4gKiBAcGFyYW0gY29udGV4dCAtIENvbnRleHQgb2JqZWN0IGZvciBzY3JpcHRhYmxlL2luZGV4YWJsZSBvcHRpb25zXG4gKiBAcGFyYW0gc3ViUHJveHkgLSBUaGUgcHJveHkgcHJvdmlkZWQgZm9yIHNjcmlwdGFibGUgb3B0aW9uc1xuICogQHBhcmFtIGRlc2NyaXB0b3JEZWZhdWx0cyAtIERlZmF1bHRzIGZvciBkZXNjcmlwdG9yc1xuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYXR0YWNoQ29udGV4dChwcm94eSwgY29udGV4dCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cykge1xuICAgIGNvbnN0IGNhY2hlID0ge1xuICAgICAgICBfY2FjaGVhYmxlOiBmYWxzZSxcbiAgICAgICAgX3Byb3h5OiBwcm94eSxcbiAgICAgICAgX2NvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgIF9zdWJQcm94eTogc3ViUHJveHksXG4gICAgICAgIF9zdGFjazogbmV3IFNldCgpLFxuICAgICAgICBfZGVzY3JpcHRvcnM6IF9kZXNjcmlwdG9ycyhwcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKSxcbiAgICAgICAgc2V0Q29udGV4dDogKGN0eCk9Pl9hdHRhY2hDb250ZXh0KHByb3h5LCBjdHgsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpLFxuICAgICAgICBvdmVycmlkZTogKHNjb3BlKT0+X2F0dGFjaENvbnRleHQocHJveHkub3ZlcnJpZGUoc2NvcGUpLCBjb250ZXh0LCBzdWJQcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKVxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIHRoZSBkZWxldGUgb3BlcmF0b3IuXG4gICAgICovIGRlbGV0ZVByb3BlcnR5ICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07IC8vIHJlbW92ZSBmcm9tIGNhY2hlXG4gICAgICAgICAgICBkZWxldGUgcHJveHlbcHJvcF07IC8vIHJlbW92ZSBmcm9tIHByb3h5XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBnZXR0aW5nIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKi8gZ2V0ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NhY2hlZCh0YXJnZXQsIHByb3AsICgpPT5fcmVzb2x2ZVdpdGhDb250ZXh0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLlxuICAgICAqIEFsc28gdXNlZCBieSBPYmplY3QuaGFzT3duUHJvcGVydHkuXG4gICAgICovIGdldE93blByb3BlcnR5RGVzY3JpcHRvciAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0Ll9kZXNjcmlwdG9ycy5hbGxLZXlzID8gUmVmbGVjdC5oYXMocHJveHksIHByb3ApID8ge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9IDogdW5kZWZpbmVkIDogUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJveHksIHByb3ApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZi5cbiAgICAgKi8gZ2V0UHJvdG90eXBlT2YgKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YocHJveHkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIHRoZSBpbiBvcGVyYXRvci5cbiAgICAgKi8gaGFzICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyhwcm94eSwgcHJvcCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgYW5kIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMuXG4gICAgICovIG93bktleXMgKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyhwcm94eSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3Igc2V0dGluZyBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICovIHNldCAodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgICAgcHJveHlbcHJvcF0gPSB2YWx1ZTsgLy8gc2V0IHRvIHByb3h5XG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0W3Byb3BdOyAvLyByZW1vdmUgZnJvbSBjYWNoZVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfZGVzY3JpcHRvcnMocHJveHksIGRlZmF1bHRzID0ge1xuICAgIHNjcmlwdGFibGU6IHRydWUsXG4gICAgaW5kZXhhYmxlOiB0cnVlXG59KSB7XG4gICAgY29uc3QgeyBfc2NyaXB0YWJsZSA9ZGVmYXVsdHMuc2NyaXB0YWJsZSAsIF9pbmRleGFibGUgPWRlZmF1bHRzLmluZGV4YWJsZSAsIF9hbGxLZXlzID1kZWZhdWx0cy5hbGxLZXlzICB9ID0gcHJveHk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWxsS2V5czogX2FsbEtleXMsXG4gICAgICAgIHNjcmlwdGFibGU6IF9zY3JpcHRhYmxlLFxuICAgICAgICBpbmRleGFibGU6IF9pbmRleGFibGUsXG4gICAgICAgIGlzU2NyaXB0YWJsZTogaXNGdW5jdGlvbihfc2NyaXB0YWJsZSkgPyBfc2NyaXB0YWJsZSA6ICgpPT5fc2NyaXB0YWJsZSxcbiAgICAgICAgaXNJbmRleGFibGU6IGlzRnVuY3Rpb24oX2luZGV4YWJsZSkgPyBfaW5kZXhhYmxlIDogKCk9Pl9pbmRleGFibGVcbiAgICB9O1xufVxuY29uc3QgcmVhZEtleSA9IChwcmVmaXgsIG5hbWUpPT5wcmVmaXggPyBwcmVmaXggKyBfY2FwaXRhbGl6ZShuYW1lKSA6IG5hbWU7XG5jb25zdCBuZWVkc1N1YlJlc29sdmVyID0gKHByb3AsIHZhbHVlKT0+aXNPYmplY3QodmFsdWUpICYmIHByb3AgIT09ICdhZGFwdGVycycgJiYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSkgPT09IG51bGwgfHwgdmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdCk7XG5mdW5jdGlvbiBfY2FjaGVkKHRhcmdldCwgcHJvcCwgcmVzb2x2ZSkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBwcm9wKSkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHJlc29sdmUoKTtcbiAgICAvLyBjYWNoZSB0aGUgcmVzb2x2ZWQgdmFsdWVcbiAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZVdpdGhDb250ZXh0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICBjb25zdCB7IF9wcm94eSAsIF9jb250ZXh0ICwgX3N1YlByb3h5ICwgX2Rlc2NyaXB0b3JzOiBkZXNjcmlwdG9ycyAgfSA9IHRhcmdldDtcbiAgICBsZXQgdmFsdWUgPSBfcHJveHlbcHJvcF07IC8vIHJlc29sdmUgZnJvbSBwcm94eVxuICAgIC8vIHJlc29sdmUgd2l0aCBjb250ZXh0XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpICYmIGRlc2NyaXB0b3JzLmlzU2NyaXB0YWJsZShwcm9wKSkge1xuICAgICAgICB2YWx1ZSA9IF9yZXNvbHZlU2NyaXB0YWJsZShwcm9wLCB2YWx1ZSwgdGFyZ2V0LCByZWNlaXZlcik7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgdmFsdWUgPSBfcmVzb2x2ZUFycmF5KHByb3AsIHZhbHVlLCB0YXJnZXQsIGRlc2NyaXB0b3JzLmlzSW5kZXhhYmxlKTtcbiAgICB9XG4gICAgaWYgKG5lZWRzU3ViUmVzb2x2ZXIocHJvcCwgdmFsdWUpKSB7XG4gICAgICAgIC8vIGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhbiBvYmplY3QsIGNyZWF0ZSBhIHN1YiByZXNvbHZlciBmb3IgaXRcbiAgICAgICAgdmFsdWUgPSBfYXR0YWNoQ29udGV4dCh2YWx1ZSwgX2NvbnRleHQsIF9zdWJQcm94eSAmJiBfc3ViUHJveHlbcHJvcF0sIGRlc2NyaXB0b3JzKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVTY3JpcHRhYmxlKHByb3AsIGdldFZhbHVlLCB0YXJnZXQsIHJlY2VpdmVyKSB7XG4gICAgY29uc3QgeyBfcHJveHkgLCBfY29udGV4dCAsIF9zdWJQcm94eSAsIF9zdGFjayAgfSA9IHRhcmdldDtcbiAgICBpZiAoX3N0YWNrLmhhcyhwcm9wKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlY3Vyc2lvbiBkZXRlY3RlZDogJyArIEFycmF5LmZyb20oX3N0YWNrKS5qb2luKCctPicpICsgJy0+JyArIHByb3ApO1xuICAgIH1cbiAgICBfc3RhY2suYWRkKHByb3ApO1xuICAgIGxldCB2YWx1ZSA9IGdldFZhbHVlKF9jb250ZXh0LCBfc3ViUHJveHkgfHwgcmVjZWl2ZXIpO1xuICAgIF9zdGFjay5kZWxldGUocHJvcCk7XG4gICAgaWYgKG5lZWRzU3ViUmVzb2x2ZXIocHJvcCwgdmFsdWUpKSB7XG4gICAgICAgIC8vIFdoZW4gc2NyaXB0YWJsZSBvcHRpb24gcmV0dXJucyBhbiBvYmplY3QsIGNyZWF0ZSBhIHJlc29sdmVyIG9uIHRoYXQuXG4gICAgICAgIHZhbHVlID0gY3JlYXRlU3ViUmVzb2x2ZXIoX3Byb3h5Ll9zY29wZXMsIF9wcm94eSwgcHJvcCwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZUFycmF5KHByb3AsIHZhbHVlLCB0YXJnZXQsIGlzSW5kZXhhYmxlKSB7XG4gICAgY29uc3QgeyBfcHJveHkgLCBfY29udGV4dCAsIF9zdWJQcm94eSAsIF9kZXNjcmlwdG9yczogZGVzY3JpcHRvcnMgIH0gPSB0YXJnZXQ7XG4gICAgaWYgKHR5cGVvZiBfY29udGV4dC5pbmRleCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNJbmRleGFibGUocHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlW19jb250ZXh0LmluZGV4ICUgdmFsdWUubGVuZ3RoXTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlWzBdKSkge1xuICAgICAgICAvLyBBcnJheSBvZiBvYmplY3RzLCByZXR1cm4gYXJyYXkgb3IgcmVzb2x2ZXJzXG4gICAgICAgIGNvbnN0IGFyciA9IHZhbHVlO1xuICAgICAgICBjb25zdCBzY29wZXMgPSBfcHJveHkuX3Njb3Blcy5maWx0ZXIoKHMpPT5zICE9PSBhcnIpO1xuICAgICAgICB2YWx1ZSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyKXtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVyID0gY3JlYXRlU3ViUmVzb2x2ZXIoc2NvcGVzLCBfcHJveHksIHByb3AsIGl0ZW0pO1xuICAgICAgICAgICAgdmFsdWUucHVzaChfYXR0YWNoQ29udGV4dChyZXNvbHZlciwgX2NvbnRleHQsIF9zdWJQcm94eSAmJiBfc3ViUHJveHlbcHJvcF0sIGRlc2NyaXB0b3JzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUZhbGxiYWNrKGZhbGxiYWNrLCBwcm9wLCB2YWx1ZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGZhbGxiYWNrKSA/IGZhbGxiYWNrKHByb3AsIHZhbHVlKSA6IGZhbGxiYWNrO1xufVxuY29uc3QgZ2V0U2NvcGUgPSAoa2V5LCBwYXJlbnQpPT5rZXkgPT09IHRydWUgPyBwYXJlbnQgOiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyA/IHJlc29sdmVPYmplY3RLZXkocGFyZW50LCBrZXkpIDogdW5kZWZpbmVkO1xuZnVuY3Rpb24gYWRkU2NvcGVzKHNldCwgcGFyZW50U2NvcGVzLCBrZXksIHBhcmVudEZhbGxiYWNrLCB2YWx1ZSkge1xuICAgIGZvciAoY29uc3QgcGFyZW50IG9mIHBhcmVudFNjb3Blcyl7XG4gICAgICAgIGNvbnN0IHNjb3BlID0gZ2V0U2NvcGUoa2V5LCBwYXJlbnQpO1xuICAgICAgICBpZiAoc2NvcGUpIHtcbiAgICAgICAgICAgIHNldC5hZGQoc2NvcGUpO1xuICAgICAgICAgICAgY29uc3QgZmFsbGJhY2sgPSByZXNvbHZlRmFsbGJhY2soc2NvcGUuX2ZhbGxiYWNrLCBrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmFsbGJhY2sgIT09ICd1bmRlZmluZWQnICYmIGZhbGxiYWNrICE9PSBrZXkgJiYgZmFsbGJhY2sgIT09IHBhcmVudEZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiB3ZSByZWFjaCB0aGUgZGVzY3JpcHRvciB0aGF0IGRlZmluZXMgYSBuZXcgX2ZhbGxiYWNrLCByZXR1cm4gdGhhdC5cbiAgICAgICAgICAgICAgICAvLyBUaGUgZmFsbGJhY2sgd2lsbCByZXN1bWUgdG8gdGhhdCBuZXcgc2NvcGUuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNjb3BlID09PSBmYWxzZSAmJiB0eXBlb2YgcGFyZW50RmFsbGJhY2sgIT09ICd1bmRlZmluZWQnICYmIGtleSAhPT0gcGFyZW50RmFsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIGBmYWxzZWAgcmVzdWx0cyB0byBgZmFsc2VgLCB3aGVuIGZhbGxpbmcgYmFjayB0byBkaWZmZXJlbnQga2V5LlxuICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGUgYGludGVyYWN0aW9uYCBmcm9tIGBob3ZlcmAgb3IgYHBsdWdpbnMudG9vbHRpcGAgYW5kIGBhbmltYXRpb25gIGZyb20gYGFuaW1hdGlvbnNgXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjcmVhdGVTdWJSZXNvbHZlcihwYXJlbnRTY29wZXMsIHJlc29sdmVyLCBwcm9wLCB2YWx1ZSkge1xuICAgIGNvbnN0IHJvb3RTY29wZXMgPSByZXNvbHZlci5fcm9vdFNjb3BlcztcbiAgICBjb25zdCBmYWxsYmFjayA9IHJlc29sdmVGYWxsYmFjayhyZXNvbHZlci5fZmFsbGJhY2ssIHByb3AsIHZhbHVlKTtcbiAgICBjb25zdCBhbGxTY29wZXMgPSBbXG4gICAgICAgIC4uLnBhcmVudFNjb3BlcyxcbiAgICAgICAgLi4ucm9vdFNjb3Blc1xuICAgIF07XG4gICAgY29uc3Qgc2V0ID0gbmV3IFNldCgpO1xuICAgIHNldC5hZGQodmFsdWUpO1xuICAgIGxldCBrZXkgPSBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBwcm9wLCBmYWxsYmFjayB8fCBwcm9wLCB2YWx1ZSk7XG4gICAgaWYgKGtleSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZmFsbGJhY2sgIT09ICd1bmRlZmluZWQnICYmIGZhbGxiYWNrICE9PSBwcm9wKSB7XG4gICAgICAgIGtleSA9IGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIGZhbGxiYWNrLCBrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGtleSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfY3JlYXRlUmVzb2x2ZXIoQXJyYXkuZnJvbShzZXQpLCBbXG4gICAgICAgICcnXG4gICAgXSwgcm9vdFNjb3BlcywgZmFsbGJhY2ssICgpPT5zdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSk7XG59XG5mdW5jdGlvbiBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBrZXksIGZhbGxiYWNrLCBpdGVtKSB7XG4gICAgd2hpbGUoa2V5KXtcbiAgICAgICAga2V5ID0gYWRkU2NvcGVzKHNldCwgYWxsU2NvcGVzLCBrZXksIGZhbGxiYWNrLCBpdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbn1cbmZ1bmN0aW9uIHN1YkdldFRhcmdldChyZXNvbHZlciwgcHJvcCwgdmFsdWUpIHtcbiAgICBjb25zdCBwYXJlbnQgPSByZXNvbHZlci5fZ2V0VGFyZ2V0KCk7XG4gICAgaWYgKCEocHJvcCBpbiBwYXJlbnQpKSB7XG4gICAgICAgIHBhcmVudFtwcm9wXSA9IHt9O1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXQgPSBwYXJlbnRbcHJvcF07XG4gICAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiBpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgLy8gRm9yIGFycmF5IG9mIG9iamVjdHMsIHRoZSBvYmplY3QgaXMgdXNlZCB0byBzdG9yZSB1cGRhdGVkIHZhbHVlc1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQgfHwge307XG59XG5mdW5jdGlvbiBfcmVzb2x2ZVdpdGhQcmVmaXhlcyhwcm9wLCBwcmVmaXhlcywgc2NvcGVzLCBwcm94eSkge1xuICAgIGxldCB2YWx1ZTtcbiAgICBmb3IgKGNvbnN0IHByZWZpeCBvZiBwcmVmaXhlcyl7XG4gICAgICAgIHZhbHVlID0gX3Jlc29sdmUocmVhZEtleShwcmVmaXgsIHByb3ApLCBzY29wZXMpO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIG5lZWRzU3ViUmVzb2x2ZXIocHJvcCwgdmFsdWUpID8gY3JlYXRlU3ViUmVzb2x2ZXIoc2NvcGVzLCBwcm94eSwgcHJvcCwgdmFsdWUpIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBfcmVzb2x2ZShrZXksIHNjb3Blcykge1xuICAgIGZvciAoY29uc3Qgc2NvcGUgb2Ygc2NvcGVzKXtcbiAgICAgICAgaWYgKCFzY29wZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSBzY29wZVtrZXldO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0S2V5c0Zyb21BbGxTY29wZXModGFyZ2V0KSB7XG4gICAgbGV0IGtleXMgPSB0YXJnZXQuX2tleXM7XG4gICAgaWYgKCFrZXlzKSB7XG4gICAgICAgIGtleXMgPSB0YXJnZXQuX2tleXMgPSByZXNvbHZlS2V5c0Zyb21BbGxTY29wZXModGFyZ2V0Ll9zY29wZXMpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIHJlc29sdmVLZXlzRnJvbUFsbFNjb3BlcyhzY29wZXMpIHtcbiAgICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gICAgZm9yIChjb25zdCBzY29wZSBvZiBzY29wZXMpe1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhzY29wZSkuZmlsdGVyKChrKT0+IWsuc3RhcnRzV2l0aCgnXycpKSl7XG4gICAgICAgICAgICBzZXQuYWRkKGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmZyb20oc2V0KTtcbn1cbmZ1bmN0aW9uIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCB7IGlTY2FsZSAgfSA9IG1ldGE7XG4gICAgY29uc3QgeyBrZXkgPSdyJyAgfSA9IHRoaXMuX3BhcnNpbmc7XG4gICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBsZXQgaSwgaWxlbiwgaW5kZXgsIGl0ZW07XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgICAgaXRlbSA9IGRhdGFbaW5kZXhdO1xuICAgICAgICBwYXJzZWRbaV0gPSB7XG4gICAgICAgICAgICByOiBpU2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCBrZXkpLCBpbmRleClcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cblxuY29uc3QgRVBTSUxPTiA9IE51bWJlci5FUFNJTE9OIHx8IDFlLTE0O1xuY29uc3QgZ2V0UG9pbnQgPSAocG9pbnRzLCBpKT0+aSA8IHBvaW50cy5sZW5ndGggJiYgIXBvaW50c1tpXS5za2lwICYmIHBvaW50c1tpXTtcbmNvbnN0IGdldFZhbHVlQXhpcyA9IChpbmRleEF4aXMpPT5pbmRleEF4aXMgPT09ICd4JyA/ICd5JyA6ICd4JztcbmZ1bmN0aW9uIHNwbGluZUN1cnZlKGZpcnN0UG9pbnQsIG1pZGRsZVBvaW50LCBhZnRlclBvaW50LCB0KSB7XG4gICAgLy8gUHJvcHMgdG8gUm9iIFNwZW5jZXIgYXQgc2NhbGVkIGlubm92YXRpb24gZm9yIGhpcyBwb3N0IG9uIHNwbGluaW5nIGJldHdlZW4gcG9pbnRzXG4gICAgLy8gaHR0cDovL3NjYWxlZGlubm92YXRpb24uY29tL2FuYWx5dGljcy9zcGxpbmVzL2Fib3V0U3BsaW5lcy5odG1sXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBtdXN0IGFsc28gcmVzcGVjdCBcInNraXBwZWRcIiBwb2ludHNcbiAgICBjb25zdCBwcmV2aW91cyA9IGZpcnN0UG9pbnQuc2tpcCA/IG1pZGRsZVBvaW50IDogZmlyc3RQb2ludDtcbiAgICBjb25zdCBjdXJyZW50ID0gbWlkZGxlUG9pbnQ7XG4gICAgY29uc3QgbmV4dCA9IGFmdGVyUG9pbnQuc2tpcCA/IG1pZGRsZVBvaW50IDogYWZ0ZXJQb2ludDtcbiAgICBjb25zdCBkMDEgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMoY3VycmVudCwgcHJldmlvdXMpO1xuICAgIGNvbnN0IGQxMiA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhuZXh0LCBjdXJyZW50KTtcbiAgICBsZXQgczAxID0gZDAxIC8gKGQwMSArIGQxMik7XG4gICAgbGV0IHMxMiA9IGQxMiAvIChkMDEgKyBkMTIpO1xuICAgIC8vIElmIGFsbCBwb2ludHMgYXJlIHRoZSBzYW1lLCBzMDEgJiBzMDIgd2lsbCBiZSBpbmZcbiAgICBzMDEgPSBpc05hTihzMDEpID8gMCA6IHMwMTtcbiAgICBzMTIgPSBpc05hTihzMTIpID8gMCA6IHMxMjtcbiAgICBjb25zdCBmYSA9IHQgKiBzMDE7IC8vIHNjYWxpbmcgZmFjdG9yIGZvciB0cmlhbmdsZSBUYVxuICAgIGNvbnN0IGZiID0gdCAqIHMxMjtcbiAgICByZXR1cm4ge1xuICAgICAgICBwcmV2aW91czoge1xuICAgICAgICAgICAgeDogY3VycmVudC54IC0gZmEgKiAobmV4dC54IC0gcHJldmlvdXMueCksXG4gICAgICAgICAgICB5OiBjdXJyZW50LnkgLSBmYSAqIChuZXh0LnkgLSBwcmV2aW91cy55KVxuICAgICAgICB9LFxuICAgICAgICBuZXh0OiB7XG4gICAgICAgICAgICB4OiBjdXJyZW50LnggKyBmYiAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcbiAgICAgICAgICAgIHk6IGN1cnJlbnQueSArIGZiICogKG5leHQueSAtIHByZXZpb3VzLnkpXG4gICAgICAgIH1cbiAgICB9O1xufVxuLyoqXG4gKiBBZGp1c3QgdGFuZ2VudHMgdG8gZW5zdXJlIG1vbm90b25pYyBwcm9wZXJ0aWVzXG4gKi8gZnVuY3Rpb24gbW9ub3RvbmVBZGp1c3QocG9pbnRzLCBkZWx0YUssIG1LKSB7XG4gICAgY29uc3QgcG9pbnRzTGVuID0gcG9pbnRzLmxlbmd0aDtcbiAgICBsZXQgYWxwaGFLLCBiZXRhSywgdGF1Sywgc3F1YXJlZE1hZ25pdHVkZSwgcG9pbnRDdXJyZW50O1xuICAgIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgcG9pbnRzTGVuIC0gMTsgKytpKXtcbiAgICAgICAgcG9pbnRDdXJyZW50ID0gcG9pbnRBZnRlcjtcbiAgICAgICAgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgaSArIDEpO1xuICAgICAgICBpZiAoIXBvaW50Q3VycmVudCB8fCAhcG9pbnRBZnRlcikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFsbW9zdEVxdWFscyhkZWx0YUtbaV0sIDAsIEVQU0lMT04pKSB7XG4gICAgICAgICAgICBtS1tpXSA9IG1LW2kgKyAxXSA9IDA7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBhbHBoYUsgPSBtS1tpXSAvIGRlbHRhS1tpXTtcbiAgICAgICAgYmV0YUsgPSBtS1tpICsgMV0gLyBkZWx0YUtbaV07XG4gICAgICAgIHNxdWFyZWRNYWduaXR1ZGUgPSBNYXRoLnBvdyhhbHBoYUssIDIpICsgTWF0aC5wb3coYmV0YUssIDIpO1xuICAgICAgICBpZiAoc3F1YXJlZE1hZ25pdHVkZSA8PSA5KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0YXVLID0gMyAvIE1hdGguc3FydChzcXVhcmVkTWFnbml0dWRlKTtcbiAgICAgICAgbUtbaV0gPSBhbHBoYUsgKiB0YXVLICogZGVsdGFLW2ldO1xuICAgICAgICBtS1tpICsgMV0gPSBiZXRhSyAqIHRhdUsgKiBkZWx0YUtbaV07XG4gICAgfVxufVxuZnVuY3Rpb24gbW9ub3RvbmVDb21wdXRlKHBvaW50cywgbUssIGluZGV4QXhpcyA9ICd4Jykge1xuICAgIGNvbnN0IHZhbHVlQXhpcyA9IGdldFZhbHVlQXhpcyhpbmRleEF4aXMpO1xuICAgIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IGRlbHRhLCBwb2ludEJlZm9yZSwgcG9pbnRDdXJyZW50O1xuICAgIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgcG9pbnRzTGVuOyArK2kpe1xuICAgICAgICBwb2ludEJlZm9yZSA9IHBvaW50Q3VycmVudDtcbiAgICAgICAgcG9pbnRDdXJyZW50ID0gcG9pbnRBZnRlcjtcbiAgICAgICAgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgaSArIDEpO1xuICAgICAgICBpZiAoIXBvaW50Q3VycmVudCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaVBpeGVsID0gcG9pbnRDdXJyZW50W2luZGV4QXhpc107XG4gICAgICAgIGNvbnN0IHZQaXhlbCA9IHBvaW50Q3VycmVudFt2YWx1ZUF4aXNdO1xuICAgICAgICBpZiAocG9pbnRCZWZvcmUpIHtcbiAgICAgICAgICAgIGRlbHRhID0gKGlQaXhlbCAtIHBvaW50QmVmb3JlW2luZGV4QXhpc10pIC8gMztcbiAgICAgICAgICAgIHBvaW50Q3VycmVudFtgY3AxJHtpbmRleEF4aXN9YF0gPSBpUGl4ZWwgLSBkZWx0YTtcbiAgICAgICAgICAgIHBvaW50Q3VycmVudFtgY3AxJHt2YWx1ZUF4aXN9YF0gPSB2UGl4ZWwgLSBkZWx0YSAqIG1LW2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb2ludEFmdGVyKSB7XG4gICAgICAgICAgICBkZWx0YSA9IChwb2ludEFmdGVyW2luZGV4QXhpc10gLSBpUGl4ZWwpIC8gMztcbiAgICAgICAgICAgIHBvaW50Q3VycmVudFtgY3AyJHtpbmRleEF4aXN9YF0gPSBpUGl4ZWwgKyBkZWx0YTtcbiAgICAgICAgICAgIHBvaW50Q3VycmVudFtgY3AyJHt2YWx1ZUF4aXN9YF0gPSB2UGl4ZWwgKyBkZWx0YSAqIG1LW2ldO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgQsOpemllciBjb250cm9sIHBvaW50cyBpbiBhIHNpbWlsYXIgd2F5IHRoYW4gfHNwbGluZUN1cnZlfCxcbiAqIGJ1dCBwcmVzZXJ2ZXMgbW9ub3RvbmljaXR5IG9mIHRoZSBwcm92aWRlZCBkYXRhIGFuZCBlbnN1cmVzIG5vIGxvY2FsIGV4dHJlbXVtcyBhcmUgYWRkZWRcbiAqIGJldHdlZW4gdGhlIGRhdGFzZXQgZGlzY3JldGUgcG9pbnRzIGR1ZSB0byB0aGUgaW50ZXJwb2xhdGlvbi5cbiAqIFNlZSA6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01vbm90b25lX2N1YmljX2ludGVycG9sYXRpb25cbiAqLyBmdW5jdGlvbiBzcGxpbmVDdXJ2ZU1vbm90b25lKHBvaW50cywgaW5kZXhBeGlzID0gJ3gnKSB7XG4gICAgY29uc3QgdmFsdWVBeGlzID0gZ2V0VmFsdWVBeGlzKGluZGV4QXhpcyk7XG4gICAgY29uc3QgcG9pbnRzTGVuID0gcG9pbnRzLmxlbmd0aDtcbiAgICBjb25zdCBkZWx0YUsgPSBBcnJheShwb2ludHNMZW4pLmZpbGwoMCk7XG4gICAgY29uc3QgbUsgPSBBcnJheShwb2ludHNMZW4pO1xuICAgIC8vIENhbGN1bGF0ZSBzbG9wZXMgKGRlbHRhSykgYW5kIGluaXRpYWxpemUgdGFuZ2VudHMgKG1LKVxuICAgIGxldCBpLCBwb2ludEJlZm9yZSwgcG9pbnRDdXJyZW50O1xuICAgIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgICBmb3IoaSA9IDA7IGkgPCBwb2ludHNMZW47ICsraSl7XG4gICAgICAgIHBvaW50QmVmb3JlID0gcG9pbnRDdXJyZW50O1xuICAgICAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgICAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgICAgIGlmICghcG9pbnRDdXJyZW50KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9pbnRBZnRlcikge1xuICAgICAgICAgICAgY29uc3Qgc2xvcGVEZWx0YSA9IHBvaW50QWZ0ZXJbaW5kZXhBeGlzXSAtIHBvaW50Q3VycmVudFtpbmRleEF4aXNdO1xuICAgICAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgdHdvIHBvaW50cyB0aGF0IGFwcGVhciBhdCB0aGUgc2FtZSB4IHBpeGVsLCBzbG9wZURlbHRhWCBpcyAwXG4gICAgICAgICAgICBkZWx0YUtbaV0gPSBzbG9wZURlbHRhICE9PSAwID8gKHBvaW50QWZ0ZXJbdmFsdWVBeGlzXSAtIHBvaW50Q3VycmVudFt2YWx1ZUF4aXNdKSAvIHNsb3BlRGVsdGEgOiAwO1xuICAgICAgICB9XG4gICAgICAgIG1LW2ldID0gIXBvaW50QmVmb3JlID8gZGVsdGFLW2ldIDogIXBvaW50QWZ0ZXIgPyBkZWx0YUtbaSAtIDFdIDogc2lnbihkZWx0YUtbaSAtIDFdKSAhPT0gc2lnbihkZWx0YUtbaV0pID8gMCA6IChkZWx0YUtbaSAtIDFdICsgZGVsdGFLW2ldKSAvIDI7XG4gICAgfVxuICAgIG1vbm90b25lQWRqdXN0KHBvaW50cywgZGVsdGFLLCBtSyk7XG4gICAgbW9ub3RvbmVDb21wdXRlKHBvaW50cywgbUssIGluZGV4QXhpcyk7XG59XG5mdW5jdGlvbiBjYXBDb250cm9sUG9pbnQocHQsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKHB0LCBtYXgpLCBtaW4pO1xufVxuZnVuY3Rpb24gY2FwQmV6aWVyUG9pbnRzKHBvaW50cywgYXJlYSkge1xuICAgIGxldCBpLCBpbGVuLCBwb2ludCwgaW5BcmVhLCBpbkFyZWFQcmV2O1xuICAgIGxldCBpbkFyZWFOZXh0ID0gX2lzUG9pbnRJbkFyZWEocG9pbnRzWzBdLCBhcmVhKTtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgaW5BcmVhUHJldiA9IGluQXJlYTtcbiAgICAgICAgaW5BcmVhID0gaW5BcmVhTmV4dDtcbiAgICAgICAgaW5BcmVhTmV4dCA9IGkgPCBpbGVuIC0gMSAmJiBfaXNQb2ludEluQXJlYShwb2ludHNbaSArIDFdLCBhcmVhKTtcbiAgICAgICAgaWYgKCFpbkFyZWEpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgICBpZiAoaW5BcmVhUHJldikge1xuICAgICAgICAgICAgcG9pbnQuY3AxeCA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDF4LCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuICAgICAgICAgICAgcG9pbnQuY3AxeSA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDF5LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbkFyZWFOZXh0KSB7XG4gICAgICAgICAgICBwb2ludC5jcDJ4ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMngsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG4gICAgICAgICAgICBwb2ludC5jcDJ5ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMnksIGFyZWEudG9wLCBhcmVhLmJvdHRvbSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMocG9pbnRzLCBvcHRpb25zLCBhcmVhLCBsb29wLCBpbmRleEF4aXMpIHtcbiAgICBsZXQgaSwgaWxlbiwgcG9pbnQsIGNvbnRyb2xQb2ludHM7XG4gICAgLy8gT25seSBjb25zaWRlciBwb2ludHMgdGhhdCBhcmUgZHJhd24gaW4gY2FzZSB0aGUgc3BhbkdhcHMgb3B0aW9uIGlzIHVzZWRcbiAgICBpZiAob3B0aW9ucy5zcGFuR2Fwcykge1xuICAgICAgICBwb2ludHMgPSBwb2ludHMuZmlsdGVyKChwdCk9PiFwdC5za2lwKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgICAgICBzcGxpbmVDdXJ2ZU1vbm90b25lKHBvaW50cywgaW5kZXhBeGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJldiA9IGxvb3AgPyBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdIDogcG9pbnRzWzBdO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgY29udHJvbFBvaW50cyA9IHNwbGluZUN1cnZlKHByZXYsIHBvaW50LCBwb2ludHNbTWF0aC5taW4oaSArIDEsIGlsZW4gLSAobG9vcCA/IDAgOiAxKSkgJSBpbGVuXSwgb3B0aW9ucy50ZW5zaW9uKTtcbiAgICAgICAgICAgIHBvaW50LmNwMXggPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLng7XG4gICAgICAgICAgICBwb2ludC5jcDF5ID0gY29udHJvbFBvaW50cy5wcmV2aW91cy55O1xuICAgICAgICAgICAgcG9pbnQuY3AyeCA9IGNvbnRyb2xQb2ludHMubmV4dC54O1xuICAgICAgICAgICAgcG9pbnQuY3AyeSA9IGNvbnRyb2xQb2ludHMubmV4dC55O1xuICAgICAgICAgICAgcHJldiA9IHBvaW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmNhcEJlemllclBvaW50cykge1xuICAgICAgICBjYXBCZXppZXJQb2ludHMocG9pbnRzLCBhcmVhKTtcbiAgICB9XG59XG5cbi8qKlxuICogTm90ZTogdHlwZWRlZnMgYXJlIGF1dG8tZXhwb3J0ZWQsIHNvIHVzZSBhIG1hZGUtdXAgYGRvbWAgbmFtZXNwYWNlIHdoZXJlXG4gKiBuZWNlc3NhcnkgdG8gYXZvaWQgZHVwbGljYXRlcyB3aXRoIGBleHBvcnQgKiBmcm9tICcuL2hlbHBlcnNgOyBzZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvNDYwMTFcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi9jb3JlL2NvcmUuY29udHJvbGxlci5qcycpLmRlZmF1bHQgfSBkb20uQ2hhcnRcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi8uLi90eXBlcycpLkNoYXJ0RXZlbnQgfSBDaGFydEV2ZW50XG4gKi8gLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9pc0RvbVN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfZ2V0UGFyZW50Tm9kZShkb21Ob2RlKSB7XG4gICAgbGV0IHBhcmVudCA9IGRvbU5vZGUucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50ICYmIHBhcmVudC50b1N0cmluZygpID09PSAnW29iamVjdCBTaGFkb3dSb290XScpIHtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50Lmhvc3Q7XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnQ7XG59XG4vKipcbiAqIGNvbnZlcnQgbWF4LXdpZHRoL21heC1oZWlnaHQgdmFsdWVzIHRoYXQgbWF5IGJlIHBlcmNlbnRhZ2VzIGludG8gYSBudW1iZXJcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gcGFyc2VNYXhTdHlsZShzdHlsZVZhbHVlLCBub2RlLCBwYXJlbnRQcm9wZXJ0eSkge1xuICAgIGxldCB2YWx1ZUluUGl4ZWxzO1xuICAgIGlmICh0eXBlb2Ygc3R5bGVWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFsdWVJblBpeGVscyA9IHBhcnNlSW50KHN0eWxlVmFsdWUsIDEwKTtcbiAgICAgICAgaWYgKHN0eWxlVmFsdWUuaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gcGVyY2VudGFnZSAqIHNpemUgaW4gZGltZW5zaW9uXG4gICAgICAgICAgICB2YWx1ZUluUGl4ZWxzID0gdmFsdWVJblBpeGVscyAvIDEwMCAqIG5vZGUucGFyZW50Tm9kZVtwYXJlbnRQcm9wZXJ0eV07XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZUluUGl4ZWxzID0gc3R5bGVWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlSW5QaXhlbHM7XG59XG5jb25zdCBnZXRDb21wdXRlZFN0eWxlID0gKGVsZW1lbnQpPT5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcbmZ1bmN0aW9uIGdldFN0eWxlKGVsLCBwcm9wZXJ0eSkge1xuICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKGVsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KTtcbn1cbmNvbnN0IHBvc2l0aW9ucyA9IFtcbiAgICAndG9wJyxcbiAgICAncmlnaHQnLFxuICAgICdib3R0b20nLFxuICAgICdsZWZ0J1xuXTtcbmZ1bmN0aW9uIGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZXMsIHN0eWxlLCBzdWZmaXgpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBzdWZmaXggPSBzdWZmaXggPyAnLScgKyBzdWZmaXggOiAnJztcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgNDsgaSsrKXtcbiAgICAgICAgY29uc3QgcG9zID0gcG9zaXRpb25zW2ldO1xuICAgICAgICByZXN1bHRbcG9zXSA9IHBhcnNlRmxvYXQoc3R5bGVzW3N0eWxlICsgJy0nICsgcG9zICsgc3VmZml4XSkgfHwgMDtcbiAgICB9XG4gICAgcmVzdWx0LndpZHRoID0gcmVzdWx0LmxlZnQgKyByZXN1bHQucmlnaHQ7XG4gICAgcmVzdWx0LmhlaWdodCA9IHJlc3VsdC50b3AgKyByZXN1bHQuYm90dG9tO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCB1c2VPZmZzZXRQb3MgPSAoeCwgeSwgdGFyZ2V0KT0+KHggPiAwIHx8IHkgPiAwKSAmJiAoIXRhcmdldCB8fCAhdGFyZ2V0LnNoYWRvd1Jvb3QpO1xuLyoqXG4gKiBAcGFyYW0gZVxuICogQHBhcmFtIGNhbnZhc1xuICogQHJldHVybnMgQ2FudmFzIHBvc2l0aW9uXG4gKi8gZnVuY3Rpb24gZ2V0Q2FudmFzUG9zaXRpb24oZSwgY2FudmFzKSB7XG4gICAgY29uc3QgdG91Y2hlcyA9IGUudG91Y2hlcztcbiAgICBjb25zdCBzb3VyY2UgPSB0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoID8gdG91Y2hlc1swXSA6IGU7XG4gICAgY29uc3QgeyBvZmZzZXRYICwgb2Zmc2V0WSAgfSA9IHNvdXJjZTtcbiAgICBsZXQgYm94ID0gZmFsc2U7XG4gICAgbGV0IHgsIHk7XG4gICAgaWYgKHVzZU9mZnNldFBvcyhvZmZzZXRYLCBvZmZzZXRZLCBlLnRhcmdldCkpIHtcbiAgICAgICAgeCA9IG9mZnNldFg7XG4gICAgICAgIHkgPSBvZmZzZXRZO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHggPSBzb3VyY2UuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgICAgICAgeSA9IHNvdXJjZS5jbGllbnRZIC0gcmVjdC50b3A7XG4gICAgICAgIGJveCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGJveFxuICAgIH07XG59XG4vKipcbiAqIEdldHMgYW4gZXZlbnQncyB4LCB5IGNvb3JkaW5hdGVzLCByZWxhdGl2ZSB0byB0aGUgY2hhcnQgYXJlYVxuICogQHBhcmFtIGV2ZW50XG4gKiBAcGFyYW0gY2hhcnRcbiAqIEByZXR1cm5zIHggYW5kIHkgY29vcmRpbmF0ZXMgb2YgdGhlIGV2ZW50XG4gKi8gZnVuY3Rpb24gZ2V0UmVsYXRpdmVQb3NpdGlvbihldmVudCwgY2hhcnQpIHtcbiAgICBpZiAoJ25hdGl2ZScgaW4gZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgICBjb25zdCB7IGNhbnZhcyAsIGN1cnJlbnREZXZpY2VQaXhlbFJhdGlvICB9ID0gY2hhcnQ7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNhbnZhcyk7XG4gICAgY29uc3QgYm9yZGVyQm94ID0gc3R5bGUuYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCc7XG4gICAgY29uc3QgcGFkZGluZ3MgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdwYWRkaW5nJyk7XG4gICAgY29uc3QgYm9yZGVycyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICAgIGNvbnN0IHsgeCAsIHkgLCBib3ggIH0gPSBnZXRDYW52YXNQb3NpdGlvbihldmVudCwgY2FudmFzKTtcbiAgICBjb25zdCB4T2Zmc2V0ID0gcGFkZGluZ3MubGVmdCArIChib3ggJiYgYm9yZGVycy5sZWZ0KTtcbiAgICBjb25zdCB5T2Zmc2V0ID0gcGFkZGluZ3MudG9wICsgKGJveCAmJiBib3JkZXJzLnRvcCk7XG4gICAgbGV0IHsgd2lkdGggLCBoZWlnaHQgIH0gPSBjaGFydDtcbiAgICBpZiAoYm9yZGVyQm94KSB7XG4gICAgICAgIHdpZHRoIC09IHBhZGRpbmdzLndpZHRoICsgYm9yZGVycy53aWR0aDtcbiAgICAgICAgaGVpZ2h0IC09IHBhZGRpbmdzLmhlaWdodCArIGJvcmRlcnMuaGVpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBNYXRoLnJvdW5kKCh4IC0geE9mZnNldCkgLyB3aWR0aCAqIGNhbnZhcy53aWR0aCAvIGN1cnJlbnREZXZpY2VQaXhlbFJhdGlvKSxcbiAgICAgICAgeTogTWF0aC5yb3VuZCgoeSAtIHlPZmZzZXQpIC8gaGVpZ2h0ICogY2FudmFzLmhlaWdodCAvIGN1cnJlbnREZXZpY2VQaXhlbFJhdGlvKVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRDb250YWluZXJTaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCkge1xuICAgIGxldCBtYXhXaWR0aCwgbWF4SGVpZ2h0O1xuICAgIGlmICh3aWR0aCA9PT0gdW5kZWZpbmVkIHx8IGhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IF9nZXRQYXJlbnROb2RlKGNhbnZhcyk7XG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICB3aWR0aCA9IGNhbnZhcy5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgIGhlaWdodCA9IGNhbnZhcy5jbGllbnRIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyAvLyB0aGlzIGlzIHRoZSBib3JkZXIgYm94IG9mIHRoZSBjb250YWluZXJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lclN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjb250YWluZXIpO1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyQm9yZGVyID0gZ2V0UG9zaXRpb25lZFN0eWxlKGNvbnRhaW5lclN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJQYWRkaW5nID0gZ2V0UG9zaXRpb25lZFN0eWxlKGNvbnRhaW5lclN0eWxlLCAncGFkZGluZycpO1xuICAgICAgICAgICAgd2lkdGggPSByZWN0LndpZHRoIC0gY29udGFpbmVyUGFkZGluZy53aWR0aCAtIGNvbnRhaW5lckJvcmRlci53aWR0aDtcbiAgICAgICAgICAgIGhlaWdodCA9IHJlY3QuaGVpZ2h0IC0gY29udGFpbmVyUGFkZGluZy5oZWlnaHQgLSBjb250YWluZXJCb3JkZXIuaGVpZ2h0O1xuICAgICAgICAgICAgbWF4V2lkdGggPSBwYXJzZU1heFN0eWxlKGNvbnRhaW5lclN0eWxlLm1heFdpZHRoLCBjb250YWluZXIsICdjbGllbnRXaWR0aCcpO1xuICAgICAgICAgICAgbWF4SGVpZ2h0ID0gcGFyc2VNYXhTdHlsZShjb250YWluZXJTdHlsZS5tYXhIZWlnaHQsIGNvbnRhaW5lciwgJ2NsaWVudEhlaWdodCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHQsXG4gICAgICAgIG1heFdpZHRoOiBtYXhXaWR0aCB8fCBJTkZJTklUWSxcbiAgICAgICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHQgfHwgSU5GSU5JVFlcbiAgICB9O1xufVxuY29uc3Qgcm91bmQxID0gKHYpPT5NYXRoLnJvdW5kKHYgKiAxMCkgLyAxMDtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiBnZXRNYXhpbXVtU2l6ZShjYW52YXMsIGJiV2lkdGgsIGJiSGVpZ2h0LCBhc3BlY3RSYXRpbykge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjYW52YXMpO1xuICAgIGNvbnN0IG1hcmdpbnMgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdtYXJnaW4nKTtcbiAgICBjb25zdCBtYXhXaWR0aCA9IHBhcnNlTWF4U3R5bGUoc3R5bGUubWF4V2lkdGgsIGNhbnZhcywgJ2NsaWVudFdpZHRoJykgfHwgSU5GSU5JVFk7XG4gICAgY29uc3QgbWF4SGVpZ2h0ID0gcGFyc2VNYXhTdHlsZShzdHlsZS5tYXhIZWlnaHQsIGNhbnZhcywgJ2NsaWVudEhlaWdodCcpIHx8IElORklOSVRZO1xuICAgIGNvbnN0IGNvbnRhaW5lclNpemUgPSBnZXRDb250YWluZXJTaXplKGNhbnZhcywgYmJXaWR0aCwgYmJIZWlnaHQpO1xuICAgIGxldCB7IHdpZHRoICwgaGVpZ2h0ICB9ID0gY29udGFpbmVyU2l6ZTtcbiAgICBpZiAoc3R5bGUuYm94U2l6aW5nID09PSAnY29udGVudC1ib3gnKSB7XG4gICAgICAgIGNvbnN0IGJvcmRlcnMgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ3MgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdwYWRkaW5nJyk7XG4gICAgICAgIHdpZHRoIC09IHBhZGRpbmdzLndpZHRoICsgYm9yZGVycy53aWR0aDtcbiAgICAgICAgaGVpZ2h0IC09IHBhZGRpbmdzLmhlaWdodCArIGJvcmRlcnMuaGVpZ2h0O1xuICAgIH1cbiAgICB3aWR0aCA9IE1hdGgubWF4KDAsIHdpZHRoIC0gbWFyZ2lucy53aWR0aCk7XG4gICAgaGVpZ2h0ID0gTWF0aC5tYXgoMCwgYXNwZWN0UmF0aW8gPyB3aWR0aCAvIGFzcGVjdFJhdGlvIDogaGVpZ2h0IC0gbWFyZ2lucy5oZWlnaHQpO1xuICAgIHdpZHRoID0gcm91bmQxKE1hdGgubWluKHdpZHRoLCBtYXhXaWR0aCwgY29udGFpbmVyU2l6ZS5tYXhXaWR0aCkpO1xuICAgIGhlaWdodCA9IHJvdW5kMShNYXRoLm1pbihoZWlnaHQsIG1heEhlaWdodCwgY29udGFpbmVyU2l6ZS5tYXhIZWlnaHQpKTtcbiAgICBpZiAod2lkdGggJiYgIWhlaWdodCkge1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNDY1OVxuICAgICAgICAvLyBJZiB0aGUgY2FudmFzIGhhcyB3aWR0aCwgYnV0IG5vIGhlaWdodCwgZGVmYXVsdCB0byBhc3BlY3RSYXRpbyBvZiAyIChjYW52YXMgZGVmYXVsdClcbiAgICAgICAgaGVpZ2h0ID0gcm91bmQxKHdpZHRoIC8gMik7XG4gICAgfVxuICAgIGNvbnN0IG1haW50YWluSGVpZ2h0ID0gYmJXaWR0aCAhPT0gdW5kZWZpbmVkIHx8IGJiSGVpZ2h0ICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG1haW50YWluSGVpZ2h0ICYmIGFzcGVjdFJhdGlvICYmIGNvbnRhaW5lclNpemUuaGVpZ2h0ICYmIGhlaWdodCA+IGNvbnRhaW5lclNpemUuaGVpZ2h0KSB7XG4gICAgICAgIGhlaWdodCA9IGNvbnRhaW5lclNpemUuaGVpZ2h0O1xuICAgICAgICB3aWR0aCA9IHJvdW5kMShNYXRoLmZsb29yKGhlaWdodCAqIGFzcGVjdFJhdGlvKSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHRcbiAgICB9O1xufVxuLyoqXG4gKiBAcGFyYW0gY2hhcnRcbiAqIEBwYXJhbSBmb3JjZVJhdGlvXG4gKiBAcGFyYW0gZm9yY2VTdHlsZVxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgY2FudmFzIGNvbnRleHQgc2l6ZSBvciB0cmFuc2Zvcm1hdGlvbiBoYXMgY2hhbmdlZC5cbiAqLyBmdW5jdGlvbiByZXRpbmFTY2FsZShjaGFydCwgZm9yY2VSYXRpbywgZm9yY2VTdHlsZSkge1xuICAgIGNvbnN0IHBpeGVsUmF0aW8gPSBmb3JjZVJhdGlvIHx8IDE7XG4gICAgY29uc3QgZGV2aWNlSGVpZ2h0ID0gTWF0aC5mbG9vcihjaGFydC5oZWlnaHQgKiBwaXhlbFJhdGlvKTtcbiAgICBjb25zdCBkZXZpY2VXaWR0aCA9IE1hdGguZmxvb3IoY2hhcnQud2lkdGggKiBwaXhlbFJhdGlvKTtcbiAgICBjaGFydC5oZWlnaHQgPSBNYXRoLmZsb29yKGNoYXJ0LmhlaWdodCk7XG4gICAgY2hhcnQud2lkdGggPSBNYXRoLmZsb29yKGNoYXJ0LndpZHRoKTtcbiAgICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gICAgLy8gSWYgbm8gc3R5bGUgaGFzIGJlZW4gc2V0IG9uIHRoZSBjYW52YXMsIHRoZSByZW5kZXIgc2l6ZSBpcyB1c2VkIGFzIGRpc3BsYXkgc2l6ZSxcbiAgICAvLyBtYWtpbmcgdGhlIGNoYXJ0IHZpc3VhbGx5IGJpZ2dlciwgc28gbGV0J3MgZW5mb3JjZSBpdCB0byB0aGUgXCJjb3JyZWN0XCIgdmFsdWVzLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvMzU3NVxuICAgIGlmIChjYW52YXMuc3R5bGUgJiYgKGZvcmNlU3R5bGUgfHwgIWNhbnZhcy5zdHlsZS5oZWlnaHQgJiYgIWNhbnZhcy5zdHlsZS53aWR0aCkpIHtcbiAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IGAke2NoYXJ0LmhlaWdodH1weGA7XG4gICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IGAke2NoYXJ0LndpZHRofXB4YDtcbiAgICB9XG4gICAgaWYgKGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvICE9PSBwaXhlbFJhdGlvIHx8IGNhbnZhcy5oZWlnaHQgIT09IGRldmljZUhlaWdodCB8fCBjYW52YXMud2lkdGggIT09IGRldmljZVdpZHRoKSB7XG4gICAgICAgIGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvID0gcGl4ZWxSYXRpbztcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGRldmljZUhlaWdodDtcbiAgICAgICAgY2FudmFzLndpZHRoID0gZGV2aWNlV2lkdGg7XG4gICAgICAgIGNoYXJ0LmN0eC5zZXRUcmFuc2Zvcm0ocGl4ZWxSYXRpbywgMCwgMCwgcGl4ZWxSYXRpbywgMCwgMCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIERldGVjdHMgc3VwcG9ydCBmb3Igb3B0aW9ucyBvYmplY3QgYXJndW1lbnQgaW4gYWRkRXZlbnRMaXN0ZW5lci5cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FdmVudFRhcmdldC9hZGRFdmVudExpc3RlbmVyI1NhZmVseV9kZXRlY3Rpbmdfb3B0aW9uX3N1cHBvcnRcbiAqIEBwcml2YXRlXG4gKi8gY29uc3Qgc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCBwYXNzaXZlU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGdldCBwYXNzaXZlICgpIHtcbiAgICAgICAgICAgICAgICBwYXNzaXZlU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgb3B0aW9ucyk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgb3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGNvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgZXJyb3JcbiAgICB9XG4gICAgcmV0dXJuIHBhc3NpdmVTdXBwb3J0ZWQ7XG59KCk7XG4vKipcbiAqIFRoZSBcInVzZWRcIiBzaXplIGlzIHRoZSBmaW5hbCB2YWx1ZSBvZiBhIGRpbWVuc2lvbiBwcm9wZXJ0eSBhZnRlciBhbGwgY2FsY3VsYXRpb25zIGhhdmVcbiAqIGJlZW4gcGVyZm9ybWVkLiBUaGlzIG1ldGhvZCB1c2VzIHRoZSBjb21wdXRlZCBzdHlsZSBvZiBgZWxlbWVudGAgYnV0IHJldHVybnMgdW5kZWZpbmVkXG4gKiBpZiB0aGUgY29tcHV0ZWQgc3R5bGUgaXMgbm90IGV4cHJlc3NlZCBpbiBwaXhlbHMuIFRoYXQgY2FuIGhhcHBlbiBpbiBzb21lIGNhc2VzIHdoZXJlXG4gKiBgZWxlbWVudGAgaGFzIGEgc2l6ZSByZWxhdGl2ZSB0byBpdHMgcGFyZW50IGFuZCB0aGlzIGxhc3Qgb25lIGlzIG5vdCB5ZXQgZGlzcGxheWVkLFxuICogZm9yIGV4YW1wbGUgYmVjYXVzZSBvZiBgZGlzcGxheTogbm9uZWAgb24gYSBwYXJlbnQgbm9kZS5cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3VzZWRfdmFsdWVcbiAqIEByZXR1cm5zIFNpemUgaW4gcGl4ZWxzIG9yIHVuZGVmaW5lZCBpZiB1bmtub3duLlxuICovIGZ1bmN0aW9uIHJlYWRVc2VkU2l6ZShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICAgIGNvbnN0IHZhbHVlID0gZ2V0U3R5bGUoZWxlbWVudCwgcHJvcGVydHkpO1xuICAgIGNvbnN0IG1hdGNoZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCgvXihcXGQrKShcXC5cXGQrKT9weCQvKTtcbiAgICByZXR1cm4gbWF0Y2hlcyA/ICttYXRjaGVzWzFdIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3BvaW50SW5MaW5lKHAxLCBwMiwgdCwgbW9kZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHAxLnggKyB0ICogKHAyLnggLSBwMS54KSxcbiAgICAgICAgeTogcDEueSArIHQgKiAocDIueSAtIHAxLnkpXG4gICAgfTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfc3RlcHBlZEludGVycG9sYXRpb24ocDEsIHAyLCB0LCBtb2RlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcDEueCArIHQgKiAocDIueCAtIHAxLngpLFxuICAgICAgICB5OiBtb2RlID09PSAnbWlkZGxlJyA/IHQgPCAwLjUgPyBwMS55IDogcDIueSA6IG1vZGUgPT09ICdhZnRlcicgPyB0IDwgMSA/IHAxLnkgOiBwMi55IDogdCA+IDAgPyBwMi55IDogcDEueVxuICAgIH07XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2JlemllckludGVycG9sYXRpb24ocDEsIHAyLCB0LCBtb2RlKSB7XG4gICAgY29uc3QgY3AxID0ge1xuICAgICAgICB4OiBwMS5jcDJ4LFxuICAgICAgICB5OiBwMS5jcDJ5XG4gICAgfTtcbiAgICBjb25zdCBjcDIgPSB7XG4gICAgICAgIHg6IHAyLmNwMXgsXG4gICAgICAgIHk6IHAyLmNwMXlcbiAgICB9O1xuICAgIGNvbnN0IGEgPSBfcG9pbnRJbkxpbmUocDEsIGNwMSwgdCk7XG4gICAgY29uc3QgYiA9IF9wb2ludEluTGluZShjcDEsIGNwMiwgdCk7XG4gICAgY29uc3QgYyA9IF9wb2ludEluTGluZShjcDIsIHAyLCB0KTtcbiAgICBjb25zdCBkID0gX3BvaW50SW5MaW5lKGEsIGIsIHQpO1xuICAgIGNvbnN0IGUgPSBfcG9pbnRJbkxpbmUoYiwgYywgdCk7XG4gICAgcmV0dXJuIF9wb2ludEluTGluZShkLCBlLCB0KTtcbn1cblxuY29uc3QgZ2V0UmlnaHRUb0xlZnRBZGFwdGVyID0gZnVuY3Rpb24ocmVjdFgsIHdpZHRoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeCAoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlY3RYICsgcmVjdFggKyB3aWR0aCAtIHg7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFdpZHRoICh3KSB7XG4gICAgICAgICAgICB3aWR0aCA9IHc7XG4gICAgICAgIH0sXG4gICAgICAgIHRleHRBbGlnbiAoYWxpZ24pIHtcbiAgICAgICAgICAgIGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxpZ247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWxpZ24gPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgICB9LFxuICAgICAgICB4UGx1cyAoeCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB4IC0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGxlZnRGb3JMdHIgKHgsIGl0ZW1XaWR0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHggLSBpdGVtV2lkdGg7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbmNvbnN0IGdldExlZnRUb1JpZ2h0QWRhcHRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHggKHgpIHtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9LFxuICAgICAgICBzZXRXaWR0aCAodykge30sXG4gICAgICAgIHRleHRBbGlnbiAoYWxpZ24pIHtcbiAgICAgICAgICAgIHJldHVybiBhbGlnbjtcbiAgICAgICAgfSxcbiAgICAgICAgeFBsdXMgKHgsIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4geCArIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBsZWZ0Rm9yTHRyICh4LCBfaXRlbVdpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfVxuICAgIH07XG59O1xuZnVuY3Rpb24gZ2V0UnRsQWRhcHRlcihydGwsIHJlY3RYLCB3aWR0aCkge1xuICAgIHJldHVybiBydGwgPyBnZXRSaWdodFRvTGVmdEFkYXB0ZXIocmVjdFgsIHdpZHRoKSA6IGdldExlZnRUb1JpZ2h0QWRhcHRlcigpO1xufVxuZnVuY3Rpb24gb3ZlcnJpZGVUZXh0RGlyZWN0aW9uKGN0eCwgZGlyZWN0aW9uKSB7XG4gICAgbGV0IHN0eWxlLCBvcmlnaW5hbDtcbiAgICBpZiAoZGlyZWN0aW9uID09PSAnbHRyJyB8fCBkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgIHN0eWxlID0gY3R4LmNhbnZhcy5zdHlsZTtcbiAgICAgICAgb3JpZ2luYWwgPSBbXG4gICAgICAgICAgICBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXJlY3Rpb24nKSxcbiAgICAgICAgICAgIHN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkoJ2RpcmVjdGlvbicpXG4gICAgICAgIF07XG4gICAgICAgIHN0eWxlLnNldFByb3BlcnR5KCdkaXJlY3Rpb24nLCBkaXJlY3Rpb24sICdpbXBvcnRhbnQnKTtcbiAgICAgICAgY3R4LnByZXZUZXh0RGlyZWN0aW9uID0gb3JpZ2luYWw7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVzdG9yZVRleHREaXJlY3Rpb24oY3R4LCBvcmlnaW5hbCkge1xuICAgIGlmIChvcmlnaW5hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlbGV0ZSBjdHgucHJldlRleHREaXJlY3Rpb247XG4gICAgICAgIGN0eC5jYW52YXMuc3R5bGUuc2V0UHJvcGVydHkoJ2RpcmVjdGlvbicsIG9yaWdpbmFsWzBdLCBvcmlnaW5hbFsxXSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZuKHByb3BlcnR5KSB7XG4gICAgaWYgKHByb3BlcnR5ID09PSAnYW5nbGUnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiZXR3ZWVuOiBfYW5nbGVCZXR3ZWVuLFxuICAgICAgICAgICAgY29tcGFyZTogX2FuZ2xlRGlmZixcbiAgICAgICAgICAgIG5vcm1hbGl6ZTogX25vcm1hbGl6ZUFuZ2xlXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGJldHdlZW46IF9pc0JldHdlZW4sXG4gICAgICAgIGNvbXBhcmU6IChhLCBiKT0+YSAtIGIsXG4gICAgICAgIG5vcm1hbGl6ZTogKHgpPT54XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNlZ21lbnQoeyBzdGFydCAsIGVuZCAsIGNvdW50ICwgbG9vcCAsIHN0eWxlICB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHN0YXJ0ICUgY291bnQsXG4gICAgICAgIGVuZDogZW5kICUgY291bnQsXG4gICAgICAgIGxvb3A6IGxvb3AgJiYgKGVuZCAtIHN0YXJ0ICsgMSkgJSBjb3VudCA9PT0gMCxcbiAgICAgICAgc3R5bGVcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0U2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcykge1xuICAgIGNvbnN0IHsgcHJvcGVydHkgLCBzdGFydDogc3RhcnRCb3VuZCAsIGVuZDogZW5kQm91bmQgIH0gPSBib3VuZHM7XG4gICAgY29uc3QgeyBiZXR3ZWVuICwgbm9ybWFsaXplICB9ID0gcHJvcGVydHlGbihwcm9wZXJ0eSk7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGxldCB7IHN0YXJ0ICwgZW5kICwgbG9vcCAgfSA9IHNlZ21lbnQ7XG4gICAgbGV0IGksIGlsZW47XG4gICAgaWYgKGxvb3ApIHtcbiAgICAgICAgc3RhcnQgKz0gY291bnQ7XG4gICAgICAgIGVuZCArPSBjb3VudDtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaWYgKCFiZXR3ZWVuKG5vcm1hbGl6ZShwb2ludHNbc3RhcnQgJSBjb3VudF1bcHJvcGVydHldKSwgc3RhcnRCb3VuZCwgZW5kQm91bmQpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydC0tO1xuICAgICAgICAgICAgZW5kLS07XG4gICAgICAgIH1cbiAgICAgICAgc3RhcnQgJT0gY291bnQ7XG4gICAgICAgIGVuZCAlPSBjb3VudDtcbiAgICB9XG4gICAgaWYgKGVuZCA8IHN0YXJ0KSB7XG4gICAgICAgIGVuZCArPSBjb3VudDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZCxcbiAgICAgICAgbG9vcCxcbiAgICAgICAgc3R5bGU6IHNlZ21lbnQuc3R5bGVcbiAgICB9O1xufVxuIGZ1bmN0aW9uIF9ib3VuZFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBib3VuZHMpIHtcbiAgICBpZiAoIWJvdW5kcykge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgc2VnbWVudFxuICAgICAgICBdO1xuICAgIH1cbiAgICBjb25zdCB7IHByb3BlcnR5ICwgc3RhcnQ6IHN0YXJ0Qm91bmQgLCBlbmQ6IGVuZEJvdW5kICB9ID0gYm91bmRzO1xuICAgIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBjb25zdCB7IGNvbXBhcmUgLCBiZXR3ZWVuICwgbm9ybWFsaXplICB9ID0gcHJvcGVydHlGbihwcm9wZXJ0eSk7XG4gICAgY29uc3QgeyBzdGFydCAsIGVuZCAsIGxvb3AgLCBzdHlsZSAgfSA9IGdldFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBib3VuZHMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBpbnNpZGUgPSBmYWxzZTtcbiAgICBsZXQgc3ViU3RhcnQgPSBudWxsO1xuICAgIGxldCB2YWx1ZSwgcG9pbnQsIHByZXZWYWx1ZTtcbiAgICBjb25zdCBzdGFydElzQmVmb3JlID0gKCk9PmJldHdlZW4oc3RhcnRCb3VuZCwgcHJldlZhbHVlLCB2YWx1ZSkgJiYgY29tcGFyZShzdGFydEJvdW5kLCBwcmV2VmFsdWUpICE9PSAwO1xuICAgIGNvbnN0IGVuZElzQmVmb3JlID0gKCk9PmNvbXBhcmUoZW5kQm91bmQsIHZhbHVlKSA9PT0gMCB8fCBiZXR3ZWVuKGVuZEJvdW5kLCBwcmV2VmFsdWUsIHZhbHVlKTtcbiAgICBjb25zdCBzaG91bGRTdGFydCA9ICgpPT5pbnNpZGUgfHwgc3RhcnRJc0JlZm9yZSgpO1xuICAgIGNvbnN0IHNob3VsZFN0b3AgPSAoKT0+IWluc2lkZSB8fCBlbmRJc0JlZm9yZSgpO1xuICAgIGZvcihsZXQgaSA9IHN0YXJ0LCBwcmV2ID0gc3RhcnQ7IGkgPD0gZW5kOyArK2kpe1xuICAgICAgICBwb2ludCA9IHBvaW50c1tpICUgY291bnRdO1xuICAgICAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBub3JtYWxpemUocG9pbnRbcHJvcGVydHldKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSBwcmV2VmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGluc2lkZSA9IGJldHdlZW4odmFsdWUsIHN0YXJ0Qm91bmQsIGVuZEJvdW5kKTtcbiAgICAgICAgaWYgKHN1YlN0YXJ0ID09PSBudWxsICYmIHNob3VsZFN0YXJ0KCkpIHtcbiAgICAgICAgICAgIHN1YlN0YXJ0ID0gY29tcGFyZSh2YWx1ZSwgc3RhcnRCb3VuZCkgPT09IDAgPyBpIDogcHJldjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3ViU3RhcnQgIT09IG51bGwgJiYgc2hvdWxkU3RvcCgpKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChub3JtYWxpemVTZWdtZW50KHtcbiAgICAgICAgICAgICAgICBzdGFydDogc3ViU3RhcnQsXG4gICAgICAgICAgICAgICAgZW5kOiBpLFxuICAgICAgICAgICAgICAgIGxvb3AsXG4gICAgICAgICAgICAgICAgY291bnQsXG4gICAgICAgICAgICAgICAgc3R5bGVcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHN1YlN0YXJ0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gaTtcbiAgICAgICAgcHJldlZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGlmIChzdWJTdGFydCAhPT0gbnVsbCkge1xuICAgICAgICByZXN1bHQucHVzaChub3JtYWxpemVTZWdtZW50KHtcbiAgICAgICAgICAgIHN0YXJ0OiBzdWJTdGFydCxcbiAgICAgICAgICAgIGVuZCxcbiAgICAgICAgICAgIGxvb3AsXG4gICAgICAgICAgICBjb3VudCxcbiAgICAgICAgICAgIHN0eWxlXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiBmdW5jdGlvbiBfYm91bmRTZWdtZW50cyhsaW5lLCBib3VuZHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3Qgc3ViID0gX2JvdW5kU2VnbWVudChzZWdtZW50c1tpXSwgbGluZS5wb2ludHMsIGJvdW5kcyk7XG4gICAgICAgIGlmIChzdWIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCguLi5zdWIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4gZnVuY3Rpb24gZmluZFN0YXJ0QW5kRW5kKHBvaW50cywgY291bnQsIGxvb3AsIHNwYW5HYXBzKSB7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgZW5kID0gY291bnQgLSAxO1xuICAgIGlmIChsb29wICYmICFzcGFuR2Fwcykge1xuICAgICAgICB3aGlsZShzdGFydCA8IGNvdW50ICYmICFwb2ludHNbc3RhcnRdLnNraXApe1xuICAgICAgICAgICAgc3RhcnQrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZShzdGFydCA8IGNvdW50ICYmIHBvaW50c1tzdGFydF0uc2tpcCl7XG4gICAgICAgIHN0YXJ0Kys7XG4gICAgfVxuICAgIHN0YXJ0ICU9IGNvdW50O1xuICAgIGlmIChsb29wKSB7XG4gICAgICAgIGVuZCArPSBzdGFydDtcbiAgICB9XG4gICAgd2hpbGUoZW5kID4gc3RhcnQgJiYgcG9pbnRzW2VuZCAlIGNvdW50XS5za2lwKXtcbiAgICAgICAgZW5kLS07XG4gICAgfVxuICAgIGVuZCAlPSBjb3VudDtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICAgICAgZW5kXG4gICAgfTtcbn1cbiBmdW5jdGlvbiBzb2xpZFNlZ21lbnRzKHBvaW50cywgc3RhcnQsIG1heCwgbG9vcCkge1xuICAgIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgbGFzdCA9IHN0YXJ0O1xuICAgIGxldCBwcmV2ID0gcG9pbnRzW3N0YXJ0XTtcbiAgICBsZXQgZW5kO1xuICAgIGZvcihlbmQgPSBzdGFydCArIDE7IGVuZCA8PSBtYXg7ICsrZW5kKXtcbiAgICAgICAgY29uc3QgY3VyID0gcG9pbnRzW2VuZCAlIGNvdW50XTtcbiAgICAgICAgaWYgKGN1ci5za2lwIHx8IGN1ci5zdG9wKSB7XG4gICAgICAgICAgICBpZiAoIXByZXYuc2tpcCkge1xuICAgICAgICAgICAgICAgIGxvb3AgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCAlIGNvdW50LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IChlbmQgLSAxKSAlIGNvdW50LFxuICAgICAgICAgICAgICAgICAgICBsb29wXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBsYXN0ID0gY3VyLnN0b3AgPyBlbmQgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGFzdCA9IGVuZDtcbiAgICAgICAgICAgIGlmIChwcmV2LnNraXApIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IGVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gY3VyO1xuICAgIH1cbiAgICBpZiAobGFzdCAhPT0gbnVsbCkge1xuICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICBzdGFydDogc3RhcnQgJSBjb3VudCxcbiAgICAgICAgICAgIGVuZDogbGFzdCAlIGNvdW50LFxuICAgICAgICAgICAgbG9vcFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiBmdW5jdGlvbiBfY29tcHV0ZVNlZ21lbnRzKGxpbmUsIHNlZ21lbnRPcHRpb25zKSB7XG4gICAgY29uc3QgcG9pbnRzID0gbGluZS5wb2ludHM7XG4gICAgY29uc3Qgc3BhbkdhcHMgPSBsaW5lLm9wdGlvbnMuc3BhbkdhcHM7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGlmICghY291bnQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBjb25zdCBsb29wID0gISFsaW5lLl9sb29wO1xuICAgIGNvbnN0IHsgc3RhcnQgLCBlbmQgIH0gPSBmaW5kU3RhcnRBbmRFbmQocG9pbnRzLCBjb3VudCwgbG9vcCwgc3BhbkdhcHMpO1xuICAgIGlmIChzcGFuR2FwcyA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gc3BsaXRCeVN0eWxlcyhsaW5lLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICAgICAgZW5kLFxuICAgICAgICAgICAgICAgIGxvb3BcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSwgcG9pbnRzLCBzZWdtZW50T3B0aW9ucyk7XG4gICAgfVxuICAgIGNvbnN0IG1heCA9IGVuZCA8IHN0YXJ0ID8gZW5kICsgY291bnQgOiBlbmQ7XG4gICAgY29uc3QgY29tcGxldGVMb29wID0gISFsaW5lLl9mdWxsTG9vcCAmJiBzdGFydCA9PT0gMCAmJiBlbmQgPT09IGNvdW50IC0gMTtcbiAgICByZXR1cm4gc3BsaXRCeVN0eWxlcyhsaW5lLCBzb2xpZFNlZ21lbnRzKHBvaW50cywgc3RhcnQsIG1heCwgY29tcGxldGVMb29wKSwgcG9pbnRzLCBzZWdtZW50T3B0aW9ucyk7XG59XG4gZnVuY3Rpb24gc3BsaXRCeVN0eWxlcyhsaW5lLCBzZWdtZW50cywgcG9pbnRzLCBzZWdtZW50T3B0aW9ucykge1xuICAgIGlmICghc2VnbWVudE9wdGlvbnMgfHwgIXNlZ21lbnRPcHRpb25zLnNldENvbnRleHQgfHwgIXBvaW50cykge1xuICAgICAgICByZXR1cm4gc2VnbWVudHM7XG4gICAgfVxuICAgIHJldHVybiBkb1NwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xufVxuIGZ1bmN0aW9uIGRvU3BsaXRCeVN0eWxlcyhsaW5lLCBzZWdtZW50cywgcG9pbnRzLCBzZWdtZW50T3B0aW9ucykge1xuICAgIGNvbnN0IGNoYXJ0Q29udGV4dCA9IGxpbmUuX2NoYXJ0LmdldENvbnRleHQoKTtcbiAgICBjb25zdCBiYXNlU3R5bGUgPSByZWFkU3R5bGUobGluZS5vcHRpb25zKTtcbiAgICBjb25zdCB7IF9kYXRhc2V0SW5kZXg6IGRhdGFzZXRJbmRleCAsIG9wdGlvbnM6IHsgc3BhbkdhcHMgIH0gIH0gPSBsaW5lO1xuICAgIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgcHJldlN0eWxlID0gYmFzZVN0eWxlO1xuICAgIGxldCBzdGFydCA9IHNlZ21lbnRzWzBdLnN0YXJ0O1xuICAgIGxldCBpID0gc3RhcnQ7XG4gICAgZnVuY3Rpb24gYWRkU3R5bGUocywgZSwgbCwgc3QpIHtcbiAgICAgICAgY29uc3QgZGlyID0gc3BhbkdhcHMgPyAtMSA6IDE7XG4gICAgICAgIGlmIChzID09PSBlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcyArPSBjb3VudDtcbiAgICAgICAgd2hpbGUocG9pbnRzW3MgJSBjb3VudF0uc2tpcCl7XG4gICAgICAgICAgICBzIC09IGRpcjtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZShwb2ludHNbZSAlIGNvdW50XS5za2lwKXtcbiAgICAgICAgICAgIGUgKz0gZGlyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzICUgY291bnQgIT09IGUgJSBjb3VudCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBzICUgY291bnQsXG4gICAgICAgICAgICAgICAgZW5kOiBlICUgY291bnQsXG4gICAgICAgICAgICAgICAgbG9vcDogbCxcbiAgICAgICAgICAgICAgICBzdHlsZTogc3RcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcHJldlN0eWxlID0gc3Q7XG4gICAgICAgICAgICBzdGFydCA9IGUgJSBjb3VudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpe1xuICAgICAgICBzdGFydCA9IHNwYW5HYXBzID8gc3RhcnQgOiBzZWdtZW50LnN0YXJ0O1xuICAgICAgICBsZXQgcHJldiA9IHBvaW50c1tzdGFydCAlIGNvdW50XTtcbiAgICAgICAgbGV0IHN0eWxlO1xuICAgICAgICBmb3IoaSA9IHN0YXJ0ICsgMTsgaSA8PSBzZWdtZW50LmVuZDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IHB0ID0gcG9pbnRzW2kgJSBjb3VudF07XG4gICAgICAgICAgICBzdHlsZSA9IHJlYWRTdHlsZShzZWdtZW50T3B0aW9ucy5zZXRDb250ZXh0KGNyZWF0ZUNvbnRleHQoY2hhcnRDb250ZXh0LCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NlZ21lbnQnLFxuICAgICAgICAgICAgICAgIHAwOiBwcmV2LFxuICAgICAgICAgICAgICAgIHAxOiBwdCxcbiAgICAgICAgICAgICAgICBwMERhdGFJbmRleDogKGkgLSAxKSAlIGNvdW50LFxuICAgICAgICAgICAgICAgIHAxRGF0YUluZGV4OiBpICUgY291bnQsXG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICAgICAgaWYgKHN0eWxlQ2hhbmdlZChzdHlsZSwgcHJldlN0eWxlKSkge1xuICAgICAgICAgICAgICAgIGFkZFN0eWxlKHN0YXJ0LCBpIC0gMSwgc2VnbWVudC5sb29wLCBwcmV2U3R5bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldiA9IHB0O1xuICAgICAgICAgICAgcHJldlN0eWxlID0gc3R5bGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0IDwgaSAtIDEpIHtcbiAgICAgICAgICAgIGFkZFN0eWxlKHN0YXJ0LCBpIC0gMSwgc2VnbWVudC5sb29wLCBwcmV2U3R5bGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiByZWFkU3R5bGUob3B0aW9ucykge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIGJvcmRlckNhcFN0eWxlOiBvcHRpb25zLmJvcmRlckNhcFN0eWxlLFxuICAgICAgICBib3JkZXJEYXNoOiBvcHRpb25zLmJvcmRlckRhc2gsXG4gICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgYm9yZGVySm9pblN0eWxlOiBvcHRpb25zLmJvcmRlckpvaW5TdHlsZSxcbiAgICAgICAgYm9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG4gICAgICAgIGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHN0eWxlQ2hhbmdlZChzdHlsZSwgcHJldlN0eWxlKSB7XG4gICAgaWYgKCFwcmV2U3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBjYWNoZSA9IFtdO1xuICAgIGNvbnN0IHJlcGxhY2VyID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoIWlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjYWNoZS5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGNhY2hlLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZS5pbmRleE9mKHZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdHlsZSwgcmVwbGFjZXIpICE9PSBKU09OLnN0cmluZ2lmeShwcmV2U3R5bGUsIHJlcGxhY2VyKTtcbn1cblxuZXhwb3J0IHsgdW5jbGlwQXJlYSBhcyAkLCBfcmxvb2t1cEJ5S2V5IGFzIEEsIF9sb29rdXBCeUtleSBhcyBCLCBfaXNQb2ludEluQXJlYSBhcyBDLCBnZXRBbmdsZUZyb21Qb2ludCBhcyBELCB0b1BhZGRpbmcgYXMgRSwgZWFjaCBhcyBGLCBnZXRNYXhpbXVtU2l6ZSBhcyBHLCBIQUxGX1BJIGFzIEgsIF9nZXRQYXJlbnROb2RlIGFzIEksIHJlYWRVc2VkU2l6ZSBhcyBKLCBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIGFzIEssIHRocm90dGxlZCBhcyBMLCBfaXNEb21TdXBwb3J0ZWQgYXMgTSwgX2ZhY3Rvcml6ZSBhcyBOLCBmaW5pdGVPckRlZmF1bHQgYXMgTywgUEkgYXMgUCwgY2FsbGJhY2sgYXMgUSwgX2FkZEdyYWNlIGFzIFIsIF9saW1pdFZhbHVlIGFzIFMsIFRBVSBhcyBULCB0b0RlZ3JlZXMgYXMgVSwgX21lYXN1cmVUZXh0IGFzIFYsIF9pbnQxNlJhbmdlIGFzIFcsIF9hbGlnblBpeGVsIGFzIFgsIGNsaXBBcmVhIGFzIFksIHJlbmRlclRleHQgYXMgWiwgX2FycmF5VW5pcXVlIGFzIF8sIHJlc29sdmUgYXMgYSwgZm9udFN0cmluZyBhcyBhJCwgdG9Gb250IGFzIGEwLCBfdG9MZWZ0UmlnaHRDZW50ZXIgYXMgYTEsIF9hbGlnblN0YXJ0RW5kIGFzIGEyLCBvdmVycmlkZXMgYXMgYTMsIG1lcmdlIGFzIGE0LCBfY2FwaXRhbGl6ZSBhcyBhNSwgZGVzY3JpcHRvcnMgYXMgYTYsIGlzRnVuY3Rpb24gYXMgYTcsIF9hdHRhY2hDb250ZXh0IGFzIGE4LCBfY3JlYXRlUmVzb2x2ZXIgYXMgYTksIG92ZXJyaWRlVGV4dERpcmVjdGlvbiBhcyBhQSwgX3RleHRYIGFzIGFCLCByZXN0b3JlVGV4dERpcmVjdGlvbiBhcyBhQywgZHJhd1BvaW50TGVnZW5kIGFzIGFELCBkaXN0YW5jZUJldHdlZW5Qb2ludHMgYXMgYUUsIG5vb3AgYXMgYUYsIF9zZXRNaW5BbmRNYXhCeUtleSBhcyBhRywgbmljZU51bSBhcyBhSCwgYWxtb3N0V2hvbGUgYXMgYUksIGFsbW9zdEVxdWFscyBhcyBhSiwgX2RlY2ltYWxQbGFjZXMgYXMgYUssIFRpY2tzIGFzIGFMLCBsb2cxMCBhcyBhTSwgX2xvbmdlc3RUZXh0IGFzIGFOLCBfZmlsdGVyQmV0d2VlbiBhcyBhTywgX2xvb2t1cCBhcyBhUCwgaXNQYXR0ZXJuT3JHcmFkaWVudCBhcyBhUSwgZ2V0SG92ZXJDb2xvciBhcyBhUiwgY2xvbmUgYXMgYVMsIF9tZXJnZXIgYXMgYVQsIF9tZXJnZXJJZiBhcyBhVSwgX2RlcHJlY2F0ZWQgYXMgYVYsIF9zcGxpdEtleSBhcyBhVywgdG9Gb250U3RyaW5nIGFzIGFYLCBzcGxpbmVDdXJ2ZSBhcyBhWSwgc3BsaW5lQ3VydmVNb25vdG9uZSBhcyBhWiwgZ2V0U3R5bGUgYXMgYV8sIF9kZXNjcmlwdG9ycyBhcyBhYSwgbWVyZ2VJZiBhcyBhYiwgdWlkIGFzIGFjLCBkZWJvdW5jZSBhcyBhZCwgcmV0aW5hU2NhbGUgYXMgYWUsIGNsZWFyQ2FudmFzIGFzIGFmLCBzZXRzRXF1YWwgYXMgYWcsIF9lbGVtZW50c0VxdWFsIGFzIGFoLCBfaXNDbGlja0V2ZW50IGFzIGFpLCBfaXNCZXR3ZWVuIGFzIGFqLCBfcmVhZFZhbHVlVG9Qcm9wcyBhcyBhaywgX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMgYXMgYWwsIF9jb21wdXRlU2VnbWVudHMgYXMgYW0sIF9ib3VuZFNlZ21lbnRzIGFzIGFuLCBfc3RlcHBlZEludGVycG9sYXRpb24gYXMgYW8sIF9iZXppZXJJbnRlcnBvbGF0aW9uIGFzIGFwLCBfcG9pbnRJbkxpbmUgYXMgYXEsIF9zdGVwcGVkTGluZVRvIGFzIGFyLCBfYmV6aWVyQ3VydmVUbyBhcyBhcywgZHJhd1BvaW50IGFzIGF0LCBhZGRSb3VuZGVkUmVjdFBhdGggYXMgYXUsIHRvVFJCTCBhcyBhdiwgdG9UUkJMQ29ybmVycyBhcyBhdywgX2JvdW5kU2VnbWVudCBhcyBheCwgX25vcm1hbGl6ZUFuZ2xlIGFzIGF5LCBnZXRSdGxBZGFwdGVyIGFzIGF6LCBpc0FycmF5IGFzIGIsIHRvTGluZUhlaWdodCBhcyBiMCwgUElUQVUgYXMgYjEsIElORklOSVRZIGFzIGIyLCBSQURfUEVSX0RFRyBhcyBiMywgUVVBUlRFUl9QSSBhcyBiNCwgVFdPX1RISVJEU19QSSBhcyBiNSwgX2FuZ2xlRGlmZiBhcyBiNiwgY29sb3IgYXMgYywgZGVmYXVsdHMgYXMgZCwgZWZmZWN0cyBhcyBlLCByZXNvbHZlT2JqZWN0S2V5IGFzIGYsIGlzTnVtYmVyRmluaXRlIGFzIGcsIGRlZmluZWQgYXMgaCwgaXNPYmplY3QgYXMgaSwgY3JlYXRlQ29udGV4dCBhcyBqLCBpc051bGxPclVuZGVmIGFzIGssIGxpc3RlbkFycmF5RXZlbnRzIGFzIGwsIHRvUGVyY2VudGFnZSBhcyBtLCB0b0RpbWVuc2lvbiBhcyBuLCBmb3JtYXROdW1iZXIgYXMgbywgX2FuZ2xlQmV0d2VlbiBhcyBwLCBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyBhcyBxLCByZXF1ZXN0QW5pbUZyYW1lIGFzIHIsIHNpZ24gYXMgcywgdG9SYWRpYW5zIGFzIHQsIHVubGlzdGVuQXJyYXlFdmVudHMgYXMgdSwgdmFsdWVPckRlZmF1bHQgYXMgdiwgX3NjYWxlUmFuZ2VzQ2hhbmdlZCBhcyB3LCBpc051bWJlciBhcyB4LCBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUgYXMgeSwgZ2V0UmVsYXRpdmVQb3NpdGlvbiBhcyB6IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLnNlZ21lbnQuanMubWFwXG4iLCIvKiFcbiAqIENoYXJ0LmpzIHY0LjMuMFxuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDIzIENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IHIgYXMgcmVxdWVzdEFuaW1GcmFtZSwgYSBhcyByZXNvbHZlLCBlIGFzIGVmZmVjdHMsIGMgYXMgY29sb3IsIGkgYXMgaXNPYmplY3QsIGQgYXMgZGVmYXVsdHMsIGIgYXMgaXNBcnJheSwgdiBhcyB2YWx1ZU9yRGVmYXVsdCwgdSBhcyB1bmxpc3RlbkFycmF5RXZlbnRzLCBsIGFzIGxpc3RlbkFycmF5RXZlbnRzLCBmIGFzIHJlc29sdmVPYmplY3RLZXksIGcgYXMgaXNOdW1iZXJGaW5pdGUsIGggYXMgZGVmaW5lZCwgcyBhcyBzaWduLCBqIGFzIGNyZWF0ZUNvbnRleHQsIGsgYXMgaXNOdWxsT3JVbmRlZiwgXyBhcyBfYXJyYXlVbmlxdWUsIHQgYXMgdG9SYWRpYW5zLCBtIGFzIHRvUGVyY2VudGFnZSwgbiBhcyB0b0RpbWVuc2lvbiwgVCBhcyBUQVUsIG8gYXMgZm9ybWF0TnVtYmVyLCBwIGFzIF9hbmdsZUJldHdlZW4sIEggYXMgSEFMRl9QSSwgUCBhcyBQSSwgcSBhcyBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cywgdyBhcyBfc2NhbGVSYW5nZXNDaGFuZ2VkLCB4IGFzIGlzTnVtYmVyLCB5IGFzIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZSwgeiBhcyBnZXRSZWxhdGl2ZVBvc2l0aW9uLCBBIGFzIF9ybG9va3VwQnlLZXksIEIgYXMgX2xvb2t1cEJ5S2V5LCBDIGFzIF9pc1BvaW50SW5BcmVhLCBEIGFzIGdldEFuZ2xlRnJvbVBvaW50LCBFIGFzIHRvUGFkZGluZywgRiBhcyBlYWNoLCBHIGFzIGdldE1heGltdW1TaXplLCBJIGFzIF9nZXRQYXJlbnROb2RlLCBKIGFzIHJlYWRVc2VkU2l6ZSwgSyBhcyBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zLCBMIGFzIHRocm90dGxlZCwgTSBhcyBfaXNEb21TdXBwb3J0ZWQsIE4gYXMgX2ZhY3Rvcml6ZSwgTyBhcyBmaW5pdGVPckRlZmF1bHQsIFEgYXMgY2FsbGJhY2ssIFIgYXMgX2FkZEdyYWNlLCBTIGFzIF9saW1pdFZhbHVlLCBVIGFzIHRvRGVncmVlcywgViBhcyBfbWVhc3VyZVRleHQsIFcgYXMgX2ludDE2UmFuZ2UsIFggYXMgX2FsaWduUGl4ZWwsIFkgYXMgY2xpcEFyZWEsIFogYXMgcmVuZGVyVGV4dCwgJCBhcyB1bmNsaXBBcmVhLCBhMCBhcyB0b0ZvbnQsIGExIGFzIF90b0xlZnRSaWdodENlbnRlciwgYTIgYXMgX2FsaWduU3RhcnRFbmQsIGEzIGFzIG92ZXJyaWRlcywgYTQgYXMgbWVyZ2UsIGE1IGFzIF9jYXBpdGFsaXplLCBhNiBhcyBkZXNjcmlwdG9ycywgYTcgYXMgaXNGdW5jdGlvbiwgYTggYXMgX2F0dGFjaENvbnRleHQsIGE5IGFzIF9jcmVhdGVSZXNvbHZlciwgYWEgYXMgX2Rlc2NyaXB0b3JzLCBhYiBhcyBtZXJnZUlmLCBhYyBhcyB1aWQsIGFkIGFzIGRlYm91bmNlLCBhZSBhcyByZXRpbmFTY2FsZSwgYWYgYXMgY2xlYXJDYW52YXMsIGFnIGFzIHNldHNFcXVhbCwgYWggYXMgX2VsZW1lbnRzRXF1YWwsIGFpIGFzIF9pc0NsaWNrRXZlbnQsIGFqIGFzIF9pc0JldHdlZW4sIGFrIGFzIF9yZWFkVmFsdWVUb1Byb3BzLCBhbCBhcyBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cywgYW0gYXMgX2NvbXB1dGVTZWdtZW50cywgYW4gYXMgX2JvdW5kU2VnbWVudHMsIGFvIGFzIF9zdGVwcGVkSW50ZXJwb2xhdGlvbiwgYXAgYXMgX2JlemllckludGVycG9sYXRpb24sIGFxIGFzIF9wb2ludEluTGluZSwgYXIgYXMgX3N0ZXBwZWRMaW5lVG8sIGFzIGFzIF9iZXppZXJDdXJ2ZVRvLCBhdCBhcyBkcmF3UG9pbnQsIGF1IGFzIGFkZFJvdW5kZWRSZWN0UGF0aCwgYXYgYXMgdG9UUkJMLCBhdyBhcyB0b1RSQkxDb3JuZXJzLCBheCBhcyBfYm91bmRTZWdtZW50LCBheSBhcyBfbm9ybWFsaXplQW5nbGUsIGF6IGFzIGdldFJ0bEFkYXB0ZXIsIGFBIGFzIG92ZXJyaWRlVGV4dERpcmVjdGlvbiwgYUIgYXMgX3RleHRYLCBhQyBhcyByZXN0b3JlVGV4dERpcmVjdGlvbiwgYUQgYXMgZHJhd1BvaW50TGVnZW5kLCBhRSBhcyBkaXN0YW5jZUJldHdlZW5Qb2ludHMsIGFGIGFzIG5vb3AsIGFHIGFzIF9zZXRNaW5BbmRNYXhCeUtleSwgYUggYXMgbmljZU51bSwgYUkgYXMgYWxtb3N0V2hvbGUsIGFKIGFzIGFsbW9zdEVxdWFscywgYUsgYXMgX2RlY2ltYWxQbGFjZXMsIGFMIGFzIFRpY2tzLCBhTSBhcyBsb2cxMCwgYU4gYXMgX2xvbmdlc3RUZXh0LCBhTyBhcyBfZmlsdGVyQmV0d2VlbiwgYVAgYXMgX2xvb2t1cCB9IGZyb20gJy4vY2h1bmtzL2hlbHBlcnMuc2VnbWVudC5qcyc7XG5pbXBvcnQgJ0BrdXJrbGUvY29sb3InO1xuXG5jbGFzcyBBbmltYXRvciB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5fcmVxdWVzdCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NoYXJ0cyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9sYXN0RGF0ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gX25vdGlmeShjaGFydCwgYW5pbXMsIGRhdGUsIHR5cGUpIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gYW5pbXMubGlzdGVuZXJzW3R5cGVdO1xuICAgICAgICBjb25zdCBudW1TdGVwcyA9IGFuaW1zLmR1cmF0aW9uO1xuICAgICAgICBjYWxsYmFja3MuZm9yRWFjaCgoZm4pPT5mbih7XG4gICAgICAgICAgICAgICAgY2hhcnQsXG4gICAgICAgICAgICAgICAgaW5pdGlhbDogYW5pbXMuaW5pdGlhbCxcbiAgICAgICAgICAgICAgICBudW1TdGVwcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50U3RlcDogTWF0aC5taW4oZGF0ZSAtIGFuaW1zLnN0YXJ0LCBudW1TdGVwcylcbiAgICAgICAgICAgIH0pKTtcbiAgICB9XG4gX3JlZnJlc2goKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcnVubmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuX3JlcXVlc3QgPSByZXF1ZXN0QW5pbUZyYW1lLmNhbGwod2luZG93LCAoKT0+e1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9ydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVmcmVzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gX3VwZGF0ZShkYXRlID0gRGF0ZS5ub3coKSkge1xuICAgICAgICBsZXQgcmVtYWluaW5nID0gMDtcbiAgICAgICAgdGhpcy5fY2hhcnRzLmZvckVhY2goKGFuaW1zLCBjaGFydCk9PntcbiAgICAgICAgICAgIGlmICghYW5pbXMucnVubmluZyB8fCAhYW5pbXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBhbmltcy5pdGVtcztcbiAgICAgICAgICAgIGxldCBpID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGxldCBkcmF3ID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgaXRlbTtcbiAgICAgICAgICAgIGZvcig7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgICAgICBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uX2FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5fdG90YWwgPiBhbmltcy5kdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbXMuZHVyYXRpb24gPSBpdGVtLl90b3RhbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpdGVtLnRpY2soZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGRyYXcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zW2ldID0gaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnBvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkcmF3KSB7XG4gICAgICAgICAgICAgICAgY2hhcnQuZHJhdygpO1xuICAgICAgICAgICAgICAgIHRoaXMuX25vdGlmeShjaGFydCwgYW5pbXMsIGRhdGUsICdwcm9ncmVzcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBhbmltcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgJ2NvbXBsZXRlJyk7XG4gICAgICAgICAgICAgICAgYW5pbXMuaW5pdGlhbCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtYWluaW5nICs9IGl0ZW1zLmxlbmd0aDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2xhc3REYXRlID0gZGF0ZTtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuIF9nZXRBbmltcyhjaGFydCkge1xuICAgICAgICBjb25zdCBjaGFydHMgPSB0aGlzLl9jaGFydHM7XG4gICAgICAgIGxldCBhbmltcyA9IGNoYXJ0cy5nZXQoY2hhcnQpO1xuICAgICAgICBpZiAoIWFuaW1zKSB7XG4gICAgICAgICAgICBhbmltcyA9IHtcbiAgICAgICAgICAgICAgICBydW5uaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbml0aWFsOiB0cnVlLFxuICAgICAgICAgICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IFtdLFxuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzczogW11cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2hhcnRzLnNldChjaGFydCwgYW5pbXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltcztcbiAgICB9XG4gbGlzdGVuKGNoYXJ0LCBldmVudCwgY2IpIHtcbiAgICAgICAgdGhpcy5fZ2V0QW5pbXMoY2hhcnQpLmxpc3RlbmVyc1tldmVudF0ucHVzaChjYik7XG4gICAgfVxuIGFkZChjaGFydCwgaXRlbXMpIHtcbiAgICAgICAgaWYgKCFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZ2V0QW5pbXMoY2hhcnQpLml0ZW1zLnB1c2goLi4uaXRlbXMpO1xuICAgIH1cbiBoYXMoY2hhcnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEFuaW1zKGNoYXJ0KS5pdGVtcy5sZW5ndGggPiAwO1xuICAgIH1cbiBzdGFydChjaGFydCkge1xuICAgICAgICBjb25zdCBhbmltcyA9IHRoaXMuX2NoYXJ0cy5nZXQoY2hhcnQpO1xuICAgICAgICBpZiAoIWFuaW1zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYW5pbXMucnVubmluZyA9IHRydWU7XG4gICAgICAgIGFuaW1zLnN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgYW5pbXMuZHVyYXRpb24gPSBhbmltcy5pdGVtcy5yZWR1Y2UoKGFjYywgY3VyKT0+TWF0aC5tYXgoYWNjLCBjdXIuX2R1cmF0aW9uKSwgMCk7XG4gICAgICAgIHRoaXMuX3JlZnJlc2goKTtcbiAgICB9XG4gICAgcnVubmluZyhjaGFydCkge1xuICAgICAgICBpZiAoIXRoaXMuX3J1bm5pbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmltcyA9IHRoaXMuX2NoYXJ0cy5nZXQoY2hhcnQpO1xuICAgICAgICBpZiAoIWFuaW1zIHx8ICFhbmltcy5ydW5uaW5nIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gc3RvcChjaGFydCkge1xuICAgICAgICBjb25zdCBhbmltcyA9IHRoaXMuX2NoYXJ0cy5nZXQoY2hhcnQpO1xuICAgICAgICBpZiAoIWFuaW1zIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtcyA9IGFuaW1zLml0ZW1zO1xuICAgICAgICBsZXQgaSA9IGl0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgIGZvcig7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgIGl0ZW1zW2ldLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICAgIGFuaW1zLml0ZW1zID0gW107XG4gICAgICAgIHRoaXMuX25vdGlmeShjaGFydCwgYW5pbXMsIERhdGUubm93KCksICdjb21wbGV0ZScpO1xuICAgIH1cbiByZW1vdmUoY2hhcnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoYXJ0cy5kZWxldGUoY2hhcnQpO1xuICAgIH1cbn1cbnZhciBhbmltYXRvciA9IC8qICNfX1BVUkVfXyAqLyBuZXcgQW5pbWF0b3IoKTtcblxuY29uc3QgdHJhbnNwYXJlbnQgPSAndHJhbnNwYXJlbnQnO1xuY29uc3QgaW50ZXJwb2xhdG9ycyA9IHtcbiAgICBib29sZWFuIChmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3IgPiAwLjUgPyB0byA6IGZyb207XG4gICAgfSxcbiBjb2xvciAoZnJvbSwgdG8sIGZhY3Rvcikge1xuICAgICAgICBjb25zdCBjMCA9IGNvbG9yKGZyb20gfHwgdHJhbnNwYXJlbnQpO1xuICAgICAgICBjb25zdCBjMSA9IGMwLnZhbGlkICYmIGNvbG9yKHRvIHx8IHRyYW5zcGFyZW50KTtcbiAgICAgICAgcmV0dXJuIGMxICYmIGMxLnZhbGlkID8gYzEubWl4KGMwLCBmYWN0b3IpLmhleFN0cmluZygpIDogdG87XG4gICAgfSxcbiAgICBudW1iZXIgKGZyb20sIHRvLCBmYWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZyb20gKyAodG8gLSBmcm9tKSAqIGZhY3RvcjtcbiAgICB9XG59O1xuY2xhc3MgQW5pbWF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihjZmcsIHRhcmdldCwgcHJvcCwgdG8pe1xuICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0YXJnZXRbcHJvcF07XG4gICAgICAgIHRvID0gcmVzb2x2ZShbXG4gICAgICAgICAgICBjZmcudG8sXG4gICAgICAgICAgICB0byxcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICAgIGNmZy5mcm9tXG4gICAgICAgIF0pO1xuICAgICAgICBjb25zdCBmcm9tID0gcmVzb2x2ZShbXG4gICAgICAgICAgICBjZmcuZnJvbSxcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICAgIHRvXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9mbiA9IGNmZy5mbiB8fCBpbnRlcnBvbGF0b3JzW2NmZy50eXBlIHx8IHR5cGVvZiBmcm9tXTtcbiAgICAgICAgdGhpcy5fZWFzaW5nID0gZWZmZWN0c1tjZmcuZWFzaW5nXSB8fCBlZmZlY3RzLmxpbmVhcjtcbiAgICAgICAgdGhpcy5fc3RhcnQgPSBNYXRoLmZsb29yKERhdGUubm93KCkgKyAoY2ZnLmRlbGF5IHx8IDApKTtcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSB0aGlzLl90b3RhbCA9IE1hdGguZmxvb3IoY2ZnLmR1cmF0aW9uKTtcbiAgICAgICAgdGhpcy5fbG9vcCA9ICEhY2ZnLmxvb3A7XG4gICAgICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5fcHJvcCA9IHByb3A7XG4gICAgICAgIHRoaXMuX2Zyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLl90byA9IHRvO1xuICAgICAgICB0aGlzLl9wcm9taXNlcyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgYWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICAgIH1cbiAgICB1cGRhdGUoY2ZnLCB0bywgZGF0ZSkge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkoZmFsc2UpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy5fdGFyZ2V0W3RoaXMuX3Byb3BdO1xuICAgICAgICAgICAgY29uc3QgZWxhcHNlZCA9IGRhdGUgLSB0aGlzLl9zdGFydDtcbiAgICAgICAgICAgIGNvbnN0IHJlbWFpbiA9IHRoaXMuX2R1cmF0aW9uIC0gZWxhcHNlZDtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0ID0gZGF0ZTtcbiAgICAgICAgICAgIHRoaXMuX2R1cmF0aW9uID0gTWF0aC5mbG9vcihNYXRoLm1heChyZW1haW4sIGNmZy5kdXJhdGlvbikpO1xuICAgICAgICAgICAgdGhpcy5fdG90YWwgKz0gZWxhcHNlZDtcbiAgICAgICAgICAgIHRoaXMuX2xvb3AgPSAhIWNmZy5sb29wO1xuICAgICAgICAgICAgdGhpcy5fdG8gPSByZXNvbHZlKFtcbiAgICAgICAgICAgICAgICBjZmcudG8sXG4gICAgICAgICAgICAgICAgdG8sXG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgICAgIGNmZy5mcm9tXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHRoaXMuX2Zyb20gPSByZXNvbHZlKFtcbiAgICAgICAgICAgICAgICBjZmcuZnJvbSxcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUsXG4gICAgICAgICAgICAgICAgdG9cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy50aWNrKERhdGUubm93KCkpO1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRpY2soZGF0ZSkge1xuICAgICAgICBjb25zdCBlbGFwc2VkID0gZGF0ZSAtIHRoaXMuX3N0YXJ0O1xuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMuX2R1cmF0aW9uO1xuICAgICAgICBjb25zdCBwcm9wID0gdGhpcy5fcHJvcDtcbiAgICAgICAgY29uc3QgZnJvbSA9IHRoaXMuX2Zyb207XG4gICAgICAgIGNvbnN0IGxvb3AgPSB0aGlzLl9sb29wO1xuICAgICAgICBjb25zdCB0byA9IHRoaXMuX3RvO1xuICAgICAgICBsZXQgZmFjdG9yO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmcm9tICE9PSB0byAmJiAobG9vcCB8fCBlbGFwc2VkIDwgZHVyYXRpb24pO1xuICAgICAgICBpZiAoIXRoaXMuX2FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gdG87XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkodHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsYXBzZWQgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRbcHJvcF0gPSBmcm9tO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZhY3RvciA9IGVsYXBzZWQgLyBkdXJhdGlvbiAlIDI7XG4gICAgICAgIGZhY3RvciA9IGxvb3AgJiYgZmFjdG9yID4gMSA/IDIgLSBmYWN0b3IgOiBmYWN0b3I7XG4gICAgICAgIGZhY3RvciA9IHRoaXMuX2Vhc2luZyhNYXRoLm1pbigxLCBNYXRoLm1heCgwLCBmYWN0b3IpKSk7XG4gICAgICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IHRoaXMuX2ZuKGZyb20sIHRvLCBmYWN0b3IpO1xuICAgIH1cbiAgICB3YWl0KCkge1xuICAgICAgICBjb25zdCBwcm9taXNlcyA9IHRoaXMuX3Byb21pc2VzIHx8ICh0aGlzLl9wcm9taXNlcyA9IFtdKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaik9PntcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIHJlcyxcbiAgICAgICAgICAgICAgICByZWpcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX25vdGlmeShyZXNvbHZlZCkge1xuICAgICAgICBjb25zdCBtZXRob2QgPSByZXNvbHZlZCA/ICdyZXMnIDogJ3Jlaic7XG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gdGhpcy5fcHJvbWlzZXMgfHwgW107XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwcm9taXNlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBwcm9taXNlc1tpXVttZXRob2RdKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIEFuaW1hdGlvbnMge1xuICAgIGNvbnN0cnVjdG9yKGNoYXJ0LCBjb25maWcpe1xuICAgICAgICB0aGlzLl9jaGFydCA9IGNoYXJ0O1xuICAgICAgICB0aGlzLl9wcm9wZXJ0aWVzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmNvbmZpZ3VyZShjb25maWcpO1xuICAgIH1cbiAgICBjb25maWd1cmUoY29uZmlnKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QoY29uZmlnKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSBPYmplY3Qua2V5cyhkZWZhdWx0cy5hbmltYXRpb24pO1xuICAgICAgICBjb25zdCBhbmltYXRlZFByb3BzID0gdGhpcy5fcHJvcGVydGllcztcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY29uZmlnKS5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgICAgICBjb25zdCBjZmcgPSBjb25maWdba2V5XTtcbiAgICAgICAgICAgIGlmICghaXNPYmplY3QoY2ZnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBhbmltYXRpb25PcHRpb25zKXtcbiAgICAgICAgICAgICAgICByZXNvbHZlZFtvcHRpb25dID0gY2ZnW29wdGlvbl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoaXNBcnJheShjZmcucHJvcGVydGllcykgJiYgY2ZnLnByb3BlcnRpZXMgfHwgW1xuICAgICAgICAgICAgICAgIGtleVxuICAgICAgICAgICAgXSkuZm9yRWFjaCgocHJvcCk9PntcbiAgICAgICAgICAgICAgICBpZiAocHJvcCA9PT0ga2V5IHx8ICFhbmltYXRlZFByb3BzLmhhcyhwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRlZFByb3BzLnNldChwcm9wLCByZXNvbHZlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiBfYW5pbWF0ZU9wdGlvbnModGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICAgICAgY29uc3QgbmV3T3B0aW9ucyA9IHZhbHVlcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gcmVzb2x2ZVRhcmdldE9wdGlvbnModGFyZ2V0LCBuZXdPcHRpb25zKTtcbiAgICAgICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IHRoaXMuX2NyZWF0ZUFuaW1hdGlvbnMob3B0aW9ucywgbmV3T3B0aW9ucyk7XG4gICAgICAgIGlmIChuZXdPcHRpb25zLiRzaGFyZWQpIHtcbiAgICAgICAgICAgIGF3YWl0QWxsKHRhcmdldC5vcHRpb25zLiRhbmltYXRpb25zLCBuZXdPcHRpb25zKS50aGVuKCgpPT57XG4gICAgICAgICAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBuZXdPcHRpb25zO1xuICAgICAgICAgICAgfSwgKCk9PntcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiBfY3JlYXRlQW5pbWF0aW9ucyh0YXJnZXQsIHZhbHVlcykge1xuICAgICAgICBjb25zdCBhbmltYXRlZFByb3BzID0gdGhpcy5fcHJvcGVydGllcztcbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IFtdO1xuICAgICAgICBjb25zdCBydW5uaW5nID0gdGFyZ2V0LiRhbmltYXRpb25zIHx8ICh0YXJnZXQuJGFuaW1hdGlvbnMgPSB7fSk7XG4gICAgICAgIGNvbnN0IHByb3BzID0gT2JqZWN0LmtleXModmFsdWVzKTtcbiAgICAgICAgY29uc3QgZGF0ZSA9IERhdGUubm93KCk7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IoaSA9IHByb3BzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgIGNvbnN0IHByb3AgPSBwcm9wc1tpXTtcbiAgICAgICAgICAgIGlmIChwcm9wLmNoYXJBdCgwKSA9PT0gJyQnKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ29wdGlvbnMnKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuX2FuaW1hdGVPcHRpb25zKHRhcmdldCwgdmFsdWVzKSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1twcm9wXTtcbiAgICAgICAgICAgIGxldCBhbmltYXRpb24gPSBydW5uaW5nW3Byb3BdO1xuICAgICAgICAgICAgY29uc3QgY2ZnID0gYW5pbWF0ZWRQcm9wcy5nZXQocHJvcCk7XG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNmZyAmJiBhbmltYXRpb24uYWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnVwZGF0ZShjZmcsIHZhbHVlLCBkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2ZnIHx8ICFjZmcuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJ1bm5pbmdbcHJvcF0gPSBhbmltYXRpb24gPSBuZXcgQW5pbWF0aW9uKGNmZywgdGFyZ2V0LCBwcm9wLCB2YWx1ZSk7XG4gICAgICAgICAgICBhbmltYXRpb25zLnB1c2goYW5pbWF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgICB9XG4gdXBkYXRlKHRhcmdldCwgdmFsdWVzKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcm9wZXJ0aWVzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGFyZ2V0LCB2YWx1ZXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSB0aGlzLl9jcmVhdGVBbmltYXRpb25zKHRhcmdldCwgdmFsdWVzKTtcbiAgICAgICAgaWYgKGFuaW1hdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBhbmltYXRvci5hZGQodGhpcy5fY2hhcnQsIGFuaW1hdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBhd2FpdEFsbChhbmltYXRpb25zLCBwcm9wZXJ0aWVzKSB7XG4gICAgY29uc3QgcnVubmluZyA9IFtdO1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IGFuaW0gPSBhbmltYXRpb25zW2tleXNbaV1dO1xuICAgICAgICBpZiAoYW5pbSAmJiBhbmltLmFjdGl2ZSgpKSB7XG4gICAgICAgICAgICBydW5uaW5nLnB1c2goYW5pbS53YWl0KCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLmFsbChydW5uaW5nKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVUYXJnZXRPcHRpb25zKHRhcmdldCwgbmV3T3B0aW9ucykge1xuICAgIGlmICghbmV3T3B0aW9ucykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBvcHRpb25zID0gdGFyZ2V0Lm9wdGlvbnM7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgIHRhcmdldC5vcHRpb25zID0gbmV3T3B0aW9ucztcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy4kc2hhcmVkKSB7XG4gICAgICAgIHRhcmdldC5vcHRpb25zID0gb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgICRzaGFyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgJGFuaW1hdGlvbnM6IHt9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gc2NhbGVDbGlwKHNjYWxlLCBhbGxvd2VkT3ZlcmZsb3cpIHtcbiAgICBjb25zdCBvcHRzID0gc2NhbGUgJiYgc2NhbGUub3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCByZXZlcnNlID0gb3B0cy5yZXZlcnNlO1xuICAgIGNvbnN0IG1pbiA9IG9wdHMubWluID09PSB1bmRlZmluZWQgPyBhbGxvd2VkT3ZlcmZsb3cgOiAwO1xuICAgIGNvbnN0IG1heCA9IG9wdHMubWF4ID09PSB1bmRlZmluZWQgPyBhbGxvd2VkT3ZlcmZsb3cgOiAwO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiByZXZlcnNlID8gbWF4IDogbWluLFxuICAgICAgICBlbmQ6IHJldmVyc2UgPyBtaW4gOiBtYXhcbiAgICB9O1xufVxuZnVuY3Rpb24gZGVmYXVsdENsaXAoeFNjYWxlLCB5U2NhbGUsIGFsbG93ZWRPdmVyZmxvdykge1xuICAgIGlmIChhbGxvd2VkT3ZlcmZsb3cgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgeCA9IHNjYWxlQ2xpcCh4U2NhbGUsIGFsbG93ZWRPdmVyZmxvdyk7XG4gICAgY29uc3QgeSA9IHNjYWxlQ2xpcCh5U2NhbGUsIGFsbG93ZWRPdmVyZmxvdyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiB5LmVuZCxcbiAgICAgICAgcmlnaHQ6IHguZW5kLFxuICAgICAgICBib3R0b206IHkuc3RhcnQsXG4gICAgICAgIGxlZnQ6IHguc3RhcnRcbiAgICB9O1xufVxuZnVuY3Rpb24gdG9DbGlwKHZhbHVlKSB7XG4gICAgbGV0IHQsIHIsIGIsIGw7XG4gICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB0ID0gdmFsdWUudG9wO1xuICAgICAgICByID0gdmFsdWUucmlnaHQ7XG4gICAgICAgIGIgPSB2YWx1ZS5ib3R0b207XG4gICAgICAgIGwgPSB2YWx1ZS5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHQgPSByID0gYiA9IGwgPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiB0LFxuICAgICAgICByaWdodDogcixcbiAgICAgICAgYm90dG9tOiBiLFxuICAgICAgICBsZWZ0OiBsLFxuICAgICAgICBkaXNhYmxlZDogdmFsdWUgPT09IGZhbHNlXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCBmaWx0ZXJWaXNpYmxlKSB7XG4gICAgY29uc3Qga2V5cyA9IFtdO1xuICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuX2dldFNvcnRlZERhdGFzZXRNZXRhcyhmaWx0ZXJWaXNpYmxlKTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBrZXlzLnB1c2gobWV0YXNldHNbaV0uaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIGFwcGx5U3RhY2soc3RhY2ssIHZhbHVlLCBkc0luZGV4LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBrZXlzID0gc3RhY2sua2V5cztcbiAgICBjb25zdCBzaW5nbGVNb2RlID0gb3B0aW9ucy5tb2RlID09PSAnc2luZ2xlJztcbiAgICBsZXQgaSwgaWxlbiwgZGF0YXNldEluZGV4LCBvdGhlclZhbHVlO1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvcihpID0gMCwgaWxlbiA9IGtleXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgZGF0YXNldEluZGV4ID0gK2tleXNbaV07XG4gICAgICAgIGlmIChkYXRhc2V0SW5kZXggPT09IGRzSW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmFsbCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJWYWx1ZSA9IHN0YWNrLnZhbHVlc1tkYXRhc2V0SW5kZXhdO1xuICAgICAgICBpZiAoaXNOdW1iZXJGaW5pdGUob3RoZXJWYWx1ZSkgJiYgKHNpbmdsZU1vZGUgfHwgdmFsdWUgPT09IDAgfHwgc2lnbih2YWx1ZSkgPT09IHNpZ24ob3RoZXJWYWx1ZSkpKSB7XG4gICAgICAgICAgICB2YWx1ZSArPSBvdGhlclZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRPYmplY3REYXRhVG9BcnJheShkYXRhKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgIGNvbnN0IGFkYXRhID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICBsZXQgaSwgaWxlbiwga2V5O1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGtleXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgYWRhdGFbaV0gPSB7XG4gICAgICAgICAgICB4OiBrZXksXG4gICAgICAgICAgICB5OiBkYXRhW2tleV1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGFkYXRhO1xufVxuZnVuY3Rpb24gaXNTdGFja2VkKHNjYWxlLCBtZXRhKSB7XG4gICAgY29uc3Qgc3RhY2tlZCA9IHNjYWxlICYmIHNjYWxlLm9wdGlvbnMuc3RhY2tlZDtcbiAgICByZXR1cm4gc3RhY2tlZCB8fCBzdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayAhPT0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZ2V0U3RhY2tLZXkoaW5kZXhTY2FsZSwgdmFsdWVTY2FsZSwgbWV0YSkge1xuICAgIHJldHVybiBgJHtpbmRleFNjYWxlLmlkfS4ke3ZhbHVlU2NhbGUuaWR9LiR7bWV0YS5zdGFjayB8fCBtZXRhLnR5cGV9YDtcbn1cbmZ1bmN0aW9uIGdldFVzZXJCb3VuZHMoc2NhbGUpIHtcbiAgICBjb25zdCB7IG1pbiAsIG1heCAsIG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gc2NhbGUuZ2V0VXNlckJvdW5kcygpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG1pbjogbWluRGVmaW5lZCA/IG1pbiA6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSxcbiAgICAgICAgbWF4OiBtYXhEZWZpbmVkID8gbWF4IDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldE9yQ3JlYXRlU3RhY2soc3RhY2tzLCBzdGFja0tleSwgaW5kZXhWYWx1ZSkge1xuICAgIGNvbnN0IHN1YlN0YWNrID0gc3RhY2tzW3N0YWNrS2V5XSB8fCAoc3RhY2tzW3N0YWNrS2V5XSA9IHt9KTtcbiAgICByZXR1cm4gc3ViU3RhY2tbaW5kZXhWYWx1ZV0gfHwgKHN1YlN0YWNrW2luZGV4VmFsdWVdID0ge30pO1xufVxuZnVuY3Rpb24gZ2V0TGFzdEluZGV4SW5TdGFjayhzdGFjaywgdlNjYWxlLCBwb3NpdGl2ZSwgdHlwZSkge1xuICAgIGZvciAoY29uc3QgbWV0YSBvZiB2U2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModHlwZSkucmV2ZXJzZSgpKXtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzdGFja1ttZXRhLmluZGV4XTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIHZhbHVlID4gMCB8fCAhcG9zaXRpdmUgJiYgdmFsdWUgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbWV0YS5pbmRleDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN0YWNrcyhjb250cm9sbGVyLCBwYXJzZWQpIHtcbiAgICBjb25zdCB7IGNoYXJ0ICwgX2NhY2hlZE1ldGE6IG1ldGEgIH0gPSBjb250cm9sbGVyO1xuICAgIGNvbnN0IHN0YWNrcyA9IGNoYXJ0Ll9zdGFja3MgfHwgKGNoYXJ0Ll9zdGFja3MgPSB7fSk7XG4gICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgLCBpbmRleDogZGF0YXNldEluZGV4ICB9ID0gbWV0YTtcbiAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgY29uc3Qga2V5ID0gZ2V0U3RhY2tLZXkoaVNjYWxlLCB2U2NhbGUsIG1ldGEpO1xuICAgIGNvbnN0IGlsZW4gPSBwYXJzZWQubGVuZ3RoO1xuICAgIGxldCBzdGFjaztcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgY29uc3QgaXRlbSA9IHBhcnNlZFtpXTtcbiAgICAgICAgY29uc3QgeyBbaUF4aXNdOiBpbmRleCAsIFt2QXhpc106IHZhbHVlICB9ID0gaXRlbTtcbiAgICAgICAgY29uc3QgaXRlbVN0YWNrcyA9IGl0ZW0uX3N0YWNrcyB8fCAoaXRlbS5fc3RhY2tzID0ge30pO1xuICAgICAgICBzdGFjayA9IGl0ZW1TdGFja3NbdkF4aXNdID0gZ2V0T3JDcmVhdGVTdGFjayhzdGFja3MsIGtleSwgaW5kZXgpO1xuICAgICAgICBzdGFja1tkYXRhc2V0SW5kZXhdID0gdmFsdWU7XG4gICAgICAgIHN0YWNrLl90b3AgPSBnZXRMYXN0SW5kZXhJblN0YWNrKHN0YWNrLCB2U2NhbGUsIHRydWUsIG1ldGEudHlwZSk7XG4gICAgICAgIHN0YWNrLl9ib3R0b20gPSBnZXRMYXN0SW5kZXhJblN0YWNrKHN0YWNrLCB2U2NhbGUsIGZhbHNlLCBtZXRhLnR5cGUpO1xuICAgICAgICBjb25zdCB2aXN1YWxWYWx1ZXMgPSBzdGFjay5fdmlzdWFsVmFsdWVzIHx8IChzdGFjay5fdmlzdWFsVmFsdWVzID0ge30pO1xuICAgICAgICB2aXN1YWxWYWx1ZXNbZGF0YXNldEluZGV4XSA9IHZhbHVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEZpcnN0U2NhbGVJZChjaGFydCwgYXhpcykge1xuICAgIGNvbnN0IHNjYWxlcyA9IGNoYXJ0LnNjYWxlcztcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc2NhbGVzKS5maWx0ZXIoKGtleSk9PnNjYWxlc1trZXldLmF4aXMgPT09IGF4aXMpLnNoaWZ0KCk7XG59XG5mdW5jdGlvbiBjcmVhdGVEYXRhc2V0Q29udGV4dChwYXJlbnQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgIGRhdGFzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgZGF0YXNldEluZGV4OiBpbmRleCxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIG1vZGU6ICdkZWZhdWx0JyxcbiAgICAgICAgdHlwZTogJ2RhdGFzZXQnXG4gICAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVEYXRhQ29udGV4dChwYXJlbnQsIGluZGV4LCBlbGVtZW50KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgIGRhdGFJbmRleDogaW5kZXgsXG4gICAgICAgIHBhcnNlZDogdW5kZWZpbmVkLFxuICAgICAgICByYXc6IHVuZGVmaW5lZCxcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIG1vZGU6ICdkZWZhdWx0JyxcbiAgICAgICAgdHlwZTogJ2RhdGEnXG4gICAgfSk7XG59XG5mdW5jdGlvbiBjbGVhclN0YWNrcyhtZXRhLCBpdGVtcykge1xuICAgIGNvbnN0IGRhdGFzZXRJbmRleCA9IG1ldGEuY29udHJvbGxlci5pbmRleDtcbiAgICBjb25zdCBheGlzID0gbWV0YS52U2NhbGUgJiYgbWV0YS52U2NhbGUuYXhpcztcbiAgICBpZiAoIWF4aXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpdGVtcyA9IGl0ZW1zIHx8IG1ldGEuX3BhcnNlZDtcbiAgICBmb3IgKGNvbnN0IHBhcnNlZCBvZiBpdGVtcyl7XG4gICAgICAgIGNvbnN0IHN0YWNrcyA9IHBhcnNlZC5fc3RhY2tzO1xuICAgICAgICBpZiAoIXN0YWNrcyB8fCBzdGFja3NbYXhpc10gPT09IHVuZGVmaW5lZCB8fCBzdGFja3NbYXhpc11bZGF0YXNldEluZGV4XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHN0YWNrc1theGlzXVtkYXRhc2V0SW5kZXhdO1xuICAgICAgICBpZiAoc3RhY2tzW2F4aXNdLl92aXN1YWxWYWx1ZXMgIT09IHVuZGVmaW5lZCAmJiBzdGFja3NbYXhpc10uX3Zpc3VhbFZhbHVlc1tkYXRhc2V0SW5kZXhdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzdGFja3NbYXhpc10uX3Zpc3VhbFZhbHVlc1tkYXRhc2V0SW5kZXhdO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgaXNEaXJlY3RVcGRhdGVNb2RlID0gKG1vZGUpPT5tb2RlID09PSAncmVzZXQnIHx8IG1vZGUgPT09ICdub25lJztcbmNvbnN0IGNsb25lSWZOb3RTaGFyZWQgPSAoY2FjaGVkLCBzaGFyZWQpPT5zaGFyZWQgPyBjYWNoZWQgOiBPYmplY3QuYXNzaWduKHt9LCBjYWNoZWQpO1xuY29uc3QgY3JlYXRlU3RhY2sgPSAoY2FuU3RhY2ssIG1ldGEsIGNoYXJ0KT0+Y2FuU3RhY2sgJiYgIW1ldGEuaGlkZGVuICYmIG1ldGEuX3N0YWNrZWQgJiYge1xuICAgICAgICBrZXlzOiBnZXRTb3J0ZWREYXRhc2V0SW5kaWNlcyhjaGFydCwgdHJ1ZSksXG4gICAgICAgIHZhbHVlczogbnVsbFxuICAgIH07XG5jbGFzcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gc3RhdGljIGRlZmF1bHRzID0ge307XG4gc3RhdGljIGRhdGFzZXRFbGVtZW50VHlwZSA9IG51bGw7XG4gc3RhdGljIGRhdGFFbGVtZW50VHlwZSA9IG51bGw7XG4gY29uc3RydWN0b3IoY2hhcnQsIGRhdGFzZXRJbmRleCl7XG4gICAgICAgIHRoaXMuY2hhcnQgPSBjaGFydDtcbiAgICAgICAgdGhpcy5fY3R4ID0gY2hhcnQuY3R4O1xuICAgICAgICB0aGlzLmluZGV4ID0gZGF0YXNldEluZGV4O1xuICAgICAgICB0aGlzLl9jYWNoZWREYXRhT3B0cyA9IHt9O1xuICAgICAgICB0aGlzLl9jYWNoZWRNZXRhID0gdGhpcy5nZXRNZXRhKCk7XG4gICAgICAgIHRoaXMuX3R5cGUgPSB0aGlzLl9jYWNoZWRNZXRhLnR5cGU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX3BhcnNpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fb2JqZWN0RGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2hhcmVkT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZHJhd1N0YXJ0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9kcmF3Q291bnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN1cHBvcnRzRGVjaW1hdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSA9IG5ldy50YXJnZXQuZGF0YXNldEVsZW1lbnRUeXBlO1xuICAgICAgICB0aGlzLmRhdGFFbGVtZW50VHlwZSA9IG5ldy50YXJnZXQuZGF0YUVsZW1lbnRUeXBlO1xuICAgICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIHRoaXMuY29uZmlndXJlKCk7XG4gICAgICAgIHRoaXMubGlua1NjYWxlcygpO1xuICAgICAgICBtZXRhLl9zdGFja2VkID0gaXNTdGFja2VkKG1ldGEudlNjYWxlLCBtZXRhKTtcbiAgICAgICAgdGhpcy5hZGRFbGVtZW50cygpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZpbGwgJiYgIXRoaXMuY2hhcnQuaXNQbHVnaW5FbmFibGVkKCdmaWxsZXInKSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVHJpZWQgdG8gdXNlIHRoZSAnZmlsbCcgb3B0aW9uIHdpdGhvdXQgdGhlICdGaWxsZXInIHBsdWdpbiBlbmFibGVkLiBQbGVhc2UgaW1wb3J0IGFuZCByZWdpc3RlciB0aGUgJ0ZpbGxlcicgcGx1Z2luIGFuZCBtYWtlIHN1cmUgaXQgaXMgbm90IGRpc2FibGVkIGluIHRoZSBvcHRpb25zXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUluZGV4KGRhdGFzZXRJbmRleCkge1xuICAgICAgICBpZiAodGhpcy5pbmRleCAhPT0gZGF0YXNldEluZGV4KSB7XG4gICAgICAgICAgICBjbGVhclN0YWNrcyh0aGlzLl9jYWNoZWRNZXRhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluZGV4ID0gZGF0YXNldEluZGV4O1xuICAgIH1cbiAgICBsaW5rU2NhbGVzKCkge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgICAgIGNvbnN0IGNob29zZUlkID0gKGF4aXMsIHgsIHksIHIpPT5heGlzID09PSAneCcgPyB4IDogYXhpcyA9PT0gJ3InID8gciA6IHk7XG4gICAgICAgIGNvbnN0IHhpZCA9IG1ldGEueEF4aXNJRCA9IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQueEF4aXNJRCwgZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCAneCcpKTtcbiAgICAgICAgY29uc3QgeWlkID0gbWV0YS55QXhpc0lEID0gdmFsdWVPckRlZmF1bHQoZGF0YXNldC55QXhpc0lELCBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsICd5JykpO1xuICAgICAgICBjb25zdCByaWQgPSBtZXRhLnJBeGlzSUQgPSB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnJBeGlzSUQsIGdldEZpcnN0U2NhbGVJZChjaGFydCwgJ3InKSk7XG4gICAgICAgIGNvbnN0IGluZGV4QXhpcyA9IG1ldGEuaW5kZXhBeGlzO1xuICAgICAgICBjb25zdCBpaWQgPSBtZXRhLmlBeGlzSUQgPSBjaG9vc2VJZChpbmRleEF4aXMsIHhpZCwgeWlkLCByaWQpO1xuICAgICAgICBjb25zdCB2aWQgPSBtZXRhLnZBeGlzSUQgPSBjaG9vc2VJZChpbmRleEF4aXMsIHlpZCwgeGlkLCByaWQpO1xuICAgICAgICBtZXRhLnhTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZCh4aWQpO1xuICAgICAgICBtZXRhLnlTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZCh5aWQpO1xuICAgICAgICBtZXRhLnJTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZChyaWQpO1xuICAgICAgICBtZXRhLmlTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZChpaWQpO1xuICAgICAgICBtZXRhLnZTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZCh2aWQpO1xuICAgIH1cbiAgICBnZXREYXRhc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3RoaXMuaW5kZXhdO1xuICAgIH1cbiAgICBnZXRNZXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YSh0aGlzLmluZGV4KTtcbiAgICB9XG4gZ2V0U2NhbGVGb3JJZChzY2FsZUlEKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LnNjYWxlc1tzY2FsZUlEXTtcbiAgICB9XG4gX2dldE90aGVyU2NhbGUoc2NhbGUpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIHJldHVybiBzY2FsZSA9PT0gbWV0YS5pU2NhbGUgPyBtZXRhLnZTY2FsZSA6IG1ldGEuaVNjYWxlO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlKCdyZXNldCcpO1xuICAgIH1cbiBfZGVzdHJveSgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGlmICh0aGlzLl9kYXRhKSB7XG4gICAgICAgICAgICB1bmxpc3RlbkFycmF5RXZlbnRzKHRoaXMuX2RhdGEsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgICAgICBjbGVhclN0YWNrcyhtZXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiBfZGF0YUNoZWNrKCkge1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBkYXRhc2V0LmRhdGEgfHwgKGRhdGFzZXQuZGF0YSA9IFtdKTtcbiAgICAgICAgY29uc3QgX2RhdGEgPSB0aGlzLl9kYXRhO1xuICAgICAgICBpZiAoaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBjb252ZXJ0T2JqZWN0RGF0YVRvQXJyYXkoZGF0YSk7XG4gICAgICAgIH0gZWxzZSBpZiAoX2RhdGEgIT09IGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChfZGF0YSkge1xuICAgICAgICAgICAgICAgIHVubGlzdGVuQXJyYXlFdmVudHMoX2RhdGEsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICAgICAgICAgIGNsZWFyU3RhY2tzKG1ldGEpO1xuICAgICAgICAgICAgICAgIG1ldGEuX3BhcnNlZCA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShkYXRhKSkge1xuICAgICAgICAgICAgICAgIGxpc3RlbkFycmF5RXZlbnRzKGRhdGEsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc3luY0xpc3QgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZEVsZW1lbnRzKCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy5fZGF0YUNoZWNrKCk7XG4gICAgICAgIGlmICh0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSkge1xuICAgICAgICAgICAgbWV0YS5kYXRhc2V0ID0gbmV3IHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYnVpbGRPclVwZGF0ZUVsZW1lbnRzKHJlc2V0TmV3RWxlbWVudHMpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICAgICAgbGV0IHN0YWNrQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kYXRhQ2hlY2soKTtcbiAgICAgICAgY29uc3Qgb2xkU3RhY2tlZCA9IG1ldGEuX3N0YWNrZWQ7XG4gICAgICAgIG1ldGEuX3N0YWNrZWQgPSBpc1N0YWNrZWQobWV0YS52U2NhbGUsIG1ldGEpO1xuICAgICAgICBpZiAobWV0YS5zdGFjayAhPT0gZGF0YXNldC5zdGFjaykge1xuICAgICAgICAgICAgc3RhY2tDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNsZWFyU3RhY2tzKG1ldGEpO1xuICAgICAgICAgICAgbWV0YS5zdGFjayA9IGRhdGFzZXQuc3RhY2s7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzeW5jRWxlbWVudHMocmVzZXROZXdFbGVtZW50cyk7XG4gICAgICAgIGlmIChzdGFja0NoYW5nZWQgfHwgb2xkU3RhY2tlZCAhPT0gbWV0YS5fc3RhY2tlZCkge1xuICAgICAgICAgICAgdXBkYXRlU3RhY2tzKHRoaXMsIG1ldGEuX3BhcnNlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gY29uZmlndXJlKCkge1xuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNoYXJ0LmNvbmZpZztcbiAgICAgICAgY29uc3Qgc2NvcGVLZXlzID0gY29uZmlnLmRhdGFzZXRTY29wZUtleXModGhpcy5fdHlwZSk7XG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXModGhpcy5nZXREYXRhc2V0KCksIHNjb3BlS2V5cywgdHJ1ZSk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihzY29wZXMsIHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgdGhpcy5fcGFyc2luZyA9IHRoaXMub3B0aW9ucy5wYXJzaW5nO1xuICAgICAgICB0aGlzLl9jYWNoZWREYXRhT3B0cyA9IHt9O1xuICAgIH1cbiBwYXJzZShzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgeyBfY2FjaGVkTWV0YTogbWV0YSAsIF9kYXRhOiBkYXRhICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCBfc3RhY2tlZCAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGxldCBzb3J0ZWQgPSBzdGFydCA9PT0gMCAmJiBjb3VudCA9PT0gZGF0YS5sZW5ndGggPyB0cnVlIDogbWV0YS5fc29ydGVkO1xuICAgICAgICBsZXQgcHJldiA9IHN0YXJ0ID4gMCAmJiBtZXRhLl9wYXJzZWRbc3RhcnQgLSAxXTtcbiAgICAgICAgbGV0IGksIGN1ciwgcGFyc2VkO1xuICAgICAgICBpZiAodGhpcy5fcGFyc2luZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG1ldGEuX3BhcnNlZCA9IGRhdGE7XG4gICAgICAgICAgICBtZXRhLl9zb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcGFyc2VkID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KGRhdGFbc3RhcnRdKSkge1xuICAgICAgICAgICAgICAgIHBhcnNlZCA9IHRoaXMucGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoZGF0YVtzdGFydF0pKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2ID0gKCk9PmN1cltpQXhpc10gPT09IG51bGwgfHwgcHJldiAmJiBjdXJbaUF4aXNdIDwgcHJldltpQXhpc107XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBjb3VudDsgKytpKXtcbiAgICAgICAgICAgICAgICBtZXRhLl9wYXJzZWRbaSArIHN0YXJ0XSA9IGN1ciA9IHBhcnNlZFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoc29ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05vdEluT3JkZXJDb21wYXJlZFRvUHJldigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwcmV2ID0gY3VyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGEuX3NvcnRlZCA9IHNvcnRlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3N0YWNrZWQpIHtcbiAgICAgICAgICAgIHVwZGF0ZVN0YWNrcyh0aGlzLCBwYXJzZWQpO1xuICAgICAgICB9XG4gICAgfVxuIHBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCBsYWJlbHMgPSBpU2NhbGUuZ2V0TGFiZWxzKCk7XG4gICAgICAgIGNvbnN0IHNpbmdsZVNjYWxlID0gaVNjYWxlID09PSB2U2NhbGU7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgICAgIGxldCBpLCBpbGVuLCBpbmRleDtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICAgICAgICBwYXJzZWRbaV0gPSB7XG4gICAgICAgICAgICAgICAgW2lBeGlzXTogc2luZ2xlU2NhbGUgfHwgaVNjYWxlLnBhcnNlKGxhYmVsc1tpbmRleF0sIGluZGV4KSxcbiAgICAgICAgICAgICAgICBbdkF4aXNdOiB2U2NhbGUucGFyc2UoZGF0YVtpbmRleF0sIGluZGV4KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBwYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgICAgICBsZXQgaSwgaWxlbiwgaW5kZXgsIGl0ZW07XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGluZGV4ID0gaSArIHN0YXJ0O1xuICAgICAgICAgICAgaXRlbSA9IGRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgcGFyc2VkW2ldID0ge1xuICAgICAgICAgICAgICAgIHg6IHhTY2FsZS5wYXJzZShpdGVtWzBdLCBpbmRleCksXG4gICAgICAgICAgICAgICAgeTogeVNjYWxlLnBhcnNlKGl0ZW1bMV0sIGluZGV4KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IHsgeFNjYWxlICwgeVNjYWxlICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgeyB4QXhpc0tleSA9J3gnICwgeUF4aXNLZXkgPSd5JyAgfSA9IHRoaXMuX3BhcnNpbmc7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgICAgIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICAgICAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgICAgICAgICBwYXJzZWRbaV0gPSB7XG4gICAgICAgICAgICAgICAgeDogeFNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkoaXRlbSwgeEF4aXNLZXkpLCBpbmRleCksXG4gICAgICAgICAgICAgICAgeTogeVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkoaXRlbSwgeUF4aXNLZXkpLCBpbmRleClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG4gZ2V0UGFyc2VkKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRNZXRhLl9wYXJzZWRbaW5kZXhdO1xuICAgIH1cbiBnZXREYXRhRWxlbWVudChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkTWV0YS5kYXRhW2luZGV4XTtcbiAgICB9XG4gYXBwbHlTdGFjayhzY2FsZSwgcGFyc2VkLCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFyc2VkW3NjYWxlLmF4aXNdO1xuICAgICAgICBjb25zdCBzdGFjayA9IHtcbiAgICAgICAgICAgIGtleXM6IGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCB0cnVlKSxcbiAgICAgICAgICAgIHZhbHVlczogcGFyc2VkLl9zdGFja3Nbc2NhbGUuYXhpc10uX3Zpc3VhbFZhbHVlc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXBwbHlTdGFjayhzdGFjaywgdmFsdWUsIG1ldGEuaW5kZXgsIHtcbiAgICAgICAgICAgIG1vZGVcbiAgICAgICAgfSk7XG4gICAgfVxuIHVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVmFsdWUgPSBwYXJzZWRbc2NhbGUuYXhpc107XG4gICAgICAgIGxldCB2YWx1ZSA9IHBhcnNlZFZhbHVlID09PSBudWxsID8gTmFOIDogcGFyc2VkVmFsdWU7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHN0YWNrICYmIHBhcnNlZC5fc3RhY2tzW3NjYWxlLmF4aXNdO1xuICAgICAgICBpZiAoc3RhY2sgJiYgdmFsdWVzKSB7XG4gICAgICAgICAgICBzdGFjay52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgICAgICB2YWx1ZSA9IGFwcGx5U3RhY2soc3RhY2ssIHBhcnNlZFZhbHVlLCB0aGlzLl9jYWNoZWRNZXRhLmluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICByYW5nZS5taW4gPSBNYXRoLm1pbihyYW5nZS5taW4sIHZhbHVlKTtcbiAgICAgICAgcmFuZ2UubWF4ID0gTWF0aC5tYXgocmFuZ2UubWF4LCB2YWx1ZSk7XG4gICAgfVxuIGdldE1pbk1heChzY2FsZSwgY2FuU3RhY2spIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IF9wYXJzZWQgPSBtZXRhLl9wYXJzZWQ7XG4gICAgICAgIGNvbnN0IHNvcnRlZCA9IG1ldGEuX3NvcnRlZCAmJiBzY2FsZSA9PT0gbWV0YS5pU2NhbGU7XG4gICAgICAgIGNvbnN0IGlsZW4gPSBfcGFyc2VkLmxlbmd0aDtcbiAgICAgICAgY29uc3Qgb3RoZXJTY2FsZSA9IHRoaXMuX2dldE90aGVyU2NhbGUoc2NhbGUpO1xuICAgICAgICBjb25zdCBzdGFjayA9IGNyZWF0ZVN0YWNrKGNhblN0YWNrLCBtZXRhLCB0aGlzLmNoYXJ0KTtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB7XG4gICAgICAgICAgICBtaW46IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgICAgICAgIG1heDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHsgbWluOiBvdGhlck1pbiAsIG1heDogb3RoZXJNYXggIH0gPSBnZXRVc2VyQm91bmRzKG90aGVyU2NhbGUpO1xuICAgICAgICBsZXQgaSwgcGFyc2VkO1xuICAgICAgICBmdW5jdGlvbiBfc2tpcCgpIHtcbiAgICAgICAgICAgIHBhcnNlZCA9IF9wYXJzZWRbaV07XG4gICAgICAgICAgICBjb25zdCBvdGhlclZhbHVlID0gcGFyc2VkW290aGVyU2NhbGUuYXhpc107XG4gICAgICAgICAgICByZXR1cm4gIWlzTnVtYmVyRmluaXRlKHBhcnNlZFtzY2FsZS5heGlzXSkgfHwgb3RoZXJNaW4gPiBvdGhlclZhbHVlIHx8IG90aGVyTWF4IDwgb3RoZXJWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDA7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaWYgKF9za2lwKCkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgICAgICAgICBpZiAoc29ydGVkKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvcnRlZCkge1xuICAgICAgICAgICAgZm9yKGkgPSBpbGVuIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgICAgIGlmIChfc2tpcCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByYW5nZTtcbiAgICB9XG4gICAgZ2V0QWxsUGFyc2VkVmFsdWVzKHNjYWxlKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuX2NhY2hlZE1ldGEuX3BhcnNlZDtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gcGFyc2VkLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB2YWx1ZSA9IHBhcnNlZFtpXVtzY2FsZS5heGlzXTtcbiAgICAgICAgICAgIGlmIChpc051bWJlckZpbml0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG4gZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgaVNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgICAgIGNvbnN0IHZTY2FsZSA9IG1ldGEudlNjYWxlO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbDogaVNjYWxlID8gJycgKyBpU2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbaVNjYWxlLmF4aXNdKSA6ICcnLFxuICAgICAgICAgICAgdmFsdWU6IHZTY2FsZSA/ICcnICsgdlNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW3ZTY2FsZS5heGlzXSkgOiAnJ1xuICAgICAgICB9O1xuICAgIH1cbiBfdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIHRoaXMudXBkYXRlKG1vZGUgfHwgJ2RlZmF1bHQnKTtcbiAgICAgICAgbWV0YS5fY2xpcCA9IHRvQ2xpcCh2YWx1ZU9yRGVmYXVsdCh0aGlzLm9wdGlvbnMuY2xpcCwgZGVmYXVsdENsaXAobWV0YS54U2NhbGUsIG1ldGEueVNjYWxlLCB0aGlzLmdldE1heE92ZXJmbG93KCkpKSk7XG4gICAgfVxuIHVwZGF0ZShtb2RlKSB7fVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2N0eDtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgICAgIGNvbnN0IGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IFtdO1xuICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMuX2RyYXdTdGFydCB8fCAwO1xuICAgICAgICBjb25zdCBjb3VudCA9IHRoaXMuX2RyYXdDb3VudCB8fCBlbGVtZW50cy5sZW5ndGggLSBzdGFydDtcbiAgICAgICAgY29uc3QgZHJhd0FjdGl2ZUVsZW1lbnRzT25Ub3AgPSB0aGlzLm9wdGlvbnMuZHJhd0FjdGl2ZUVsZW1lbnRzT25Ub3A7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBpZiAobWV0YS5kYXRhc2V0KSB7XG4gICAgICAgICAgICBtZXRhLmRhdGFzZXQuZHJhdyhjdHgsIGFyZWEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSl7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbGVtZW50LmFjdGl2ZSAmJiBkcmF3QWN0aXZlRWxlbWVudHNPblRvcCkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZS5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmRyYXcoY3R4LCBhcmVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDA7IGkgPCBhY3RpdmUubGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgYWN0aXZlW2ldLmRyYXcoY3R4LCBhcmVhKTtcbiAgICAgICAgfVxuICAgIH1cbiBnZXRTdHlsZShpbmRleCwgYWN0aXZlKSB7XG4gICAgICAgIGNvbnN0IG1vZGUgPSBhY3RpdmUgPyAnYWN0aXZlJyA6ICdkZWZhdWx0JztcbiAgICAgICAgcmV0dXJuIGluZGV4ID09PSB1bmRlZmluZWQgJiYgdGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0ID8gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpIDogdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4IHx8IDAsIG1vZGUpO1xuICAgIH1cbiBnZXRDb250ZXh0KGluZGV4LCBhY3RpdmUsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgICAgICBsZXQgY29udGV4dDtcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9jYWNoZWRNZXRhLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnRleHQgPSBlbGVtZW50LiRjb250ZXh0IHx8IChlbGVtZW50LiRjb250ZXh0ID0gY3JlYXRlRGF0YUNvbnRleHQodGhpcy5nZXRDb250ZXh0KCksIGluZGV4LCBlbGVtZW50KSk7XG4gICAgICAgICAgICBjb250ZXh0LnBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgICAgIGNvbnRleHQucmF3ID0gZGF0YXNldC5kYXRhW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnRleHQuaW5kZXggPSBjb250ZXh0LmRhdGFJbmRleCA9IGluZGV4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dCA9IHRoaXMuJGNvbnRleHQgfHwgKHRoaXMuJGNvbnRleHQgPSBjcmVhdGVEYXRhc2V0Q29udGV4dCh0aGlzLmNoYXJ0LmdldENvbnRleHQoKSwgdGhpcy5pbmRleCkpO1xuICAgICAgICAgICAgY29udGV4dC5kYXRhc2V0ID0gZGF0YXNldDtcbiAgICAgICAgICAgIGNvbnRleHQuaW5kZXggPSBjb250ZXh0LmRhdGFzZXRJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5hY3RpdmUgPSAhIWFjdGl2ZTtcbiAgICAgICAgY29udGV4dC5tb2RlID0gbW9kZTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgfVxuIHJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZUVsZW1lbnRPcHRpb25zKHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlLmlkLCBtb2RlKTtcbiAgICB9XG4gcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCwgbW9kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZUVsZW1lbnRPcHRpb25zKHRoaXMuZGF0YUVsZW1lbnRUeXBlLmlkLCBtb2RlLCBpbmRleCk7XG4gICAgfVxuIF9yZXNvbHZlRWxlbWVudE9wdGlvbnMoZWxlbWVudFR5cGUsIG1vZGUgPSAnZGVmYXVsdCcsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IG1vZGUgPT09ICdhY3RpdmUnO1xuICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlZERhdGFPcHRzO1xuICAgICAgICBjb25zdCBjYWNoZUtleSA9IGVsZW1lbnRUeXBlICsgJy0nICsgbW9kZTtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGVbY2FjaGVLZXldO1xuICAgICAgICBjb25zdCBzaGFyaW5nID0gdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nICYmIGRlZmluZWQoaW5kZXgpO1xuICAgICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xvbmVJZk5vdFNoYXJlZChjYWNoZWQsIHNoYXJpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgICAgICBjb25zdCBzY29wZUtleXMgPSBjb25maWcuZGF0YXNldEVsZW1lbnRTY29wZUtleXModGhpcy5fdHlwZSwgZWxlbWVudFR5cGUpO1xuICAgICAgICBjb25zdCBwcmVmaXhlcyA9IGFjdGl2ZSA/IFtcbiAgICAgICAgICAgIGAke2VsZW1lbnRUeXBlfUhvdmVyYCxcbiAgICAgICAgICAgICdob3ZlcicsXG4gICAgICAgICAgICBlbGVtZW50VHlwZSxcbiAgICAgICAgICAgICcnXG4gICAgICAgIF0gOiBbXG4gICAgICAgICAgICBlbGVtZW50VHlwZSxcbiAgICAgICAgICAgICcnXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXModGhpcy5nZXREYXRhc2V0KCksIHNjb3BlS2V5cyk7XG4gICAgICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMoZGVmYXVsdHMuZWxlbWVudHNbZWxlbWVudFR5cGVdKTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9ICgpPT50aGlzLmdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgbW9kZSk7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IGNvbmZpZy5yZXNvbHZlTmFtZWRPcHRpb25zKHNjb3BlcywgbmFtZXMsIGNvbnRleHQsIHByZWZpeGVzKTtcbiAgICAgICAgaWYgKHZhbHVlcy4kc2hhcmVkKSB7XG4gICAgICAgICAgICB2YWx1ZXMuJHNoYXJlZCA9IHNoYXJpbmc7XG4gICAgICAgICAgICBjYWNoZVtjYWNoZUtleV0gPSBPYmplY3QuZnJlZXplKGNsb25lSWZOb3RTaGFyZWQodmFsdWVzLCBzaGFyaW5nKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG4gX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCB0cmFuc2l0aW9uLCBhY3RpdmUpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlZERhdGFPcHRzO1xuICAgICAgICBjb25zdCBjYWNoZUtleSA9IGBhbmltYXRpb24tJHt0cmFuc2l0aW9ufWA7XG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlW2NhY2hlS2V5XTtcbiAgICAgICAgaWYgKGNhY2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3B0aW9ucztcbiAgICAgICAgaWYgKGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jaGFydC5jb25maWc7XG4gICAgICAgICAgICBjb25zdCBzY29wZUtleXMgPSBjb25maWcuZGF0YXNldEFuaW1hdGlvblNjb3BlS2V5cyh0aGlzLl90eXBlLCB0cmFuc2l0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXModGhpcy5nZXREYXRhc2V0KCksIHNjb3BlS2V5cyk7XG4gICAgICAgICAgICBvcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgdGhpcy5nZXRDb250ZXh0KGluZGV4LCBhY3RpdmUsIHRyYW5zaXRpb24pKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gbmV3IEFuaW1hdGlvbnMoY2hhcnQsIG9wdGlvbnMgJiYgb3B0aW9ucy5hbmltYXRpb25zKTtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5fY2FjaGVhYmxlKSB7XG4gICAgICAgICAgICBjYWNoZVtjYWNoZUtleV0gPSBPYmplY3QuZnJlZXplKGFuaW1hdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiBnZXRTaGFyZWRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLiRzaGFyZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc2hhcmVkT3B0aW9ucyB8fCAodGhpcy5fc2hhcmVkT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpKTtcbiAgICB9XG4gaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gIXNoYXJlZE9wdGlvbnMgfHwgaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpIHx8IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZDtcbiAgICB9XG4gX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgZmlyc3RPcHRzID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICAgICAgY29uc3QgcHJldmlvdXNseVNoYXJlZE9wdGlvbnMgPSB0aGlzLl9zaGFyZWRPcHRpb25zO1xuICAgICAgICBjb25zdCBzaGFyZWRPcHRpb25zID0gdGhpcy5nZXRTaGFyZWRPcHRpb25zKGZpcnN0T3B0cyk7XG4gICAgICAgIGNvbnN0IGluY2x1ZGVPcHRpb25zID0gdGhpcy5pbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKSB8fCBzaGFyZWRPcHRpb25zICE9PSBwcmV2aW91c2x5U2hhcmVkT3B0aW9ucztcbiAgICAgICAgdGhpcy51cGRhdGVTaGFyZWRPcHRpb25zKHNoYXJlZE9wdGlvbnMsIG1vZGUsIGZpcnN0T3B0cyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaGFyZWRPcHRpb25zLFxuICAgICAgICAgICAgaW5jbHVkZU9wdGlvbnNcbiAgICAgICAgfTtcbiAgICB9XG4gdXBkYXRlRWxlbWVudChlbGVtZW50LCBpbmRleCwgcHJvcGVydGllcywgbW9kZSkge1xuICAgICAgICBpZiAoaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZUFuaW1hdGlvbnMoaW5kZXgsIG1vZGUpLnVwZGF0ZShlbGVtZW50LCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgIH1cbiB1cGRhdGVTaGFyZWRPcHRpb25zKHNoYXJlZE9wdGlvbnMsIG1vZGUsIG5ld09wdGlvbnMpIHtcbiAgICAgICAgaWYgKHNoYXJlZE9wdGlvbnMgJiYgIWlzRGlyZWN0VXBkYXRlTW9kZShtb2RlKSkge1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZUFuaW1hdGlvbnModW5kZWZpbmVkLCBtb2RlKS51cGRhdGUoc2hhcmVkT3B0aW9ucywgbmV3T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gX3NldFN0eWxlKGVsZW1lbnQsIGluZGV4LCBtb2RlLCBhY3RpdmUpIHtcbiAgICAgICAgZWxlbWVudC5hY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmdldFN0eWxlKGluZGV4LCBhY3RpdmUpO1xuICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgbW9kZSwgYWN0aXZlKS51cGRhdGUoZWxlbWVudCwge1xuICAgICAgICAgICAgb3B0aW9uczogIWFjdGl2ZSAmJiB0aGlzLmdldFNoYXJlZE9wdGlvbnMob3B0aW9ucykgfHwgb3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVtb3ZlSG92ZXJTdHlsZShlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgICAgIHRoaXMuX3NldFN0eWxlKGVsZW1lbnQsIGluZGV4LCAnYWN0aXZlJywgZmFsc2UpO1xuICAgIH1cbiAgICBzZXRIb3ZlclN0eWxlKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsICdhY3RpdmUnLCB0cnVlKTtcbiAgICB9XG4gX3JlbW92ZURhdGFzZXRIb3ZlclN0eWxlKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0O1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgdW5kZWZpbmVkLCAnYWN0aXZlJywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuIF9zZXREYXRhc2V0SG92ZXJTdHlsZSgpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YXNldDtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldFN0eWxlKGVsZW1lbnQsIHVuZGVmaW5lZCwgJ2FjdGl2ZScsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuIF9yZXN5bmNFbGVtZW50cyhyZXNldE5ld0VsZW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9kYXRhO1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICAgICAgZm9yIChjb25zdCBbbWV0aG9kLCBhcmcxLCBhcmcyXSBvZiB0aGlzLl9zeW5jTGlzdCl7XG4gICAgICAgICAgICB0aGlzW21ldGhvZF0oYXJnMSwgYXJnMik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3luY0xpc3QgPSBbXTtcbiAgICAgICAgY29uc3QgbnVtTWV0YSA9IGVsZW1lbnRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbnVtRGF0YSA9IGRhdGEubGVuZ3RoO1xuICAgICAgICBjb25zdCBjb3VudCA9IE1hdGgubWluKG51bURhdGEsIG51bU1ldGEpO1xuICAgICAgICBpZiAoY291bnQpIHtcbiAgICAgICAgICAgIHRoaXMucGFyc2UoMCwgY291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW1EYXRhID4gbnVtTWV0YSkge1xuICAgICAgICAgICAgdGhpcy5faW5zZXJ0RWxlbWVudHMobnVtTWV0YSwgbnVtRGF0YSAtIG51bU1ldGEsIHJlc2V0TmV3RWxlbWVudHMpO1xuICAgICAgICB9IGVsc2UgaWYgKG51bURhdGEgPCBudW1NZXRhKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVFbGVtZW50cyhudW1EYXRhLCBudW1NZXRhIC0gbnVtRGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG4gX2luc2VydEVsZW1lbnRzKHN0YXJ0LCBjb3VudCwgcmVzZXROZXdFbGVtZW50cyA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBtZXRhLmRhdGE7XG4gICAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgY291bnQ7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBjb25zdCBtb3ZlID0gKGFycik9PntcbiAgICAgICAgICAgIGFyci5sZW5ndGggKz0gY291bnQ7XG4gICAgICAgICAgICBmb3IoaSA9IGFyci5sZW5ndGggLSAxOyBpID49IGVuZDsgaS0tKXtcbiAgICAgICAgICAgICAgICBhcnJbaV0gPSBhcnJbaSAtIGNvdW50XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgbW92ZShkYXRhKTtcbiAgICAgICAgZm9yKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKXtcbiAgICAgICAgICAgIGRhdGFbaV0gPSBuZXcgdGhpcy5kYXRhRWxlbWVudFR5cGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcGFyc2luZykge1xuICAgICAgICAgICAgbW92ZShtZXRhLl9wYXJzZWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyc2Uoc3RhcnQsIGNvdW50KTtcbiAgICAgICAgaWYgKHJlc2V0TmV3RWxlbWVudHMpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMoZGF0YSwgc3RhcnQsIGNvdW50LCAncmVzZXQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhlbGVtZW50LCBzdGFydCwgY291bnQsIG1vZGUpIHt9XG4gX3JlbW92ZUVsZW1lbnRzKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgaWYgKHRoaXMuX3BhcnNpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZWQgPSBtZXRhLl9wYXJzZWQuc3BsaWNlKHN0YXJ0LCBjb3VudCk7XG4gICAgICAgICAgICBpZiAobWV0YS5fc3RhY2tlZCkge1xuICAgICAgICAgICAgICAgIGNsZWFyU3RhY2tzKG1ldGEsIHJlbW92ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1ldGEuZGF0YS5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gX3N5bmMoYXJncykge1xuICAgICAgICBpZiAodGhpcy5fcGFyc2luZykge1xuICAgICAgICAgICAgdGhpcy5fc3luY0xpc3QucHVzaChhcmdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IFttZXRob2QsIGFyZzEsIGFyZzJdID0gYXJncztcbiAgICAgICAgICAgIHRoaXNbbWV0aG9kXShhcmcxLCBhcmcyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoYXJ0Ll9kYXRhQ2hhbmdlcy5wdXNoKFtcbiAgICAgICAgICAgIHRoaXMuaW5kZXgsXG4gICAgICAgICAgICAuLi5hcmdzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBfb25EYXRhUHVzaCgpIHtcbiAgICAgICAgY29uc3QgY291bnQgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB0aGlzLl9zeW5jKFtcbiAgICAgICAgICAgICdfaW5zZXJ0RWxlbWVudHMnLFxuICAgICAgICAgICAgdGhpcy5nZXREYXRhc2V0KCkuZGF0YS5sZW5ndGggLSBjb3VudCxcbiAgICAgICAgICAgIGNvdW50XG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBfb25EYXRhUG9wKCkge1xuICAgICAgICB0aGlzLl9zeW5jKFtcbiAgICAgICAgICAgICdfcmVtb3ZlRWxlbWVudHMnLFxuICAgICAgICAgICAgdGhpcy5fY2FjaGVkTWV0YS5kYXRhLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBfb25EYXRhU2hpZnQoKSB7XG4gICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgJ19yZW1vdmVFbGVtZW50cycsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgX29uRGF0YVNwbGljZShzdGFydCwgY291bnQpIHtcbiAgICAgICAgaWYgKGNvdW50KSB7XG4gICAgICAgICAgICB0aGlzLl9zeW5jKFtcbiAgICAgICAgICAgICAgICAnX3JlbW92ZUVsZW1lbnRzJyxcbiAgICAgICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgICAgICBjb3VudFxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3Q291bnQgPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgICAgICAgaWYgKG5ld0NvdW50KSB7XG4gICAgICAgICAgICB0aGlzLl9zeW5jKFtcbiAgICAgICAgICAgICAgICAnX2luc2VydEVsZW1lbnRzJyxcbiAgICAgICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgICAgICBuZXdDb3VudFxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX29uRGF0YVVuc2hpZnQoKSB7XG4gICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgJ19pbnNlcnRFbGVtZW50cycsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICBdKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEFsbFNjYWxlVmFsdWVzKHNjYWxlLCB0eXBlKSB7XG4gICAgaWYgKCFzY2FsZS5fY2FjaGUuJGJhcikge1xuICAgICAgICBjb25zdCB2aXNpYmxlTWV0YXMgPSBzY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKTtcbiAgICAgICAgbGV0IHZhbHVlcyA9IFtdO1xuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gdmlzaWJsZU1ldGFzLmxlbmd0aDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KHZpc2libGVNZXRhc1tpXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyhzY2FsZSkpO1xuICAgICAgICB9XG4gICAgICAgIHNjYWxlLl9jYWNoZS4kYmFyID0gX2FycmF5VW5pcXVlKHZhbHVlcy5zb3J0KChhLCBiKT0+YSAtIGIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjYWxlLl9jYWNoZS4kYmFyO1xufVxuIGZ1bmN0aW9uIGNvbXB1dGVNaW5TYW1wbGVTaXplKG1ldGEpIHtcbiAgICBjb25zdCBzY2FsZSA9IG1ldGEuaVNjYWxlO1xuICAgIGNvbnN0IHZhbHVlcyA9IGdldEFsbFNjYWxlVmFsdWVzKHNjYWxlLCBtZXRhLnR5cGUpO1xuICAgIGxldCBtaW4gPSBzY2FsZS5fbGVuZ3RoO1xuICAgIGxldCBpLCBpbGVuLCBjdXJyLCBwcmV2O1xuICAgIGNvbnN0IHVwZGF0ZU1pbkFuZFByZXYgPSAoKT0+e1xuICAgICAgICBpZiAoY3VyciA9PT0gMzI3NjcgfHwgY3VyciA9PT0gLTMyNzY4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmluZWQocHJldikpIHtcbiAgICAgICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgTWF0aC5hYnMoY3VyciAtIHByZXYpIHx8IG1pbik7XG4gICAgICAgIH1cbiAgICAgICAgcHJldiA9IGN1cnI7XG4gICAgfTtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSB2YWx1ZXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgY3VyciA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUodmFsdWVzW2ldKTtcbiAgICAgICAgdXBkYXRlTWluQW5kUHJldigpO1xuICAgIH1cbiAgICBwcmV2ID0gdW5kZWZpbmVkO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IHNjYWxlLnRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGN1cnIgPSBzY2FsZS5nZXRQaXhlbEZvclRpY2soaSk7XG4gICAgICAgIHVwZGF0ZU1pbkFuZFByZXYoKTtcbiAgICB9XG4gICAgcmV0dXJuIG1pbjtcbn1cbiBmdW5jdGlvbiBjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KSB7XG4gICAgY29uc3QgdGhpY2tuZXNzID0gb3B0aW9ucy5iYXJUaGlja25lc3M7XG4gICAgbGV0IHNpemUsIHJhdGlvO1xuICAgIGlmIChpc051bGxPclVuZGVmKHRoaWNrbmVzcykpIHtcbiAgICAgICAgc2l6ZSA9IHJ1bGVyLm1pbiAqIG9wdGlvbnMuY2F0ZWdvcnlQZXJjZW50YWdlO1xuICAgICAgICByYXRpbyA9IG9wdGlvbnMuYmFyUGVyY2VudGFnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gdGhpY2tuZXNzICogc3RhY2tDb3VudDtcbiAgICAgICAgcmF0aW8gPSAxO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBjaHVuazogc2l6ZSAvIHN0YWNrQ291bnQsXG4gICAgICAgIHJhdGlvLFxuICAgICAgICBzdGFydDogcnVsZXIucGl4ZWxzW2luZGV4XSAtIHNpemUgLyAyXG4gICAgfTtcbn1cbiBmdW5jdGlvbiBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCkge1xuICAgIGNvbnN0IHBpeGVscyA9IHJ1bGVyLnBpeGVscztcbiAgICBjb25zdCBjdXJyID0gcGl4ZWxzW2luZGV4XTtcbiAgICBsZXQgcHJldiA9IGluZGV4ID4gMCA/IHBpeGVsc1tpbmRleCAtIDFdIDogbnVsbDtcbiAgICBsZXQgbmV4dCA9IGluZGV4IDwgcGl4ZWxzLmxlbmd0aCAtIDEgPyBwaXhlbHNbaW5kZXggKyAxXSA6IG51bGw7XG4gICAgY29uc3QgcGVyY2VudCA9IG9wdGlvbnMuY2F0ZWdvcnlQZXJjZW50YWdlO1xuICAgIGlmIChwcmV2ID09PSBudWxsKSB7XG4gICAgICAgIHByZXYgPSBjdXJyIC0gKG5leHQgPT09IG51bGwgPyBydWxlci5lbmQgLSBydWxlci5zdGFydCA6IG5leHQgLSBjdXJyKTtcbiAgICB9XG4gICAgaWYgKG5leHQgPT09IG51bGwpIHtcbiAgICAgICAgbmV4dCA9IGN1cnIgKyBjdXJyIC0gcHJldjtcbiAgICB9XG4gICAgY29uc3Qgc3RhcnQgPSBjdXJyIC0gKGN1cnIgLSBNYXRoLm1pbihwcmV2LCBuZXh0KSkgLyAyICogcGVyY2VudDtcbiAgICBjb25zdCBzaXplID0gTWF0aC5hYnMobmV4dCAtIHByZXYpIC8gMiAqIHBlcmNlbnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2h1bms6IHNpemUgLyBzdGFja0NvdW50LFxuICAgICAgICByYXRpbzogb3B0aW9ucy5iYXJQZXJjZW50YWdlLFxuICAgICAgICBzdGFydFxuICAgIH07XG59XG5mdW5jdGlvbiBwYXJzZUZsb2F0QmFyKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpIHtcbiAgICBjb25zdCBzdGFydFZhbHVlID0gdlNjYWxlLnBhcnNlKGVudHJ5WzBdLCBpKTtcbiAgICBjb25zdCBlbmRWYWx1ZSA9IHZTY2FsZS5wYXJzZShlbnRyeVsxXSwgaSk7XG4gICAgY29uc3QgbWluID0gTWF0aC5taW4oc3RhcnRWYWx1ZSwgZW5kVmFsdWUpO1xuICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KHN0YXJ0VmFsdWUsIGVuZFZhbHVlKTtcbiAgICBsZXQgYmFyU3RhcnQgPSBtaW47XG4gICAgbGV0IGJhckVuZCA9IG1heDtcbiAgICBpZiAoTWF0aC5hYnMobWluKSA+IE1hdGguYWJzKG1heCkpIHtcbiAgICAgICAgYmFyU3RhcnQgPSBtYXg7XG4gICAgICAgIGJhckVuZCA9IG1pbjtcbiAgICB9XG4gICAgaXRlbVt2U2NhbGUuYXhpc10gPSBiYXJFbmQ7XG4gICAgaXRlbS5fY3VzdG9tID0ge1xuICAgICAgICBiYXJTdGFydCxcbiAgICAgICAgYmFyRW5kLFxuICAgICAgICBzdGFydDogc3RhcnRWYWx1ZSxcbiAgICAgICAgZW5kOiBlbmRWYWx1ZSxcbiAgICAgICAgbWluLFxuICAgICAgICBtYXhcbiAgICB9O1xufVxuZnVuY3Rpb24gcGFyc2VWYWx1ZShlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKSB7XG4gICAgaWYgKGlzQXJyYXkoZW50cnkpKSB7XG4gICAgICAgIHBhcnNlRmxvYXRCYXIoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbVt2U2NhbGUuYXhpc10gPSB2U2NhbGUucGFyc2UoZW50cnksIGkpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn1cbmZ1bmN0aW9uIHBhcnNlQXJyYXlPclByaW1pdGl2ZShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgICBjb25zdCBsYWJlbHMgPSBpU2NhbGUuZ2V0TGFiZWxzKCk7XG4gICAgY29uc3Qgc2luZ2xlU2NhbGUgPSBpU2NhbGUgPT09IHZTY2FsZTtcbiAgICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgaXRlbSwgZW50cnk7XG4gICAgZm9yKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBlbnRyeSA9IGRhdGFbaV07XG4gICAgICAgIGl0ZW0gPSB7fTtcbiAgICAgICAgaXRlbVtpU2NhbGUuYXhpc10gPSBzaW5nbGVTY2FsZSB8fCBpU2NhbGUucGFyc2UobGFiZWxzW2ldLCBpKTtcbiAgICAgICAgcGFyc2VkLnB1c2gocGFyc2VWYWx1ZShlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG59XG5mdW5jdGlvbiBpc0Zsb2F0QmFyKGN1c3RvbSkge1xuICAgIHJldHVybiBjdXN0b20gJiYgY3VzdG9tLmJhclN0YXJ0ICE9PSB1bmRlZmluZWQgJiYgY3VzdG9tLmJhckVuZCAhPT0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gYmFyU2lnbihzaXplLCB2U2NhbGUsIGFjdHVhbEJhc2UpIHtcbiAgICBpZiAoc2l6ZSAhPT0gMCkge1xuICAgICAgICByZXR1cm4gc2lnbihzaXplKTtcbiAgICB9XG4gICAgcmV0dXJuICh2U2NhbGUuaXNIb3Jpem9udGFsKCkgPyAxIDogLTEpICogKHZTY2FsZS5taW4gPj0gYWN0dWFsQmFzZSA/IDEgOiAtMSk7XG59XG5mdW5jdGlvbiBib3JkZXJQcm9wcyhwcm9wZXJ0aWVzKSB7XG4gICAgbGV0IHJldmVyc2UsIHN0YXJ0LCBlbmQsIHRvcCwgYm90dG9tO1xuICAgIGlmIChwcm9wZXJ0aWVzLmhvcml6b250YWwpIHtcbiAgICAgICAgcmV2ZXJzZSA9IHByb3BlcnRpZXMuYmFzZSA+IHByb3BlcnRpZXMueDtcbiAgICAgICAgc3RhcnQgPSAnbGVmdCc7XG4gICAgICAgIGVuZCA9ICdyaWdodCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV2ZXJzZSA9IHByb3BlcnRpZXMuYmFzZSA8IHByb3BlcnRpZXMueTtcbiAgICAgICAgc3RhcnQgPSAnYm90dG9tJztcbiAgICAgICAgZW5kID0gJ3RvcCc7XG4gICAgfVxuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHRvcCA9ICdlbmQnO1xuICAgICAgICBib3R0b20gPSAnc3RhcnQnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRvcCA9ICdzdGFydCc7XG4gICAgICAgIGJvdHRvbSA9ICdlbmQnO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICAgICAgZW5kLFxuICAgICAgICByZXZlcnNlLFxuICAgICAgICB0b3AsXG4gICAgICAgIGJvdHRvbVxuICAgIH07XG59XG5mdW5jdGlvbiBzZXRCb3JkZXJTa2lwcGVkKHByb3BlcnRpZXMsIG9wdGlvbnMsIHN0YWNrLCBpbmRleCkge1xuICAgIGxldCBlZGdlID0gb3B0aW9ucy5ib3JkZXJTa2lwcGVkO1xuICAgIGNvbnN0IHJlcyA9IHt9O1xuICAgIGlmICghZWRnZSkge1xuICAgICAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSByZXM7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGVkZ2UgPT09IHRydWUpIHtcbiAgICAgICAgcHJvcGVydGllcy5ib3JkZXJTa2lwcGVkID0ge1xuICAgICAgICAgICAgdG9wOiB0cnVlLFxuICAgICAgICAgICAgcmlnaHQ6IHRydWUsXG4gICAgICAgICAgICBib3R0b206IHRydWUsXG4gICAgICAgICAgICBsZWZ0OiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeyBzdGFydCAsIGVuZCAsIHJldmVyc2UgLCB0b3AgLCBib3R0b20gIH0gPSBib3JkZXJQcm9wcyhwcm9wZXJ0aWVzKTtcbiAgICBpZiAoZWRnZSA9PT0gJ21pZGRsZScgJiYgc3RhY2spIHtcbiAgICAgICAgcHJvcGVydGllcy5lbmFibGVCb3JkZXJSYWRpdXMgPSB0cnVlO1xuICAgICAgICBpZiAoKHN0YWNrLl90b3AgfHwgMCkgPT09IGluZGV4KSB7XG4gICAgICAgICAgICBlZGdlID0gdG9wO1xuICAgICAgICB9IGVsc2UgaWYgKChzdGFjay5fYm90dG9tIHx8IDApID09PSBpbmRleCkge1xuICAgICAgICAgICAgZWRnZSA9IGJvdHRvbTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1twYXJzZUVkZ2UoYm90dG9tLCBzdGFydCwgZW5kLCByZXZlcnNlKV0gPSB0cnVlO1xuICAgICAgICAgICAgZWRnZSA9IHRvcDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXNbcGFyc2VFZGdlKGVkZ2UsIHN0YXJ0LCBlbmQsIHJldmVyc2UpXSA9IHRydWU7XG4gICAgcHJvcGVydGllcy5ib3JkZXJTa2lwcGVkID0gcmVzO1xufVxuZnVuY3Rpb24gcGFyc2VFZGdlKGVkZ2UsIGEsIGIsIHJldmVyc2UpIHtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICBlZGdlID0gc3dhcChlZGdlLCBhLCBiKTtcbiAgICAgICAgZWRnZSA9IHN0YXJ0RW5kKGVkZ2UsIGIsIGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGVkZ2UgPSBzdGFydEVuZChlZGdlLCBhLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGVkZ2U7XG59XG5mdW5jdGlvbiBzd2FwKG9yaWcsIHYxLCB2Mikge1xuICAgIHJldHVybiBvcmlnID09PSB2MSA/IHYyIDogb3JpZyA9PT0gdjIgPyB2MSA6IG9yaWc7XG59XG5mdW5jdGlvbiBzdGFydEVuZCh2LCBzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHYgPT09ICdzdGFydCcgPyBzdGFydCA6IHYgPT09ICdlbmQnID8gZW5kIDogdjtcbn1cbmZ1bmN0aW9uIHNldEluZmxhdGVBbW91bnQocHJvcGVydGllcywgeyBpbmZsYXRlQW1vdW50ICB9LCByYXRpbykge1xuICAgIHByb3BlcnRpZXMuaW5mbGF0ZUFtb3VudCA9IGluZmxhdGVBbW91bnQgPT09ICdhdXRvJyA/IHJhdGlvID09PSAxID8gMC4zMyA6IDAgOiBpbmZsYXRlQW1vdW50O1xufVxuY2xhc3MgQmFyQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAnYmFyJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ2JhcicsXG4gICAgICAgIGNhdGVnb3J5UGVyY2VudGFnZTogMC44LFxuICAgICAgICBiYXJQZXJjZW50YWdlOiAwLjksXG4gICAgICAgIGdyb3VwZWQ6IHRydWUsXG4gICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgIG51bWJlcnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICAgICAnYmFzZScsXG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCcsXG4gICAgICAgICAgICAgICAgICAgICdoZWlnaHQnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgIF9pbmRleF86IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2F0ZWdvcnknLFxuICAgICAgICAgICAgICAgIG9mZnNldDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfdmFsdWVfOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVhcicsXG4gICAgICAgICAgICAgICAgYmVnaW5BdFplcm86IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICByZXR1cm4gcGFyc2VBcnJheU9yUHJpbWl0aXZlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgfVxuIHBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICByZXR1cm4gcGFyc2VBcnJheU9yUHJpbWl0aXZlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgfVxuIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCB7IHhBeGlzS2V5ID0neCcgLCB5QXhpc0tleSA9J3knICB9ID0gdGhpcy5fcGFyc2luZztcbiAgICAgICAgY29uc3QgaUF4aXNLZXkgPSBpU2NhbGUuYXhpcyA9PT0gJ3gnID8geEF4aXNLZXkgOiB5QXhpc0tleTtcbiAgICAgICAgY29uc3QgdkF4aXNLZXkgPSB2U2NhbGUuYXhpcyA9PT0gJ3gnID8geEF4aXNLZXkgOiB5QXhpc0tleTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gW107XG4gICAgICAgIGxldCBpLCBpbGVuLCBpdGVtLCBvYmo7XG4gICAgICAgIGZvcihpID0gc3RhcnQsIGlsZW4gPSBzdGFydCArIGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIG9iaiA9IGRhdGFbaV07XG4gICAgICAgICAgICBpdGVtID0ge307XG4gICAgICAgICAgICBpdGVtW2lTY2FsZS5heGlzXSA9IGlTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KG9iaiwgaUF4aXNLZXkpLCBpKTtcbiAgICAgICAgICAgIHBhcnNlZC5wdXNoKHBhcnNlVmFsdWUocmVzb2x2ZU9iamVjdEtleShvYmosIHZBeGlzS2V5KSwgaXRlbSwgdlNjYWxlLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG4gdXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjaykge1xuICAgICAgICBzdXBlci51cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKTtcbiAgICAgICAgY29uc3QgY3VzdG9tID0gcGFyc2VkLl9jdXN0b207XG4gICAgICAgIGlmIChjdXN0b20gJiYgc2NhbGUgPT09IHRoaXMuX2NhY2hlZE1ldGEudlNjYWxlKSB7XG4gICAgICAgICAgICByYW5nZS5taW4gPSBNYXRoLm1pbihyYW5nZS5taW4sIGN1c3RvbS5taW4pO1xuICAgICAgICAgICAgcmFuZ2UubWF4ID0gTWF0aC5tYXgocmFuZ2UubWF4LCBjdXN0b20ubWF4KTtcbiAgICAgICAgfVxuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgdlNjYWxlICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICBjb25zdCBjdXN0b20gPSBwYXJzZWQuX2N1c3RvbTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBpc0Zsb2F0QmFyKGN1c3RvbSkgPyAnWycgKyBjdXN0b20uc3RhcnQgKyAnLCAnICsgY3VzdG9tLmVuZCArICddJyA6ICcnICsgdlNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW3ZTY2FsZS5heGlzXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbDogJycgKyBpU2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbaVNjYWxlLmF4aXNdKSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgIH07XG4gICAgfVxuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIG1ldGEuc3RhY2sgPSB0aGlzLmdldERhdGFzZXQoKS5zdGFjaztcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMobWV0YS5kYXRhLCAwLCBtZXRhLmRhdGEubGVuZ3RoLCBtb2RlKTtcbiAgICB9XG4gICAgdXBkYXRlRWxlbWVudHMoYmFycywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgeyBpbmRleCAsIF9jYWNoZWRNZXRhOiB7IHZTY2FsZSAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGJhc2UgPSB2U2NhbGUuZ2V0QmFzZVBpeGVsKCk7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWwgPSB2U2NhbGUuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIGNvbnN0IHJ1bGVyID0gdGhpcy5fZ2V0UnVsZXIoKTtcbiAgICAgICAgY29uc3QgeyBzaGFyZWRPcHRpb25zICwgaW5jbHVkZU9wdGlvbnMgIH0gPSB0aGlzLl9nZXRTaGFyZWRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyBpKyspe1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaSk7XG4gICAgICAgICAgICBjb25zdCB2cGl4ZWxzID0gcmVzZXQgfHwgaXNOdWxsT3JVbmRlZihwYXJzZWRbdlNjYWxlLmF4aXNdKSA/IHtcbiAgICAgICAgICAgICAgICBiYXNlLFxuICAgICAgICAgICAgICAgIGhlYWQ6IGJhc2VcbiAgICAgICAgICAgIH0gOiB0aGlzLl9jYWxjdWxhdGVCYXJWYWx1ZVBpeGVscyhpKTtcbiAgICAgICAgICAgIGNvbnN0IGlwaXhlbHMgPSB0aGlzLl9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyhpLCBydWxlcik7XG4gICAgICAgICAgICBjb25zdCBzdGFjayA9IChwYXJzZWQuX3N0YWNrcyB8fCB7fSlbdlNjYWxlLmF4aXNdO1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsLFxuICAgICAgICAgICAgICAgIGJhc2U6IHZwaXhlbHMuYmFzZSxcbiAgICAgICAgICAgICAgICBlbmFibGVCb3JkZXJSYWRpdXM6ICFzdGFjayB8fCBpc0Zsb2F0QmFyKHBhcnNlZC5fY3VzdG9tKSB8fCBpbmRleCA9PT0gc3RhY2suX3RvcCB8fCBpbmRleCA9PT0gc3RhY2suX2JvdHRvbSxcbiAgICAgICAgICAgICAgICB4OiBob3Jpem9udGFsID8gdnBpeGVscy5oZWFkIDogaXBpeGVscy5jZW50ZXIsXG4gICAgICAgICAgICAgICAgeTogaG9yaXpvbnRhbCA/IGlwaXhlbHMuY2VudGVyIDogdnBpeGVscy5oZWFkLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaG9yaXpvbnRhbCA/IGlwaXhlbHMuc2l6ZSA6IE1hdGguYWJzKHZwaXhlbHMuc2l6ZSksXG4gICAgICAgICAgICAgICAgd2lkdGg6IGhvcml6b250YWwgPyBNYXRoLmFicyh2cGl4ZWxzLnNpemUpIDogaXBpeGVscy5zaXplXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgYmFyc1tpXS5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHByb3BlcnRpZXMub3B0aW9ucyB8fCBiYXJzW2ldLm9wdGlvbnM7XG4gICAgICAgICAgICBzZXRCb3JkZXJTa2lwcGVkKHByb3BlcnRpZXMsIG9wdGlvbnMsIHN0YWNrLCBpbmRleCk7XG4gICAgICAgICAgICBzZXRJbmZsYXRlQW1vdW50KHByb3BlcnRpZXMsIG9wdGlvbnMsIHJ1bGVyLnJhdGlvKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChiYXJzW2ldLCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiBfZ2V0U3RhY2tzKGxhc3QsIGRhdGFJbmRleCkge1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAgfSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gaVNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHRoaXMuX3R5cGUpLmZpbHRlcigobWV0YSk9Pm1ldGEuY29udHJvbGxlci5vcHRpb25zLmdyb3VwZWQpO1xuICAgICAgICBjb25zdCBzdGFja2VkID0gaVNjYWxlLm9wdGlvbnMuc3RhY2tlZDtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gW107XG4gICAgICAgIGNvbnN0IHNraXBOdWxsID0gKG1ldGEpPT57XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0UGFyc2VkKGRhdGFJbmRleCk7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBwYXJzZWQgJiYgcGFyc2VkW21ldGEudlNjYWxlLmF4aXNdO1xuICAgICAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsKSB8fCBpc05hTih2YWwpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGZvciAoY29uc3QgbWV0YSBvZiBtZXRhc2V0cyl7XG4gICAgICAgICAgICBpZiAoZGF0YUluZGV4ICE9PSB1bmRlZmluZWQgJiYgc2tpcE51bGwobWV0YSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFja2VkID09PSBmYWxzZSB8fCBzdGFja3MuaW5kZXhPZihtZXRhLnN0YWNrKSA9PT0gLTEgfHwgc3RhY2tlZCA9PT0gdW5kZWZpbmVkICYmIG1ldGEuc3RhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHN0YWNrcy5wdXNoKG1ldGEuc3RhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1ldGEuaW5kZXggPT09IGxhc3QpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN0YWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHN0YWNrcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YWNrcztcbiAgICB9XG4gX2dldFN0YWNrQ291bnQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFN0YWNrcyh1bmRlZmluZWQsIGluZGV4KS5sZW5ndGg7XG4gICAgfVxuIF9nZXRTdGFja0luZGV4KGRhdGFzZXRJbmRleCwgbmFtZSwgZGF0YUluZGV4KSB7XG4gICAgICAgIGNvbnN0IHN0YWNrcyA9IHRoaXMuX2dldFN0YWNrcyhkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gbmFtZSAhPT0gdW5kZWZpbmVkID8gc3RhY2tzLmluZGV4T2YobmFtZSkgOiAtMTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID09PSAtMSA/IHN0YWNrcy5sZW5ndGggLSAxIDogaW5kZXg7XG4gICAgfVxuIF9nZXRSdWxlcigpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICAgICAgICBjb25zdCBwaXhlbHMgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IG1ldGEuZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgcGl4ZWxzLnB1c2goaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaSlbaVNjYWxlLmF4aXNdLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmFyVGhpY2tuZXNzID0gb3B0cy5iYXJUaGlja25lc3M7XG4gICAgICAgIGNvbnN0IG1pbiA9IGJhclRoaWNrbmVzcyB8fCBjb21wdXRlTWluU2FtcGxlU2l6ZShtZXRhKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbixcbiAgICAgICAgICAgIHBpeGVscyxcbiAgICAgICAgICAgIHN0YXJ0OiBpU2NhbGUuX3N0YXJ0UGl4ZWwsXG4gICAgICAgICAgICBlbmQ6IGlTY2FsZS5fZW5kUGl4ZWwsXG4gICAgICAgICAgICBzdGFja0NvdW50OiB0aGlzLl9nZXRTdGFja0NvdW50KCksXG4gICAgICAgICAgICBzY2FsZTogaVNjYWxlLFxuICAgICAgICAgICAgZ3JvdXBlZDogb3B0cy5ncm91cGVkLFxuICAgICAgICAgICAgcmF0aW86IGJhclRoaWNrbmVzcyA/IDEgOiBvcHRzLmNhdGVnb3J5UGVyY2VudGFnZSAqIG9wdHMuYmFyUGVyY2VudGFnZVxuICAgICAgICB9O1xuICAgIH1cbiBfY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgeyBfY2FjaGVkTWV0YTogeyB2U2NhbGUgLCBfc3RhY2tlZCAsIGluZGV4OiBkYXRhc2V0SW5kZXggIH0gLCBvcHRpb25zOiB7IGJhc2U6IGJhc2VWYWx1ZSAsIG1pbkJhckxlbmd0aCAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGFjdHVhbEJhc2UgPSBiYXNlVmFsdWUgfHwgMDtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICBjb25zdCBjdXN0b20gPSBwYXJzZWQuX2N1c3RvbTtcbiAgICAgICAgY29uc3QgZmxvYXRpbmcgPSBpc0Zsb2F0QmFyKGN1c3RvbSk7XG4gICAgICAgIGxldCB2YWx1ZSA9IHBhcnNlZFt2U2NhbGUuYXhpc107XG4gICAgICAgIGxldCBzdGFydCA9IDA7XG4gICAgICAgIGxldCBsZW5ndGggPSBfc3RhY2tlZCA/IHRoaXMuYXBwbHlTdGFjayh2U2NhbGUsIHBhcnNlZCwgX3N0YWNrZWQpIDogdmFsdWU7XG4gICAgICAgIGxldCBoZWFkLCBzaXplO1xuICAgICAgICBpZiAobGVuZ3RoICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgc3RhcnQgPSBsZW5ndGggLSB2YWx1ZTtcbiAgICAgICAgICAgIGxlbmd0aCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmbG9hdGluZykge1xuICAgICAgICAgICAgdmFsdWUgPSBjdXN0b20uYmFyU3RhcnQ7XG4gICAgICAgICAgICBsZW5ndGggPSBjdXN0b20uYmFyRW5kIC0gY3VzdG9tLmJhclN0YXJ0O1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAwICYmIHNpZ24odmFsdWUpICE9PSBzaWduKGN1c3RvbS5iYXJFbmQpKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhcnQgKz0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhcnRWYWx1ZSA9ICFpc051bGxPclVuZGVmKGJhc2VWYWx1ZSkgJiYgIWZsb2F0aW5nID8gYmFzZVZhbHVlIDogc3RhcnQ7XG4gICAgICAgIGxldCBiYXNlID0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnRWYWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgICAgICAgaGVhZCA9IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN0YXJ0ICsgbGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhlYWQgPSBiYXNlO1xuICAgICAgICB9XG4gICAgICAgIHNpemUgPSBoZWFkIC0gYmFzZTtcbiAgICAgICAgaWYgKE1hdGguYWJzKHNpemUpIDwgbWluQmFyTGVuZ3RoKSB7XG4gICAgICAgICAgICBzaXplID0gYmFyU2lnbihzaXplLCB2U2NhbGUsIGFjdHVhbEJhc2UpICogbWluQmFyTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBhY3R1YWxCYXNlKSB7XG4gICAgICAgICAgICAgICAgYmFzZSAtPSBzaXplIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0UGl4ZWwgPSB2U2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDApO1xuICAgICAgICAgICAgY29uc3QgZW5kUGl4ZWwgPSB2U2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDEpO1xuICAgICAgICAgICAgY29uc3QgbWluID0gTWF0aC5taW4oc3RhcnRQaXhlbCwgZW5kUGl4ZWwpO1xuICAgICAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoc3RhcnRQaXhlbCwgZW5kUGl4ZWwpO1xuICAgICAgICAgICAgYmFzZSA9IE1hdGgubWF4KE1hdGgubWluKGJhc2UsIG1heCksIG1pbik7XG4gICAgICAgICAgICBoZWFkID0gYmFzZSArIHNpemU7XG4gICAgICAgICAgICBpZiAoX3N0YWNrZWQgJiYgIWZsb2F0aW5nKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkLl9zdGFja3NbdlNjYWxlLmF4aXNdLl92aXN1YWxWYWx1ZXNbZGF0YXNldEluZGV4XSA9IHZTY2FsZS5nZXRWYWx1ZUZvclBpeGVsKGhlYWQpIC0gdlNjYWxlLmdldFZhbHVlRm9yUGl4ZWwoYmFzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJhc2UgPT09IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKGFjdHVhbEJhc2UpKSB7XG4gICAgICAgICAgICBjb25zdCBoYWxmR3JpZCA9IHNpZ24oc2l6ZSkgKiB2U2NhbGUuZ2V0TGluZVdpZHRoRm9yVmFsdWUoYWN0dWFsQmFzZSkgLyAyO1xuICAgICAgICAgICAgYmFzZSArPSBoYWxmR3JpZDtcbiAgICAgICAgICAgIHNpemUgLT0gaGFsZkdyaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICBiYXNlLFxuICAgICAgICAgICAgaGVhZCxcbiAgICAgICAgICAgIGNlbnRlcjogaGVhZCArIHNpemUgLyAyXG4gICAgICAgIH07XG4gICAgfVxuIF9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyhpbmRleCwgcnVsZXIpIHtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBydWxlci5zY2FsZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2tpcE51bGwgPSBvcHRpb25zLnNraXBOdWxsO1xuICAgICAgICBjb25zdCBtYXhCYXJUaGlja25lc3MgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLm1heEJhclRoaWNrbmVzcywgSW5maW5pdHkpO1xuICAgICAgICBsZXQgY2VudGVyLCBzaXplO1xuICAgICAgICBpZiAocnVsZXIuZ3JvdXBlZCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhY2tDb3VudCA9IHNraXBOdWxsID8gdGhpcy5fZ2V0U3RhY2tDb3VudChpbmRleCkgOiBydWxlci5zdGFja0NvdW50O1xuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBvcHRpb25zLmJhclRoaWNrbmVzcyA9PT0gJ2ZsZXgnID8gY29tcHV0ZUZsZXhDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpIDogY29tcHV0ZUZpdENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCk7XG4gICAgICAgICAgICBjb25zdCBzdGFja0luZGV4ID0gdGhpcy5fZ2V0U3RhY2tJbmRleCh0aGlzLmluZGV4LCB0aGlzLl9jYWNoZWRNZXRhLnN0YWNrLCBza2lwTnVsbCA/IGluZGV4IDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGNlbnRlciA9IHJhbmdlLnN0YXJ0ICsgcmFuZ2UuY2h1bmsgKiBzdGFja0luZGV4ICsgcmFuZ2UuY2h1bmsgLyAyO1xuICAgICAgICAgICAgc2l6ZSA9IE1hdGgubWluKG1heEJhclRoaWNrbmVzcywgcmFuZ2UuY2h1bmsgKiByYW5nZS5yYXRpbyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjZW50ZXIgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0UGFyc2VkKGluZGV4KVtzY2FsZS5heGlzXSwgaW5kZXgpO1xuICAgICAgICAgICAgc2l6ZSA9IE1hdGgubWluKG1heEJhclRoaWNrbmVzcywgcnVsZXIubWluICogcnVsZXIucmF0aW8pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiYXNlOiBjZW50ZXIgLSBzaXplIC8gMixcbiAgICAgICAgICAgIGhlYWQ6IGNlbnRlciArIHNpemUgLyAyLFxuICAgICAgICAgICAgY2VudGVyLFxuICAgICAgICAgICAgc2l6ZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgdlNjYWxlID0gbWV0YS52U2NhbGU7XG4gICAgICAgIGNvbnN0IHJlY3RzID0gbWV0YS5kYXRhO1xuICAgICAgICBjb25zdCBpbGVuID0gcmVjdHMubGVuZ3RoO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvcig7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0UGFyc2VkKGkpW3ZTY2FsZS5heGlzXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlY3RzW2ldLmRyYXcodGhpcy5fY3R4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQnViYmxlQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAnYnViYmxlJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgICAgICdib3JkZXJXaWR0aCcsXG4gICAgICAgICAgICAgICAgICAgICdyYWRpdXMnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgIHg6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZWFyJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZWFyJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSB0cnVlO1xuICAgICAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgfVxuIHBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwYXJzZWQubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgcGFyc2VkW2ldLl9jdXN0b20gPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSArIHN0YXJ0KS5yYWRpdXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG4gcGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHN1cGVyLnBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwYXJzZWQubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGRhdGFbc3RhcnQgKyBpXTtcbiAgICAgICAgICAgIHBhcnNlZFtpXS5fY3VzdG9tID0gdmFsdWVPckRlZmF1bHQoaXRlbVsyXSwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkgKyBzdGFydCkucmFkaXVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHN1cGVyLnBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcGFyc2VkLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBkYXRhW3N0YXJ0ICsgaV07XG4gICAgICAgICAgICBwYXJzZWRbaV0uX2N1c3RvbSA9IHZhbHVlT3JEZWZhdWx0KGl0ZW0gJiYgaXRlbS5yICYmICtpdGVtLnIsIHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpICsgc3RhcnQpLnJhZGl1cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG4gZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGE7XG4gICAgICAgIGxldCBtYXggPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSBkYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgZGF0YVtpXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKSkgLyAyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4ID4gMCAmJiBtYXg7XG4gICAgfVxuIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgICAgIGNvbnN0IHsgeFNjYWxlICwgeVNjYWxlICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICBjb25zdCB4ID0geFNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkLngpO1xuICAgICAgICBjb25zdCB5ID0geVNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkLnkpO1xuICAgICAgICBjb25zdCByID0gcGFyc2VkLl9jdXN0b207XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbDogbGFiZWxzW2luZGV4XSB8fCAnJyxcbiAgICAgICAgICAgIHZhbHVlOiAnKCcgKyB4ICsgJywgJyArIHkgKyAociA/ICcsICcgKyByIDogJycpICsgJyknXG4gICAgICAgIH07XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIDAsIHBvaW50cy5sZW5ndGgsIG1vZGUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgdlNjYWxlICB9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgeyBzaGFyZWRPcHRpb25zICwgaW5jbHVkZU9wdGlvbnMgIH0gPSB0aGlzLl9nZXRTaGFyZWRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICAgICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyBpKyspe1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSAhcmVzZXQgJiYgdGhpcy5nZXRQYXJzZWQoaSk7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge307XG4gICAgICAgICAgICBjb25zdCBpUGl4ZWwgPSBwcm9wZXJ0aWVzW2lBeGlzXSA9IHJlc2V0ID8gaVNjYWxlLmdldFBpeGVsRm9yRGVjaW1hbCgwLjUpIDogaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW2lBeGlzXSk7XG4gICAgICAgICAgICBjb25zdCB2UGl4ZWwgPSBwcm9wZXJ0aWVzW3ZBeGlzXSA9IHJlc2V0ID8gdlNjYWxlLmdldEJhc2VQaXhlbCgpIDogdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW3ZBeGlzXSk7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCk7XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMucmFkaXVzID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgfVxuIHJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICBsZXQgdmFsdWVzID0gc3VwZXIucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCwgbW9kZSk7XG4gICAgICAgIGlmICh2YWx1ZXMuJHNoYXJlZCkge1xuICAgICAgICAgICAgdmFsdWVzID0gT2JqZWN0LmFzc2lnbih7fSwgdmFsdWVzLCB7XG4gICAgICAgICAgICAgICAgJHNoYXJlZDogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IHZhbHVlcy5yYWRpdXM7XG4gICAgICAgIGlmIChtb2RlICE9PSAnYWN0aXZlJykge1xuICAgICAgICAgICAgdmFsdWVzLnJhZGl1cyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVzLnJhZGl1cyArPSB2YWx1ZU9yRGVmYXVsdChwYXJzZWQgJiYgcGFyc2VkLl9jdXN0b20sIHJhZGl1cyk7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRSYXRpb0FuZE9mZnNldChyb3RhdGlvbiwgY2lyY3VtZmVyZW5jZSwgY3V0b3V0KSB7XG4gICAgbGV0IHJhdGlvWCA9IDE7XG4gICAgbGV0IHJhdGlvWSA9IDE7XG4gICAgbGV0IG9mZnNldFggPSAwO1xuICAgIGxldCBvZmZzZXRZID0gMDtcbiAgICBpZiAoY2lyY3VtZmVyZW5jZSA8IFRBVSkge1xuICAgICAgICBjb25zdCBzdGFydEFuZ2xlID0gcm90YXRpb247XG4gICAgICAgIGNvbnN0IGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2U7XG4gICAgICAgIGNvbnN0IHN0YXJ0WCA9IE1hdGguY29zKHN0YXJ0QW5nbGUpO1xuICAgICAgICBjb25zdCBzdGFydFkgPSBNYXRoLnNpbihzdGFydEFuZ2xlKTtcbiAgICAgICAgY29uc3QgZW5kWCA9IE1hdGguY29zKGVuZEFuZ2xlKTtcbiAgICAgICAgY29uc3QgZW5kWSA9IE1hdGguc2luKGVuZEFuZ2xlKTtcbiAgICAgICAgY29uc3QgY2FsY01heCA9IChhbmdsZSwgYSwgYik9Pl9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCB0cnVlKSA/IDEgOiBNYXRoLm1heChhLCBhICogY3V0b3V0LCBiLCBiICogY3V0b3V0KTtcbiAgICAgICAgY29uc3QgY2FsY01pbiA9IChhbmdsZSwgYSwgYik9Pl9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCB0cnVlKSA/IC0xIDogTWF0aC5taW4oYSwgYSAqIGN1dG91dCwgYiwgYiAqIGN1dG91dCk7XG4gICAgICAgIGNvbnN0IG1heFggPSBjYWxjTWF4KDAsIHN0YXJ0WCwgZW5kWCk7XG4gICAgICAgIGNvbnN0IG1heFkgPSBjYWxjTWF4KEhBTEZfUEksIHN0YXJ0WSwgZW5kWSk7XG4gICAgICAgIGNvbnN0IG1pblggPSBjYWxjTWluKFBJLCBzdGFydFgsIGVuZFgpO1xuICAgICAgICBjb25zdCBtaW5ZID0gY2FsY01pbihQSSArIEhBTEZfUEksIHN0YXJ0WSwgZW5kWSk7XG4gICAgICAgIHJhdGlvWCA9IChtYXhYIC0gbWluWCkgLyAyO1xuICAgICAgICByYXRpb1kgPSAobWF4WSAtIG1pblkpIC8gMjtcbiAgICAgICAgb2Zmc2V0WCA9IC0obWF4WCArIG1pblgpIC8gMjtcbiAgICAgICAgb2Zmc2V0WSA9IC0obWF4WSArIG1pblkpIC8gMjtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmF0aW9YLFxuICAgICAgICByYXRpb1ksXG4gICAgICAgIG9mZnNldFgsXG4gICAgICAgIG9mZnNldFlcbiAgICB9O1xufVxuY2xhc3MgRG91Z2hudXRDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdkb3VnaG51dCc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICAgICAgICBkYXRhRWxlbWVudFR5cGU6ICdhcmMnLFxuICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgIGFuaW1hdGVSb3RhdGU6IHRydWUsXG4gICAgICAgICAgICBhbmltYXRlU2NhbGU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgIG51bWJlcnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICdjaXJjdW1mZXJlbmNlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2VuZEFuZ2xlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lubmVyUmFkaXVzJyxcbiAgICAgICAgICAgICAgICAgICAgJ291dGVyUmFkaXVzJyxcbiAgICAgICAgICAgICAgICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgICAgICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAgICAgJ29mZnNldCcsXG4gICAgICAgICAgICAgICAgICAgICdib3JkZXJXaWR0aCcsXG4gICAgICAgICAgICAgICAgICAgICdzcGFjaW5nJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3V0b3V0OiAnNTAlJyxcbiAgICAgICAgcm90YXRpb246IDAsXG4gICAgICAgIGNpcmN1bWZlcmVuY2U6IDM2MCxcbiAgICAgICAgcmFkaXVzOiAnMTAwJScsXG4gICAgICAgIHNwYWNpbmc6IDAsXG4gICAgICAgIGluZGV4QXhpczogJ3InXG4gICAgfTtcbiAgICBzdGF0aWMgZGVzY3JpcHRvcnMgPSB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdzcGFjaW5nJyxcbiAgICAgICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnc3BhY2luZycgJiYgIW5hbWUuc3RhcnRzV2l0aCgnYm9yZGVyRGFzaCcpICYmICFuYW1lLnN0YXJ0c1dpdGgoJ2hvdmVyQm9yZGVyRGFzaCcpXG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBhc3BlY3RSYXRpbzogMSxcbiAgICAgICAgcGx1Z2luczoge1xuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlTGFiZWxzIChjaGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGNoYXJ0LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5sYWJlbHMubGVuZ3RoICYmIGRhdGEuZGF0YXNldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBsYWJlbHM6IHsgcG9pbnRTdHlsZSAsIGNvbG9yICB9ICB9ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEubGFiZWxzLm1hcCgobGFiZWwsIGkpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YSgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBsYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udENvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogc3R5bGUuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiAhY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrIChlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kLmNoYXJ0LnRvZ2dsZURhdGFWaXNpYmlsaXR5KGxlZ2VuZEl0ZW0uaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBsZWdlbmQuY2hhcnQudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KXtcbiAgICAgICAgc3VwZXIoY2hhcnQsIGRhdGFzZXRJbmRleCk7XG4gICAgICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBsaW5rU2NhbGVzKCkge31cbiBwYXJzZShzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0RGF0YXNldCgpLmRhdGE7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBpZiAodGhpcy5fcGFyc2luZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG1ldGEuX3BhcnNlZCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgZ2V0dGVyID0gKGkpPT4rZGF0YVtpXTtcbiAgICAgICAgICAgIGlmIChpc09iamVjdChkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGtleSA9J3ZhbHVlJyAgfSA9IHRoaXMuX3BhcnNpbmc7XG4gICAgICAgICAgICAgICAgZ2V0dGVyID0gKGkpPT4rcmVzb2x2ZU9iamVjdEtleShkYXRhW2ldLCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgICAgICBmb3IoaSA9IHN0YXJ0LCBpbGVuID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICAgICAgbWV0YS5fcGFyc2VkW2ldID0gZ2V0dGVyKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuIF9nZXRSb3RhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRvUmFkaWFucyh0aGlzLm9wdGlvbnMucm90YXRpb24gLSA5MCk7XG4gICAgfVxuIF9nZXRDaXJjdW1mZXJlbmNlKCkge1xuICAgICAgICByZXR1cm4gdG9SYWRpYW5zKHRoaXMub3B0aW9ucy5jaXJjdW1mZXJlbmNlKTtcbiAgICB9XG4gX2dldFJvdGF0aW9uRXh0ZW50cygpIHtcbiAgICAgICAgbGV0IG1pbiA9IFRBVTtcbiAgICAgICAgbGV0IG1heCA9IC1UQVU7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHMubGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKGkpLnR5cGUgPT09IHRoaXMuX3R5cGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250cm9sbGVyID0gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YShpKS5jb250cm9sbGVyO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvdGF0aW9uID0gY29udHJvbGxlci5fZ2V0Um90YXRpb24oKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjaXJjdW1mZXJlbmNlID0gY29udHJvbGxlci5fZ2V0Q2lyY3VtZmVyZW5jZSgpO1xuICAgICAgICAgICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgcm90YXRpb24pO1xuICAgICAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgcm90YXRpb24gKyBjaXJjdW1mZXJlbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcm90YXRpb246IG1pbixcbiAgICAgICAgICAgIGNpcmN1bWZlcmVuY2U6IG1heCAtIG1pblxuICAgICAgICB9O1xuICAgIH1cbiB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IHsgY2hhcnRBcmVhICB9ID0gY2hhcnQ7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBhcmNzID0gbWV0YS5kYXRhO1xuICAgICAgICBjb25zdCBzcGFjaW5nID0gdGhpcy5nZXRNYXhCb3JkZXJXaWR0aCgpICsgdGhpcy5nZXRNYXhPZmZzZXQoYXJjcykgKyB0aGlzLm9wdGlvbnMuc3BhY2luZztcbiAgICAgICAgY29uc3QgbWF4U2l6ZSA9IE1hdGgubWF4KChNYXRoLm1pbihjaGFydEFyZWEud2lkdGgsIGNoYXJ0QXJlYS5oZWlnaHQpIC0gc3BhY2luZykgLyAyLCAwKTtcbiAgICAgICAgY29uc3QgY3V0b3V0ID0gTWF0aC5taW4odG9QZXJjZW50YWdlKHRoaXMub3B0aW9ucy5jdXRvdXQsIG1heFNpemUpLCAxKTtcbiAgICAgICAgY29uc3QgY2hhcnRXZWlnaHQgPSB0aGlzLl9nZXRSaW5nV2VpZ2h0KHRoaXMuaW5kZXgpO1xuICAgICAgICBjb25zdCB7IGNpcmN1bWZlcmVuY2UgLCByb3RhdGlvbiAgfSA9IHRoaXMuX2dldFJvdGF0aW9uRXh0ZW50cygpO1xuICAgICAgICBjb25zdCB7IHJhdGlvWCAsIHJhdGlvWSAsIG9mZnNldFggLCBvZmZzZXRZICB9ID0gZ2V0UmF0aW9BbmRPZmZzZXQocm90YXRpb24sIGNpcmN1bWZlcmVuY2UsIGN1dG91dCk7XG4gICAgICAgIGNvbnN0IG1heFdpZHRoID0gKGNoYXJ0QXJlYS53aWR0aCAtIHNwYWNpbmcpIC8gcmF0aW9YO1xuICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSAoY2hhcnRBcmVhLmhlaWdodCAtIHNwYWNpbmcpIC8gcmF0aW9ZO1xuICAgICAgICBjb25zdCBtYXhSYWRpdXMgPSBNYXRoLm1heChNYXRoLm1pbihtYXhXaWR0aCwgbWF4SGVpZ2h0KSAvIDIsIDApO1xuICAgICAgICBjb25zdCBvdXRlclJhZGl1cyA9IHRvRGltZW5zaW9uKHRoaXMub3B0aW9ucy5yYWRpdXMsIG1heFJhZGl1cyk7XG4gICAgICAgIGNvbnN0IGlubmVyUmFkaXVzID0gTWF0aC5tYXgob3V0ZXJSYWRpdXMgKiBjdXRvdXQsIDApO1xuICAgICAgICBjb25zdCByYWRpdXNMZW5ndGggPSAob3V0ZXJSYWRpdXMgLSBpbm5lclJhZGl1cykgLyB0aGlzLl9nZXRWaXNpYmxlRGF0YXNldFdlaWdodFRvdGFsKCk7XG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IG9mZnNldFggKiBvdXRlclJhZGl1cztcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gb2Zmc2V0WSAqIG91dGVyUmFkaXVzO1xuICAgICAgICBtZXRhLnRvdGFsID0gdGhpcy5jYWxjdWxhdGVUb3RhbCgpO1xuICAgICAgICB0aGlzLm91dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGggKiB0aGlzLl9nZXRSaW5nV2VpZ2h0T2Zmc2V0KHRoaXMuaW5kZXgpO1xuICAgICAgICB0aGlzLmlubmVyUmFkaXVzID0gTWF0aC5tYXgodGhpcy5vdXRlclJhZGl1cyAtIHJhZGl1c0xlbmd0aCAqIGNoYXJ0V2VpZ2h0LCAwKTtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhhcmNzLCAwLCBhcmNzLmxlbmd0aCwgbW9kZSk7XG4gICAgfVxuIF9jaXJjdW1mZXJlbmNlKGksIHJlc2V0KSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBjaXJjdW1mZXJlbmNlID0gdGhpcy5fZ2V0Q2lyY3VtZmVyZW5jZSgpO1xuICAgICAgICBpZiAocmVzZXQgJiYgb3B0cy5hbmltYXRpb24uYW5pbWF0ZVJvdGF0ZSB8fCAhdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSB8fCBtZXRhLl9wYXJzZWRbaV0gPT09IG51bGwgfHwgbWV0YS5kYXRhW2ldLmhpZGRlbikge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZShtZXRhLl9wYXJzZWRbaV0gKiBjaXJjdW1mZXJlbmNlIC8gVEFVKTtcbiAgICB9XG4gICAgdXBkYXRlRWxlbWVudHMoYXJjcywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBjaGFydC5vcHRpb25zO1xuICAgICAgICBjb25zdCBhbmltYXRpb25PcHRzID0gb3B0cy5hbmltYXRpb247XG4gICAgICAgIGNvbnN0IGNlbnRlclggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMjtcbiAgICAgICAgY29uc3QgY2VudGVyWSA9IChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyO1xuICAgICAgICBjb25zdCBhbmltYXRlU2NhbGUgPSByZXNldCAmJiBhbmltYXRpb25PcHRzLmFuaW1hdGVTY2FsZTtcbiAgICAgICAgY29uc3QgaW5uZXJSYWRpdXMgPSBhbmltYXRlU2NhbGUgPyAwIDogdGhpcy5pbm5lclJhZGl1cztcbiAgICAgICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBhbmltYXRlU2NhbGUgPyAwIDogdGhpcy5vdXRlclJhZGl1cztcbiAgICAgICAgY29uc3QgeyBzaGFyZWRPcHRpb25zICwgaW5jbHVkZU9wdGlvbnMgIH0gPSB0aGlzLl9nZXRTaGFyZWRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICAgICAgbGV0IHN0YXJ0QW5nbGUgPSB0aGlzLl9nZXRSb3RhdGlvbigpO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgc3RhcnQ7ICsraSl7XG4gICAgICAgICAgICBzdGFydEFuZ2xlICs9IHRoaXMuX2NpcmN1bWZlcmVuY2UoaSwgcmVzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpe1xuICAgICAgICAgICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IHRoaXMuX2NpcmN1bWZlcmVuY2UoaSwgcmVzZXQpO1xuICAgICAgICAgICAgY29uc3QgYXJjID0gYXJjc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgeDogY2VudGVyWCArIHRoaXMub2Zmc2V0WCxcbiAgICAgICAgICAgICAgICB5OiBjZW50ZXJZICsgdGhpcy5vZmZzZXRZLFxuICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGUsXG4gICAgICAgICAgICAgICAgZW5kQW5nbGU6IHN0YXJ0QW5nbGUgKyBjaXJjdW1mZXJlbmNlLFxuICAgICAgICAgICAgICAgIGNpcmN1bWZlcmVuY2UsXG4gICAgICAgICAgICAgICAgb3V0ZXJSYWRpdXMsXG4gICAgICAgICAgICAgICAgaW5uZXJSYWRpdXNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBhcmMuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXJ0QW5nbGUgKz0gY2lyY3VtZmVyZW5jZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChhcmMsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhbGN1bGF0ZVRvdGFsKCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbWV0YURhdGEgPSBtZXRhLmRhdGE7XG4gICAgICAgIGxldCB0b3RhbCA9IDA7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBtZXRhRGF0YS5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG1ldGEuX3BhcnNlZFtpXTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiAhaXNOYU4odmFsdWUpICYmIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSkgJiYgIW1ldGFEYXRhW2ldLmhpZGRlbikge1xuICAgICAgICAgICAgICAgIHRvdGFsICs9IE1hdGguYWJzKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWw7XG4gICAgfVxuICAgIGNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UodmFsdWUpIHtcbiAgICAgICAgY29uc3QgdG90YWwgPSB0aGlzLl9jYWNoZWRNZXRhLnRvdGFsO1xuICAgICAgICBpZiAodG90YWwgPiAwICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBUQVUgKiAoTWF0aC5hYnModmFsdWUpIC8gdG90YWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IGNoYXJ0LmRhdGEubGFiZWxzIHx8IFtdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGZvcm1hdE51bWJlcihtZXRhLl9wYXJzZWRbaW5kZXhdLCBjaGFydC5vcHRpb25zLmxvY2FsZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbDogbGFiZWxzW2luZGV4XSB8fCAnJyxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldE1heEJvcmRlcldpZHRoKGFyY3MpIHtcbiAgICAgICAgbGV0IG1heCA9IDA7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgbGV0IGksIGlsZW4sIG1ldGEsIGNvbnRyb2xsZXIsIG9wdGlvbnM7XG4gICAgICAgIGlmICghYXJjcykge1xuICAgICAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgICAgIGlmIChjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgICAgICAgICAgYXJjcyA9IG1ldGEuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlciA9IG1ldGEuY29udHJvbGxlcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghYXJjcykge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gYXJjcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgb3B0aW9ucyA9IGNvbnRyb2xsZXIucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmJvcmRlckFsaWduICE9PSAnaW5uZXInKSB7XG4gICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBvcHRpb25zLmJvcmRlcldpZHRoIHx8IDAsIG9wdGlvbnMuaG92ZXJCb3JkZXJXaWR0aCB8fCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4O1xuICAgIH1cbiAgICBnZXRNYXhPZmZzZXQoYXJjcykge1xuICAgICAgICBsZXQgbWF4ID0gMDtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IGFyY3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSk7XG4gICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIG9wdGlvbnMub2Zmc2V0IHx8IDAsIG9wdGlvbnMuaG92ZXJPZmZzZXQgfHwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gX2dldFJpbmdXZWlnaHRPZmZzZXQoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIGxldCByaW5nV2VpZ2h0T2Zmc2V0ID0gMDtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGRhdGFzZXRJbmRleDsgKytpKXtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcbiAgICAgICAgICAgICAgICByaW5nV2VpZ2h0T2Zmc2V0ICs9IHRoaXMuX2dldFJpbmdXZWlnaHQoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJpbmdXZWlnaHRPZmZzZXQ7XG4gICAgfVxuIF9nZXRSaW5nV2VpZ2h0KGRhdGFzZXRJbmRleCkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgodmFsdWVPckRlZmF1bHQodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0ud2VpZ2h0LCAxKSwgMCk7XG4gICAgfVxuIF9nZXRWaXNpYmxlRGF0YXNldFdlaWdodFRvdGFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UmluZ1dlaWdodE9mZnNldCh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHMubGVuZ3RoKSB8fCAxO1xuICAgIH1cbn1cblxuY2xhc3MgTGluZUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ2xpbmUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiAnbGluZScsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgICAgICAgc2hvd0xpbmU6IHRydWUsXG4gICAgICAgIHNwYW5HYXBzOiBmYWxzZVxuICAgIH07XG4gc3RhdGljIG92ZXJyaWRlcyA9IHtcbiAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICBfaW5kZXhfOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2NhdGVnb3J5J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF92YWx1ZV86IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZWFyJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnN1cHBvcnRzRGVjaW1hdGlvbiA9IHRydWU7XG4gICAgICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHsgZGF0YXNldDogbGluZSAsIGRhdGE6IHBvaW50cyA9IFtdICwgX2RhdGFzZXQgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBhbmltYXRpb25zRGlzYWJsZWQgPSB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQ7XG4gICAgICAgIGxldCB7IHN0YXJ0ICwgY291bnQgIH0gPSBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyhtZXRhLCBwb2ludHMsIGFuaW1hdGlvbnNEaXNhYmxlZCk7XG4gICAgICAgIHRoaXMuX2RyYXdTdGFydCA9IHN0YXJ0O1xuICAgICAgICB0aGlzLl9kcmF3Q291bnQgPSBjb3VudDtcbiAgICAgICAgaWYgKF9zY2FsZVJhbmdlc0NoYW5nZWQobWV0YSkpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgICAgIGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBsaW5lLl9jaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGxpbmUuX2RhdGFzZXRJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgIGxpbmUuX2RlY2ltYXRlZCA9ICEhX2RhdGFzZXQuX2RlY2ltYXRlZDtcbiAgICAgICAgbGluZS5wb2ludHMgPSBwb2ludHM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNob3dMaW5lKSB7XG4gICAgICAgICAgICBvcHRpb25zLmJvcmRlcldpZHRoID0gMDtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnNlZ21lbnQgPSB0aGlzLm9wdGlvbnMuc2VnbWVudDtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGxpbmUsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgYW5pbWF0ZWQ6ICFhbmltYXRpb25zRGlzYWJsZWQsXG4gICAgICAgICAgICBvcHRpb25zXG4gICAgICAgIH0sIG1vZGUpO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKTtcbiAgICB9XG4gICAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAsIF9zdGFja2VkICwgX2RhdGFzZXQgIH0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCB7IHNwYW5HYXBzICwgc2VnbWVudCAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbWF4R2FwTGVuZ3RoID0gaXNOdW1iZXIoc3BhbkdhcHMpID8gc3BhbkdhcHMgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIGNvbnN0IGRpcmVjdFVwZGF0ZSA9IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZCB8fCByZXNldCB8fCBtb2RlID09PSAnbm9uZSc7XG4gICAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgY291bnQ7XG4gICAgICAgIGNvbnN0IHBvaW50c0NvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgbGV0IHByZXZQYXJzZWQgPSBzdGFydCA+IDAgJiYgdGhpcy5nZXRQYXJzZWQoc3RhcnQgLSAxKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBvaW50c0NvdW50OyArK2kpe1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gZGlyZWN0VXBkYXRlID8gcG9pbnQgOiB7fTtcbiAgICAgICAgICAgIGlmIChpIDwgc3RhcnQgfHwgaSA+PSBlbmQpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnNraXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaSk7XG4gICAgICAgICAgICBjb25zdCBudWxsRGF0YSA9IGlzTnVsbE9yVW5kZWYocGFyc2VkW3ZBeGlzXSk7XG4gICAgICAgICAgICBjb25zdCBpUGl4ZWwgPSBwcm9wZXJ0aWVzW2lBeGlzXSA9IGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHBhcnNlZFtpQXhpc10sIGkpO1xuICAgICAgICAgICAgY29uc3QgdlBpeGVsID0gcHJvcGVydGllc1t2QXhpc10gPSByZXNldCB8fCBudWxsRGF0YSA/IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKSA6IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKF9zdGFja2VkID8gdGhpcy5hcHBseVN0YWNrKHZTY2FsZSwgcGFyc2VkLCBfc3RhY2tlZCkgOiBwYXJzZWRbdkF4aXNdLCBpKTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuc2tpcCA9IGlzTmFOKGlQaXhlbCkgfHwgaXNOYU4odlBpeGVsKSB8fCBudWxsRGF0YTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuc3RvcCA9IGkgPiAwICYmIE1hdGguYWJzKHBhcnNlZFtpQXhpc10gLSBwcmV2UGFyc2VkW2lBeGlzXSkgPiBtYXhHYXBMZW5ndGg7XG4gICAgICAgICAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMucGFyc2VkID0gcGFyc2VkO1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMucmF3ID0gX2RhdGFzZXQuZGF0YVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRpcmVjdFVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2UGFyc2VkID0gcGFyc2VkO1xuICAgICAgICB9XG4gICAgfVxuIGdldE1heE92ZXJmbG93KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IG1ldGEuZGF0YXNldDtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gZGF0YXNldC5vcHRpb25zICYmIGRhdGFzZXQub3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwO1xuICAgICAgICBjb25zdCBkYXRhID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgICAgICBpZiAoIWRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gYm9yZGVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBkYXRhWzBdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKDApKTtcbiAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGRhdGEubGVuZ3RoIC0gMSkpO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoYm9yZGVyLCBmaXJzdFBvaW50LCBsYXN0UG9pbnQpIC8gMjtcbiAgICB9XG4gICAgZHJhdygpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIG1ldGEuZGF0YXNldC51cGRhdGVDb250cm9sUG9pbnRzKHRoaXMuY2hhcnQuY2hhcnRBcmVhLCBtZXRhLmlTY2FsZS5heGlzKTtcbiAgICAgICAgc3VwZXIuZHJhdygpO1xuICAgIH1cbn1cblxuY2xhc3MgUG9sYXJBcmVhQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAncG9sYXJBcmVhJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ2FyYycsXG4gICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgYW5pbWF0ZVJvdGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFuaW1hdGVTY2FsZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICBudW1iZXJzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1xuICAgICAgICAgICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgICAgICAgICAgICAgICAnZW5kQW5nbGUnLFxuICAgICAgICAgICAgICAgICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgICAgICAgICAgICAgICAnb3V0ZXJSYWRpdXMnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpbmRleEF4aXM6ICdyJyxcbiAgICAgICAgc3RhcnRBbmdsZTogMFxuICAgIH07XG4gc3RhdGljIG92ZXJyaWRlcyA9IHtcbiAgICAgICAgYXNwZWN0UmF0aW86IDEsXG4gICAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUxhYmVscyAoY2hhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBjaGFydC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubGFiZWxzLmxlbmd0aCAmJiBkYXRhLmRhdGFzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbGFiZWxzOiB7IHBvaW50U3R5bGUgLCBjb2xvciAgfSAgfSA9IGNoYXJ0LmxlZ2VuZC5vcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmxhYmVscy5tYXAoKGxhYmVsLCBpKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IHN0eWxlLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogcG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbjogIWNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25DbGljayAoZSwgbGVnZW5kSXRlbSwgbGVnZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5jaGFydC50b2dnbGVEYXRhVmlzaWJpbGl0eShsZWdlbmRJdGVtLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kLmNoYXJ0LnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICByOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3JhZGlhbExpbmVhcicsXG4gICAgICAgICAgICAgICAgYW5nbGVMaW5lczoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYmVnaW5BdFplcm86IHRydWUsXG4gICAgICAgICAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgICAgICAgICBjaXJjdWxhcjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcG9pbnRMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGU6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2hhcnQsIGRhdGFzZXRJbmRleCl7XG4gICAgICAgIHN1cGVyKGNoYXJ0LCBkYXRhc2V0SW5kZXgpO1xuICAgICAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm91dGVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IGNoYXJ0LmRhdGEubGFiZWxzIHx8IFtdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGZvcm1hdE51bWJlcihtZXRhLl9wYXJzZWRbaW5kZXhdLnIsIGNoYXJ0Lm9wdGlvbnMubG9jYWxlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbHNbaW5kZXhdIHx8ICcnLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICByZXR1cm4gX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlLmJpbmQodGhpcykobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgYXJjcyA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICAgICAgdGhpcy5fdXBkYXRlUmFkaXVzKCk7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMoYXJjcywgMCwgYXJjcy5sZW5ndGgsIG1vZGUpO1xuICAgIH1cbiBnZXRNaW5NYXgoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCByYW5nZSA9IHtcbiAgICAgICAgICAgIG1pbjogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICAgICAgbWF4OiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgfTtcbiAgICAgICAgbWV0YS5kYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KT0+e1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpLnI7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKHBhcnNlZCkgJiYgdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpbmRleCkpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkIDwgcmFuZ2UubWluKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLm1pbiA9IHBhcnNlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZCA+IHJhbmdlLm1heCkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZS5tYXggPSBwYXJzZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cbiBfdXBkYXRlUmFkaXVzKCkge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG1pblNpemUgPSBNYXRoLm1pbihjaGFydEFyZWEucmlnaHQgLSBjaGFydEFyZWEubGVmdCwgY2hhcnRBcmVhLmJvdHRvbSAtIGNoYXJ0QXJlYS50b3ApO1xuICAgICAgICBjb25zdCBvdXRlclJhZGl1cyA9IE1hdGgubWF4KG1pblNpemUgLyAyLCAwKTtcbiAgICAgICAgY29uc3QgaW5uZXJSYWRpdXMgPSBNYXRoLm1heChvcHRzLmN1dG91dFBlcmNlbnRhZ2UgPyBvdXRlclJhZGl1cyAvIDEwMCAqIG9wdHMuY3V0b3V0UGVyY2VudGFnZSA6IDEsIDApO1xuICAgICAgICBjb25zdCByYWRpdXNMZW5ndGggPSAob3V0ZXJSYWRpdXMgLSBpbm5lclJhZGl1cykgLyBjaGFydC5nZXRWaXNpYmxlRGF0YXNldENvdW50KCk7XG4gICAgICAgIHRoaXMub3V0ZXJSYWRpdXMgPSBvdXRlclJhZGl1cyAtIHJhZGl1c0xlbmd0aCAqIHRoaXMuaW5kZXg7XG4gICAgICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB0aGlzLm91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhhcmNzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBjaGFydC5vcHRpb25zO1xuICAgICAgICBjb25zdCBhbmltYXRpb25PcHRzID0gb3B0cy5hbmltYXRpb247XG4gICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy5fY2FjaGVkTWV0YS5yU2NhbGU7XG4gICAgICAgIGNvbnN0IGNlbnRlclggPSBzY2FsZS54Q2VudGVyO1xuICAgICAgICBjb25zdCBjZW50ZXJZID0gc2NhbGUueUNlbnRlcjtcbiAgICAgICAgY29uc3QgZGF0YXNldFN0YXJ0QW5nbGUgPSBzY2FsZS5nZXRJbmRleEFuZ2xlKDApIC0gMC41ICogUEk7XG4gICAgICAgIGxldCBhbmdsZSA9IGRhdGFzZXRTdGFydEFuZ2xlO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgY29uc3QgZGVmYXVsdEFuZ2xlID0gMzYwIC8gdGhpcy5jb3VudFZpc2libGVFbGVtZW50cygpO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBzdGFydDsgKytpKXtcbiAgICAgICAgICAgIGFuZ2xlICs9IHRoaXMuX2NvbXB1dGVBbmdsZShpLCBtb2RlLCBkZWZhdWx0QW5nbGUpO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyBpKyspe1xuICAgICAgICAgICAgY29uc3QgYXJjID0gYXJjc1tpXTtcbiAgICAgICAgICAgIGxldCBzdGFydEFuZ2xlID0gYW5nbGU7XG4gICAgICAgICAgICBsZXQgZW5kQW5nbGUgPSBhbmdsZSArIHRoaXMuX2NvbXB1dGVBbmdsZShpLCBtb2RlLCBkZWZhdWx0QW5nbGUpO1xuICAgICAgICAgICAgbGV0IG91dGVyUmFkaXVzID0gY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSkgPyBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0aGlzLmdldFBhcnNlZChpKS5yKSA6IDA7XG4gICAgICAgICAgICBhbmdsZSA9IGVuZEFuZ2xlO1xuICAgICAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dGVyUmFkaXVzID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVJvdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydEFuZ2xlID0gZW5kQW5nbGUgPSBkYXRhc2V0U3RhcnRBbmdsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIHg6IGNlbnRlclgsXG4gICAgICAgICAgICAgICAgeTogY2VudGVyWSxcbiAgICAgICAgICAgICAgICBpbm5lclJhZGl1czogMCxcbiAgICAgICAgICAgICAgICBvdXRlclJhZGl1cyxcbiAgICAgICAgICAgICAgICBzdGFydEFuZ2xlLFxuICAgICAgICAgICAgICAgIGVuZEFuZ2xlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBhcmMuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChhcmMsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvdW50VmlzaWJsZUVsZW1lbnRzKCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgbWV0YS5kYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KT0+e1xuICAgICAgICAgICAgaWYgKCFpc05hTih0aGlzLmdldFBhcnNlZChpbmRleCkucikgJiYgdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpbmRleCkpIHtcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cbiBfY29tcHV0ZUFuZ2xlKGluZGV4LCBtb2RlLCBkZWZhdWx0QW5nbGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpID8gdG9SYWRpYW5zKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCwgbW9kZSkuYW5nbGUgfHwgZGVmYXVsdEFuZ2xlKSA6IDA7XG4gICAgfVxufVxuXG5jbGFzcyBQaWVDb250cm9sbGVyIGV4dGVuZHMgRG91Z2hudXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAncGllJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGN1dG91dDogMCxcbiAgICAgICAgcm90YXRpb246IDAsXG4gICAgICAgIGNpcmN1bWZlcmVuY2U6IDM2MCxcbiAgICAgICAgcmFkaXVzOiAnMTAwJSdcbiAgICB9O1xufVxuXG5jbGFzcyBSYWRhckNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ3JhZGFyJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogJ2xpbmUnLFxuICAgICAgICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gICAgICAgIGluZGV4QXhpczogJ3InLFxuICAgICAgICBzaG93TGluZTogdHJ1ZSxcbiAgICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgICAgIGxpbmU6IHtcbiAgICAgICAgICAgICAgICBmaWxsOiAnc3RhcnQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIGFzcGVjdFJhdGlvOiAxLFxuICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgIHI6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFkaWFsTGluZWFyJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHZTY2FsZSA9IHRoaXMuX2NhY2hlZE1ldGEudlNjYWxlO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbDogdlNjYWxlLmdldExhYmVscygpW2luZGV4XSxcbiAgICAgICAgICAgIHZhbHVlOiAnJyArIHZTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFt2U2NhbGUuYXhpc10pXG4gICAgICAgIH07XG4gICAgfVxuICAgIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgcmV0dXJuIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZS5iaW5kKHRoaXMpKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBsaW5lID0gbWV0YS5kYXRhc2V0O1xuICAgICAgICBjb25zdCBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IG1ldGEuaVNjYWxlLmdldExhYmVscygpO1xuICAgICAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICAgICAgaWYgKG1vZGUgIT09ICdyZXNpemUnKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmJvcmRlcldpZHRoID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgX2xvb3A6IHRydWUsXG4gICAgICAgICAgICAgICAgX2Z1bGxMb29wOiBsYWJlbHMubGVuZ3RoID09PSBwb2ludHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQobGluZSwgdW5kZWZpbmVkLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgMCwgcG9pbnRzLmxlbmd0aCwgbW9kZSk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy5fY2FjaGVkTWV0YS5yU2NhbGU7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyBpKyspe1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICBjb25zdCBwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGksIHRoaXMuZ2V0UGFyc2VkKGkpLnIpO1xuICAgICAgICAgICAgY29uc3QgeCA9IHJlc2V0ID8gc2NhbGUueENlbnRlciA6IHBvaW50UG9zaXRpb24ueDtcbiAgICAgICAgICAgIGNvbnN0IHkgPSByZXNldCA/IHNjYWxlLnlDZW50ZXIgOiBwb2ludFBvc2l0aW9uLnk7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgeSxcbiAgICAgICAgICAgICAgICBhbmdsZTogcG9pbnRQb3NpdGlvbi5hbmdsZSxcbiAgICAgICAgICAgICAgICBza2lwOiBpc05hTih4KSB8fCBpc05hTih5KSxcbiAgICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KHBvaW50LCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgU2NhdHRlckNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ3NjYXR0ZXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICAgICAgICBzaG93TGluZTogZmFsc2UsXG4gICAgICAgIGZpbGw6IGZhbHNlXG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBpbnRlcmFjdGlvbjoge1xuICAgICAgICAgICAgbW9kZTogJ3BvaW50J1xuICAgICAgICB9LFxuICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgIHg6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZWFyJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZWFyJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmNoYXJ0LmRhdGEubGFiZWxzIHx8IFtdO1xuICAgICAgICBjb25zdCB7IHhTY2FsZSAsIHlTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgY29uc3QgeCA9IHhTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZC54KTtcbiAgICAgICAgY29uc3QgeSA9IHlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZC55KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbHNbaW5kZXhdIHx8ICcnLFxuICAgICAgICAgICAgdmFsdWU6ICcoJyArIHggKyAnLCAnICsgeSArICcpJ1xuICAgICAgICB9O1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgeyBkYXRhOiBwb2ludHMgPSBbXSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnNEaXNhYmxlZCA9IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZDtcbiAgICAgICAgbGV0IHsgc3RhcnQgLCBjb3VudCAgfSA9IF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKTtcbiAgICAgICAgdGhpcy5fZHJhd1N0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHRoaXMuX2RyYXdDb3VudCA9IGNvdW50O1xuICAgICAgICBpZiAoX3NjYWxlUmFuZ2VzQ2hhbmdlZChtZXRhKSkge1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICAgICAgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YXNldDogbGluZSAsIF9kYXRhc2V0ICB9ID0gbWV0YTtcbiAgICAgICAgICAgIGxpbmUuX2NoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgICAgIGxpbmUuX2RhdGFzZXRJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICBsaW5lLl9kZWNpbWF0ZWQgPSAhIV9kYXRhc2V0Ll9kZWNpbWF0ZWQ7XG4gICAgICAgICAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgICAgICAgICBvcHRpb25zLnNlZ21lbnQgPSB0aGlzLm9wdGlvbnMuc2VnbWVudDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChsaW5lLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgICAgICBhbmltYXRlZDogIWFuaW1hdGlvbnNEaXNhYmxlZCxcbiAgICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICB9LCBtb2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKTtcbiAgICB9XG4gICAgYWRkRWxlbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IHsgc2hvd0xpbmUgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmICghdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUgJiYgc2hvd0xpbmUpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlID0gdGhpcy5jaGFydC5yZWdpc3RyeS5nZXRFbGVtZW50KCdsaW5lJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuYWRkRWxlbWVudHMoKTtcbiAgICB9XG4gICAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAsIF9zdGFja2VkICwgX2RhdGFzZXQgIH0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBjb25zdCBzaGFyZWRPcHRpb25zID0gdGhpcy5nZXRTaGFyZWRPcHRpb25zKGZpcnN0T3B0cyk7XG4gICAgICAgIGNvbnN0IGluY2x1ZGVPcHRpb25zID0gdGhpcy5pbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKTtcbiAgICAgICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgeyBzcGFuR2FwcyAsIHNlZ21lbnQgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG1heEdhcExlbmd0aCA9IGlzTnVtYmVyKHNwYW5HYXBzKSA/IHNwYW5HYXBzIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICBjb25zdCBkaXJlY3RVcGRhdGUgPSB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQgfHwgcmVzZXQgfHwgbW9kZSA9PT0gJ25vbmUnO1xuICAgICAgICBsZXQgcHJldlBhcnNlZCA9IHN0YXJ0ID4gMCAmJiB0aGlzLmdldFBhcnNlZChzdGFydCAtIDEpO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGkpO1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IGRpcmVjdFVwZGF0ZSA/IHBvaW50IDoge307XG4gICAgICAgICAgICBjb25zdCBudWxsRGF0YSA9IGlzTnVsbE9yVW5kZWYocGFyc2VkW3ZBeGlzXSk7XG4gICAgICAgICAgICBjb25zdCBpUGl4ZWwgPSBwcm9wZXJ0aWVzW2lBeGlzXSA9IGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHBhcnNlZFtpQXhpc10sIGkpO1xuICAgICAgICAgICAgY29uc3QgdlBpeGVsID0gcHJvcGVydGllc1t2QXhpc10gPSByZXNldCB8fCBudWxsRGF0YSA/IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKSA6IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKF9zdGFja2VkID8gdGhpcy5hcHBseVN0YWNrKHZTY2FsZSwgcGFyc2VkLCBfc3RhY2tlZCkgOiBwYXJzZWRbdkF4aXNdLCBpKTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuc2tpcCA9IGlzTmFOKGlQaXhlbCkgfHwgaXNOYU4odlBpeGVsKSB8fCBudWxsRGF0YTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuc3RvcCA9IGkgPiAwICYmIE1hdGguYWJzKHBhcnNlZFtpQXhpc10gLSBwcmV2UGFyc2VkW2lBeGlzXSkgPiBtYXhHYXBMZW5ndGg7XG4gICAgICAgICAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMucGFyc2VkID0gcGFyc2VkO1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMucmF3ID0gX2RhdGFzZXQuZGF0YVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRpcmVjdFVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2UGFyc2VkID0gcGFyc2VkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlU2hhcmVkT3B0aW9ucyhzaGFyZWRPcHRpb25zLCBtb2RlLCBmaXJzdE9wdHMpO1xuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNob3dMaW5lKSB7XG4gICAgICAgICAgICBsZXQgbWF4ID0gMDtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgZGF0YVtpXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKSkgLyAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXggPiAwICYmIG1heDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhc2V0ID0gbWV0YS5kYXRhc2V0O1xuICAgICAgICBjb25zdCBib3JkZXIgPSBkYXRhc2V0Lm9wdGlvbnMgJiYgZGF0YXNldC5vcHRpb25zLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBib3JkZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlyc3RQb2ludCA9IGRhdGFbMF0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoMCkpO1xuICAgICAgICBjb25zdCBsYXN0UG9pbnQgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoZGF0YS5sZW5ndGggLSAxKSk7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChib3JkZXIsIGZpcnN0UG9pbnQsIGxhc3RQb2ludCkgLyAyO1xuICAgIH1cbn1cblxudmFyIGNvbnRyb2xsZXJzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQmFyQ29udHJvbGxlcjogQmFyQ29udHJvbGxlcixcbkJ1YmJsZUNvbnRyb2xsZXI6IEJ1YmJsZUNvbnRyb2xsZXIsXG5Eb3VnaG51dENvbnRyb2xsZXI6IERvdWdobnV0Q29udHJvbGxlcixcbkxpbmVDb250cm9sbGVyOiBMaW5lQ29udHJvbGxlcixcblBpZUNvbnRyb2xsZXI6IFBpZUNvbnRyb2xsZXIsXG5Qb2xhckFyZWFDb250cm9sbGVyOiBQb2xhckFyZWFDb250cm9sbGVyLFxuUmFkYXJDb250cm9sbGVyOiBSYWRhckNvbnRyb2xsZXIsXG5TY2F0dGVyQ29udHJvbGxlcjogU2NhdHRlckNvbnRyb2xsZXJcbn0pO1xuXG4vKipcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuX2FkYXB0ZXJzXG4gKiBAc2luY2UgMi44LjBcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gYWJzdHJhY3QoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQ6IENoZWNrIHRoYXQgYSBjb21wbGV0ZSBkYXRlIGFkYXB0ZXIgaXMgcHJvdmlkZWQuJyk7XG59XG4vKipcbiAqIERhdGUgYWRhcHRlciAoY3VycmVudCB1c2VkIGJ5IHRoZSB0aW1lIHNjYWxlKVxuICogQG5hbWVzcGFjZSBDaGFydC5fYWRhcHRlcnMuX2RhdGVcbiAqIEBtZW1iZXJvZiBDaGFydC5fYWRhcHRlcnNcbiAqIEBwcml2YXRlXG4gKi8gY2xhc3MgRGF0ZUFkYXB0ZXJCYXNlIHtcbiAgICAvKipcbiAgICogT3ZlcnJpZGUgZGVmYXVsdCBkYXRlIGFkYXB0ZXIgbWV0aG9kcy5cbiAgICogQWNjZXB0cyB0eXBlIHBhcmFtZXRlciB0byBkZWZpbmUgb3B0aW9ucyB0eXBlLlxuICAgKiBAZXhhbXBsZVxuICAgKiBDaGFydC5fYWRhcHRlcnMuX2RhdGUub3ZlcnJpZGU8e215QWRhcHRlck9wdGlvbjogc3RyaW5nfT4oe1xuICAgKiAgIGluaXQoKSB7XG4gICAqICAgICBjb25zb2xlLmxvZyh0aGlzLm9wdGlvbnMubXlBZGFwdGVyT3B0aW9uKTtcbiAgICogICB9XG4gICAqIH0pXG4gICAqLyBzdGF0aWMgb3ZlcnJpZGUobWVtYmVycykge1xuICAgICAgICBPYmplY3QuYXNzaWduKERhdGVBZGFwdGVyQmFzZS5wcm90b3R5cGUsIG1lbWJlcnMpO1xuICAgIH1cbiAgICBvcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpe1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gICAgaW5pdCgpIHt9XG4gICAgZm9ybWF0cygpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIHBhcnNlKCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG4gICAgZm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG4gICAgYWRkKCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG4gICAgZGlmZigpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIHN0YXJ0T2YoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBlbmRPZigpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxufVxudmFyIGFkYXB0ZXJzID0ge1xuICAgIF9kYXRlOiBEYXRlQWRhcHRlckJhc2Vcbn07XG5cbmZ1bmN0aW9uIGJpbmFyeVNlYXJjaChtZXRhc2V0LCBheGlzLCB2YWx1ZSwgaW50ZXJzZWN0KSB7XG4gICAgY29uc3QgeyBjb250cm9sbGVyICwgZGF0YSAsIF9zb3J0ZWQgIH0gPSBtZXRhc2V0O1xuICAgIGNvbnN0IGlTY2FsZSA9IGNvbnRyb2xsZXIuX2NhY2hlZE1ldGEuaVNjYWxlO1xuICAgIGlmIChpU2NhbGUgJiYgYXhpcyA9PT0gaVNjYWxlLmF4aXMgJiYgYXhpcyAhPT0gJ3InICYmIF9zb3J0ZWQgJiYgZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgbG9va3VwTWV0aG9kID0gaVNjYWxlLl9yZXZlcnNlUGl4ZWxzID8gX3Jsb29rdXBCeUtleSA6IF9sb29rdXBCeUtleTtcbiAgICAgICAgaWYgKCFpbnRlcnNlY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBsb29rdXBNZXRob2QoZGF0YSwgYXhpcywgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZXIuX3NoYXJlZE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gZGF0YVswXTtcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdHlwZW9mIGVsLmdldFJhbmdlID09PSAnZnVuY3Rpb24nICYmIGVsLmdldFJhbmdlKGF4aXMpO1xuICAgICAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBsb29rdXBNZXRob2QoZGF0YSwgYXhpcywgdmFsdWUgLSByYW5nZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kID0gbG9va3VwTWV0aG9kKGRhdGEsIGF4aXMsIHZhbHVlICsgcmFuZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGxvOiBzdGFydC5sbyxcbiAgICAgICAgICAgICAgICAgICAgaGk6IGVuZC5oaVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbG86IDAsXG4gICAgICAgIGhpOiBkYXRhLmxlbmd0aCAtIDFcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGhhbmRsZXIsIGludGVyc2VjdCkge1xuICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bYXhpc107XG4gICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGNvbnN0IHsgaW5kZXggLCBkYXRhICB9ID0gbWV0YXNldHNbaV07XG4gICAgICAgIGNvbnN0IHsgbG8gLCBoaSAgfSA9IGJpbmFyeVNlYXJjaChtZXRhc2V0c1tpXSwgYXhpcywgdmFsdWUsIGludGVyc2VjdCk7XG4gICAgICAgIGZvcihsZXQgaiA9IGxvOyBqIDw9IGhpOyArK2ope1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRhdGFbal07XG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQuc2tpcCkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIoZWxlbWVudCwgaW5kZXgsIGopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIGZ1bmN0aW9uIGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhheGlzKSB7XG4gICAgY29uc3QgdXNlWCA9IGF4aXMuaW5kZXhPZigneCcpICE9PSAtMTtcbiAgICBjb25zdCB1c2VZID0gYXhpcy5pbmRleE9mKCd5JykgIT09IC0xO1xuICAgIHJldHVybiBmdW5jdGlvbihwdDEsIHB0Mikge1xuICAgICAgICBjb25zdCBkZWx0YVggPSB1c2VYID8gTWF0aC5hYnMocHQxLnggLSBwdDIueCkgOiAwO1xuICAgICAgICBjb25zdCBkZWx0YVkgPSB1c2VZID8gTWF0aC5hYnMocHQxLnkgLSBwdDIueSkgOiAwO1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGRlbHRhWCwgMikgKyBNYXRoLnBvdyhkZWx0YVksIDIpKTtcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkge1xuICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgaWYgKCFpbmNsdWRlSW52aXNpYmxlICYmICFjaGFydC5pc1BvaW50SW5BcmVhKHBvc2l0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuICAgIGNvbnN0IGV2YWx1YXRpb25GdW5jID0gZnVuY3Rpb24oZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgICAgICBpZiAoIWluY2x1ZGVJbnZpc2libGUgJiYgIV9pc1BvaW50SW5BcmVhKGVsZW1lbnQsIGNoYXJ0LmNoYXJ0QXJlYSwgMCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHVzZUZpbmFsUG9zaXRpb24pKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGV2YWx1YXRpb25GdW5jLCB0cnVlKTtcbiAgICByZXR1cm4gaXRlbXM7XG59XG4gZnVuY3Rpb24gZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGxldCBpdGVtcyA9IFtdO1xuICAgIGZ1bmN0aW9uIGV2YWx1YXRpb25GdW5jKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgeyBzdGFydEFuZ2xlICwgZW5kQW5nbGUgIH0gPSBlbGVtZW50LmdldFByb3BzKFtcbiAgICAgICAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICAgICAgICdlbmRBbmdsZSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHsgYW5nbGUgIH0gPSBnZXRBbmdsZUZyb21Qb2ludChlbGVtZW50LCB7XG4gICAgICAgICAgICB4OiBwb3NpdGlvbi54LFxuICAgICAgICAgICAgeTogcG9zaXRpb24ueVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGV2YWx1YXRpb25GdW5jKTtcbiAgICByZXR1cm4gaXRlbXM7XG59XG4gZnVuY3Rpb24gZ2V0TmVhcmVzdENhcnRlc2lhbkl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSB7XG4gICAgbGV0IGl0ZW1zID0gW107XG4gICAgY29uc3QgZGlzdGFuY2VNZXRyaWMgPSBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMoYXhpcyk7XG4gICAgbGV0IG1pbkRpc3RhbmNlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIGZ1bmN0aW9uIGV2YWx1YXRpb25GdW5jKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgaW5SYW5nZSA9IGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgaWYgKGludGVyc2VjdCAmJiAhaW5SYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IGVsZW1lbnQuZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHBvaW50SW5BcmVhID0gISFpbmNsdWRlSW52aXNpYmxlIHx8IGNoYXJ0LmlzUG9pbnRJbkFyZWEoY2VudGVyKTtcbiAgICAgICAgaWYgKCFwb2ludEluQXJlYSAmJiAhaW5SYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gZGlzdGFuY2VNZXRyaWMocG9zaXRpb24sIGNlbnRlcik7XG4gICAgICAgIGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICBpdGVtcyA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgfSBlbHNlIGlmIChkaXN0YW5jZSA9PT0gbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBldmFsdWF0aW9uRnVuYyk7XG4gICAgcmV0dXJuIGl0ZW1zO1xufVxuIGZ1bmN0aW9uIGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkge1xuICAgIGlmICghaW5jbHVkZUludmlzaWJsZSAmJiAhY2hhcnQuaXNQb2ludEluQXJlYShwb3NpdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gYXhpcyA9PT0gJ3InICYmICFpbnRlcnNlY3QgPyBnZXROZWFyZXN0UmFkaWFsSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSA6IGdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG59XG4gZnVuY3Rpb24gZ2V0QXhpc0l0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCByYW5nZU1ldGhvZCA9IGF4aXMgPT09ICd4JyA/ICdpblhSYW5nZScgOiAnaW5ZUmFuZ2UnO1xuICAgIGxldCBpbnRlcnNlY3RzSXRlbSA9IGZhbHNlO1xuICAgIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIChlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KT0+e1xuICAgICAgICBpZiAoZWxlbWVudFtyYW5nZU1ldGhvZF0ocG9zaXRpb25bYXhpc10sIHVzZUZpbmFsUG9zaXRpb24pKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpbnRlcnNlY3RzSXRlbSA9IGludGVyc2VjdHNJdGVtIHx8IGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpbnRlcnNlY3QgJiYgIWludGVyc2VjdHNJdGVtKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1zO1xufVxuIHZhciBJbnRlcmFjdGlvbiA9IHtcbiAgICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMsXG4gICAgbW9kZXM6IHtcbiBpbmRleCAoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4JztcbiAgICAgICAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IG9wdGlvbnMuaW50ZXJzZWN0ID8gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSA6IGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGZhbHNlLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG4gICAgICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKS5mb3JFYWNoKChtZXRhKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaXRlbXNbMF0uaW5kZXg7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG1ldGEuZGF0YVtpbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgIWVsZW1lbnQuc2tpcCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXg6IG1ldGEuaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICAgICAgfSxcbiBkYXRhc2V0IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5JztcbiAgICAgICAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICAgICAgICBsZXQgaXRlbXMgPSBvcHRpb25zLmludGVyc2VjdCA/IGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkgOiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBmYWxzZSwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG4gICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzZXRJbmRleCA9IGl0ZW1zWzBdLmRhdGFzZXRJbmRleDtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5kYXRhO1xuICAgICAgICAgICAgICAgIGl0ZW1zID0gW107XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGRhdGFbaV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICAgIH0sXG4gcG9pbnQgKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgICAgICAgY29uc3QgaW5jbHVkZUludmlzaWJsZSA9IG9wdGlvbnMuaW5jbHVkZUludmlzaWJsZSB8fCBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgICAgICB9LFxuIG5lYXJlc3QgKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgICAgICAgY29uc3QgaW5jbHVkZUludmlzaWJsZSA9IG9wdGlvbnMuaW5jbHVkZUludmlzaWJsZSB8fCBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBvcHRpb25zLmludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG4gICAgICAgIH0sXG4geCAoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXhpc0l0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgJ3gnLCBvcHRpb25zLmludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIH0sXG4geSAoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXhpc0l0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgJ3knLCBvcHRpb25zLmludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5jb25zdCBTVEFUSUNfUE9TSVRJT05TID0gW1xuICAgICdsZWZ0JyxcbiAgICAndG9wJyxcbiAgICAncmlnaHQnLFxuICAgICdib3R0b20nXG5dO1xuZnVuY3Rpb24gZmlsdGVyQnlQb3NpdGlvbihhcnJheSwgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gYXJyYXkuZmlsdGVyKCh2KT0+di5wb3MgPT09IHBvc2l0aW9uKTtcbn1cbmZ1bmN0aW9uIGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhhcnJheSwgYXhpcykge1xuICAgIHJldHVybiBhcnJheS5maWx0ZXIoKHYpPT5TVEFUSUNfUE9TSVRJT05TLmluZGV4T2Yodi5wb3MpID09PSAtMSAmJiB2LmJveC5heGlzID09PSBheGlzKTtcbn1cbmZ1bmN0aW9uIHNvcnRCeVdlaWdodChhcnJheSwgcmV2ZXJzZSkge1xuICAgIHJldHVybiBhcnJheS5zb3J0KChhLCBiKT0+e1xuICAgICAgICBjb25zdCB2MCA9IHJldmVyc2UgPyBiIDogYTtcbiAgICAgICAgY29uc3QgdjEgPSByZXZlcnNlID8gYSA6IGI7XG4gICAgICAgIHJldHVybiB2MC53ZWlnaHQgPT09IHYxLndlaWdodCA/IHYwLmluZGV4IC0gdjEuaW5kZXggOiB2MC53ZWlnaHQgLSB2MS53ZWlnaHQ7XG4gICAgfSk7XG59XG5mdW5jdGlvbiB3cmFwQm94ZXMoYm94ZXMpIHtcbiAgICBjb25zdCBsYXlvdXRCb3hlcyA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBib3gsIHBvcywgc3RhY2ssIHN0YWNrV2VpZ2h0O1xuICAgIGZvcihpID0gMCwgaWxlbiA9IChib3hlcyB8fCBbXSkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgYm94ID0gYm94ZXNbaV07XG4gICAgICAgICh7IHBvc2l0aW9uOiBwb3MgLCBvcHRpb25zOiB7IHN0YWNrICwgc3RhY2tXZWlnaHQgPTEgIH0gIH0gPSBib3gpO1xuICAgICAgICBsYXlvdXRCb3hlcy5wdXNoKHtcbiAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgYm94LFxuICAgICAgICAgICAgcG9zLFxuICAgICAgICAgICAgaG9yaXpvbnRhbDogYm94LmlzSG9yaXpvbnRhbCgpLFxuICAgICAgICAgICAgd2VpZ2h0OiBib3gud2VpZ2h0LFxuICAgICAgICAgICAgc3RhY2s6IHN0YWNrICYmIHBvcyArIHN0YWNrLFxuICAgICAgICAgICAgc3RhY2tXZWlnaHRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsYXlvdXRCb3hlcztcbn1cbmZ1bmN0aW9uIGJ1aWxkU3RhY2tzKGxheW91dHMpIHtcbiAgICBjb25zdCBzdGFja3MgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHdyYXAgb2YgbGF5b3V0cyl7XG4gICAgICAgIGNvbnN0IHsgc3RhY2sgLCBwb3MgLCBzdGFja1dlaWdodCAgfSA9IHdyYXA7XG4gICAgICAgIGlmICghc3RhY2sgfHwgIVNUQVRJQ19QT1NJVElPTlMuaW5jbHVkZXMocG9zKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgX3N0YWNrID0gc3RhY2tzW3N0YWNrXSB8fCAoc3RhY2tzW3N0YWNrXSA9IHtcbiAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgcGxhY2VkOiAwLFxuICAgICAgICAgICAgd2VpZ2h0OiAwLFxuICAgICAgICAgICAgc2l6ZTogMFxuICAgICAgICB9KTtcbiAgICAgICAgX3N0YWNrLmNvdW50Kys7XG4gICAgICAgIF9zdGFjay53ZWlnaHQgKz0gc3RhY2tXZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiBzdGFja3M7XG59XG4gZnVuY3Rpb24gc2V0TGF5b3V0RGltcyhsYXlvdXRzLCBwYXJhbXMpIHtcbiAgICBjb25zdCBzdGFja3MgPSBidWlsZFN0YWNrcyhsYXlvdXRzKTtcbiAgICBjb25zdCB7IHZCb3hNYXhXaWR0aCAsIGhCb3hNYXhIZWlnaHQgIH0gPSBwYXJhbXM7XG4gICAgbGV0IGksIGlsZW4sIGxheW91dDtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBsYXlvdXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGxheW91dCA9IGxheW91dHNbaV07XG4gICAgICAgIGNvbnN0IHsgZnVsbFNpemUgIH0gPSBsYXlvdXQuYm94O1xuICAgICAgICBjb25zdCBzdGFjayA9IHN0YWNrc1tsYXlvdXQuc3RhY2tdO1xuICAgICAgICBjb25zdCBmYWN0b3IgPSBzdGFjayAmJiBsYXlvdXQuc3RhY2tXZWlnaHQgLyBzdGFjay53ZWlnaHQ7XG4gICAgICAgIGlmIChsYXlvdXQuaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgbGF5b3V0LndpZHRoID0gZmFjdG9yID8gZmFjdG9yICogdkJveE1heFdpZHRoIDogZnVsbFNpemUgJiYgcGFyYW1zLmF2YWlsYWJsZVdpZHRoO1xuICAgICAgICAgICAgbGF5b3V0LmhlaWdodCA9IGhCb3hNYXhIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYXlvdXQud2lkdGggPSB2Qm94TWF4V2lkdGg7XG4gICAgICAgICAgICBsYXlvdXQuaGVpZ2h0ID0gZmFjdG9yID8gZmFjdG9yICogaEJveE1heEhlaWdodCA6IGZ1bGxTaXplICYmIHBhcmFtcy5hdmFpbGFibGVIZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YWNrcztcbn1cbmZ1bmN0aW9uIGJ1aWxkTGF5b3V0Qm94ZXMoYm94ZXMpIHtcbiAgICBjb25zdCBsYXlvdXRCb3hlcyA9IHdyYXBCb3hlcyhib3hlcyk7XG4gICAgY29uc3QgZnVsbFNpemUgPSBzb3J0QnlXZWlnaHQobGF5b3V0Qm94ZXMuZmlsdGVyKCh3cmFwKT0+d3JhcC5ib3guZnVsbFNpemUpLCB0cnVlKTtcbiAgICBjb25zdCBsZWZ0ID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdsZWZ0JyksIHRydWUpO1xuICAgIGNvbnN0IHJpZ2h0ID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdyaWdodCcpKTtcbiAgICBjb25zdCB0b3AgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ3RvcCcpLCB0cnVlKTtcbiAgICBjb25zdCBib3R0b20gPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2JvdHRvbScpKTtcbiAgICBjb25zdCBjZW50ZXJIb3Jpem9udGFsID0gZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzKGxheW91dEJveGVzLCAneCcpO1xuICAgIGNvbnN0IGNlbnRlclZlcnRpY2FsID0gZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzKGxheW91dEJveGVzLCAneScpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGZ1bGxTaXplLFxuICAgICAgICBsZWZ0QW5kVG9wOiBsZWZ0LmNvbmNhdCh0b3ApLFxuICAgICAgICByaWdodEFuZEJvdHRvbTogcmlnaHQuY29uY2F0KGNlbnRlclZlcnRpY2FsKS5jb25jYXQoYm90dG9tKS5jb25jYXQoY2VudGVySG9yaXpvbnRhbCksXG4gICAgICAgIGNoYXJ0QXJlYTogZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2NoYXJ0QXJlYScpLFxuICAgICAgICB2ZXJ0aWNhbDogbGVmdC5jb25jYXQocmlnaHQpLmNvbmNhdChjZW50ZXJWZXJ0aWNhbCksXG4gICAgICAgIGhvcml6b250YWw6IHRvcC5jb25jYXQoYm90dG9tKS5jb25jYXQoY2VudGVySG9yaXpvbnRhbClcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCBhLCBiKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KG1heFBhZGRpbmdbYV0sIGNoYXJ0QXJlYVthXSkgKyBNYXRoLm1heChtYXhQYWRkaW5nW2JdLCBjaGFydEFyZWFbYl0pO1xufVxuZnVuY3Rpb24gdXBkYXRlTWF4UGFkZGluZyhtYXhQYWRkaW5nLCBib3hQYWRkaW5nKSB7XG4gICAgbWF4UGFkZGluZy50b3AgPSBNYXRoLm1heChtYXhQYWRkaW5nLnRvcCwgYm94UGFkZGluZy50b3ApO1xuICAgIG1heFBhZGRpbmcubGVmdCA9IE1hdGgubWF4KG1heFBhZGRpbmcubGVmdCwgYm94UGFkZGluZy5sZWZ0KTtcbiAgICBtYXhQYWRkaW5nLmJvdHRvbSA9IE1hdGgubWF4KG1heFBhZGRpbmcuYm90dG9tLCBib3hQYWRkaW5nLmJvdHRvbSk7XG4gICAgbWF4UGFkZGluZy5yaWdodCA9IE1hdGgubWF4KG1heFBhZGRpbmcucmlnaHQsIGJveFBhZGRpbmcucmlnaHQpO1xufVxuZnVuY3Rpb24gdXBkYXRlRGltcyhjaGFydEFyZWEsIHBhcmFtcywgbGF5b3V0LCBzdGFja3MpIHtcbiAgICBjb25zdCB7IHBvcyAsIGJveCAgfSA9IGxheW91dDtcbiAgICBjb25zdCBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG4gICAgaWYgKCFpc09iamVjdChwb3MpKSB7XG4gICAgICAgIGlmIChsYXlvdXQuc2l6ZSkge1xuICAgICAgICAgICAgY2hhcnRBcmVhW3Bvc10gLT0gbGF5b3V0LnNpemU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXSB8fCB7XG4gICAgICAgICAgICBzaXplOiAwLFxuICAgICAgICAgICAgY291bnQ6IDFcbiAgICAgICAgfTtcbiAgICAgICAgc3RhY2suc2l6ZSA9IE1hdGgubWF4KHN0YWNrLnNpemUsIGxheW91dC5ob3Jpem9udGFsID8gYm94LmhlaWdodCA6IGJveC53aWR0aCk7XG4gICAgICAgIGxheW91dC5zaXplID0gc3RhY2suc2l6ZSAvIHN0YWNrLmNvdW50O1xuICAgICAgICBjaGFydEFyZWFbcG9zXSArPSBsYXlvdXQuc2l6ZTtcbiAgICB9XG4gICAgaWYgKGJveC5nZXRQYWRkaW5nKSB7XG4gICAgICAgIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgYm94LmdldFBhZGRpbmcoKSk7XG4gICAgfVxuICAgIGNvbnN0IG5ld1dpZHRoID0gTWF0aC5tYXgoMCwgcGFyYW1zLm91dGVyV2lkdGggLSBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsICdsZWZ0JywgJ3JpZ2h0JykpO1xuICAgIGNvbnN0IG5ld0hlaWdodCA9IE1hdGgubWF4KDAsIHBhcmFtcy5vdXRlckhlaWdodCAtIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgJ3RvcCcsICdib3R0b20nKSk7XG4gICAgY29uc3Qgd2lkdGhDaGFuZ2VkID0gbmV3V2lkdGggIT09IGNoYXJ0QXJlYS53O1xuICAgIGNvbnN0IGhlaWdodENoYW5nZWQgPSBuZXdIZWlnaHQgIT09IGNoYXJ0QXJlYS5oO1xuICAgIGNoYXJ0QXJlYS53ID0gbmV3V2lkdGg7XG4gICAgY2hhcnRBcmVhLmggPSBuZXdIZWlnaHQ7XG4gICAgcmV0dXJuIGxheW91dC5ob3Jpem9udGFsID8ge1xuICAgICAgICBzYW1lOiB3aWR0aENoYW5nZWQsXG4gICAgICAgIG90aGVyOiBoZWlnaHRDaGFuZ2VkXG4gICAgfSA6IHtcbiAgICAgICAgc2FtZTogaGVpZ2h0Q2hhbmdlZCxcbiAgICAgICAgb3RoZXI6IHdpZHRoQ2hhbmdlZFxuICAgIH07XG59XG5mdW5jdGlvbiBoYW5kbGVNYXhQYWRkaW5nKGNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcbiAgICBmdW5jdGlvbiB1cGRhdGVQb3MocG9zKSB7XG4gICAgICAgIGNvbnN0IGNoYW5nZSA9IE1hdGgubWF4KG1heFBhZGRpbmdbcG9zXSAtIGNoYXJ0QXJlYVtwb3NdLCAwKTtcbiAgICAgICAgY2hhcnRBcmVhW3Bvc10gKz0gY2hhbmdlO1xuICAgICAgICByZXR1cm4gY2hhbmdlO1xuICAgIH1cbiAgICBjaGFydEFyZWEueSArPSB1cGRhdGVQb3MoJ3RvcCcpO1xuICAgIGNoYXJ0QXJlYS54ICs9IHVwZGF0ZVBvcygnbGVmdCcpO1xuICAgIHVwZGF0ZVBvcygncmlnaHQnKTtcbiAgICB1cGRhdGVQb3MoJ2JvdHRvbScpO1xufVxuZnVuY3Rpb24gZ2V0TWFyZ2lucyhob3Jpem9udGFsLCBjaGFydEFyZWEpIHtcbiAgICBjb25zdCBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG4gICAgZnVuY3Rpb24gbWFyZ2luRm9yUG9zaXRpb25zKHBvc2l0aW9ucykge1xuICAgICAgICBjb25zdCBtYXJnaW4gPSB7XG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgfTtcbiAgICAgICAgcG9zaXRpb25zLmZvckVhY2goKHBvcyk9PntcbiAgICAgICAgICAgIG1hcmdpbltwb3NdID0gTWF0aC5tYXgoY2hhcnRBcmVhW3Bvc10sIG1heFBhZGRpbmdbcG9zXSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWFyZ2luO1xuICAgIH1cbiAgICByZXR1cm4gaG9yaXpvbnRhbCA/IG1hcmdpbkZvclBvc2l0aW9ucyhbXG4gICAgICAgICdsZWZ0JyxcbiAgICAgICAgJ3JpZ2h0J1xuICAgIF0pIDogbWFyZ2luRm9yUG9zaXRpb25zKFtcbiAgICAgICAgJ3RvcCcsXG4gICAgICAgICdib3R0b20nXG4gICAgXSk7XG59XG5mdW5jdGlvbiBmaXRCb3hlcyhib3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykge1xuICAgIGNvbnN0IHJlZml0Qm94ZXMgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgbGF5b3V0LCBib3gsIHJlZml0LCBjaGFuZ2VkO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGJveGVzLmxlbmd0aCwgcmVmaXQgPSAwOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgbGF5b3V0ID0gYm94ZXNbaV07XG4gICAgICAgIGJveCA9IGxheW91dC5ib3g7XG4gICAgICAgIGJveC51cGRhdGUobGF5b3V0LndpZHRoIHx8IGNoYXJ0QXJlYS53LCBsYXlvdXQuaGVpZ2h0IHx8IGNoYXJ0QXJlYS5oLCBnZXRNYXJnaW5zKGxheW91dC5ob3Jpem9udGFsLCBjaGFydEFyZWEpKTtcbiAgICAgICAgY29uc3QgeyBzYW1lICwgb3RoZXIgIH0gPSB1cGRhdGVEaW1zKGNoYXJ0QXJlYSwgcGFyYW1zLCBsYXlvdXQsIHN0YWNrcyk7XG4gICAgICAgIHJlZml0IHw9IHNhbWUgJiYgcmVmaXRCb3hlcy5sZW5ndGg7XG4gICAgICAgIGNoYW5nZWQgPSBjaGFuZ2VkIHx8IG90aGVyO1xuICAgICAgICBpZiAoIWJveC5mdWxsU2l6ZSkge1xuICAgICAgICAgICAgcmVmaXRCb3hlcy5wdXNoKGxheW91dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlZml0ICYmIGZpdEJveGVzKHJlZml0Qm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHx8IGNoYW5nZWQ7XG59XG5mdW5jdGlvbiBzZXRCb3hEaW1zKGJveCwgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgYm94LnRvcCA9IHRvcDtcbiAgICBib3gubGVmdCA9IGxlZnQ7XG4gICAgYm94LnJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuICAgIGJveC5ib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG4gICAgYm94LndpZHRoID0gd2lkdGg7XG4gICAgYm94LmhlaWdodCA9IGhlaWdodDtcbn1cbmZ1bmN0aW9uIHBsYWNlQm94ZXMoYm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHtcbiAgICBjb25zdCB1c2VyUGFkZGluZyA9IHBhcmFtcy5wYWRkaW5nO1xuICAgIGxldCB7IHggLCB5ICB9ID0gY2hhcnRBcmVhO1xuICAgIGZvciAoY29uc3QgbGF5b3V0IG9mIGJveGVzKXtcbiAgICAgICAgY29uc3QgYm94ID0gbGF5b3V0LmJveDtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXSB8fCB7XG4gICAgICAgICAgICBjb3VudDogMSxcbiAgICAgICAgICAgIHBsYWNlZDogMCxcbiAgICAgICAgICAgIHdlaWdodDogMVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB3ZWlnaHQgPSBsYXlvdXQuc3RhY2tXZWlnaHQgLyBzdGFjay53ZWlnaHQgfHwgMTtcbiAgICAgICAgaWYgKGxheW91dC5ob3Jpem9udGFsKSB7XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IGNoYXJ0QXJlYS53ICogd2VpZ2h0O1xuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gc3RhY2suc2l6ZSB8fCBib3guaGVpZ2h0O1xuICAgICAgICAgICAgaWYgKGRlZmluZWQoc3RhY2suc3RhcnQpKSB7XG4gICAgICAgICAgICAgICAgeSA9IHN0YWNrLnN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJveC5mdWxsU2l6ZSkge1xuICAgICAgICAgICAgICAgIHNldEJveERpbXMoYm94LCB1c2VyUGFkZGluZy5sZWZ0LCB5LCBwYXJhbXMub3V0ZXJXaWR0aCAtIHVzZXJQYWRkaW5nLnJpZ2h0IC0gdXNlclBhZGRpbmcubGVmdCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0Qm94RGltcyhib3gsIGNoYXJ0QXJlYS5sZWZ0ICsgc3RhY2sucGxhY2VkLCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YWNrLnN0YXJ0ID0geTtcbiAgICAgICAgICAgIHN0YWNrLnBsYWNlZCArPSB3aWR0aDtcbiAgICAgICAgICAgIHkgPSBib3guYm90dG9tO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gY2hhcnRBcmVhLmggKiB3ZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IHN0YWNrLnNpemUgfHwgYm94LndpZHRoO1xuICAgICAgICAgICAgaWYgKGRlZmluZWQoc3RhY2suc3RhcnQpKSB7XG4gICAgICAgICAgICAgICAgeCA9IHN0YWNrLnN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJveC5mdWxsU2l6ZSkge1xuICAgICAgICAgICAgICAgIHNldEJveERpbXMoYm94LCB4LCB1c2VyUGFkZGluZy50b3AsIHdpZHRoLCBwYXJhbXMub3V0ZXJIZWlnaHQgLSB1c2VyUGFkZGluZy5ib3R0b20gLSB1c2VyUGFkZGluZy50b3ApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRCb3hEaW1zKGJveCwgeCwgY2hhcnRBcmVhLnRvcCArIHN0YWNrLnBsYWNlZCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFjay5zdGFydCA9IHg7XG4gICAgICAgICAgICBzdGFjay5wbGFjZWQgKz0gaGVpZ2h0O1xuICAgICAgICAgICAgeCA9IGJveC5yaWdodDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGFydEFyZWEueCA9IHg7XG4gICAgY2hhcnRBcmVhLnkgPSB5O1xufVxudmFyIGxheW91dHMgPSB7XG4gYWRkQm94IChjaGFydCwgaXRlbSkge1xuICAgICAgICBpZiAoIWNoYXJ0LmJveGVzKSB7XG4gICAgICAgICAgICBjaGFydC5ib3hlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW0uZnVsbFNpemUgPSBpdGVtLmZ1bGxTaXplIHx8IGZhbHNlO1xuICAgICAgICBpdGVtLnBvc2l0aW9uID0gaXRlbS5wb3NpdGlvbiB8fCAndG9wJztcbiAgICAgICAgaXRlbS53ZWlnaHQgPSBpdGVtLndlaWdodCB8fCAwO1xuICAgICAgICBpdGVtLl9sYXllcnMgPSBpdGVtLl9sYXllcnMgfHwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgejogMCxcbiAgICAgICAgICAgICAgICAgICAgZHJhdyAoY2hhcnRBcmVhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmRyYXcoY2hhcnRBcmVhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH07XG4gICAgICAgIGNoYXJ0LmJveGVzLnB1c2goaXRlbSk7XG4gICAgfSxcbiByZW1vdmVCb3ggKGNoYXJ0LCBsYXlvdXRJdGVtKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gY2hhcnQuYm94ZXMgPyBjaGFydC5ib3hlcy5pbmRleE9mKGxheW91dEl0ZW0pIDogLTE7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNoYXJ0LmJveGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9LFxuIGNvbmZpZ3VyZSAoY2hhcnQsIGl0ZW0sIG9wdGlvbnMpIHtcbiAgICAgICAgaXRlbS5mdWxsU2l6ZSA9IG9wdGlvbnMuZnVsbFNpemU7XG4gICAgICAgIGl0ZW0ucG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICBpdGVtLndlaWdodCA9IG9wdGlvbnMud2VpZ2h0O1xuICAgIH0sXG4gdXBkYXRlIChjaGFydCwgd2lkdGgsIGhlaWdodCwgbWluUGFkZGluZykge1xuICAgICAgICBpZiAoIWNoYXJ0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhjaGFydC5vcHRpb25zLmxheW91dC5wYWRkaW5nKTtcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlV2lkdGggPSBNYXRoLm1heCh3aWR0aCAtIHBhZGRpbmcud2lkdGgsIDApO1xuICAgICAgICBjb25zdCBhdmFpbGFibGVIZWlnaHQgPSBNYXRoLm1heChoZWlnaHQgLSBwYWRkaW5nLmhlaWdodCwgMCk7XG4gICAgICAgIGNvbnN0IGJveGVzID0gYnVpbGRMYXlvdXRCb3hlcyhjaGFydC5ib3hlcyk7XG4gICAgICAgIGNvbnN0IHZlcnRpY2FsQm94ZXMgPSBib3hlcy52ZXJ0aWNhbDtcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbEJveGVzID0gYm94ZXMuaG9yaXpvbnRhbDtcbiAgICAgICAgZWFjaChjaGFydC5ib3hlcywgKGJveCk9PntcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYm94LmJlZm9yZUxheW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGJveC5iZWZvcmVMYXlvdXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHZpc2libGVWZXJ0aWNhbEJveENvdW50ID0gdmVydGljYWxCb3hlcy5yZWR1Y2UoKHRvdGFsLCB3cmFwKT0+d3JhcC5ib3gub3B0aW9ucyAmJiB3cmFwLmJveC5vcHRpb25zLmRpc3BsYXkgPT09IGZhbHNlID8gdG90YWwgOiB0b3RhbCArIDEsIDApIHx8IDE7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgb3V0ZXJXaWR0aDogd2lkdGgsXG4gICAgICAgICAgICBvdXRlckhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgcGFkZGluZyxcbiAgICAgICAgICAgIGF2YWlsYWJsZVdpZHRoLFxuICAgICAgICAgICAgYXZhaWxhYmxlSGVpZ2h0LFxuICAgICAgICAgICAgdkJveE1heFdpZHRoOiBhdmFpbGFibGVXaWR0aCAvIDIgLyB2aXNpYmxlVmVydGljYWxCb3hDb3VudCxcbiAgICAgICAgICAgIGhCb3hNYXhIZWlnaHQ6IGF2YWlsYWJsZUhlaWdodCAvIDJcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG1heFBhZGRpbmcgPSBPYmplY3QuYXNzaWduKHt9LCBwYWRkaW5nKTtcbiAgICAgICAgdXBkYXRlTWF4UGFkZGluZyhtYXhQYWRkaW5nLCB0b1BhZGRpbmcobWluUGFkZGluZykpO1xuICAgICAgICBjb25zdCBjaGFydEFyZWEgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIG1heFBhZGRpbmcsXG4gICAgICAgICAgICB3OiBhdmFpbGFibGVXaWR0aCxcbiAgICAgICAgICAgIGg6IGF2YWlsYWJsZUhlaWdodCxcbiAgICAgICAgICAgIHg6IHBhZGRpbmcubGVmdCxcbiAgICAgICAgICAgIHk6IHBhZGRpbmcudG9wXG4gICAgICAgIH0sIHBhZGRpbmcpO1xuICAgICAgICBjb25zdCBzdGFja3MgPSBzZXRMYXlvdXREaW1zKHZlcnRpY2FsQm94ZXMuY29uY2F0KGhvcml6b250YWxCb3hlcyksIHBhcmFtcyk7XG4gICAgICAgIGZpdEJveGVzKGJveGVzLmZ1bGxTaXplLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICAgICAgZml0Qm94ZXModmVydGljYWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgICAgIGlmIChmaXRCb3hlcyhob3Jpem9udGFsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpKSB7XG4gICAgICAgICAgICBmaXRCb3hlcyh2ZXJ0aWNhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVNYXhQYWRkaW5nKGNoYXJ0QXJlYSk7XG4gICAgICAgIHBsYWNlQm94ZXMoYm94ZXMubGVmdEFuZFRvcCwgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgICAgIGNoYXJ0QXJlYS54ICs9IGNoYXJ0QXJlYS53O1xuICAgICAgICBjaGFydEFyZWEueSArPSBjaGFydEFyZWEuaDtcbiAgICAgICAgcGxhY2VCb3hlcyhib3hlcy5yaWdodEFuZEJvdHRvbSwgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgICAgIGNoYXJ0LmNoYXJ0QXJlYSA9IHtcbiAgICAgICAgICAgIGxlZnQ6IGNoYXJ0QXJlYS5sZWZ0LFxuICAgICAgICAgICAgdG9wOiBjaGFydEFyZWEudG9wLFxuICAgICAgICAgICAgcmlnaHQ6IGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLncsXG4gICAgICAgICAgICBib3R0b206IGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuaCxcbiAgICAgICAgICAgIGhlaWdodDogY2hhcnRBcmVhLmgsXG4gICAgICAgICAgICB3aWR0aDogY2hhcnRBcmVhLndcbiAgICAgICAgfTtcbiAgICAgICAgZWFjaChib3hlcy5jaGFydEFyZWEsIChsYXlvdXQpPT57XG4gICAgICAgICAgICBjb25zdCBib3ggPSBsYXlvdXQuYm94O1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihib3gsIGNoYXJ0LmNoYXJ0QXJlYSk7XG4gICAgICAgICAgICBib3gudXBkYXRlKGNoYXJ0QXJlYS53LCBjaGFydEFyZWEuaCwge1xuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbmNsYXNzIEJhc2VQbGF0Zm9ybSB7XG4gYWNxdWlyZUNvbnRleHQoY2FudmFzLCBhc3BlY3RSYXRpbykge31cbiByZWxlYXNlQ29udGV4dChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gYWRkRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHt9XG4gcmVtb3ZlRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHt9XG4gZ2V0RGV2aWNlUGl4ZWxSYXRpbygpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuIGdldE1heGltdW1TaXplKGVsZW1lbnQsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gICAgICAgIHdpZHRoID0gTWF0aC5tYXgoMCwgd2lkdGggfHwgZWxlbWVudC53aWR0aCk7XG4gICAgICAgIGhlaWdodCA9IGhlaWdodCB8fCBlbGVtZW50LmhlaWdodDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLm1heCgwLCBhc3BlY3RSYXRpbyA/IE1hdGguZmxvb3Iod2lkdGggLyBhc3BlY3RSYXRpbykgOiBoZWlnaHQpXG4gICAgICAgIH07XG4gICAgfVxuIGlzQXR0YWNoZWQoY2FudmFzKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiB1cGRhdGVDb25maWcoY29uZmlnKSB7XG4gICAgfVxufVxuXG5jbGFzcyBCYXNpY1BsYXRmb3JtIGV4dGVuZHMgQmFzZVBsYXRmb3JtIHtcbiAgICBhY3F1aXJlQ29udGV4dChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICYmIGl0ZW0uZ2V0Q29udGV4dCAmJiBpdGVtLmdldENvbnRleHQoJzJkJykgfHwgbnVsbDtcbiAgICB9XG4gICAgdXBkYXRlQ29uZmlnKGNvbmZpZykge1xuICAgICAgICBjb25maWcub3B0aW9ucy5hbmltYXRpb24gPSBmYWxzZTtcbiAgICB9XG59XG5cbmNvbnN0IEVYUEFORE9fS0VZID0gJyRjaGFydGpzJztcbiBjb25zdCBFVkVOVF9UWVBFUyA9IHtcbiAgICB0b3VjaHN0YXJ0OiAnbW91c2Vkb3duJyxcbiAgICB0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuICAgIHRvdWNoZW5kOiAnbW91c2V1cCcsXG4gICAgcG9pbnRlcmVudGVyOiAnbW91c2VlbnRlcicsXG4gICAgcG9pbnRlcmRvd246ICdtb3VzZWRvd24nLFxuICAgIHBvaW50ZXJtb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgICBwb2ludGVydXA6ICdtb3VzZXVwJyxcbiAgICBwb2ludGVybGVhdmU6ICdtb3VzZW91dCcsXG4gICAgcG9pbnRlcm91dDogJ21vdXNlb3V0J1xufTtcbmNvbnN0IGlzTnVsbE9yRW1wdHkgPSAodmFsdWUpPT52YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gJyc7XG4gZnVuY3Rpb24gaW5pdENhbnZhcyhjYW52YXMsIGFzcGVjdFJhdGlvKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBjYW52YXMuc3R5bGU7XG4gICAgY29uc3QgcmVuZGVySGVpZ2h0ID0gY2FudmFzLmdldEF0dHJpYnV0ZSgnaGVpZ2h0Jyk7XG4gICAgY29uc3QgcmVuZGVyV2lkdGggPSBjYW52YXMuZ2V0QXR0cmlidXRlKCd3aWR0aCcpO1xuICAgIGNhbnZhc1tFWFBBTkRPX0tFWV0gPSB7XG4gICAgICAgIGluaXRpYWw6IHtcbiAgICAgICAgICAgIGhlaWdodDogcmVuZGVySGVpZ2h0LFxuICAgICAgICAgICAgd2lkdGg6IHJlbmRlcldpZHRoLFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBzdHlsZS5kaXNwbGF5LFxuICAgICAgICAgICAgICAgIGhlaWdodDogc3R5bGUuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiBzdHlsZS53aWR0aFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzdHlsZS5kaXNwbGF5ID0gc3R5bGUuZGlzcGxheSB8fCAnYmxvY2snO1xuICAgIHN0eWxlLmJveFNpemluZyA9IHN0eWxlLmJveFNpemluZyB8fCAnYm9yZGVyLWJveCc7XG4gICAgaWYgKGlzTnVsbE9yRW1wdHkocmVuZGVyV2lkdGgpKSB7XG4gICAgICAgIGNvbnN0IGRpc3BsYXlXaWR0aCA9IHJlYWRVc2VkU2l6ZShjYW52YXMsICd3aWR0aCcpO1xuICAgICAgICBpZiAoZGlzcGxheVdpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGRpc3BsYXlXaWR0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNOdWxsT3JFbXB0eShyZW5kZXJIZWlnaHQpKSB7XG4gICAgICAgIGlmIChjYW52YXMuc3R5bGUuaGVpZ2h0ID09PSAnJykge1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhcy53aWR0aCAvIChhc3BlY3RSYXRpbyB8fCAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRpc3BsYXlIZWlnaHQgPSByZWFkVXNlZFNpemUoY2FudmFzLCAnaGVpZ2h0Jyk7XG4gICAgICAgICAgICBpZiAoZGlzcGxheUhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGRpc3BsYXlIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNhbnZhcztcbn1cbmNvbnN0IGV2ZW50TGlzdGVuZXJPcHRpb25zID0gc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyA/IHtcbiAgICBwYXNzaXZlOiB0cnVlXG59IDogZmFsc2U7XG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihub2RlLCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgY2hhcnQuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGZyb21OYXRpdmVFdmVudChldmVudCwgY2hhcnQpIHtcbiAgICBjb25zdCB0eXBlID0gRVZFTlRfVFlQRVNbZXZlbnQudHlwZV0gfHwgZXZlbnQudHlwZTtcbiAgICBjb25zdCB7IHggLCB5ICB9ID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihldmVudCwgY2hhcnQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIGNoYXJ0LFxuICAgICAgICBuYXRpdmU6IGV2ZW50LFxuICAgICAgICB4OiB4ICE9PSB1bmRlZmluZWQgPyB4IDogbnVsbCxcbiAgICAgICAgeTogeSAhPT0gdW5kZWZpbmVkID8geSA6IG51bGxcbiAgICB9O1xufVxuZnVuY3Rpb24gbm9kZUxpc3RDb250YWlucyhub2RlTGlzdCwgY2FudmFzKSB7XG4gICAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVMaXN0KXtcbiAgICAgICAgaWYgKG5vZGUgPT09IGNhbnZhcyB8fCBub2RlLmNvbnRhaW5zKGNhbnZhcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlQXR0YWNoT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpPT57XG4gICAgICAgIGxldCB0cmlnZ2VyID0gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcyl7XG4gICAgICAgICAgICB0cmlnZ2VyID0gdHJpZ2dlciB8fCBub2RlTGlzdENvbnRhaW5zKGVudHJ5LmFkZGVkTm9kZXMsIGNhbnZhcyk7XG4gICAgICAgICAgICB0cmlnZ2VyID0gdHJpZ2dlciAmJiAhbm9kZUxpc3RDb250YWlucyhlbnRyeS5yZW1vdmVkTm9kZXMsIGNhbnZhcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCB7XG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYnNlcnZlcjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURldGFjaE9ic2VydmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChlbnRyaWVzKT0+e1xuICAgICAgICBsZXQgdHJpZ2dlciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpe1xuICAgICAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgfHwgbm9kZUxpc3RDb250YWlucyhlbnRyeS5yZW1vdmVkTm9kZXMsIGNhbnZhcyk7XG4gICAgICAgICAgICB0cmlnZ2VyID0gdHJpZ2dlciAmJiAhbm9kZUxpc3RDb250YWlucyhlbnRyeS5hZGRlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge1xuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5jb25zdCBkcnBMaXN0ZW5pbmdDaGFydHMgPSBuZXcgTWFwKCk7XG5sZXQgb2xkRGV2aWNlUGl4ZWxSYXRpbyA9IDA7XG5mdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpIHtcbiAgICBjb25zdCBkcHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICBpZiAoZHByID09PSBvbGREZXZpY2VQaXhlbFJhdGlvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb2xkRGV2aWNlUGl4ZWxSYXRpbyA9IGRwcjtcbiAgICBkcnBMaXN0ZW5pbmdDaGFydHMuZm9yRWFjaCgocmVzaXplLCBjaGFydCk9PntcbiAgICAgICAgaWYgKGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvICE9PSBkcHIpIHtcbiAgICAgICAgICAgIHJlc2l6ZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCwgcmVzaXplKSB7XG4gICAgaWYgKCFkcnBMaXN0ZW5pbmdDaGFydHMuc2l6ZSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUpO1xuICAgIH1cbiAgICBkcnBMaXN0ZW5pbmdDaGFydHMuc2V0KGNoYXJ0LCByZXNpemUpO1xufVxuZnVuY3Rpb24gdW5saXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCkge1xuICAgIGRycExpc3RlbmluZ0NoYXJ0cy5kZWxldGUoY2hhcnQpO1xuICAgIGlmICghZHJwTGlzdGVuaW5nQ2hhcnRzLnNpemUpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVSZXNpemVPYnNlcnZlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gICAgY29uc3QgY29udGFpbmVyID0gY2FudmFzICYmIF9nZXRQYXJlbnROb2RlKGNhbnZhcyk7XG4gICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZXNpemUgPSB0aHJvdHRsZWQoKHdpZHRoLCBoZWlnaHQpPT57XG4gICAgICAgIGNvbnN0IHcgPSBjb250YWluZXIuY2xpZW50V2lkdGg7XG4gICAgICAgIGxpc3RlbmVyKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBpZiAodyA8IGNvbnRhaW5lci5jbGllbnRXaWR0aCkge1xuICAgICAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH0sIHdpbmRvdyk7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMpPT57XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gZW50cmllc1swXTtcbiAgICAgICAgY29uc3Qgd2lkdGggPSBlbnRyeS5jb250ZW50UmVjdC53aWR0aDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gZW50cnkuY29udGVudFJlY3QuaGVpZ2h0O1xuICAgICAgICBpZiAod2lkdGggPT09IDAgJiYgaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoY29udGFpbmVyKTtcbiAgICBsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCwgcmVzaXplKTtcbiAgICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiByZWxlYXNlT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIG9ic2VydmVyKSB7XG4gICAgaWYgKG9ic2VydmVyKSB7XG4gICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdyZXNpemUnKSB7XG4gICAgICAgIHVubGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVByb3h5QW5kTGlzdGVuKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgICBjb25zdCBwcm94eSA9IHRocm90dGxlZCgoZXZlbnQpPT57XG4gICAgICAgIGlmIChjaGFydC5jdHggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKGZyb21OYXRpdmVFdmVudChldmVudCwgY2hhcnQpKTtcbiAgICAgICAgfVxuICAgIH0sIGNoYXJ0KTtcbiAgICBhZGRMaXN0ZW5lcihjYW52YXMsIHR5cGUsIHByb3h5KTtcbiAgICByZXR1cm4gcHJveHk7XG59XG4gY2xhc3MgRG9tUGxhdGZvcm0gZXh0ZW5kcyBCYXNlUGxhdGZvcm0ge1xuIGFjcXVpcmVDb250ZXh0KGNhbnZhcywgYXNwZWN0UmF0aW8pIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNhbnZhcyAmJiBjYW52YXMuZ2V0Q29udGV4dCAmJiBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5jYW52YXMgPT09IGNhbnZhcykge1xuICAgICAgICAgICAgaW5pdENhbnZhcyhjYW52YXMsIGFzcGVjdFJhdGlvKTtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiByZWxlYXNlQ29udGV4dChjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGNvbnRleHQuY2FudmFzO1xuICAgICAgICBpZiAoIWNhbnZhc1tFWFBBTkRPX0tFWV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbml0aWFsID0gY2FudmFzW0VYUEFORE9fS0VZXS5pbml0aWFsO1xuICAgICAgICBbXG4gICAgICAgICAgICAnaGVpZ2h0JyxcbiAgICAgICAgICAgICd3aWR0aCdcbiAgICAgICAgXS5mb3JFYWNoKChwcm9wKT0+e1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBpbml0aWFsW3Byb3BdO1xuICAgICAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY2FudmFzLnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZShwcm9wLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdHlsZSA9IGluaXRpYWwuc3R5bGUgfHwge307XG4gICAgICAgIE9iamVjdC5rZXlzKHN0eWxlKS5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgICAgICBjYW52YXMuc3R5bGVba2V5XSA9IHN0eWxlW2tleV07XG4gICAgICAgIH0pO1xuICAgICAgICBjYW52YXMud2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICAgIGRlbGV0ZSBjYW52YXNbRVhQQU5ET19LRVldO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gYWRkRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlKTtcbiAgICAgICAgY29uc3QgcHJveGllcyA9IGNoYXJ0LiRwcm94aWVzIHx8IChjaGFydC4kcHJveGllcyA9IHt9KTtcbiAgICAgICAgY29uc3QgaGFuZGxlcnMgPSB7XG4gICAgICAgICAgICBhdHRhY2g6IGNyZWF0ZUF0dGFjaE9ic2VydmVyLFxuICAgICAgICAgICAgZGV0YWNoOiBjcmVhdGVEZXRhY2hPYnNlcnZlcixcbiAgICAgICAgICAgIHJlc2l6ZTogY3JlYXRlUmVzaXplT2JzZXJ2ZXJcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW3R5cGVdIHx8IGNyZWF0ZVByb3h5QW5kTGlzdGVuO1xuICAgICAgICBwcm94aWVzW3R5cGVdID0gaGFuZGxlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpO1xuICAgIH1cbiByZW1vdmVFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlKSB7XG4gICAgICAgIGNvbnN0IHByb3hpZXMgPSBjaGFydC4kcHJveGllcyB8fCAoY2hhcnQuJHByb3hpZXMgPSB7fSk7XG4gICAgICAgIGNvbnN0IHByb3h5ID0gcHJveGllc1t0eXBlXTtcbiAgICAgICAgaWYgKCFwcm94eSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICAgICAgICAgYXR0YWNoOiByZWxlYXNlT2JzZXJ2ZXIsXG4gICAgICAgICAgICBkZXRhY2g6IHJlbGVhc2VPYnNlcnZlcixcbiAgICAgICAgICAgIHJlc2l6ZTogcmVsZWFzZU9ic2VydmVyXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1t0eXBlXSB8fCByZW1vdmVMaXN0ZW5lcjtcbiAgICAgICAgaGFuZGxlcihjaGFydCwgdHlwZSwgcHJveHkpO1xuICAgICAgICBwcm94aWVzW3R5cGVdID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBnZXREZXZpY2VQaXhlbFJhdGlvKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgfVxuIGdldE1heGltdW1TaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgICAgICAgcmV0dXJuIGdldE1heGltdW1TaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pO1xuICAgIH1cbiBpc0F0dGFjaGVkKGNhbnZhcykge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICAgICAgICByZXR1cm4gISEoY29udGFpbmVyICYmIGNvbnRhaW5lci5pc0Nvbm5lY3RlZCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfZGV0ZWN0UGxhdGZvcm0oY2FudmFzKSB7XG4gICAgaWYgKCFfaXNEb21TdXBwb3J0ZWQoKSB8fCB0eXBlb2YgT2Zmc2NyZWVuQ2FudmFzICE9PSAndW5kZWZpbmVkJyAmJiBjYW52YXMgaW5zdGFuY2VvZiBPZmZzY3JlZW5DYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIEJhc2ljUGxhdGZvcm07XG4gICAgfVxuICAgIHJldHVybiBEb21QbGF0Zm9ybTtcbn1cblxuY2xhc3MgRWxlbWVudCB7XG4gICAgc3RhdGljIGRlZmF1bHRzID0ge307XG4gICAgc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB1bmRlZmluZWQ7XG4gICAgeDtcbiAgICB5O1xuICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIG9wdGlvbnM7XG4gICAgJGFuaW1hdGlvbnM7XG4gICAgdG9vbHRpcFBvc2l0aW9uKHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAgfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaGFzVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBpc051bWJlcih0aGlzLngpICYmIGlzTnVtYmVyKHRoaXMueSk7XG4gICAgfVxuICAgIGdldFByb3BzKHByb3BzLCBmaW5hbCkge1xuICAgICAgICBjb25zdCBhbmltcyA9IHRoaXMuJGFuaW1hdGlvbnM7XG4gICAgICAgIGlmICghZmluYWwgfHwgIWFuaW1zKSB7XG4gICAgICAgICAgICAvLyBsZXQncyBub3QgY3JlYXRlIGFuIG9iamVjdCwgaWYgbm90IG5lZWRlZFxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmV0ID0ge307XG4gICAgICAgIHByb3BzLmZvckVhY2goKHByb3ApPT57XG4gICAgICAgICAgICByZXRbcHJvcF0gPSBhbmltc1twcm9wXSAmJiBhbmltc1twcm9wXS5hY3RpdmUoKSA/IGFuaW1zW3Byb3BdLl90byA6IHRoaXNbcHJvcF07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYXV0b1NraXAoc2NhbGUsIHRpY2tzKSB7XG4gICAgY29uc3QgdGlja09wdHMgPSBzY2FsZS5vcHRpb25zLnRpY2tzO1xuICAgIGNvbnN0IGRldGVybWluZWRNYXhUaWNrcyA9IGRldGVybWluZU1heFRpY2tzKHNjYWxlKTtcbiAgICBjb25zdCB0aWNrc0xpbWl0ID0gTWF0aC5taW4odGlja09wdHMubWF4VGlja3NMaW1pdCB8fCBkZXRlcm1pbmVkTWF4VGlja3MsIGRldGVybWluZWRNYXhUaWNrcyk7XG4gICAgY29uc3QgbWFqb3JJbmRpY2VzID0gdGlja09wdHMubWFqb3IuZW5hYmxlZCA/IGdldE1ham9ySW5kaWNlcyh0aWNrcykgOiBbXTtcbiAgICBjb25zdCBudW1NYWpvckluZGljZXMgPSBtYWpvckluZGljZXMubGVuZ3RoO1xuICAgIGNvbnN0IGZpcnN0ID0gbWFqb3JJbmRpY2VzWzBdO1xuICAgIGNvbnN0IGxhc3QgPSBtYWpvckluZGljZXNbbnVtTWFqb3JJbmRpY2VzIC0gMV07XG4gICAgY29uc3QgbmV3VGlja3MgPSBbXTtcbiAgICBpZiAobnVtTWFqb3JJbmRpY2VzID4gdGlja3NMaW1pdCkge1xuICAgICAgICBza2lwTWFqb3JzKHRpY2tzLCBuZXdUaWNrcywgbWFqb3JJbmRpY2VzLCBudW1NYWpvckluZGljZXMgLyB0aWNrc0xpbWl0KTtcbiAgICAgICAgcmV0dXJuIG5ld1RpY2tzO1xuICAgIH1cbiAgICBjb25zdCBzcGFjaW5nID0gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCB0aWNrc0xpbWl0KTtcbiAgICBpZiAobnVtTWFqb3JJbmRpY2VzID4gMCkge1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgY29uc3QgYXZnTWFqb3JTcGFjaW5nID0gbnVtTWFqb3JJbmRpY2VzID4gMSA/IE1hdGgucm91bmQoKGxhc3QgLSBmaXJzdCkgLyAobnVtTWFqb3JJbmRpY2VzIC0gMSkpIDogbnVsbDtcbiAgICAgICAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIGlzTnVsbE9yVW5kZWYoYXZnTWFqb3JTcGFjaW5nKSA/IDAgOiBmaXJzdCAtIGF2Z01ham9yU3BhY2luZywgZmlyc3QpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBudW1NYWpvckluZGljZXMgLSAxOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBtYWpvckluZGljZXNbaV0sIG1ham9ySW5kaWNlc1tpICsgMV0pO1xuICAgICAgICB9XG4gICAgICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBsYXN0LCBpc051bGxPclVuZGVmKGF2Z01ham9yU3BhY2luZykgPyB0aWNrcy5sZW5ndGggOiBsYXN0ICsgYXZnTWFqb3JTcGFjaW5nKTtcbiAgICAgICAgcmV0dXJuIG5ld1RpY2tzO1xuICAgIH1cbiAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZyk7XG4gICAgcmV0dXJuIG5ld1RpY2tzO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lTWF4VGlja3Moc2NhbGUpIHtcbiAgICBjb25zdCBvZmZzZXQgPSBzY2FsZS5vcHRpb25zLm9mZnNldDtcbiAgICBjb25zdCB0aWNrTGVuZ3RoID0gc2NhbGUuX3RpY2tTaXplKCk7XG4gICAgY29uc3QgbWF4U2NhbGUgPSBzY2FsZS5fbGVuZ3RoIC8gdGlja0xlbmd0aCArIChvZmZzZXQgPyAwIDogMSk7XG4gICAgY29uc3QgbWF4Q2hhcnQgPSBzY2FsZS5fbWF4TGVuZ3RoIC8gdGlja0xlbmd0aDtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLm1pbihtYXhTY2FsZSwgbWF4Q2hhcnQpKTtcbn1cbiBmdW5jdGlvbiBjYWxjdWxhdGVTcGFjaW5nKG1ham9ySW5kaWNlcywgdGlja3MsIHRpY2tzTGltaXQpIHtcbiAgICBjb25zdCBldmVuTWFqb3JTcGFjaW5nID0gZ2V0RXZlblNwYWNpbmcobWFqb3JJbmRpY2VzKTtcbiAgICBjb25zdCBzcGFjaW5nID0gdGlja3MubGVuZ3RoIC8gdGlja3NMaW1pdDtcbiAgICBpZiAoIWV2ZW5NYWpvclNwYWNpbmcpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHNwYWNpbmcsIDEpO1xuICAgIH1cbiAgICBjb25zdCBmYWN0b3JzID0gX2ZhY3Rvcml6ZShldmVuTWFqb3JTcGFjaW5nKTtcbiAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gZmFjdG9ycy5sZW5ndGggLSAxOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgY29uc3QgZmFjdG9yID0gZmFjdG9yc1tpXTtcbiAgICAgICAgaWYgKGZhY3RvciA+IHNwYWNpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE1hdGgubWF4KHNwYWNpbmcsIDEpO1xufVxuIGZ1bmN0aW9uIGdldE1ham9ySW5kaWNlcyh0aWNrcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgIGlmICh0aWNrc1tpXS5tYWpvcikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiBmdW5jdGlvbiBza2lwTWFqb3JzKHRpY2tzLCBuZXdUaWNrcywgbWFqb3JJbmRpY2VzLCBzcGFjaW5nKSB7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBsZXQgbmV4dCA9IG1ham9ySW5kaWNlc1swXTtcbiAgICBsZXQgaTtcbiAgICBzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcpO1xuICAgIGZvcihpID0gMDsgaSA8IHRpY2tzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYgKGkgPT09IG5leHQpIHtcbiAgICAgICAgICAgIG5ld1RpY2tzLnB1c2godGlja3NbaV0pO1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIG5leHQgPSBtYWpvckluZGljZXNbY291bnQgKiBzcGFjaW5nXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiBmdW5jdGlvbiBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbWFqb3JTdGFydCwgbWFqb3JFbmQpIHtcbiAgICBjb25zdCBzdGFydCA9IHZhbHVlT3JEZWZhdWx0KG1ham9yU3RhcnQsIDApO1xuICAgIGNvbnN0IGVuZCA9IE1hdGgubWluKHZhbHVlT3JEZWZhdWx0KG1ham9yRW5kLCB0aWNrcy5sZW5ndGgpLCB0aWNrcy5sZW5ndGgpO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgbGV0IGxlbmd0aCwgaSwgbmV4dDtcbiAgICBzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcpO1xuICAgIGlmIChtYWpvckVuZCkge1xuICAgICAgICBsZW5ndGggPSBtYWpvckVuZCAtIG1ham9yU3RhcnQ7XG4gICAgICAgIHNwYWNpbmcgPSBsZW5ndGggLyBNYXRoLmZsb29yKGxlbmd0aCAvIHNwYWNpbmcpO1xuICAgIH1cbiAgICBuZXh0ID0gc3RhcnQ7XG4gICAgd2hpbGUobmV4dCA8IDApe1xuICAgICAgICBjb3VudCsrO1xuICAgICAgICBuZXh0ID0gTWF0aC5yb3VuZChzdGFydCArIGNvdW50ICogc3BhY2luZyk7XG4gICAgfVxuICAgIGZvcihpID0gTWF0aC5tYXgoc3RhcnQsIDApOyBpIDwgZW5kOyBpKyspe1xuICAgICAgICBpZiAoaSA9PT0gbmV4dCkge1xuICAgICAgICAgICAgbmV3VGlja3MucHVzaCh0aWNrc1tpXSk7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgbmV4dCA9IE1hdGgucm91bmQoc3RhcnQgKyBjb3VudCAqIHNwYWNpbmcpO1xuICAgICAgICB9XG4gICAgfVxufVxuIGZ1bmN0aW9uIGdldEV2ZW5TcGFjaW5nKGFycikge1xuICAgIGNvbnN0IGxlbiA9IGFyci5sZW5ndGg7XG4gICAgbGV0IGksIGRpZmY7XG4gICAgaWYgKGxlbiA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IoZGlmZiA9IGFyclswXSwgaSA9IDE7IGkgPCBsZW47ICsraSl7XG4gICAgICAgIGlmIChhcnJbaV0gLSBhcnJbaSAtIDFdICE9PSBkaWZmKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRpZmY7XG59XG5cbmNvbnN0IHJldmVyc2VBbGlnbiA9IChhbGlnbik9PmFsaWduID09PSAnbGVmdCcgPyAncmlnaHQnIDogYWxpZ24gPT09ICdyaWdodCcgPyAnbGVmdCcgOiBhbGlnbjtcbmNvbnN0IG9mZnNldEZyb21FZGdlID0gKHNjYWxlLCBlZGdlLCBvZmZzZXQpPT5lZGdlID09PSAndG9wJyB8fCBlZGdlID09PSAnbGVmdCcgPyBzY2FsZVtlZGdlXSArIG9mZnNldCA6IHNjYWxlW2VkZ2VdIC0gb2Zmc2V0O1xuY29uc3QgZ2V0VGlja3NMaW1pdCA9ICh0aWNrc0xlbmd0aCwgbWF4VGlja3NMaW1pdCk9Pk1hdGgubWluKG1heFRpY2tzTGltaXQgfHwgdGlja3NMZW5ndGgsIHRpY2tzTGVuZ3RoKTtcbiBmdW5jdGlvbiBzYW1wbGUoYXJyLCBudW1JdGVtcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IGluY3JlbWVudCA9IGFyci5sZW5ndGggLyBudW1JdGVtcztcbiAgICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IoOyBpIDwgbGVuOyBpICs9IGluY3JlbWVudCl7XG4gICAgICAgIHJlc3VsdC5wdXNoKGFycltNYXRoLmZsb29yKGkpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4gZnVuY3Rpb24gZ2V0UGl4ZWxGb3JHcmlkTGluZShzY2FsZSwgaW5kZXgsIG9mZnNldEdyaWRMaW5lcykge1xuICAgIGNvbnN0IGxlbmd0aCA9IHNjYWxlLnRpY2tzLmxlbmd0aDtcbiAgICBjb25zdCB2YWxpZEluZGV4ID0gTWF0aC5taW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgIGNvbnN0IHN0YXJ0ID0gc2NhbGUuX3N0YXJ0UGl4ZWw7XG4gICAgY29uc3QgZW5kID0gc2NhbGUuX2VuZFBpeGVsO1xuICAgIGNvbnN0IGVwc2lsb24gPSAxZS02O1xuICAgIGxldCBsaW5lVmFsdWUgPSBzY2FsZS5nZXRQaXhlbEZvclRpY2sodmFsaWRJbmRleCk7XG4gICAgbGV0IG9mZnNldDtcbiAgICBpZiAob2Zmc2V0R3JpZExpbmVzKSB7XG4gICAgICAgIGlmIChsZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIG9mZnNldCA9IE1hdGgubWF4KGxpbmVWYWx1ZSAtIHN0YXJ0LCBlbmQgLSBsaW5lVmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAoc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKDEpIC0gbGluZVZhbHVlKSAvIDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAobGluZVZhbHVlIC0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKHZhbGlkSW5kZXggLSAxKSkgLyAyO1xuICAgICAgICB9XG4gICAgICAgIGxpbmVWYWx1ZSArPSB2YWxpZEluZGV4IDwgaW5kZXggPyBvZmZzZXQgOiAtb2Zmc2V0O1xuICAgICAgICBpZiAobGluZVZhbHVlIDwgc3RhcnQgLSBlcHNpbG9uIHx8IGxpbmVWYWx1ZSA+IGVuZCArIGVwc2lsb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGluZVZhbHVlO1xufVxuIGZ1bmN0aW9uIGdhcmJhZ2VDb2xsZWN0KGNhY2hlcywgbGVuZ3RoKSB7XG4gICAgZWFjaChjYWNoZXMsIChjYWNoZSk9PntcbiAgICAgICAgY29uc3QgZ2MgPSBjYWNoZS5nYztcbiAgICAgICAgY29uc3QgZ2NMZW4gPSBnYy5sZW5ndGggLyAyO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgaWYgKGdjTGVuID4gbGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBnY0xlbjsgKytpKXtcbiAgICAgICAgICAgICAgICBkZWxldGUgY2FjaGUuZGF0YVtnY1tpXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnYy5zcGxpY2UoMCwgZ2NMZW4pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4gZnVuY3Rpb24gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zLmRyYXdUaWNrcyA/IG9wdGlvbnMudGlja0xlbmd0aCA6IDA7XG59XG4gZnVuY3Rpb24gZ2V0VGl0bGVIZWlnaHQob3B0aW9ucywgZmFsbGJhY2spIHtcbiAgICBpZiAoIW9wdGlvbnMuZGlzcGxheSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgZm9udCA9IHRvRm9udChvcHRpb25zLmZvbnQsIGZhbGxiYWNrKTtcbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gICAgY29uc3QgbGluZXMgPSBpc0FycmF5KG9wdGlvbnMudGV4dCkgPyBvcHRpb25zLnRleHQubGVuZ3RoIDogMTtcbiAgICByZXR1cm4gbGluZXMgKiBmb250LmxpbmVIZWlnaHQgKyBwYWRkaW5nLmhlaWdodDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNjYWxlQ29udGV4dChwYXJlbnQsIHNjYWxlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgICAgIHNjYWxlLFxuICAgICAgICB0eXBlOiAnc2NhbGUnXG4gICAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVUaWNrQ29udGV4dChwYXJlbnQsIGluZGV4LCB0aWNrKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgICAgIHRpY2ssXG4gICAgICAgIGluZGV4LFxuICAgICAgICB0eXBlOiAndGljaydcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRpdGxlQWxpZ24oYWxpZ24sIHBvc2l0aW9uLCByZXZlcnNlKSB7XG4gICAgIGxldCByZXQgPSBfdG9MZWZ0UmlnaHRDZW50ZXIoYWxpZ24pO1xuICAgIGlmIChyZXZlcnNlICYmIHBvc2l0aW9uICE9PSAncmlnaHQnIHx8ICFyZXZlcnNlICYmIHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIHJldCA9IHJldmVyc2VBbGlnbihyZXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gdGl0bGVBcmdzKHNjYWxlLCBvZmZzZXQsIHBvc2l0aW9uLCBhbGlnbikge1xuICAgIGNvbnN0IHsgdG9wICwgbGVmdCAsIGJvdHRvbSAsIHJpZ2h0ICwgY2hhcnQgIH0gPSBzY2FsZTtcbiAgICBjb25zdCB7IGNoYXJ0QXJlYSAsIHNjYWxlcyAgfSA9IGNoYXJ0O1xuICAgIGxldCByb3RhdGlvbiA9IDA7XG4gICAgbGV0IG1heFdpZHRoLCB0aXRsZVgsIHRpdGxlWTtcbiAgICBjb25zdCBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG4gICAgY29uc3Qgd2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgaWYgKHNjYWxlLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHRpdGxlWCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBsZWZ0LCByaWdodCk7XG4gICAgICAgIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICB0aXRsZVkgPSBzY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpICsgaGVpZ2h0IC0gb2Zmc2V0O1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgdGl0bGVZID0gKGNoYXJ0QXJlYS5ib3R0b20gKyBjaGFydEFyZWEudG9wKSAvIDIgKyBoZWlnaHQgLSBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZVkgPSBvZmZzZXRGcm9tRWRnZShzY2FsZSwgcG9zaXRpb24sIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4V2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgICAgIHRpdGxlWCA9IHNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkgLSB3aWR0aCArIG9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHRpdGxlWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyIC0gd2lkdGggKyBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZVggPSBvZmZzZXRGcm9tRWRnZShzY2FsZSwgcG9zaXRpb24sIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGJvdHRvbSwgdG9wKTtcbiAgICAgICAgcm90YXRpb24gPSBwb3NpdGlvbiA9PT0gJ2xlZnQnID8gLUhBTEZfUEkgOiBIQUxGX1BJO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZVgsXG4gICAgICAgIHRpdGxlWSxcbiAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgIHJvdGF0aW9uXG4gICAgfTtcbn1cbmNsYXNzIFNjYWxlIGV4dGVuZHMgRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgIHRoaXMuaWQgPSBjZmcuaWQ7XG4gICAgICAgICB0aGlzLnR5cGUgPSBjZmcudHlwZTtcbiAgICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuY3R4ID0gY2ZnLmN0eDtcbiAgICAgICAgIHRoaXMuY2hhcnQgPSBjZmcuY2hhcnQ7XG4gICAgICAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5sZWZ0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fbWFyZ2lucyA9IHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogMFxuICAgICAgICB9O1xuICAgICAgICAgdGhpcy5tYXhXaWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMubWF4SGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5wYWRkaW5nVG9wID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5wYWRkaW5nTGVmdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5heGlzID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5sYWJlbFJvdGF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1pbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3JhbmdlID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy50aWNrcyA9IFtdO1xuICAgICAgICAgdGhpcy5fZ3JpZExpbmVJdGVtcyA9IG51bGw7XG4gICAgICAgICB0aGlzLl9sYWJlbEl0ZW1zID0gbnVsbDtcbiAgICAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBudWxsO1xuICAgICAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9tYXhMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9sb25nZXN0VGV4dENhY2hlID0ge307XG4gICAgICAgICB0aGlzLl9zdGFydFBpeGVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fZW5kUGl4ZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdXNlck1heCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdXNlck1pbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGVkTWF4ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zdWdnZXN0ZWRNaW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3RpY2tzTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fYm9yZGVyVmFsdWUgPSAwO1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLl9kYXRhTGltaXRzQ2FjaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgfVxuIGluaXQob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB0aGlzLmF4aXMgPSBvcHRpb25zLmF4aXM7XG4gICAgICAgIHRoaXMuX3VzZXJNaW4gPSB0aGlzLnBhcnNlKG9wdGlvbnMubWluKTtcbiAgICAgICAgdGhpcy5fdXNlck1heCA9IHRoaXMucGFyc2Uob3B0aW9ucy5tYXgpO1xuICAgICAgICB0aGlzLl9zdWdnZXN0ZWRNaW4gPSB0aGlzLnBhcnNlKG9wdGlvbnMuc3VnZ2VzdGVkTWluKTtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGVkTWF4ID0gdGhpcy5wYXJzZShvcHRpb25zLnN1Z2dlc3RlZE1heCk7XG4gICAgfVxuIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHJhdztcbiAgICB9XG4gZ2V0VXNlckJvdW5kcygpIHtcbiAgICAgICAgbGV0IHsgX3VzZXJNaW4gLCBfdXNlck1heCAsIF9zdWdnZXN0ZWRNaW4gLCBfc3VnZ2VzdGVkTWF4ICB9ID0gdGhpcztcbiAgICAgICAgX3VzZXJNaW4gPSBmaW5pdGVPckRlZmF1bHQoX3VzZXJNaW4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgICAgIF91c2VyTWF4ID0gZmluaXRlT3JEZWZhdWx0KF91c2VyTWF4LCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICBfc3VnZ2VzdGVkTWluID0gZmluaXRlT3JEZWZhdWx0KF9zdWdnZXN0ZWRNaW4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgICAgIF9zdWdnZXN0ZWRNYXggPSBmaW5pdGVPckRlZmF1bHQoX3N1Z2dlc3RlZE1heCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogZmluaXRlT3JEZWZhdWx0KF91c2VyTWluLCBfc3VnZ2VzdGVkTWluKSxcbiAgICAgICAgICAgIG1heDogZmluaXRlT3JEZWZhdWx0KF91c2VyTWF4LCBfc3VnZ2VzdGVkTWF4KSxcbiAgICAgICAgICAgIG1pbkRlZmluZWQ6IGlzTnVtYmVyRmluaXRlKF91c2VyTWluKSxcbiAgICAgICAgICAgIG1heERlZmluZWQ6IGlzTnVtYmVyRmluaXRlKF91c2VyTWF4KVxuICAgICAgICB9O1xuICAgIH1cbiBnZXRNaW5NYXgoY2FuU3RhY2spIHtcbiAgICAgICAgbGV0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICAgICAgbGV0IHJhbmdlO1xuICAgICAgICBpZiAobWluRGVmaW5lZCAmJiBtYXhEZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1pbixcbiAgICAgICAgICAgICAgICBtYXhcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YXMgPSB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSBtZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgcmFuZ2UgPSBtZXRhc1tpXS5jb250cm9sbGVyLmdldE1pbk1heCh0aGlzLCBjYW5TdGFjayk7XG4gICAgICAgICAgICBpZiAoIW1pbkRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIHJhbmdlLm1pbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW1heERlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHJhbmdlLm1heCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWluID0gbWF4RGVmaW5lZCAmJiBtaW4gPiBtYXggPyBtYXggOiBtaW47XG4gICAgICAgIG1heCA9IG1pbkRlZmluZWQgJiYgbWluID4gbWF4ID8gbWluIDogbWF4O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluOiBmaW5pdGVPckRlZmF1bHQobWluLCBmaW5pdGVPckRlZmF1bHQobWF4LCBtaW4pKSxcbiAgICAgICAgICAgIG1heDogZmluaXRlT3JEZWZhdWx0KG1heCwgZmluaXRlT3JEZWZhdWx0KG1pbiwgbWF4KSlcbiAgICAgICAgfTtcbiAgICB9XG4gZ2V0UGFkZGluZygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IHRoaXMucGFkZGluZ0xlZnQgfHwgMCxcbiAgICAgICAgICAgIHRvcDogdGhpcy5wYWRkaW5nVG9wIHx8IDAsXG4gICAgICAgICAgICByaWdodDogdGhpcy5wYWRkaW5nUmlnaHQgfHwgMCxcbiAgICAgICAgICAgIGJvdHRvbTogdGhpcy5wYWRkaW5nQm90dG9tIHx8IDBcbiAgICAgICAgfTtcbiAgICB9XG4gZ2V0VGlja3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpY2tzO1xuICAgIH1cbiBnZXRMYWJlbHMoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNoYXJ0LmRhdGE7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubGFiZWxzIHx8ICh0aGlzLmlzSG9yaXpvbnRhbCgpID8gZGF0YS54TGFiZWxzIDogZGF0YS55TGFiZWxzKSB8fCBkYXRhLmxhYmVscyB8fCBbXTtcbiAgICB9XG4gZ2V0TGFiZWxJdGVtcyhjaGFydEFyZWEgPSB0aGlzLmNoYXJ0LmNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuX2xhYmVsSXRlbXMgfHwgKHRoaXMuX2xhYmVsSXRlbXMgPSB0aGlzLl9jb21wdXRlTGFiZWxJdGVtcyhjaGFydEFyZWEpKTtcbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cbiAgICBiZWZvcmVMYXlvdXQoKSB7XG4gICAgICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgICAgIHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgYmVmb3JlVXBkYXRlKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlVXBkYXRlLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuICAgICAgICBjb25zdCB7IGJlZ2luQXRaZXJvICwgZ3JhY2UgLCB0aWNrczogdGlja09wdHMgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNhbXBsZVNpemUgPSB0aWNrT3B0cy5zYW1wbGVTaXplO1xuICAgICAgICB0aGlzLmJlZm9yZVVwZGF0ZSgpO1xuICAgICAgICB0aGlzLm1heFdpZHRoID0gbWF4V2lkdGg7XG4gICAgICAgIHRoaXMubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgICB0aGlzLl9tYXJnaW5zID0gbWFyZ2lucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgIH0sIG1hcmdpbnMpO1xuICAgICAgICB0aGlzLnRpY2tzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGFiZWxTaXplcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2dyaWRMaW5lSXRlbXMgPSBudWxsO1xuICAgICAgICB0aGlzLl9sYWJlbEl0ZW1zID0gbnVsbDtcbiAgICAgICAgdGhpcy5iZWZvcmVTZXREaW1lbnNpb25zKCk7XG4gICAgICAgIHRoaXMuc2V0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLmFmdGVyU2V0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLl9tYXhMZW5ndGggPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCArIG1hcmdpbnMubGVmdCArIG1hcmdpbnMucmlnaHQgOiB0aGlzLmhlaWdodCArIG1hcmdpbnMudG9wICsgbWFyZ2lucy5ib3R0b207XG4gICAgICAgIGlmICghdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCkge1xuICAgICAgICAgICAgdGhpcy5iZWZvcmVEYXRhTGltaXRzKCk7XG4gICAgICAgICAgICB0aGlzLmRldGVybWluZURhdGFMaW1pdHMoKTtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJEYXRhTGltaXRzKCk7XG4gICAgICAgICAgICB0aGlzLl9yYW5nZSA9IF9hZGRHcmFjZSh0aGlzLCBncmFjZSwgYmVnaW5BdFplcm8pO1xuICAgICAgICAgICAgdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iZWZvcmVCdWlsZFRpY2tzKCk7XG4gICAgICAgIHRoaXMudGlja3MgPSB0aGlzLmJ1aWxkVGlja3MoKSB8fCBbXTtcbiAgICAgICAgdGhpcy5hZnRlckJ1aWxkVGlja3MoKTtcbiAgICAgICAgY29uc3Qgc2FtcGxpbmdFbmFibGVkID0gc2FtcGxlU2l6ZSA8IHRoaXMudGlja3MubGVuZ3RoO1xuICAgICAgICB0aGlzLl9jb252ZXJ0VGlja3NUb0xhYmVscyhzYW1wbGluZ0VuYWJsZWQgPyBzYW1wbGUodGhpcy50aWNrcywgc2FtcGxlU2l6ZSkgOiB0aGlzLnRpY2tzKTtcbiAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5iZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCk7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpO1xuICAgICAgICB0aGlzLmFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpO1xuICAgICAgICBpZiAodGlja09wdHMuZGlzcGxheSAmJiAodGlja09wdHMuYXV0b1NraXAgfHwgdGlja09wdHMuc291cmNlID09PSAnYXV0bycpKSB7XG4gICAgICAgICAgICB0aGlzLnRpY2tzID0gYXV0b1NraXAodGhpcywgdGhpcy50aWNrcyk7XG4gICAgICAgICAgICB0aGlzLl9sYWJlbFNpemVzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJBdXRvU2tpcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzYW1wbGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnZlcnRUaWNrc1RvTGFiZWxzKHRoaXMudGlja3MpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmVmb3JlRml0KCk7XG4gICAgICAgIHRoaXMuZml0KCk7XG4gICAgICAgIHRoaXMuYWZ0ZXJGaXQoKTtcbiAgICAgICAgdGhpcy5hZnRlclVwZGF0ZSgpO1xuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGxldCByZXZlcnNlUGl4ZWxzID0gdGhpcy5vcHRpb25zLnJldmVyc2U7XG4gICAgICAgIGxldCBzdGFydFBpeGVsLCBlbmRQaXhlbDtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHN0YXJ0UGl4ZWwgPSB0aGlzLmxlZnQ7XG4gICAgICAgICAgICBlbmRQaXhlbCA9IHRoaXMucmlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGFydFBpeGVsID0gdGhpcy50b3A7XG4gICAgICAgICAgICBlbmRQaXhlbCA9IHRoaXMuYm90dG9tO1xuICAgICAgICAgICAgcmV2ZXJzZVBpeGVscyA9ICFyZXZlcnNlUGl4ZWxzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXJ0UGl4ZWwgPSBzdGFydFBpeGVsO1xuICAgICAgICB0aGlzLl9lbmRQaXhlbCA9IGVuZFBpeGVsO1xuICAgICAgICB0aGlzLl9yZXZlcnNlUGl4ZWxzID0gcmV2ZXJzZVBpeGVscztcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gZW5kUGl4ZWwgLSBzdGFydFBpeGVsO1xuICAgICAgICB0aGlzLl9hbGlnblRvUGl4ZWxzID0gdGhpcy5vcHRpb25zLmFsaWduVG9QaXhlbHM7XG4gICAgfVxuICAgIGFmdGVyVXBkYXRlKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJVcGRhdGUsIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGJlZm9yZVNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVTZXREaW1lbnNpb25zLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBzZXREaW1lbnNpb25zKCkge1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICAgICAgICB0aGlzLmxlZnQgPSAwO1xuICAgICAgICAgICAgdGhpcy5yaWdodCA9IHRoaXMud2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy50b3AgPSAwO1xuICAgICAgICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhZGRpbmdMZWZ0ID0gMDtcbiAgICAgICAgdGhpcy5wYWRkaW5nVG9wID0gMDtcbiAgICAgICAgdGhpcy5wYWRkaW5nUmlnaHQgPSAwO1xuICAgICAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSAwO1xuICAgIH1cbiAgICBhZnRlclNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclNldERpbWVuc2lvbnMsIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9jYWxsSG9va3MobmFtZSkge1xuICAgICAgICB0aGlzLmNoYXJ0Lm5vdGlmeVBsdWdpbnMobmFtZSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnNbbmFtZV0sIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGJlZm9yZURhdGFMaW1pdHMoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxIb29rcygnYmVmb3JlRGF0YUxpbWl0cycpO1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge31cbiAgICBhZnRlckRhdGFMaW1pdHMoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxIb29rcygnYWZ0ZXJEYXRhTGltaXRzJyk7XG4gICAgfVxuICAgIGJlZm9yZUJ1aWxkVGlja3MoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxIb29rcygnYmVmb3JlQnVpbGRUaWNrcycpO1xuICAgIH1cbiBidWlsZFRpY2tzKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGFmdGVyQnVpbGRUaWNrcygpIHtcbiAgICAgICAgdGhpcy5fY2FsbEhvb2tzKCdhZnRlckJ1aWxkVGlja3MnKTtcbiAgICB9XG4gICAgYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICAgICAgY29uc3QgdGlja09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGxldCBpLCBpbGVuLCB0aWNrO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgdGljayA9IHRpY2tzW2ldO1xuICAgICAgICAgICAgdGljay5sYWJlbCA9IGNhbGxiYWNrKHRpY2tPcHRzLmNhbGxiYWNrLCBbXG4gICAgICAgICAgICAgICAgdGljay52YWx1ZSxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIHRpY2tzXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgY2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdGlja09wdHMgPSBvcHRpb25zLnRpY2tzO1xuICAgICAgICBjb25zdCBudW1UaWNrcyA9IGdldFRpY2tzTGltaXQodGhpcy50aWNrcy5sZW5ndGgsIG9wdGlvbnMudGlja3MubWF4VGlja3NMaW1pdCk7XG4gICAgICAgIGNvbnN0IG1pblJvdGF0aW9uID0gdGlja09wdHMubWluUm90YXRpb24gfHwgMDtcbiAgICAgICAgY29uc3QgbWF4Um90YXRpb24gPSB0aWNrT3B0cy5tYXhSb3RhdGlvbjtcbiAgICAgICAgbGV0IGxhYmVsUm90YXRpb24gPSBtaW5Sb3RhdGlvbjtcbiAgICAgICAgbGV0IHRpY2tXaWR0aCwgbWF4SGVpZ2h0LCBtYXhMYWJlbERpYWdvbmFsO1xuICAgICAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8ICF0aWNrT3B0cy5kaXNwbGF5IHx8IG1pblJvdGF0aW9uID49IG1heFJvdGF0aW9uIHx8IG51bVRpY2tzIDw9IDEgfHwgIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IG1pblJvdGF0aW9uO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgICAgIGNvbnN0IG1heExhYmVsV2lkdGggPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcbiAgICAgICAgY29uc3QgbWF4TGFiZWxIZWlnaHQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0O1xuICAgICAgICBjb25zdCBtYXhXaWR0aCA9IF9saW1pdFZhbHVlKHRoaXMuY2hhcnQud2lkdGggLSBtYXhMYWJlbFdpZHRoLCAwLCB0aGlzLm1heFdpZHRoKTtcbiAgICAgICAgdGlja1dpZHRoID0gb3B0aW9ucy5vZmZzZXQgPyB0aGlzLm1heFdpZHRoIC8gbnVtVGlja3MgOiBtYXhXaWR0aCAvIChudW1UaWNrcyAtIDEpO1xuICAgICAgICBpZiAobWF4TGFiZWxXaWR0aCArIDYgPiB0aWNrV2lkdGgpIHtcbiAgICAgICAgICAgIHRpY2tXaWR0aCA9IG1heFdpZHRoIC8gKG51bVRpY2tzIC0gKG9wdGlvbnMub2Zmc2V0ID8gMC41IDogMSkpO1xuICAgICAgICAgICAgbWF4SGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQgLSBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zLmdyaWQpIC0gdGlja09wdHMucGFkZGluZyAtIGdldFRpdGxlSGVpZ2h0KG9wdGlvbnMudGl0bGUsIHRoaXMuY2hhcnQub3B0aW9ucy5mb250KTtcbiAgICAgICAgICAgIG1heExhYmVsRGlhZ29uYWwgPSBNYXRoLnNxcnQobWF4TGFiZWxXaWR0aCAqIG1heExhYmVsV2lkdGggKyBtYXhMYWJlbEhlaWdodCAqIG1heExhYmVsSGVpZ2h0KTtcbiAgICAgICAgICAgIGxhYmVsUm90YXRpb24gPSB0b0RlZ3JlZXMoTWF0aC5taW4oTWF0aC5hc2luKF9saW1pdFZhbHVlKChsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgNikgLyB0aWNrV2lkdGgsIC0xLCAxKSksIE1hdGguYXNpbihfbGltaXRWYWx1ZShtYXhIZWlnaHQgLyBtYXhMYWJlbERpYWdvbmFsLCAtMSwgMSkpIC0gTWF0aC5hc2luKF9saW1pdFZhbHVlKG1heExhYmVsSGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbCwgLTEsIDEpKSkpO1xuICAgICAgICAgICAgbGFiZWxSb3RhdGlvbiA9IE1hdGgubWF4KG1pblJvdGF0aW9uLCBNYXRoLm1pbihtYXhSb3RhdGlvbiwgbGFiZWxSb3RhdGlvbikpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IGxhYmVsUm90YXRpb247XG4gICAgfVxuICAgIGFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgYWZ0ZXJBdXRvU2tpcCgpIHt9XG4gICAgYmVmb3JlRml0KCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlRml0LCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBmaXQoKSB7XG4gICAgICAgIGNvbnN0IG1pblNpemUgPSB7XG4gICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB7IGNoYXJ0ICwgb3B0aW9uczogeyB0aWNrczogdGlja09wdHMgLCB0aXRsZTogdGl0bGVPcHRzICwgZ3JpZDogZ3JpZE9wdHMgIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBkaXNwbGF5ID0gdGhpcy5faXNWaXNpYmxlKCk7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIGlmIChkaXNwbGF5KSB7XG4gICAgICAgICAgICBjb25zdCB0aXRsZUhlaWdodCA9IGdldFRpdGxlSGVpZ2h0KHRpdGxlT3B0cywgY2hhcnQub3B0aW9ucy5mb250KTtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICBtaW5TaXplLndpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgICAgICAgICAgICBtaW5TaXplLmhlaWdodCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWRPcHRzKSArIHRpdGxlSGVpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtaW5TaXplLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICAgICAgICAgIG1pblNpemUud2lkdGggPSBnZXRUaWNrTWFya0xlbmd0aChncmlkT3B0cykgKyB0aXRsZUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmIHRoaXMudGlja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBmaXJzdCAsIGxhc3QgLCB3aWRlc3QgLCBoaWdoZXN0ICB9ID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpY2tQYWRkaW5nID0gdGlja09wdHMucGFkZGluZyAqIDI7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5nbGVSYWRpYW5zID0gdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgY29uc3QgY29zID0gTWF0aC5jb3MoYW5nbGVSYWRpYW5zKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzaW4gPSBNYXRoLnNpbihhbmdsZVJhZGlhbnMpO1xuICAgICAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWxIZWlnaHQgPSB0aWNrT3B0cy5taXJyb3IgPyAwIDogc2luICogd2lkZXN0LndpZHRoICsgY29zICogaGlnaGVzdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIG1pblNpemUuaGVpZ2h0ID0gTWF0aC5taW4odGhpcy5tYXhIZWlnaHQsIG1pblNpemUuaGVpZ2h0ICsgbGFiZWxIZWlnaHQgKyB0aWNrUGFkZGluZyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWxXaWR0aCA9IHRpY2tPcHRzLm1pcnJvciA/IDAgOiBjb3MgKiB3aWRlc3Qud2lkdGggKyBzaW4gKiBoaWdoZXN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgbWluU2l6ZS53aWR0aCA9IE1hdGgubWluKHRoaXMubWF4V2lkdGgsIG1pblNpemUud2lkdGggKyBsYWJlbFdpZHRoICsgdGlja1BhZGRpbmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxjdWxhdGVQYWRkaW5nKGZpcnN0LCBsYXN0LCBzaW4sIGNvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGFuZGxlTWFyZ2lucygpO1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5fbGVuZ3RoID0gY2hhcnQud2lkdGggLSB0aGlzLl9tYXJnaW5zLmxlZnQgLSB0aGlzLl9tYXJnaW5zLnJpZ2h0O1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBtaW5TaXplLmhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBtaW5TaXplLndpZHRoO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLl9sZW5ndGggPSBjaGFydC5oZWlnaHQgLSB0aGlzLl9tYXJnaW5zLnRvcCAtIHRoaXMuX21hcmdpbnMuYm90dG9tO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9jYWxjdWxhdGVQYWRkaW5nKGZpcnN0LCBsYXN0LCBzaW4sIGNvcykge1xuICAgICAgICBjb25zdCB7IHRpY2tzOiB7IGFsaWduICwgcGFkZGluZyAgfSAsIHBvc2l0aW9uICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBpc1JvdGF0ZWQgPSB0aGlzLmxhYmVsUm90YXRpb24gIT09IDA7XG4gICAgICAgIGNvbnN0IGxhYmVsc0JlbG93VGlja3MgPSBwb3NpdGlvbiAhPT0gJ3RvcCcgJiYgdGhpcy5heGlzID09PSAneCc7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXRMZWZ0ID0gdGhpcy5nZXRQaXhlbEZvclRpY2soMCkgLSB0aGlzLmxlZnQ7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXRSaWdodCA9IHRoaXMucmlnaHQgLSB0aGlzLmdldFBpeGVsRm9yVGljayh0aGlzLnRpY2tzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgbGV0IHBhZGRpbmdMZWZ0ID0gMDtcbiAgICAgICAgICAgIGxldCBwYWRkaW5nUmlnaHQgPSAwO1xuICAgICAgICAgICAgaWYgKGlzUm90YXRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbHNCZWxvd1RpY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gY29zICogZmlyc3Qud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodCA9IHNpbiAqIGxhc3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gc2luICogZmlyc3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBjb3MgKiBsYXN0LndpZHRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBsYXN0LndpZHRoO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdCA9IGZpcnN0LndpZHRoO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlnbiAhPT0gJ2lubmVyJykge1xuICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gZmlyc3Qud2lkdGggLyAyO1xuICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodCA9IGxhc3Qud2lkdGggLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wYWRkaW5nTGVmdCA9IE1hdGgubWF4KChwYWRkaW5nTGVmdCAtIG9mZnNldExlZnQgKyBwYWRkaW5nKSAqIHRoaXMud2lkdGggLyAodGhpcy53aWR0aCAtIG9mZnNldExlZnQpLCAwKTtcbiAgICAgICAgICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gTWF0aC5tYXgoKHBhZGRpbmdSaWdodCAtIG9mZnNldFJpZ2h0ICsgcGFkZGluZykgKiB0aGlzLndpZHRoIC8gKHRoaXMud2lkdGggLSBvZmZzZXRSaWdodCksIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHBhZGRpbmdUb3AgPSBsYXN0LmhlaWdodCAvIDI7XG4gICAgICAgICAgICBsZXQgcGFkZGluZ0JvdHRvbSA9IGZpcnN0LmhlaWdodCAvIDI7XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wID0gMDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nQm90dG9tID0gZmlyc3QuaGVpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wID0gbGFzdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBhZGRpbmdUb3AgPSBwYWRkaW5nVG9wICsgcGFkZGluZztcbiAgICAgICAgICAgIHRoaXMucGFkZGluZ0JvdHRvbSA9IHBhZGRpbmdCb3R0b20gKyBwYWRkaW5nO1xuICAgICAgICB9XG4gICAgfVxuIF9oYW5kbGVNYXJnaW5zKCkge1xuICAgICAgICBpZiAodGhpcy5fbWFyZ2lucykge1xuICAgICAgICAgICAgdGhpcy5fbWFyZ2lucy5sZWZ0ID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nTGVmdCwgdGhpcy5fbWFyZ2lucy5sZWZ0KTtcbiAgICAgICAgICAgIHRoaXMuX21hcmdpbnMudG9wID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nVG9wLCB0aGlzLl9tYXJnaW5zLnRvcCk7XG4gICAgICAgICAgICB0aGlzLl9tYXJnaW5zLnJpZ2h0ID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nUmlnaHQsIHRoaXMuX21hcmdpbnMucmlnaHQpO1xuICAgICAgICAgICAgdGhpcy5fbWFyZ2lucy5ib3R0b20gPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdCb3R0b20sIHRoaXMuX21hcmdpbnMuYm90dG9tKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZnRlckZpdCgpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyRml0LCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIGNvbnN0IHsgYXhpcyAsIHBvc2l0aW9uICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICByZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJyB8fCBheGlzID09PSAneCc7XG4gICAgfVxuIGlzRnVsbFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZnVsbFNpemU7XG4gICAgfVxuIF9jb252ZXJ0VGlja3NUb0xhYmVscyh0aWNrcykge1xuICAgICAgICB0aGlzLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuICAgICAgICB0aGlzLmdlbmVyYXRlVGlja0xhYmVscyh0aWNrcyk7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodGlja3NbaV0ubGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgdGlja3Muc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIGlsZW4tLTtcbiAgICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuICAgIH1cbiBfZ2V0TGFiZWxTaXplcygpIHtcbiAgICAgICAgbGV0IGxhYmVsU2l6ZXMgPSB0aGlzLl9sYWJlbFNpemVzO1xuICAgICAgICBpZiAoIWxhYmVsU2l6ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNhbXBsZVNpemUgPSB0aGlzLm9wdGlvbnMudGlja3Muc2FtcGxlU2l6ZTtcbiAgICAgICAgICAgIGxldCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgICAgICBpZiAoc2FtcGxlU2l6ZSA8IHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRpY2tzID0gc2FtcGxlKHRpY2tzLCBzYW1wbGVTaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBsYWJlbFNpemVzID0gdGhpcy5fY29tcHV0ZUxhYmVsU2l6ZXModGlja3MsIHRpY2tzLmxlbmd0aCwgdGhpcy5vcHRpb25zLnRpY2tzLm1heFRpY2tzTGltaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYWJlbFNpemVzO1xuICAgIH1cbiBfY29tcHV0ZUxhYmVsU2l6ZXModGlja3MsIGxlbmd0aCwgbWF4VGlja3NMaW1pdCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIF9sb25nZXN0VGV4dENhY2hlOiBjYWNoZXMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB3aWR0aHMgPSBbXTtcbiAgICAgICAgY29uc3QgaGVpZ2h0cyA9IFtdO1xuICAgICAgICBjb25zdCBpbmNyZW1lbnQgPSBNYXRoLmZsb29yKGxlbmd0aCAvIGdldFRpY2tzTGltaXQobGVuZ3RoLCBtYXhUaWNrc0xpbWl0KSk7XG4gICAgICAgIGxldCB3aWRlc3RMYWJlbFNpemUgPSAwO1xuICAgICAgICBsZXQgaGlnaGVzdExhYmVsU2l6ZSA9IDA7XG4gICAgICAgIGxldCBpLCBqLCBqbGVuLCBsYWJlbCwgdGlja0ZvbnQsIGZvbnRTdHJpbmcsIGNhY2hlLCBsaW5lSGVpZ2h0LCB3aWR0aCwgaGVpZ2h0LCBuZXN0ZWRMYWJlbDtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IGluY3JlbWVudCl7XG4gICAgICAgICAgICBsYWJlbCA9IHRpY2tzW2ldLmxhYmVsO1xuICAgICAgICAgICAgdGlja0ZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKGkpO1xuICAgICAgICAgICAgY3R4LmZvbnQgPSBmb250U3RyaW5nID0gdGlja0ZvbnQuc3RyaW5nO1xuICAgICAgICAgICAgY2FjaGUgPSBjYWNoZXNbZm9udFN0cmluZ10gPSBjYWNoZXNbZm9udFN0cmluZ10gfHwge1xuICAgICAgICAgICAgICAgIGRhdGE6IHt9LFxuICAgICAgICAgICAgICAgIGdjOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxpbmVIZWlnaHQgPSB0aWNrRm9udC5saW5lSGVpZ2h0O1xuICAgICAgICAgICAgd2lkdGggPSBoZWlnaHQgPSAwO1xuICAgICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKGxhYmVsKSAmJiAhaXNBcnJheShsYWJlbCkpIHtcbiAgICAgICAgICAgICAgICB3aWR0aCA9IF9tZWFzdXJlVGV4dChjdHgsIGNhY2hlLmRhdGEsIGNhY2hlLmdjLCB3aWR0aCwgbGFiZWwpO1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkobGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgZm9yKGogPSAwLCBqbGVuID0gbGFiZWwubGVuZ3RoOyBqIDwgamxlbjsgKytqKXtcbiAgICAgICAgICAgICAgICAgICAgbmVzdGVkTGFiZWwgPSAgbGFiZWxbal07XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNOdWxsT3JVbmRlZihuZXN0ZWRMYWJlbCkgJiYgIWlzQXJyYXkobmVzdGVkTGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IF9tZWFzdXJlVGV4dChjdHgsIGNhY2hlLmRhdGEsIGNhY2hlLmdjLCB3aWR0aCwgbmVzdGVkTGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aWR0aHMucHVzaCh3aWR0aCk7XG4gICAgICAgICAgICBoZWlnaHRzLnB1c2goaGVpZ2h0KTtcbiAgICAgICAgICAgIHdpZGVzdExhYmVsU2l6ZSA9IE1hdGgubWF4KHdpZHRoLCB3aWRlc3RMYWJlbFNpemUpO1xuICAgICAgICAgICAgaGlnaGVzdExhYmVsU2l6ZSA9IE1hdGgubWF4KGhlaWdodCwgaGlnaGVzdExhYmVsU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2FyYmFnZUNvbGxlY3QoY2FjaGVzLCBsZW5ndGgpO1xuICAgICAgICBjb25zdCB3aWRlc3QgPSB3aWR0aHMuaW5kZXhPZih3aWRlc3RMYWJlbFNpemUpO1xuICAgICAgICBjb25zdCBoaWdoZXN0ID0gaGVpZ2h0cy5pbmRleE9mKGhpZ2hlc3RMYWJlbFNpemUpO1xuICAgICAgICBjb25zdCB2YWx1ZUF0ID0gKGlkeCk9Pih7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoc1tpZHhdIHx8IDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRzW2lkeF0gfHwgMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaXJzdDogdmFsdWVBdCgwKSxcbiAgICAgICAgICAgIGxhc3Q6IHZhbHVlQXQobGVuZ3RoIC0gMSksXG4gICAgICAgICAgICB3aWRlc3Q6IHZhbHVlQXQod2lkZXN0KSxcbiAgICAgICAgICAgIGhpZ2hlc3Q6IHZhbHVlQXQoaGlnaGVzdCksXG4gICAgICAgICAgICB3aWR0aHMsXG4gICAgICAgICAgICBoZWlnaHRzXG4gICAgICAgIH07XG4gICAgfVxuIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiBnZXRQaXhlbEZvclZhbHVlKHZhbHVlLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7fVxuIGdldFBpeGVsRm9yVGljayhpbmRleCkge1xuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aWNrcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRpY2tzW2luZGV4XS52YWx1ZSk7XG4gICAgfVxuIGdldFBpeGVsRm9yRGVjaW1hbChkZWNpbWFsKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZXZlcnNlUGl4ZWxzKSB7XG4gICAgICAgICAgICBkZWNpbWFsID0gMSAtIGRlY2ltYWw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGl4ZWwgPSB0aGlzLl9zdGFydFBpeGVsICsgZGVjaW1hbCAqIHRoaXMuX2xlbmd0aDtcbiAgICAgICAgcmV0dXJuIF9pbnQxNlJhbmdlKHRoaXMuX2FsaWduVG9QaXhlbHMgPyBfYWxpZ25QaXhlbCh0aGlzLmNoYXJ0LCBwaXhlbCwgMCkgOiBwaXhlbCk7XG4gICAgfVxuIGdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkge1xuICAgICAgICBjb25zdCBkZWNpbWFsID0gKHBpeGVsIC0gdGhpcy5fc3RhcnRQaXhlbCkgLyB0aGlzLl9sZW5ndGg7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXZlcnNlUGl4ZWxzID8gMSAtIGRlY2ltYWwgOiBkZWNpbWFsO1xuICAgIH1cbiBnZXRCYXNlUGl4ZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRCYXNlVmFsdWUoKSk7XG4gICAgfVxuIGdldEJhc2VWYWx1ZSgpIHtcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gbWluIDwgMCAmJiBtYXggPCAwID8gbWF4IDogbWluID4gMCAmJiBtYXggPiAwID8gbWluIDogMDtcbiAgICB9XG4gZ2V0Q29udGV4dChpbmRleCkge1xuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3MgfHwgW107XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGlja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB0aWNrID0gdGlja3NbaW5kZXhdO1xuICAgICAgICAgICAgcmV0dXJuIHRpY2suJGNvbnRleHQgfHwgKHRpY2suJGNvbnRleHQgPSBjcmVhdGVUaWNrQ29udGV4dCh0aGlzLmdldENvbnRleHQoKSwgaW5kZXgsIHRpY2spKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZVNjYWxlQ29udGV4dCh0aGlzLmNoYXJ0LmdldENvbnRleHQoKSwgdGhpcykpO1xuICAgIH1cbiBfdGlja1NpemUoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvblRpY2tzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBjb25zdCByb3QgPSB0b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICAgICAgY29uc3QgY29zID0gTWF0aC5hYnMoTWF0aC5jb3Mocm90KSk7XG4gICAgICAgIGNvbnN0IHNpbiA9IE1hdGguYWJzKE1hdGguc2luKHJvdCkpO1xuICAgICAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gb3B0aW9uVGlja3MuYXV0b1NraXBQYWRkaW5nIHx8IDA7XG4gICAgICAgIGNvbnN0IHcgPSBsYWJlbFNpemVzID8gbGFiZWxTaXplcy53aWRlc3Qud2lkdGggKyBwYWRkaW5nIDogMDtcbiAgICAgICAgY29uc3QgaCA9IGxhYmVsU2l6ZXMgPyBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgcGFkZGluZyA6IDA7XG4gICAgICAgIHJldHVybiB0aGlzLmlzSG9yaXpvbnRhbCgpID8gaCAqIGNvcyA+IHcgKiBzaW4gPyB3IC8gY29zIDogaCAvIHNpbiA6IGggKiBzaW4gPCB3ICogY29zID8gaCAvIGNvcyA6IHcgLyBzaW47XG4gICAgfVxuIF9pc1Zpc2libGUoKSB7XG4gICAgICAgIGNvbnN0IGRpc3BsYXkgPSB0aGlzLm9wdGlvbnMuZGlzcGxheTtcbiAgICAgICAgaWYgKGRpc3BsYXkgIT09ICdhdXRvJykge1xuICAgICAgICAgICAgcmV0dXJuICEhZGlzcGxheTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpLmxlbmd0aCA+IDA7XG4gICAgfVxuIF9jb21wdXRlR3JpZExpbmVJdGVtcyhjaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3QgYXhpcyA9IHRoaXMuYXhpcztcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IGdyaWQgLCBwb3NpdGlvbiAsIGJvcmRlciAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGdyaWQub2Zmc2V0O1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgIGNvbnN0IHRpY2tzTGVuZ3RoID0gdGlja3MubGVuZ3RoICsgKG9mZnNldCA/IDEgOiAwKTtcbiAgICAgICAgY29uc3QgdGwgPSBnZXRUaWNrTWFya0xlbmd0aChncmlkKTtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgY29uc3QgYm9yZGVyT3B0cyA9IGJvcmRlci5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY29uc3QgYXhpc1dpZHRoID0gYm9yZGVyT3B0cy5kaXNwbGF5ID8gYm9yZGVyT3B0cy53aWR0aCA6IDA7XG4gICAgICAgIGNvbnN0IGF4aXNIYWxmV2lkdGggPSBheGlzV2lkdGggLyAyO1xuICAgICAgICBjb25zdCBhbGlnbkJvcmRlclZhbHVlID0gZnVuY3Rpb24ocGl4ZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBfYWxpZ25QaXhlbChjaGFydCwgcGl4ZWwsIGF4aXNXaWR0aCk7XG4gICAgICAgIH07XG4gICAgICAgIGxldCBib3JkZXJWYWx1ZSwgaSwgbGluZVZhbHVlLCBhbGlnbmVkTGluZVZhbHVlO1xuICAgICAgICBsZXQgdHgxLCB0eTEsIHR4MiwgdHkyLCB4MSwgeTEsIHgyLCB5MjtcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMuYm90dG9tKTtcbiAgICAgICAgICAgIHR5MSA9IHRoaXMuYm90dG9tIC0gdGw7XG4gICAgICAgICAgICB0eTIgPSBib3JkZXJWYWx1ZSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB5MSA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLnRvcCkgKyBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgeTIgPSBjaGFydEFyZWEuYm90dG9tO1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMudG9wKTtcbiAgICAgICAgICAgIHkxID0gY2hhcnRBcmVhLnRvcDtcbiAgICAgICAgICAgIHkyID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEuYm90dG9tKSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eTEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eTIgPSB0aGlzLnRvcCArIHRsO1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLnJpZ2h0KTtcbiAgICAgICAgICAgIHR4MSA9IHRoaXMucmlnaHQgLSB0bDtcbiAgICAgICAgICAgIHR4MiA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHgxID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEubGVmdCkgKyBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgeDIgPSBjaGFydEFyZWEucmlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmxlZnQpO1xuICAgICAgICAgICAgeDEgPSBjaGFydEFyZWEubGVmdDtcbiAgICAgICAgICAgIHgyID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEucmlnaHQpIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHR4MSA9IGJvcmRlclZhbHVlICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHR4MiA9IHRoaXMubGVmdCArIHRsO1xuICAgICAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSgoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMiArIDAuNSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeTEgPSBjaGFydEFyZWEudG9wO1xuICAgICAgICAgICAgeTIgPSBjaGFydEFyZWEuYm90dG9tO1xuICAgICAgICAgICAgdHkxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHkyID0gdHkxICsgdGw7XG4gICAgICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0eDEgPSBib3JkZXJWYWx1ZSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eDIgPSB0eDEgLSB0bDtcbiAgICAgICAgICAgIHgxID0gY2hhcnRBcmVhLmxlZnQ7XG4gICAgICAgICAgICB4MiA9IGNoYXJ0QXJlYS5yaWdodDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW1pdCA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMudGlja3MubWF4VGlja3NMaW1pdCwgdGlja3NMZW5ndGgpO1xuICAgICAgICBjb25zdCBzdGVwID0gTWF0aC5tYXgoMSwgTWF0aC5jZWlsKHRpY2tzTGVuZ3RoIC8gbGltaXQpKTtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgdGlja3NMZW5ndGg7IGkgKz0gc3RlcCl7XG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KGkpO1xuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBncmlkLnNldENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICBjb25zdCBvcHRzQXRJbmRleEJvcmRlciA9IGJvcmRlci5zZXRDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICAgICAgY29uc3QgbGluZVdpZHRoID0gb3B0c0F0SW5kZXgubGluZVdpZHRoO1xuICAgICAgICAgICAgY29uc3QgbGluZUNvbG9yID0gb3B0c0F0SW5kZXguY29sb3I7XG4gICAgICAgICAgICBjb25zdCBib3JkZXJEYXNoID0gb3B0c0F0SW5kZXhCb3JkZXIuZGFzaCB8fCBbXTtcbiAgICAgICAgICAgIGNvbnN0IGJvcmRlckRhc2hPZmZzZXQgPSBvcHRzQXRJbmRleEJvcmRlci5kYXNoT2Zmc2V0O1xuICAgICAgICAgICAgY29uc3QgdGlja1dpZHRoID0gb3B0c0F0SW5kZXgudGlja1dpZHRoO1xuICAgICAgICAgICAgY29uc3QgdGlja0NvbG9yID0gb3B0c0F0SW5kZXgudGlja0NvbG9yO1xuICAgICAgICAgICAgY29uc3QgdGlja0JvcmRlckRhc2ggPSBvcHRzQXRJbmRleC50aWNrQm9yZGVyRGFzaCB8fCBbXTtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tCb3JkZXJEYXNoT2Zmc2V0ID0gb3B0c0F0SW5kZXgudGlja0JvcmRlckRhc2hPZmZzZXQ7XG4gICAgICAgICAgICBsaW5lVmFsdWUgPSBnZXRQaXhlbEZvckdyaWRMaW5lKHRoaXMsIGksIG9mZnNldCk7XG4gICAgICAgICAgICBpZiAobGluZVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFsaWduZWRMaW5lVmFsdWUgPSBfYWxpZ25QaXhlbChjaGFydCwgbGluZVZhbHVlLCBsaW5lV2lkdGgpO1xuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIHR4MSA9IHR4MiA9IHgxID0geDIgPSBhbGlnbmVkTGluZVZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0eTEgPSB0eTIgPSB5MSA9IHkyID0gYWxpZ25lZExpbmVWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIHR4MSxcbiAgICAgICAgICAgICAgICB0eTEsXG4gICAgICAgICAgICAgICAgdHgyLFxuICAgICAgICAgICAgICAgIHR5MixcbiAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICB5MSxcbiAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICB5MixcbiAgICAgICAgICAgICAgICB3aWR0aDogbGluZVdpZHRoLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBsaW5lQ29sb3IsXG4gICAgICAgICAgICAgICAgYm9yZGVyRGFzaCxcbiAgICAgICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgICAgICAgIHRpY2tXaWR0aCxcbiAgICAgICAgICAgICAgICB0aWNrQ29sb3IsXG4gICAgICAgICAgICAgICAgdGlja0JvcmRlckRhc2gsXG4gICAgICAgICAgICAgICAgdGlja0JvcmRlckRhc2hPZmZzZXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RpY2tzTGVuZ3RoID0gdGlja3NMZW5ndGg7XG4gICAgICAgIHRoaXMuX2JvcmRlclZhbHVlID0gYm9yZGVyVmFsdWU7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG4gX2NvbXB1dGVMYWJlbEl0ZW1zKGNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCBheGlzID0gdGhpcy5heGlzO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IHBvc2l0aW9uICwgdGlja3M6IG9wdGlvblRpY2tzICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICBjb25zdCB7IGFsaWduICwgY3Jvc3NBbGlnbiAsIHBhZGRpbmcgLCBtaXJyb3IgIH0gPSBvcHRpb25UaWNrcztcbiAgICAgICAgY29uc3QgdGwgPSBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zLmdyaWQpO1xuICAgICAgICBjb25zdCB0aWNrQW5kUGFkZGluZyA9IHRsICsgcGFkZGluZztcbiAgICAgICAgY29uc3QgaFRpY2tBbmRQYWRkaW5nID0gbWlycm9yID8gLXBhZGRpbmcgOiB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgY29uc3Qgcm90YXRpb24gPSAtdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgICAgIGxldCBpLCBpbGVuLCB0aWNrLCBsYWJlbCwgeCwgeSwgdGV4dEFsaWduLCBwaXhlbCwgZm9udCwgbGluZUhlaWdodCwgbGluZUNvdW50LCB0ZXh0T2Zmc2V0O1xuICAgICAgICBsZXQgdGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIHkgPSB0aGlzLmJvdHRvbSAtIGhUaWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIHkgPSB0aGlzLnRvcCArIGhUaWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICBjb25zdCByZXQgPSB0aGlzLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKTtcbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHJldC50ZXh0QWxpZ247XG4gICAgICAgICAgICB4ID0gcmV0Lng7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHJldCA9IHRoaXMuX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpO1xuICAgICAgICAgICAgdGV4dEFsaWduID0gcmV0LnRleHRBbGlnbjtcbiAgICAgICAgICAgIHggPSByZXQueDtcbiAgICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICB5ID0gKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDIgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICAgICAgeSA9IHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSArIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIHggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMiAtIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCkudGV4dEFsaWduO1xuICAgICAgICB9XG4gICAgICAgIGlmIChheGlzID09PSAneScpIHtcbiAgICAgICAgICAgIGlmIChhbGlnbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICAgICAgICAgIHRleHRCYXNlbGluZSA9ICd0b3AnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgICAgICB0ZXh0QmFzZWxpbmUgPSAnYm90dG9tJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdGljayA9IHRpY2tzW2ldO1xuICAgICAgICAgICAgbGFiZWwgPSB0aWNrLmxhYmVsO1xuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBvcHRpb25UaWNrcy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpKSk7XG4gICAgICAgICAgICBwaXhlbCA9IHRoaXMuZ2V0UGl4ZWxGb3JUaWNrKGkpICsgb3B0aW9uVGlja3MubGFiZWxPZmZzZXQ7XG4gICAgICAgICAgICBmb250ID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucyhpKTtcbiAgICAgICAgICAgIGxpbmVIZWlnaHQgPSBmb250LmxpbmVIZWlnaHQ7XG4gICAgICAgICAgICBsaW5lQ291bnQgPSBpc0FycmF5KGxhYmVsKSA/IGxhYmVsLmxlbmd0aCA6IDE7XG4gICAgICAgICAgICBjb25zdCBoYWxmQ291bnQgPSBsaW5lQ291bnQgLyAyO1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSBvcHRzQXRJbmRleC5jb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IHN0cm9rZUNvbG9yID0gb3B0c0F0SW5kZXgudGV4dFN0cm9rZUNvbG9yO1xuICAgICAgICAgICAgY29uc3Qgc3Ryb2tlV2lkdGggPSBvcHRzQXRJbmRleC50ZXh0U3Ryb2tlV2lkdGg7XG4gICAgICAgICAgICBsZXQgdGlja1RleHRBbGlnbiA9IHRleHRBbGlnbjtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICB4ID0gcGl4ZWw7XG4gICAgICAgICAgICAgICAgaWYgKHRleHRBbGlnbiA9PT0gJ2lubmVyJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gaWxlbiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tUZXh0QWxpZ24gPSAhdGhpcy5vcHRpb25zLnJldmVyc2UgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tUZXh0QWxpZ24gPSAhdGhpcy5vcHRpb25zLnJldmVyc2UgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGlja1RleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJyB8fCByb3RhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IC1saW5lQ291bnQgKiBsaW5lSGVpZ2h0ICsgbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSAtbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCAvIDIgLSBoYWxmQ291bnQgKiBsaW5lSGVpZ2h0ICsgbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSAtbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJyB8fCByb3RhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCAvIDIgLSBoYWxmQ291bnQgKiBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLSBsaW5lQ291bnQgKiBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtaXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCAqPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJvdGF0aW9uICE9PSAwICYmICFvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICAgICAgICAgICAgICB4ICs9IGxpbmVIZWlnaHQgLyAyICogTWF0aC5zaW4ocm90YXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeSA9IHBpeGVsO1xuICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSAoMSAtIGxpbmVDb3VudCkgKiBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBiYWNrZHJvcDtcbiAgICAgICAgICAgIGlmIChvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsUGFkZGluZyA9IHRvUGFkZGluZyhvcHRzQXRJbmRleC5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGxhYmVsU2l6ZXMuaGVpZ2h0c1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IGxhYmVsU2l6ZXMud2lkdGhzW2ldO1xuICAgICAgICAgICAgICAgIGxldCB0b3AgPSB0ZXh0T2Zmc2V0IC0gbGFiZWxQYWRkaW5nLnRvcDtcbiAgICAgICAgICAgICAgICBsZXQgbGVmdCA9IDAgLSBsYWJlbFBhZGRpbmcubGVmdDtcbiAgICAgICAgICAgICAgICBzd2l0Y2godGV4dEJhc2VsaW5lKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWlkZGxlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCAtPSBoZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCh0ZXh0QWxpZ24pe1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAtPSB3aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiYWNrZHJvcCA9IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgICAgICAgICAgICAgdG9wLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggKyBsYWJlbFBhZGRpbmcud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgbGFiZWxQYWRkaW5nLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IG9wdHNBdEluZGV4LmJhY2tkcm9wQ29sb3JcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgICAgICAgZm9udCxcbiAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgcm90YXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogdGlja1RleHRBbGlnbixcbiAgICAgICAgICAgICAgICAgICAgdGV4dEJhc2VsaW5lLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHlcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3BcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuICAgIF9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCkge1xuICAgICAgICBjb25zdCB7IHBvc2l0aW9uICwgdGlja3MgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHJvdGF0aW9uID0gLXRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICBpZiAocm90YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICBpZiAodGlja3MuYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgIGFsaWduID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2UgaWYgKHRpY2tzLmFsaWduID09PSAnZW5kJykge1xuICAgICAgICAgICAgYWxpZ24gPSAncmlnaHQnO1xuICAgICAgICB9IGVsc2UgaWYgKHRpY2tzLmFsaWduID09PSAnaW5uZXInKSB7XG4gICAgICAgICAgICBhbGlnbiA9ICdpbm5lcic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFsaWduO1xuICAgIH1cbiAgICBfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCkge1xuICAgICAgICBjb25zdCB7IHBvc2l0aW9uICwgdGlja3M6IHsgY3Jvc3NBbGlnbiAsIG1pcnJvciAsIHBhZGRpbmcgIH0gIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgICAgIGNvbnN0IHRpY2tBbmRQYWRkaW5nID0gdGwgKyBwYWRkaW5nO1xuICAgICAgICBjb25zdCB3aWRlc3QgPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcbiAgICAgICAgbGV0IHRleHRBbGlnbjtcbiAgICAgICAgbGV0IHg7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMucmlnaHQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gd2lkZXN0IC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICB4ICs9IHdpZGVzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLnJpZ2h0IC0gdGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHggLT0gd2lkZXN0IC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgIHggPSB0aGlzLmxlZnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMubGVmdCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHggLT0gd2lkZXN0IC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgIHggLT0gd2lkZXN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMubGVmdCArIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gd2lkZXN0IC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICB4ID0gdGhpcy5yaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0QWxpZ24sXG4gICAgICAgICAgICB4XG4gICAgICAgIH07XG4gICAgfVxuIF9jb21wdXRlTGFiZWxBcmVhKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRpY2tzLm1pcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLmxlZnQsXG4gICAgICAgICAgICAgICAgYm90dG9tOiBjaGFydC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHRoaXMucmlnaHRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9wOiB0aGlzLnRvcCxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogdGhpcy5ib3R0b20sXG4gICAgICAgICAgICAgICAgcmlnaHQ6IGNoYXJ0LndpZHRoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuIGRyYXdCYWNrZ3JvdW5kKCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIG9wdGlvbnM6IHsgYmFja2dyb3VuZENvbG9yICB9ICwgbGVmdCAsIHRvcCAsIHdpZHRoICwgaGVpZ2h0ICB9ID0gdGhpcztcbiAgICAgICAgaWYgKGJhY2tncm91bmRDb2xvcikge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QobGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0TGluZVdpZHRoRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMub3B0aW9ucy5ncmlkO1xuICAgICAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8ICFncmlkLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aWNrcy5maW5kSW5kZXgoKHQpPT50LnZhbHVlID09PSB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRzID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgICAgICAgcmV0dXJuIG9wdHMubGluZVdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiBkcmF3R3JpZChjaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMub3B0aW9ucy5ncmlkO1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLl9ncmlkTGluZUl0ZW1zIHx8ICh0aGlzLl9ncmlkTGluZUl0ZW1zID0gdGhpcy5fY29tcHV0ZUdyaWRMaW5lSXRlbXMoY2hhcnRBcmVhKSk7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBjb25zdCBkcmF3TGluZSA9IChwMSwgcDIsIHN0eWxlKT0+e1xuICAgICAgICAgICAgaWYgKCFzdHlsZS53aWR0aCB8fCAhc3R5bGUuY29sb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IHN0eWxlLndpZHRoO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3R5bGUuY29sb3I7XG4gICAgICAgICAgICBjdHguc2V0TGluZURhc2goc3R5bGUuYm9yZGVyRGFzaCB8fCBbXSk7XG4gICAgICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSBzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhwMS54LCBwMS55KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8ocDIueCwgcDIueSk7XG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoZ3JpZC5kaXNwbGF5KSB7XG4gICAgICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZ3JpZC5kcmF3T25DaGFydEFyZWEpIHtcbiAgICAgICAgICAgICAgICAgICAgZHJhd0xpbmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogaXRlbS54MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGl0ZW0ueTFcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogaXRlbS54MixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGl0ZW0ueTJcbiAgICAgICAgICAgICAgICAgICAgfSwgaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChncmlkLmRyYXdUaWNrcykge1xuICAgICAgICAgICAgICAgICAgICBkcmF3TGluZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBpdGVtLnR4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGl0ZW0udHkxXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGl0ZW0udHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogaXRlbS50eTJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGl0ZW0udGlja0NvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGl0ZW0udGlja1dpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyRGFzaDogaXRlbS50aWNrQm9yZGVyRGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IGl0ZW0udGlja0JvcmRlckRhc2hPZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuIGRyYXdCb3JkZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgY2hhcnQgLCBjdHggLCBvcHRpb25zOiB7IGJvcmRlciAsIGdyaWQgIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBib3JkZXJPcHRzID0gYm9yZGVyLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBjb25zdCBheGlzV2lkdGggPSBib3JkZXIuZGlzcGxheSA/IGJvcmRlck9wdHMud2lkdGggOiAwO1xuICAgICAgICBpZiAoIWF4aXNXaWR0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhc3RMaW5lV2lkdGggPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KDApKS5saW5lV2lkdGg7XG4gICAgICAgIGNvbnN0IGJvcmRlclZhbHVlID0gdGhpcy5fYm9yZGVyVmFsdWU7XG4gICAgICAgIGxldCB4MSwgeDIsIHkxLCB5MjtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHgxID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMubGVmdCwgYXhpc1dpZHRoKSAtIGF4aXNXaWR0aCAvIDI7XG4gICAgICAgICAgICB4MiA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLnJpZ2h0LCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuICAgICAgICAgICAgeTEgPSB5MiA9IGJvcmRlclZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeTEgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy50b3AsIGF4aXNXaWR0aCkgLSBheGlzV2lkdGggLyAyO1xuICAgICAgICAgICAgeTIgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy5ib3R0b20sIGxhc3RMaW5lV2lkdGgpICsgbGFzdExpbmVXaWR0aCAvIDI7XG4gICAgICAgICAgICB4MSA9IHgyID0gYm9yZGVyVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlck9wdHMud2lkdGg7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGJvcmRlck9wdHMuY29sb3I7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyh4MSwgeTEpO1xuICAgICAgICBjdHgubGluZVRvKHgyLCB5Mik7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gZHJhd0xhYmVscyhjaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uVGlja3MgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGlmICghb3B0aW9uVGlja3MuZGlzcGxheSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBhcmVhID0gdGhpcy5fY29tcHV0ZUxhYmVsQXJlYSgpO1xuICAgICAgICBpZiAoYXJlYSkge1xuICAgICAgICAgICAgY2xpcEFyZWEoY3R4LCBhcmVhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuZ2V0TGFiZWxJdGVtcyhjaGFydEFyZWEpO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpe1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyVGV4dE9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCB0aWNrRm9udCA9IGl0ZW0uZm9udDtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gaXRlbS5sYWJlbDtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBpdGVtLnRleHRPZmZzZXQ7XG4gICAgICAgICAgICByZW5kZXJUZXh0KGN0eCwgbGFiZWwsIDAsIHksIHRpY2tGb250LCByZW5kZXJUZXh0T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZWEpIHtcbiAgICAgICAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICAgICAgfVxuICAgIH1cbiBkcmF3VGl0bGUoKSB7XG4gICAgICAgIGNvbnN0IHsgY3R4ICwgb3B0aW9uczogeyBwb3NpdGlvbiAsIHRpdGxlICwgcmV2ZXJzZSAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGlmICghdGl0bGUuZGlzcGxheSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZvbnQgPSB0b0ZvbnQodGl0bGUuZm9udCk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcodGl0bGUucGFkZGluZyk7XG4gICAgICAgIGNvbnN0IGFsaWduID0gdGl0bGUuYWxpZ247XG4gICAgICAgIGxldCBvZmZzZXQgPSBmb250LmxpbmVIZWlnaHQgLyAyO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICdib3R0b20nIHx8IHBvc2l0aW9uID09PSAnY2VudGVyJyB8fCBpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgIG9mZnNldCArPSBwYWRkaW5nLmJvdHRvbTtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KHRpdGxlLnRleHQpKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGZvbnQubGluZUhlaWdodCAqICh0aXRsZS50ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IHBhZGRpbmcudG9wO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdGl0bGVYICwgdGl0bGVZICwgbWF4V2lkdGggLCByb3RhdGlvbiAgfSA9IHRpdGxlQXJncyh0aGlzLCBvZmZzZXQsIHBvc2l0aW9uLCBhbGlnbik7XG4gICAgICAgIHJlbmRlclRleHQoY3R4LCB0aXRsZS50ZXh0LCAwLCAwLCBmb250LCB7XG4gICAgICAgICAgICBjb2xvcjogdGl0bGUuY29sb3IsXG4gICAgICAgICAgICBtYXhXaWR0aCxcbiAgICAgICAgICAgIHJvdGF0aW9uLFxuICAgICAgICAgICAgdGV4dEFsaWduOiB0aXRsZUFsaWduKGFsaWduLCBwb3NpdGlvbiwgcmV2ZXJzZSksXG4gICAgICAgICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnLFxuICAgICAgICAgICAgdHJhbnNsYXRpb246IFtcbiAgICAgICAgICAgICAgICB0aXRsZVgsXG4gICAgICAgICAgICAgICAgdGl0bGVZXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkcmF3KGNoYXJ0QXJlYSkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmF3QmFja2dyb3VuZCgpO1xuICAgICAgICB0aGlzLmRyYXdHcmlkKGNoYXJ0QXJlYSk7XG4gICAgICAgIHRoaXMuZHJhd0JvcmRlcigpO1xuICAgICAgICB0aGlzLmRyYXdUaXRsZSgpO1xuICAgICAgICB0aGlzLmRyYXdMYWJlbHMoY2hhcnRBcmVhKTtcbiAgICB9XG4gX2xheWVycygpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdHogPSBvcHRzLnRpY2tzICYmIG9wdHMudGlja3MueiB8fCAwO1xuICAgICAgICBjb25zdCBneiA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuZ3JpZCAmJiBvcHRzLmdyaWQueiwgLTEpO1xuICAgICAgICBjb25zdCBieiA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuYm9yZGVyICYmIG9wdHMuYm9yZGVyLnosIDApO1xuICAgICAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8IHRoaXMuZHJhdyAhPT0gU2NhbGUucHJvdG90eXBlLmRyYXcpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB6OiB0eixcbiAgICAgICAgICAgICAgICAgICAgZHJhdzogKGNoYXJ0QXJlYSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhdyhjaGFydEFyZWEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHo6IGd6LFxuICAgICAgICAgICAgICAgIGRyYXc6IChjaGFydEFyZWEpPT57XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0JhY2tncm91bmQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3R3JpZChjaGFydEFyZWEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdUaXRsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgejogYnosXG4gICAgICAgICAgICAgICAgZHJhdzogKCk9PntcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3Qm9yZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB6OiB0eixcbiAgICAgICAgICAgICAgICBkcmF3OiAoY2hhcnRBcmVhKT0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdMYWJlbHMoY2hhcnRBcmVhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgfVxuIGdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpIHtcbiAgICAgICAgY29uc3QgbWV0YXMgPSB0aGlzLmNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICAgICAgY29uc3QgYXhpc0lEID0gdGhpcy5heGlzICsgJ0F4aXNJRCc7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBtZXRhc1tpXTtcbiAgICAgICAgICAgIGlmIChtZXRhW2F4aXNJRF0gPT09IHRoaXMuaWQgJiYgKCF0eXBlIHx8IG1ldGEudHlwZSA9PT0gdHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChtZXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiBfcmVzb2x2ZVRpY2tGb250T3B0aW9ucyhpbmRleCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGluZGV4KSk7XG4gICAgICAgIHJldHVybiB0b0ZvbnQob3B0cy5mb250KTtcbiAgICB9XG4gX21heERpZ2l0cygpIHtcbiAgICAgICAgY29uc3QgZm9udFNpemUgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApLmxpbmVIZWlnaHQ7XG4gICAgICAgIHJldHVybiAodGhpcy5pc0hvcml6b250YWwoKSA/IHRoaXMud2lkdGggOiB0aGlzLmhlaWdodCkgLyBmb250U2l6ZTtcbiAgICB9XG59XG5cbmNsYXNzIFR5cGVkUmVnaXN0cnkge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIHNjb3BlLCBvdmVycmlkZSl7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5vdmVycmlkZSA9IG92ZXJyaWRlO1xuICAgICAgICB0aGlzLml0ZW1zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgaXNGb3JUeXBlKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZi5jYWxsKHRoaXMudHlwZS5wcm90b3R5cGUsIHR5cGUucHJvdG90eXBlKTtcbiAgICB9XG4gcmVnaXN0ZXIoaXRlbSkge1xuICAgICAgICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihpdGVtKTtcbiAgICAgICAgbGV0IHBhcmVudFNjb3BlO1xuICAgICAgICBpZiAoaXNJQ2hhcnRDb21wb25lbnQocHJvdG8pKSB7XG4gICAgICAgICAgICBwYXJlbnRTY29wZSA9IHRoaXMucmVnaXN0ZXIocHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAgICAgY29uc3QgaWQgPSBpdGVtLmlkO1xuICAgICAgICBjb25zdCBzY29wZSA9IHRoaXMuc2NvcGUgKyAnLicgKyBpZDtcbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbGFzcyBkb2VzIG5vdCBoYXZlIGlkOiAnICsgaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkIGluIGl0ZW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NvcGU7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbXNbaWRdID0gaXRlbTtcbiAgICAgICAgcmVnaXN0ZXJEZWZhdWx0cyhpdGVtLCBzY29wZSwgcGFyZW50U2NvcGUpO1xuICAgICAgICBpZiAodGhpcy5vdmVycmlkZSkge1xuICAgICAgICAgICAgZGVmYXVsdHMub3ZlcnJpZGUoaXRlbS5pZCwgaXRlbS5vdmVycmlkZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY29wZTtcbiAgICB9XG4gZ2V0KGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zW2lkXTtcbiAgICB9XG4gdW5yZWdpc3RlcihpdGVtKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAgICAgY29uc3QgaWQgPSBpdGVtLmlkO1xuICAgICAgICBjb25zdCBzY29wZSA9IHRoaXMuc2NvcGU7XG4gICAgICAgIGlmIChpZCBpbiBpdGVtcykge1xuICAgICAgICAgICAgZGVsZXRlIGl0ZW1zW2lkXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NvcGUgJiYgaWQgaW4gZGVmYXVsdHNbc2NvcGVdKSB7XG4gICAgICAgICAgICBkZWxldGUgZGVmYXVsdHNbc2NvcGVdW2lkXTtcbiAgICAgICAgICAgIGlmICh0aGlzLm92ZXJyaWRlKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG92ZXJyaWRlc1tpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiByZWdpc3RlckRlZmF1bHRzKGl0ZW0sIHNjb3BlLCBwYXJlbnRTY29wZSkge1xuICAgIGNvbnN0IGl0ZW1EZWZhdWx0cyA9IG1lcmdlKE9iamVjdC5jcmVhdGUobnVsbCksIFtcbiAgICAgICAgcGFyZW50U2NvcGUgPyBkZWZhdWx0cy5nZXQocGFyZW50U2NvcGUpIDoge30sXG4gICAgICAgIGRlZmF1bHRzLmdldChzY29wZSksXG4gICAgICAgIGl0ZW0uZGVmYXVsdHNcbiAgICBdKTtcbiAgICBkZWZhdWx0cy5zZXQoc2NvcGUsIGl0ZW1EZWZhdWx0cyk7XG4gICAgaWYgKGl0ZW0uZGVmYXVsdFJvdXRlcykge1xuICAgICAgICByb3V0ZURlZmF1bHRzKHNjb3BlLCBpdGVtLmRlZmF1bHRSb3V0ZXMpO1xuICAgIH1cbiAgICBpZiAoaXRlbS5kZXNjcmlwdG9ycykge1xuICAgICAgICBkZWZhdWx0cy5kZXNjcmliZShzY29wZSwgaXRlbS5kZXNjcmlwdG9ycyk7XG4gICAgfVxufVxuZnVuY3Rpb24gcm91dGVEZWZhdWx0cyhzY29wZSwgcm91dGVzKSB7XG4gICAgT2JqZWN0LmtleXMocm91dGVzKS5mb3JFYWNoKChwcm9wZXJ0eSk9PntcbiAgICAgICAgY29uc3QgcHJvcGVydHlQYXJ0cyA9IHByb3BlcnR5LnNwbGl0KCcuJyk7XG4gICAgICAgIGNvbnN0IHNvdXJjZU5hbWUgPSBwcm9wZXJ0eVBhcnRzLnBvcCgpO1xuICAgICAgICBjb25zdCBzb3VyY2VTY29wZSA9IFtcbiAgICAgICAgICAgIHNjb3BlXG4gICAgICAgIF0uY29uY2F0KHByb3BlcnR5UGFydHMpLmpvaW4oJy4nKTtcbiAgICAgICAgY29uc3QgcGFydHMgPSByb3V0ZXNbcHJvcGVydHldLnNwbGl0KCcuJyk7XG4gICAgICAgIGNvbnN0IHRhcmdldE5hbWUgPSBwYXJ0cy5wb3AoKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0U2NvcGUgPSBwYXJ0cy5qb2luKCcuJyk7XG4gICAgICAgIGRlZmF1bHRzLnJvdXRlKHNvdXJjZVNjb3BlLCBzb3VyY2VOYW1lLCB0YXJnZXRTY29wZSwgdGFyZ2V0TmFtZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBpc0lDaGFydENvbXBvbmVudChwcm90bykge1xuICAgIHJldHVybiAnaWQnIGluIHByb3RvICYmICdkZWZhdWx0cycgaW4gcHJvdG87XG59XG5cbmNsYXNzIFJlZ2lzdHJ5IHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzID0gbmV3IFR5cGVkUmVnaXN0cnkoRGF0YXNldENvbnRyb2xsZXIsICdkYXRhc2V0cycsIHRydWUpO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0gbmV3IFR5cGVkUmVnaXN0cnkoRWxlbWVudCwgJ2VsZW1lbnRzJyk7XG4gICAgICAgIHRoaXMucGx1Z2lucyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KE9iamVjdCwgJ3BsdWdpbnMnKTtcbiAgICAgICAgdGhpcy5zY2FsZXMgPSBuZXcgVHlwZWRSZWdpc3RyeShTY2FsZSwgJ3NjYWxlcycpO1xuICAgICAgICB0aGlzLl90eXBlZFJlZ2lzdHJpZXMgPSBbXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzLFxuICAgICAgICAgICAgdGhpcy5zY2FsZXMsXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzXG4gICAgICAgIF07XG4gICAgfVxuIGFkZCguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncyk7XG4gICAgfVxuICAgIHJlbW92ZSguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzKTtcbiAgICB9XG4gYWRkQ29udHJvbGxlcnMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuY29udHJvbGxlcnMpO1xuICAgIH1cbiBhZGRFbGVtZW50cyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5lbGVtZW50cyk7XG4gICAgfVxuIGFkZFBsdWdpbnMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMucGx1Z2lucyk7XG4gICAgfVxuIGFkZFNjYWxlcyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5zY2FsZXMpO1xuICAgIH1cbiBnZXRDb250cm9sbGVyKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMuY29udHJvbGxlcnMsICdjb250cm9sbGVyJyk7XG4gICAgfVxuIGdldEVsZW1lbnQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5lbGVtZW50cywgJ2VsZW1lbnQnKTtcbiAgICB9XG4gZ2V0UGx1Z2luKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMucGx1Z2lucywgJ3BsdWdpbicpO1xuICAgIH1cbiBnZXRTY2FsZShpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLnNjYWxlcywgJ3NjYWxlJyk7XG4gICAgfVxuIHJlbW92ZUNvbnRyb2xsZXJzKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMuY29udHJvbGxlcnMpO1xuICAgIH1cbiByZW1vdmVFbGVtZW50cyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLmVsZW1lbnRzKTtcbiAgICB9XG4gcmVtb3ZlUGx1Z2lucyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLnBsdWdpbnMpO1xuICAgIH1cbiByZW1vdmVTY2FsZXMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5zY2FsZXMpO1xuICAgIH1cbiBfZWFjaChtZXRob2QsIGFyZ3MsIHR5cGVkUmVnaXN0cnkpIHtcbiAgICAgICAgW1xuICAgICAgICAgICAgLi4uYXJnc1xuICAgICAgICBdLmZvckVhY2goKGFyZyk9PntcbiAgICAgICAgICAgIGNvbnN0IHJlZyA9IHR5cGVkUmVnaXN0cnkgfHwgdGhpcy5fZ2V0UmVnaXN0cnlGb3JUeXBlKGFyZyk7XG4gICAgICAgICAgICBpZiAodHlwZWRSZWdpc3RyeSB8fCByZWcuaXNGb3JUeXBlKGFyZykgfHwgcmVnID09PSB0aGlzLnBsdWdpbnMgJiYgYXJnLmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhlYyhtZXRob2QsIHJlZywgYXJnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWFjaChhcmcsIChpdGVtKT0+e1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUmVnID0gdHlwZWRSZWdpc3RyeSB8fCB0aGlzLl9nZXRSZWdpc3RyeUZvclR5cGUoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V4ZWMobWV0aG9kLCBpdGVtUmVnLCBpdGVtKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuIF9leGVjKG1ldGhvZCwgcmVnaXN0cnksIGNvbXBvbmVudCkge1xuICAgICAgICBjb25zdCBjYW1lbE1ldGhvZCA9IF9jYXBpdGFsaXplKG1ldGhvZCk7XG4gICAgICAgIGNhbGxiYWNrKGNvbXBvbmVudFsnYmVmb3JlJyArIGNhbWVsTWV0aG9kXSwgW10sIGNvbXBvbmVudCk7XG4gICAgICAgIHJlZ2lzdHJ5W21ldGhvZF0oY29tcG9uZW50KTtcbiAgICAgICAgY2FsbGJhY2soY29tcG9uZW50WydhZnRlcicgKyBjYW1lbE1ldGhvZF0sIFtdLCBjb21wb25lbnQpO1xuICAgIH1cbiBfZ2V0UmVnaXN0cnlGb3JUeXBlKHR5cGUpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuX3R5cGVkUmVnaXN0cmllcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCByZWcgPSB0aGlzLl90eXBlZFJlZ2lzdHJpZXNbaV07XG4gICAgICAgICAgICBpZiAocmVnLmlzRm9yVHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2lucztcbiAgICB9XG4gX2dldChpZCwgdHlwZWRSZWdpc3RyeSwgdHlwZSkge1xuICAgICAgICBjb25zdCBpdGVtID0gdHlwZWRSZWdpc3RyeS5nZXQoaWQpO1xuICAgICAgICBpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGlkICsgJ1wiIGlzIG5vdCBhIHJlZ2lzdGVyZWQgJyArIHR5cGUgKyAnLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbn1cbnZhciByZWdpc3RyeSA9IC8qICNfX1BVUkVfXyAqLyBuZXcgUmVnaXN0cnkoKTtcblxuY2xhc3MgUGx1Z2luU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5faW5pdCA9IFtdO1xuICAgIH1cbiBub3RpZnkoY2hhcnQsIGhvb2ssIGFyZ3MsIGZpbHRlcikge1xuICAgICAgICBpZiAoaG9vayA9PT0gJ2JlZm9yZUluaXQnKSB7XG4gICAgICAgICAgICB0aGlzLl9pbml0ID0gdGhpcy5fY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KHRoaXMuX2luaXQsIGNoYXJ0LCAnaW5zdGFsbCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gZmlsdGVyID8gdGhpcy5fZGVzY3JpcHRvcnMoY2hhcnQpLmZpbHRlcihmaWx0ZXIpIDogdGhpcy5fZGVzY3JpcHRvcnMoY2hhcnQpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCBob29rLCBhcmdzKTtcbiAgICAgICAgaWYgKGhvb2sgPT09ICdhZnRlckRlc3Ryb3knKSB7XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCAnc3RvcCcpO1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KHRoaXMuX2luaXQsIGNoYXJ0LCAndW5pbnN0YWxsJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gX25vdGlmeShkZXNjcmlwdG9ycywgY2hhcnQsIGhvb2ssIGFyZ3MpIHtcbiAgICAgICAgYXJncyA9IGFyZ3MgfHwge307XG4gICAgICAgIGZvciAoY29uc3QgZGVzY3JpcHRvciBvZiBkZXNjcmlwdG9ycyl7XG4gICAgICAgICAgICBjb25zdCBwbHVnaW4gPSBkZXNjcmlwdG9yLnBsdWdpbjtcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IHBsdWdpbltob29rXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IFtcbiAgICAgICAgICAgICAgICBjaGFydCxcbiAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3Iub3B0aW9uc1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayhtZXRob2QsIHBhcmFtcywgcGx1Z2luKSA9PT0gZmFsc2UgJiYgYXJncy5jYW5jZWxhYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpbnZhbGlkYXRlKCkge1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYodGhpcy5fY2FjaGUpKSB7XG4gICAgICAgICAgICB0aGlzLl9vbGRDYWNoZSA9IHRoaXMuX2NhY2hlO1xuICAgICAgICAgICAgdGhpcy5fY2FjaGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gX2Rlc2NyaXB0b3JzKGNoYXJ0KSB7XG4gICAgICAgIGlmICh0aGlzLl9jYWNoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gdGhpcy5fY2FjaGUgPSB0aGlzLl9jcmVhdGVEZXNjcmlwdG9ycyhjaGFydCk7XG4gICAgICAgIHRoaXMuX25vdGlmeVN0YXRlQ2hhbmdlcyhjaGFydCk7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgICB9XG4gICAgX2NyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCBhbGwpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gY2hhcnQgJiYgY2hhcnQuY29uZmlnO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdmFsdWVPckRlZmF1bHQoY29uZmlnLm9wdGlvbnMgJiYgY29uZmlnLm9wdGlvbnMucGx1Z2lucywge30pO1xuICAgICAgICBjb25zdCBwbHVnaW5zID0gYWxsUGx1Z2lucyhjb25maWcpO1xuICAgICAgICByZXR1cm4gb3B0aW9ucyA9PT0gZmFsc2UgJiYgIWFsbCA/IFtdIDogY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHBsdWdpbnMsIG9wdGlvbnMsIGFsbCk7XG4gICAgfVxuIF9ub3RpZnlTdGF0ZUNoYW5nZXMoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNEZXNjcmlwdG9ycyA9IHRoaXMuX29sZENhY2hlIHx8IFtdO1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9ycyA9IHRoaXMuX2NhY2hlO1xuICAgICAgICBjb25zdCBkaWZmID0gKGEsIGIpPT5hLmZpbHRlcigoeCk9PiFiLnNvbWUoKHkpPT54LnBsdWdpbi5pZCA9PT0geS5wbHVnaW4uaWQpKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGRpZmYocHJldmlvdXNEZXNjcmlwdG9ycywgZGVzY3JpcHRvcnMpLCBjaGFydCwgJ3N0b3AnKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGRpZmYoZGVzY3JpcHRvcnMsIHByZXZpb3VzRGVzY3JpcHRvcnMpLCBjaGFydCwgJ3N0YXJ0Jyk7XG4gICAgfVxufVxuIGZ1bmN0aW9uIGFsbFBsdWdpbnMoY29uZmlnKSB7XG4gICAgY29uc3QgbG9jYWxJZHMgPSB7fTtcbiAgICBjb25zdCBwbHVnaW5zID0gW107XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHJlZ2lzdHJ5LnBsdWdpbnMuaXRlbXMpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgcGx1Z2lucy5wdXNoKHJlZ2lzdHJ5LmdldFBsdWdpbihrZXlzW2ldKSk7XG4gICAgfVxuICAgIGNvbnN0IGxvY2FsID0gY29uZmlnLnBsdWdpbnMgfHwgW107XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGxvY2FsLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgcGx1Z2luID0gbG9jYWxbaV07XG4gICAgICAgIGlmIChwbHVnaW5zLmluZGV4T2YocGx1Z2luKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgICAgICAgICAgbG9jYWxJZHNbcGx1Z2luLmlkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGx1Z2lucyxcbiAgICAgICAgbG9jYWxJZHNcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0T3B0cyhvcHRpb25zLCBhbGwpIHtcbiAgICBpZiAoIWFsbCAmJiBvcHRpb25zID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCB7IHBsdWdpbnMgLCBsb2NhbElkcyAgfSwgb3B0aW9ucywgYWxsKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3QgY29udGV4dCA9IGNoYXJ0LmdldENvbnRleHQoKTtcbiAgICBmb3IgKGNvbnN0IHBsdWdpbiBvZiBwbHVnaW5zKXtcbiAgICAgICAgY29uc3QgaWQgPSBwbHVnaW4uaWQ7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBnZXRPcHRzKG9wdGlvbnNbaWRdLCBhbGwpO1xuICAgICAgICBpZiAob3B0cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgcGx1Z2luLFxuICAgICAgICAgICAgb3B0aW9uczogcGx1Z2luT3B0cyhjaGFydC5jb25maWcsIHtcbiAgICAgICAgICAgICAgICBwbHVnaW4sXG4gICAgICAgICAgICAgICAgbG9jYWw6IGxvY2FsSWRzW2lkXVxuICAgICAgICAgICAgfSwgb3B0cywgY29udGV4dClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBwbHVnaW5PcHRzKGNvbmZpZywgeyBwbHVnaW4gLCBsb2NhbCAgfSwgb3B0cywgY29udGV4dCkge1xuICAgIGNvbnN0IGtleXMgPSBjb25maWcucGx1Z2luU2NvcGVLZXlzKHBsdWdpbik7XG4gICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3BlcyhvcHRzLCBrZXlzKTtcbiAgICBpZiAobG9jYWwgJiYgcGx1Z2luLmRlZmF1bHRzKSB7XG4gICAgICAgIHNjb3Blcy5wdXNoKHBsdWdpbi5kZWZhdWx0cyk7XG4gICAgfVxuICAgIHJldHVybiBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBjb250ZXh0LCBbXG4gICAgICAgICcnXG4gICAgXSwge1xuICAgICAgICBzY3JpcHRhYmxlOiBmYWxzZSxcbiAgICAgICAgaW5kZXhhYmxlOiBmYWxzZSxcbiAgICAgICAgYWxsS2V5czogdHJ1ZVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRJbmRleEF4aXModHlwZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGRhdGFzZXREZWZhdWx0cyA9IGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdIHx8IHt9O1xuICAgIGNvbnN0IGRhdGFzZXRPcHRpb25zID0gKG9wdGlvbnMuZGF0YXNldHMgfHwge30pW3R5cGVdIHx8IHt9O1xuICAgIHJldHVybiBkYXRhc2V0T3B0aW9ucy5pbmRleEF4aXMgfHwgb3B0aW9ucy5pbmRleEF4aXMgfHwgZGF0YXNldERlZmF1bHRzLmluZGV4QXhpcyB8fCAneCc7XG59XG5mdW5jdGlvbiBnZXRBeGlzRnJvbURlZmF1bHRTY2FsZUlEKGlkLCBpbmRleEF4aXMpIHtcbiAgICBsZXQgYXhpcyA9IGlkO1xuICAgIGlmIChpZCA9PT0gJ19pbmRleF8nKSB7XG4gICAgICAgIGF4aXMgPSBpbmRleEF4aXM7XG4gICAgfSBlbHNlIGlmIChpZCA9PT0gJ192YWx1ZV8nKSB7XG4gICAgICAgIGF4aXMgPSBpbmRleEF4aXMgPT09ICd4JyA/ICd5JyA6ICd4JztcbiAgICB9XG4gICAgcmV0dXJuIGF4aXM7XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzKGF4aXMsIGluZGV4QXhpcykge1xuICAgIHJldHVybiBheGlzID09PSBpbmRleEF4aXMgPyAnX2luZGV4XycgOiAnX3ZhbHVlXyc7XG59XG5mdW5jdGlvbiBpZE1hdGNoZXNBeGlzKGlkKSB7XG4gICAgaWYgKGlkID09PSAneCcgfHwgaWQgPT09ICd5JyB8fCBpZCA9PT0gJ3InKSB7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG59XG5mdW5jdGlvbiBheGlzRnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgaWYgKHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgcmV0dXJuICd4JztcbiAgICB9XG4gICAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgfHwgcG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgcmV0dXJuICd5JztcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVBeGlzKGlkLCAuLi5zY2FsZU9wdGlvbnMpIHtcbiAgICBpZiAoaWRNYXRjaGVzQXhpcyhpZCkpIHtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG9wdHMgb2Ygc2NhbGVPcHRpb25zKXtcbiAgICAgICAgY29uc3QgYXhpcyA9IG9wdHMuYXhpcyB8fCBheGlzRnJvbVBvc2l0aW9uKG9wdHMucG9zaXRpb24pIHx8IGlkLmxlbmd0aCA+IDEgJiYgaWRNYXRjaGVzQXhpcyhpZFswXS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgaWYgKGF4aXMpIHtcbiAgICAgICAgICAgIHJldHVybiBheGlzO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGRldGVybWluZSB0eXBlIG9mICcke2lkfScgYXhpcy4gUGxlYXNlIHByb3ZpZGUgJ2F4aXMnIG9yICdwb3NpdGlvbicgb3B0aW9uLmApO1xufVxuZnVuY3Rpb24gZ2V0QXhpc0Zyb21EYXRhc2V0KGlkLCBheGlzLCBkYXRhc2V0KSB7XG4gICAgaWYgKGRhdGFzZXRbYXhpcyArICdBeGlzSUQnXSA9PT0gaWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF4aXNcbiAgICAgICAgfTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXRyaWV2ZUF4aXNGcm9tRGF0YXNldHMoaWQsIGNvbmZpZykge1xuICAgIGlmIChjb25maWcuZGF0YSAmJiBjb25maWcuZGF0YS5kYXRhc2V0cykge1xuICAgICAgICBjb25zdCBib3VuZERzID0gY29uZmlnLmRhdGEuZGF0YXNldHMuZmlsdGVyKChkKT0+ZC54QXhpc0lEID09PSBpZCB8fCBkLnlBeGlzSUQgPT09IGlkKTtcbiAgICAgICAgaWYgKGJvdW5kRHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXhpc0Zyb21EYXRhc2V0KGlkLCAneCcsIGJvdW5kRHNbMF0pIHx8IGdldEF4aXNGcm9tRGF0YXNldChpZCwgJ3knLCBib3VuZERzWzBdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge307XG59XG5mdW5jdGlvbiBtZXJnZVNjYWxlQ29uZmlnKGNvbmZpZywgb3B0aW9ucykge1xuICAgIGNvbnN0IGNoYXJ0RGVmYXVsdHMgPSBvdmVycmlkZXNbY29uZmlnLnR5cGVdIHx8IHtcbiAgICAgICAgc2NhbGVzOiB7fVxuICAgIH07XG4gICAgY29uc3QgY29uZmlnU2NhbGVzID0gb3B0aW9ucy5zY2FsZXMgfHwge307XG4gICAgY29uc3QgY2hhcnRJbmRleEF4aXMgPSBnZXRJbmRleEF4aXMoY29uZmlnLnR5cGUsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHNjYWxlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgT2JqZWN0LmtleXMoY29uZmlnU2NhbGVzKS5mb3JFYWNoKChpZCk9PntcbiAgICAgICAgY29uc3Qgc2NhbGVDb25mID0gY29uZmlnU2NhbGVzW2lkXTtcbiAgICAgICAgaWYgKCFpc09iamVjdChzY2FsZUNvbmYpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihgSW52YWxpZCBzY2FsZSBjb25maWd1cmF0aW9uIGZvciBzY2FsZTogJHtpZH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NhbGVDb25mLl9wcm94eSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihgSWdub3JpbmcgcmVzb2x2ZXIgcGFzc2VkIGFzIG9wdGlvbnMgZm9yIHNjYWxlOiAke2lkfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZUNvbmYsIHJldHJpZXZlQXhpc0Zyb21EYXRhc2V0cyhpZCwgY29uZmlnKSwgZGVmYXVsdHMuc2NhbGVzW3NjYWxlQ29uZi50eXBlXSk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRJZCA9IGdldERlZmF1bHRTY2FsZUlERnJvbUF4aXMoYXhpcywgY2hhcnRJbmRleEF4aXMpO1xuICAgICAgICBjb25zdCBkZWZhdWx0U2NhbGVPcHRpb25zID0gY2hhcnREZWZhdWx0cy5zY2FsZXMgfHwge307XG4gICAgICAgIHNjYWxlc1tpZF0gPSBtZXJnZUlmKE9iamVjdC5jcmVhdGUobnVsbCksIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBheGlzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2NhbGVDb25mLFxuICAgICAgICAgICAgZGVmYXVsdFNjYWxlT3B0aW9uc1theGlzXSxcbiAgICAgICAgICAgIGRlZmF1bHRTY2FsZU9wdGlvbnNbZGVmYXVsdElkXVxuICAgICAgICBdKTtcbiAgICB9KTtcbiAgICBjb25maWcuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKChkYXRhc2V0KT0+e1xuICAgICAgICBjb25zdCB0eXBlID0gZGF0YXNldC50eXBlIHx8IGNvbmZpZy50eXBlO1xuICAgICAgICBjb25zdCBpbmRleEF4aXMgPSBkYXRhc2V0LmluZGV4QXhpcyB8fCBnZXRJbmRleEF4aXModHlwZSwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRhdGFzZXREZWZhdWx0cyA9IG92ZXJyaWRlc1t0eXBlXSB8fCB7fTtcbiAgICAgICAgY29uc3QgZGVmYXVsdFNjYWxlT3B0aW9ucyA9IGRhdGFzZXREZWZhdWx0cy5zY2FsZXMgfHwge307XG4gICAgICAgIE9iamVjdC5rZXlzKGRlZmF1bHRTY2FsZU9wdGlvbnMpLmZvckVhY2goKGRlZmF1bHRJRCk9PntcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBnZXRBeGlzRnJvbURlZmF1bHRTY2FsZUlEKGRlZmF1bHRJRCwgaW5kZXhBeGlzKTtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZGF0YXNldFtheGlzICsgJ0F4aXNJRCddIHx8IGF4aXM7XG4gICAgICAgICAgICBzY2FsZXNbaWRdID0gc2NhbGVzW2lkXSB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgbWVyZ2VJZihzY2FsZXNbaWRdLCBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBheGlzXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb25maWdTY2FsZXNbaWRdLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRTY2FsZU9wdGlvbnNbZGVmYXVsdElEXVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKHNjYWxlcykuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICBjb25zdCBzY2FsZSA9IHNjYWxlc1trZXldO1xuICAgICAgICBtZXJnZUlmKHNjYWxlLCBbXG4gICAgICAgICAgICBkZWZhdWx0cy5zY2FsZXNbc2NhbGUudHlwZV0sXG4gICAgICAgICAgICBkZWZhdWx0cy5zY2FsZVxuICAgICAgICBdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2NhbGVzO1xufVxuZnVuY3Rpb24gaW5pdE9wdGlvbnMoY29uZmlnKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zIHx8IChjb25maWcub3B0aW9ucyA9IHt9KTtcbiAgICBvcHRpb25zLnBsdWdpbnMgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnBsdWdpbnMsIHt9KTtcbiAgICBvcHRpb25zLnNjYWxlcyA9IG1lcmdlU2NhbGVDb25maWcoY29uZmlnLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGluaXREYXRhKGRhdGEpIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLmRhdGFzZXRzID0gZGF0YS5kYXRhc2V0cyB8fCBbXTtcbiAgICBkYXRhLmxhYmVscyA9IGRhdGEubGFiZWxzIHx8IFtdO1xuICAgIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gaW5pdENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgY29uZmlnLmRhdGEgPSBpbml0RGF0YShjb25maWcuZGF0YSk7XG4gICAgaW5pdE9wdGlvbnMoY29uZmlnKTtcbiAgICByZXR1cm4gY29uZmlnO1xufVxuY29uc3Qga2V5Q2FjaGUgPSBuZXcgTWFwKCk7XG5jb25zdCBrZXlzQ2FjaGVkID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gY2FjaGVkS2V5cyhjYWNoZUtleSwgZ2VuZXJhdGUpIHtcbiAgICBsZXQga2V5cyA9IGtleUNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgaWYgKCFrZXlzKSB7XG4gICAgICAgIGtleXMgPSBnZW5lcmF0ZSgpO1xuICAgICAgICBrZXlDYWNoZS5zZXQoY2FjaGVLZXksIGtleXMpO1xuICAgICAgICBrZXlzQ2FjaGVkLmFkZChrZXlzKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleXM7XG59XG5jb25zdCBhZGRJZkZvdW5kID0gKHNldCwgb2JqLCBrZXkpPT57XG4gICAgY29uc3Qgb3B0cyA9IHJlc29sdmVPYmplY3RLZXkob2JqLCBrZXkpO1xuICAgIGlmIChvcHRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2V0LmFkZChvcHRzKTtcbiAgICB9XG59O1xuY2xhc3MgQ29uZmlnIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICB0aGlzLl9jb25maWcgPSBpbml0Q29uZmlnKGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX3Njb3BlQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVyQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGdldCBwbGF0Zm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbGF0Zm9ybTtcbiAgICB9XG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcudHlwZTtcbiAgICB9XG4gICAgc2V0IHR5cGUodHlwZSkge1xuICAgICAgICB0aGlzLl9jb25maWcudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmRhdGE7XG4gICAgfVxuICAgIHNldCBkYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fY29uZmlnLmRhdGEgPSBpbml0RGF0YShkYXRhKTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcub3B0aW9ucztcbiAgICB9XG4gICAgc2V0IG9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9jb25maWcub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGdldCBwbHVnaW5zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLnBsdWdpbnM7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5fY29uZmlnO1xuICAgICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgaW5pdE9wdGlvbnMoY29uZmlnKTtcbiAgICB9XG4gICAgY2xlYXJDYWNoZSgpIHtcbiAgICAgICAgdGhpcy5fc2NvcGVDYWNoZS5jbGVhcigpO1xuICAgICAgICB0aGlzLl9yZXNvbHZlckNhY2hlLmNsZWFyKCk7XG4gICAgfVxuIGRhdGFzZXRTY29wZUtleXMoZGF0YXNldFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZEtleXMoZGF0YXNldFR5cGUsICgpPT5bXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xuICAgIH1cbiBkYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzKGRhdGFzZXRUeXBlLCB0cmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWRLZXlzKGAke2RhdGFzZXRUeXBlfS50cmFuc2l0aW9uLiR7dHJhbnNpdGlvbn1gLCAoKT0+W1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9LnRyYW5zaXRpb25zLiR7dHJhbnNpdGlvbn1gLFxuICAgICAgICAgICAgICAgICAgICBgdHJhbnNpdGlvbnMuJHt0cmFuc2l0aW9ufWBcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbiAgICB9XG4gZGF0YXNldEVsZW1lbnRTY29wZUtleXMoZGF0YXNldFR5cGUsIGVsZW1lbnRUeXBlKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWRLZXlzKGAke2RhdGFzZXRUeXBlfS0ke2VsZW1lbnRUeXBlfWAsICgpPT5bXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX0uZWxlbWVudHMuJHtlbGVtZW50VHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICBgZWxlbWVudHMuJHtlbGVtZW50VHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xuICAgIH1cbiBwbHVnaW5TY29wZUtleXMocGx1Z2luKSB7XG4gICAgICAgIGNvbnN0IGlkID0gcGx1Z2luLmlkO1xuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy50eXBlO1xuICAgICAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHt0eXBlfS1wbHVnaW4tJHtpZH1gLCAoKT0+W1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYHBsdWdpbnMuJHtpZH1gLFxuICAgICAgICAgICAgICAgICAgICAuLi5wbHVnaW4uYWRkaXRpb25hbE9wdGlvblNjb3BlcyB8fCBbXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xuICAgIH1cbiBfY2FjaGVkU2NvcGVzKG1haW5TY29wZSwgcmVzZXRDYWNoZSkge1xuICAgICAgICBjb25zdCBfc2NvcGVDYWNoZSA9IHRoaXMuX3Njb3BlQ2FjaGU7XG4gICAgICAgIGxldCBjYWNoZSA9IF9zY29wZUNhY2hlLmdldChtYWluU2NvcGUpO1xuICAgICAgICBpZiAoIWNhY2hlIHx8IHJlc2V0Q2FjaGUpIHtcbiAgICAgICAgICAgIGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgX3Njb3BlQ2FjaGUuc2V0KG1haW5TY29wZSwgY2FjaGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZTtcbiAgICB9XG4gZ2V0T3B0aW9uU2NvcGVzKG1haW5TY29wZSwga2V5TGlzdHMsIHJlc2V0Q2FjaGUpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zICwgdHlwZSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkU2NvcGVzKG1haW5TY29wZSwgcmVzZXRDYWNoZSk7XG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChrZXlMaXN0cyk7XG4gICAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NvcGVzID0gbmV3IFNldCgpO1xuICAgICAgICBrZXlMaXN0cy5mb3JFYWNoKChrZXlzKT0+e1xuICAgICAgICAgICAgaWYgKG1haW5TY29wZSkge1xuICAgICAgICAgICAgICAgIHNjb3Blcy5hZGQobWFpblNjb3BlKTtcbiAgICAgICAgICAgICAgICBrZXlzLmZvckVhY2goKGtleSk9PmFkZElmRm91bmQoc2NvcGVzLCBtYWluU2NvcGUsIGtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3Blcywgb3B0aW9ucywga2V5KSk7XG4gICAgICAgICAgICBrZXlzLmZvckVhY2goKGtleSk9PmFkZElmRm91bmQoc2NvcGVzLCBvdmVycmlkZXNbdHlwZV0gfHwge30sIGtleSkpO1xuICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3BlcywgZGVmYXVsdHMsIGtleSkpO1xuICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3BlcywgZGVzY3JpcHRvcnMsIGtleSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBBcnJheS5mcm9tKHNjb3Blcyk7XG4gICAgICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2goT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleXNDYWNoZWQuaGFzKGtleUxpc3RzKSkge1xuICAgICAgICAgICAgY2FjaGUuc2V0KGtleUxpc3RzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbiBjaGFydE9wdGlvblNjb3BlcygpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zICwgdHlwZSAgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgb3ZlcnJpZGVzW3R5cGVdIHx8IHt9LFxuICAgICAgICAgICAgZGVmYXVsdHMuZGF0YXNldHNbdHlwZV0gfHwge30sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmF1bHRzLFxuICAgICAgICAgICAgZGVzY3JpcHRvcnNcbiAgICAgICAgXTtcbiAgICB9XG4gcmVzb2x2ZU5hbWVkT3B0aW9ucyhzY29wZXMsIG5hbWVzLCBjb250ZXh0LCBwcmVmaXhlcyA9IFtcbiAgICAgICAgJydcbiAgICBdKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgICRzaGFyZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyByZXNvbHZlciAsIHN1YlByZWZpeGVzICB9ID0gZ2V0UmVzb2x2ZXIodGhpcy5fcmVzb2x2ZXJDYWNoZSwgc2NvcGVzLCBwcmVmaXhlcyk7XG4gICAgICAgIGxldCBvcHRpb25zID0gcmVzb2x2ZXI7XG4gICAgICAgIGlmIChuZWVkQ29udGV4dChyZXNvbHZlciwgbmFtZXMpKSB7XG4gICAgICAgICAgICByZXN1bHQuJHNoYXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29udGV4dCA9IGlzRnVuY3Rpb24oY29udGV4dCkgPyBjb250ZXh0KCkgOiBjb250ZXh0O1xuICAgICAgICAgICAgY29uc3Qgc3ViUmVzb2x2ZXIgPSB0aGlzLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgc3ViUHJlZml4ZXMpO1xuICAgICAgICAgICAgb3B0aW9ucyA9IF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBjb250ZXh0LCBzdWJSZXNvbHZlcik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBwcm9wIG9mIG5hbWVzKXtcbiAgICAgICAgICAgIHJlc3VsdFtwcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBjb250ZXh0LCBwcmVmaXhlcyA9IFtcbiAgICAgICAgJydcbiAgICBdLCBkZXNjcmlwdG9yRGVmYXVsdHMpIHtcbiAgICAgICAgY29uc3QgeyByZXNvbHZlciAgfSA9IGdldFJlc29sdmVyKHRoaXMuX3Jlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpO1xuICAgICAgICByZXR1cm4gaXNPYmplY3QoY29udGV4dCkgPyBfYXR0YWNoQ29udGV4dChyZXNvbHZlciwgY29udGV4dCwgdW5kZWZpbmVkLCBkZXNjcmlwdG9yRGVmYXVsdHMpIDogcmVzb2x2ZXI7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0UmVzb2x2ZXIocmVzb2x2ZXJDYWNoZSwgc2NvcGVzLCBwcmVmaXhlcykge1xuICAgIGxldCBjYWNoZSA9IHJlc29sdmVyQ2FjaGUuZ2V0KHNjb3Blcyk7XG4gICAgaWYgKCFjYWNoZSkge1xuICAgICAgICBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgcmVzb2x2ZXJDYWNoZS5zZXQoc2NvcGVzLCBjYWNoZSk7XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlS2V5ID0gcHJlZml4ZXMuam9pbigpO1xuICAgIGxldCBjYWNoZWQgPSBjYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIGlmICghY2FjaGVkKSB7XG4gICAgICAgIGNvbnN0IHJlc29sdmVyID0gX2NyZWF0ZVJlc29sdmVyKHNjb3BlcywgcHJlZml4ZXMpO1xuICAgICAgICBjYWNoZWQgPSB7XG4gICAgICAgICAgICByZXNvbHZlcixcbiAgICAgICAgICAgIHN1YlByZWZpeGVzOiBwcmVmaXhlcy5maWx0ZXIoKHApPT4hcC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdob3ZlcicpKVxuICAgICAgICB9O1xuICAgICAgICBjYWNoZS5zZXQoY2FjaGVLZXksIGNhY2hlZCk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZWQ7XG59XG5jb25zdCBoYXNGdW5jdGlvbiA9ICh2YWx1ZSk9PmlzT2JqZWN0KHZhbHVlKSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSkucmVkdWNlKChhY2MsIGtleSk9PmFjYyB8fCBpc0Z1bmN0aW9uKHZhbHVlW2tleV0pLCBmYWxzZSk7XG5mdW5jdGlvbiBuZWVkQ29udGV4dChwcm94eSwgbmFtZXMpIHtcbiAgICBjb25zdCB7IGlzU2NyaXB0YWJsZSAsIGlzSW5kZXhhYmxlICB9ID0gX2Rlc2NyaXB0b3JzKHByb3h5KTtcbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgbmFtZXMpe1xuICAgICAgICBjb25zdCBzY3JpcHRhYmxlID0gaXNTY3JpcHRhYmxlKHByb3ApO1xuICAgICAgICBjb25zdCBpbmRleGFibGUgPSBpc0luZGV4YWJsZShwcm9wKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAoaW5kZXhhYmxlIHx8IHNjcmlwdGFibGUpICYmIHByb3h5W3Byb3BdO1xuICAgICAgICBpZiAoc2NyaXB0YWJsZSAmJiAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgaGFzRnVuY3Rpb24odmFsdWUpKSB8fCBpbmRleGFibGUgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxudmFyIHZlcnNpb24gPSBcIjQuMy4wXCI7XG5cbmNvbnN0IEtOT1dOX1BPU0lUSU9OUyA9IFtcbiAgICAndG9wJyxcbiAgICAnYm90dG9tJyxcbiAgICAnbGVmdCcsXG4gICAgJ3JpZ2h0JyxcbiAgICAnY2hhcnRBcmVhJ1xuXTtcbmZ1bmN0aW9uIHBvc2l0aW9uSXNIb3Jpem9udGFsKHBvc2l0aW9uLCBheGlzKSB7XG4gICAgcmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgS05PV05fUE9TSVRJT05TLmluZGV4T2YocG9zaXRpb24pID09PSAtMSAmJiBheGlzID09PSAneCc7XG59XG5mdW5jdGlvbiBjb21wYXJlMkxldmVsKGwxLCBsMikge1xuICAgIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBhW2wxXSA9PT0gYltsMV0gPyBhW2wyXSAtIGJbbDJdIDogYVtsMV0gLSBiW2wxXTtcbiAgICB9O1xufVxuZnVuY3Rpb24gb25BbmltYXRpb25zQ29tcGxldGUoY29udGV4dCkge1xuICAgIGNvbnN0IGNoYXJ0ID0gY29udGV4dC5jaGFydDtcbiAgICBjb25zdCBhbmltYXRpb25PcHRpb25zID0gY2hhcnQub3B0aW9ucy5hbmltYXRpb247XG4gICAgY2hhcnQubm90aWZ5UGx1Z2lucygnYWZ0ZXJSZW5kZXInKTtcbiAgICBjYWxsYmFjayhhbmltYXRpb25PcHRpb25zICYmIGFuaW1hdGlvbk9wdGlvbnMub25Db21wbGV0ZSwgW1xuICAgICAgICBjb250ZXh0XG4gICAgXSwgY2hhcnQpO1xufVxuZnVuY3Rpb24gb25BbmltYXRpb25Qcm9ncmVzcyhjb250ZXh0KSB7XG4gICAgY29uc3QgY2hhcnQgPSBjb250ZXh0LmNoYXJ0O1xuICAgIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmFuaW1hdGlvbjtcbiAgICBjYWxsYmFjayhhbmltYXRpb25PcHRpb25zICYmIGFuaW1hdGlvbk9wdGlvbnMub25Qcm9ncmVzcywgW1xuICAgICAgICBjb250ZXh0XG4gICAgXSwgY2hhcnQpO1xufVxuIGZ1bmN0aW9uIGdldENhbnZhcyhpdGVtKSB7XG4gICAgaWYgKF9pc0RvbVN1cHBvcnRlZCgpICYmIHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykge1xuICAgICAgICBpdGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbSk7XG4gICAgfSBlbHNlIGlmIChpdGVtICYmIGl0ZW0ubGVuZ3RoKSB7XG4gICAgICAgIGl0ZW0gPSBpdGVtWzBdO1xuICAgIH1cbiAgICBpZiAoaXRlbSAmJiBpdGVtLmNhbnZhcykge1xuICAgICAgICBpdGVtID0gaXRlbS5jYW52YXM7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufVxuY29uc3QgaW5zdGFuY2VzID0ge307XG5jb25zdCBnZXRDaGFydCA9IChrZXkpPT57XG4gICAgY29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKGtleSk7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoaW5zdGFuY2VzKS5maWx0ZXIoKGMpPT5jLmNhbnZhcyA9PT0gY2FudmFzKS5wb3AoKTtcbn07XG5mdW5jdGlvbiBtb3ZlTnVtZXJpY0tleXMob2JqLCBzdGFydCwgbW92ZSkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpe1xuICAgICAgICBjb25zdCBpbnRLZXkgPSAra2V5O1xuICAgICAgICBpZiAoaW50S2V5ID49IHN0YXJ0KSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICAgICAgZGVsZXRlIG9ialtrZXldO1xuICAgICAgICAgICAgaWYgKG1vdmUgPiAwIHx8IGludEtleSA+IHN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgb2JqW2ludEtleSArIG1vdmVdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gZGV0ZXJtaW5lTGFzdEV2ZW50KGUsIGxhc3RFdmVudCwgaW5DaGFydEFyZWEsIGlzQ2xpY2spIHtcbiAgICBpZiAoIWluQ2hhcnRBcmVhIHx8IGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzQ2xpY2spIHtcbiAgICAgICAgcmV0dXJuIGxhc3RFdmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBnZXREYXRhc2V0QXJlYShtZXRhKSB7XG4gICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgIGlmICh4U2NhbGUgJiYgeVNjYWxlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiB4U2NhbGUubGVmdCxcbiAgICAgICAgICAgIHJpZ2h0OiB4U2NhbGUucmlnaHQsXG4gICAgICAgICAgICB0b3A6IHlTY2FsZS50b3AsXG4gICAgICAgICAgICBib3R0b206IHlTY2FsZS5ib3R0b21cbiAgICAgICAgfTtcbiAgICB9XG59XG5jbGFzcyBDaGFydCB7XG4gICAgc3RhdGljIGRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgc3RhdGljIGluc3RhbmNlcyA9IGluc3RhbmNlcztcbiAgICBzdGF0aWMgb3ZlcnJpZGVzID0gb3ZlcnJpZGVzO1xuICAgIHN0YXRpYyByZWdpc3RyeSA9IHJlZ2lzdHJ5O1xuICAgIHN0YXRpYyB2ZXJzaW9uID0gdmVyc2lvbjtcbiAgICBzdGF0aWMgZ2V0Q2hhcnQgPSBnZXRDaGFydDtcbiAgICBzdGF0aWMgcmVnaXN0ZXIoLi4uaXRlbXMpIHtcbiAgICAgICAgcmVnaXN0cnkuYWRkKC4uLml0ZW1zKTtcbiAgICAgICAgaW52YWxpZGF0ZVBsdWdpbnMoKTtcbiAgICB9XG4gICAgc3RhdGljIHVucmVnaXN0ZXIoLi4uaXRlbXMpIHtcbiAgICAgICAgcmVnaXN0cnkucmVtb3ZlKC4uLml0ZW1zKTtcbiAgICAgICAgaW52YWxpZGF0ZVBsdWdpbnMoKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaXRlbSwgdXNlckNvbmZpZyl7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnID0gbmV3IENvbmZpZyh1c2VyQ29uZmlnKTtcbiAgICAgICAgY29uc3QgaW5pdGlhbENhbnZhcyA9IGdldENhbnZhcyhpdGVtKTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdDaGFydCA9IGdldENoYXJ0KGluaXRpYWxDYW52YXMpO1xuICAgICAgICBpZiAoZXhpc3RpbmdDaGFydCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW52YXMgaXMgYWxyZWFkeSBpbiB1c2UuIENoYXJ0IHdpdGggSUQgXFwnJyArIGV4aXN0aW5nQ2hhcnQuaWQgKyAnXFwnJyArICcgbXVzdCBiZSBkZXN0cm95ZWQgYmVmb3JlIHRoZSBjYW52YXMgd2l0aCBJRCBcXCcnICsgZXhpc3RpbmdDaGFydC5jYW52YXMuaWQgKyAnXFwnIGNhbiBiZSByZXVzZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihjb25maWcuY2hhcnRPcHRpb25TY29wZXMoKSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB0aGlzLnBsYXRmb3JtID0gbmV3IChjb25maWcucGxhdGZvcm0gfHwgX2RldGVjdFBsYXRmb3JtKGluaXRpYWxDYW52YXMpKSgpO1xuICAgICAgICB0aGlzLnBsYXRmb3JtLnVwZGF0ZUNvbmZpZyhjb25maWcpO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5wbGF0Zm9ybS5hY3F1aXJlQ29udGV4dChpbml0aWFsQ2FudmFzLCBvcHRpb25zLmFzcGVjdFJhdGlvKTtcbiAgICAgICAgY29uc3QgY2FudmFzID0gY29udGV4dCAmJiBjb250ZXh0LmNhbnZhcztcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzICYmIGNhbnZhcy5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gY2FudmFzICYmIGNhbnZhcy53aWR0aDtcbiAgICAgICAgdGhpcy5pZCA9IHVpZCgpO1xuICAgICAgICB0aGlzLmN0eCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fYXNwZWN0UmF0aW8gPSB0aGlzLmFzcGVjdFJhdGlvO1xuICAgICAgICB0aGlzLl9sYXllcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fbWV0YXNldHMgPSBbXTtcbiAgICAgICAgdGhpcy5fc3RhY2tzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJveGVzID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudERldmljZVBpeGVsUmF0aW8gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2hhcnRBcmVhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgIHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NvcnRlZE1ldGFzZXRzID0gW107XG4gICAgICAgIHRoaXMuc2NhbGVzID0ge307XG4gICAgICAgIHRoaXMuX3BsdWdpbnMgPSBuZXcgUGx1Z2luU2VydmljZSgpO1xuICAgICAgICB0aGlzLiRwcm94aWVzID0ge307XG4gICAgICAgIHRoaXMuX2hpZGRlbkluZGljZXMgPSB7fTtcbiAgICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9hbmltYXRpb25zRGlzYWJsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RvUmVzaXplID0gZGVib3VuY2UoKG1vZGUpPT50aGlzLnVwZGF0ZShtb2RlKSwgb3B0aW9ucy5yZXNpemVEZWxheSB8fCAwKTtcbiAgICAgICAgdGhpcy5fZGF0YUNoYW5nZXMgPSBbXTtcbiAgICAgICAgaW5zdGFuY2VzW3RoaXMuaWRdID0gdGhpcztcbiAgICAgICAgaWYgKCFjb250ZXh0IHx8ICFjYW52YXMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGNoYXJ0OiBjYW4ndCBhY3F1aXJlIGNvbnRleHQgZnJvbSB0aGUgZ2l2ZW4gaXRlbVwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhbmltYXRvci5saXN0ZW4odGhpcywgJ2NvbXBsZXRlJywgb25BbmltYXRpb25zQ29tcGxldGUpO1xuICAgICAgICBhbmltYXRvci5saXN0ZW4odGhpcywgJ3Byb2dyZXNzJywgb25BbmltYXRpb25Qcm9ncmVzcyk7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemUoKTtcbiAgICAgICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGFzcGVjdFJhdGlvKCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnM6IHsgYXNwZWN0UmF0aW8gLCBtYWludGFpbkFzcGVjdFJhdGlvICB9ICwgd2lkdGggLCBoZWlnaHQgLCBfYXNwZWN0UmF0aW8gIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYoYXNwZWN0UmF0aW8pKSB7XG4gICAgICAgICAgICByZXR1cm4gYXNwZWN0UmF0aW87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1haW50YWluQXNwZWN0UmF0aW8gJiYgX2FzcGVjdFJhdGlvKSB7XG4gICAgICAgICAgICByZXR1cm4gX2FzcGVjdFJhdGlvO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZWlnaHQgPyB3aWR0aCAvIGhlaWdodCA6IG51bGw7XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuZGF0YTtcbiAgICB9XG4gICAgc2V0IGRhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cbiAgICBzZXQgb3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXQgcmVnaXN0cnkoKSB7XG4gICAgICAgIHJldHVybiByZWdpc3RyeTtcbiAgICB9XG4gX2luaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlSW5pdCcpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXRpbmFTY2FsZSh0aGlzLCB0aGlzLm9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJJbml0Jyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgY2xlYXJDYW52YXModGhpcy5jYW52YXMsIHRoaXMuY3R4KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGFuaW1hdG9yLnN0b3AodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiByZXNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBpZiAoIWFuaW1hdG9yLnJ1bm5pbmcodGhpcykpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXcgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIF9yZXNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICAgICAgY29uc3QgYXNwZWN0UmF0aW8gPSBvcHRpb25zLm1haW50YWluQXNwZWN0UmF0aW8gJiYgdGhpcy5hc3BlY3RSYXRpbztcbiAgICAgICAgY29uc3QgbmV3U2l6ZSA9IHRoaXMucGxhdGZvcm0uZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbyk7XG4gICAgICAgIGNvbnN0IG5ld1JhdGlvID0gb3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvIHx8IHRoaXMucGxhdGZvcm0uZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAgICAgICBjb25zdCBtb2RlID0gdGhpcy53aWR0aCA/ICdyZXNpemUnIDogJ2F0dGFjaCc7XG4gICAgICAgIHRoaXMud2lkdGggPSBuZXdTaXplLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IG5ld1NpemUuaGVpZ2h0O1xuICAgICAgICB0aGlzLl9hc3BlY3RSYXRpbyA9IHRoaXMuYXNwZWN0UmF0aW87XG4gICAgICAgIGlmICghcmV0aW5hU2NhbGUodGhpcywgbmV3UmF0aW8sIHRydWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdyZXNpemUnLCB7XG4gICAgICAgICAgICBzaXplOiBuZXdTaXplXG4gICAgICAgIH0pO1xuICAgICAgICBjYWxsYmFjayhvcHRpb25zLm9uUmVzaXplLCBbXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgbmV3U2l6ZVxuICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kb1Jlc2l6ZShtb2RlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW5zdXJlU2NhbGVzSGF2ZUlEcygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2NhbGVzT3B0aW9ucyA9IG9wdGlvbnMuc2NhbGVzIHx8IHt9O1xuICAgICAgICBlYWNoKHNjYWxlc09wdGlvbnMsIChheGlzT3B0aW9ucywgYXhpc0lEKT0+e1xuICAgICAgICAgICAgYXhpc09wdGlvbnMuaWQgPSBheGlzSUQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiBidWlsZE9yVXBkYXRlU2NhbGVzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzY2FsZU9wdHMgPSBvcHRpb25zLnNjYWxlcztcbiAgICAgICAgY29uc3Qgc2NhbGVzID0gdGhpcy5zY2FsZXM7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWQgPSBPYmplY3Qua2V5cyhzY2FsZXMpLnJlZHVjZSgob2JqLCBpZCk9PntcbiAgICAgICAgICAgIG9ialtpZF0gPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgbGV0IGl0ZW1zID0gW107XG4gICAgICAgIGlmIChzY2FsZU9wdHMpIHtcbiAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMuY29uY2F0KE9iamVjdC5rZXlzKHNjYWxlT3B0cykubWFwKChpZCk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBzY2FsZU9wdGlvbnMgPSBzY2FsZU9wdHNbaWRdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzUmFkaWFsID0gYXhpcyA9PT0gJ3InO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IGF4aXMgPT09ICd4JztcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBzY2FsZU9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGRwb3NpdGlvbjogaXNSYWRpYWwgPyAnY2hhcnRBcmVhJyA6IGlzSG9yaXpvbnRhbCA/ICdib3R0b20nIDogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICBkdHlwZTogaXNSYWRpYWwgPyAncmFkaWFsTGluZWFyJyA6IGlzSG9yaXpvbnRhbCA/ICdjYXRlZ29yeScgOiAnbGluZWFyJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWFjaChpdGVtcywgKGl0ZW0pPT57XG4gICAgICAgICAgICBjb25zdCBzY2FsZU9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBpZCA9IHNjYWxlT3B0aW9ucy5pZDtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3Qgc2NhbGVUeXBlID0gdmFsdWVPckRlZmF1bHQoc2NhbGVPcHRpb25zLnR5cGUsIGl0ZW0uZHR5cGUpO1xuICAgICAgICAgICAgaWYgKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uSXNIb3Jpem9udGFsKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiwgYXhpcykgIT09IHBvc2l0aW9uSXNIb3Jpem9udGFsKGl0ZW0uZHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9IGl0ZW0uZHBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlZFtpZF0gPSB0cnVlO1xuICAgICAgICAgICAgbGV0IHNjYWxlID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpZCBpbiBzY2FsZXMgJiYgc2NhbGVzW2lkXS50eXBlID09PSBzY2FsZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBzY2FsZSA9IHNjYWxlc1tpZF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlQ2xhc3MgPSByZWdpc3RyeS5nZXRTY2FsZShzY2FsZVR5cGUpO1xuICAgICAgICAgICAgICAgIHNjYWxlID0gbmV3IHNjYWxlQ2xhc3Moe1xuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogc2NhbGVUeXBlLFxuICAgICAgICAgICAgICAgICAgICBjdHg6IHRoaXMuY3R4LFxuICAgICAgICAgICAgICAgICAgICBjaGFydDogdGhpc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNjYWxlc1tzY2FsZS5pZF0gPSBzY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjYWxlLmluaXQoc2NhbGVPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVhY2godXBkYXRlZCwgKGhhc1VwZGF0ZWQsIGlkKT0+e1xuICAgICAgICAgICAgaWYgKCFoYXNVcGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNjYWxlc1tpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBlYWNoKHNjYWxlcywgKHNjYWxlKT0+e1xuICAgICAgICAgICAgbGF5b3V0cy5jb25maWd1cmUodGhpcywgc2NhbGUsIHNjYWxlLm9wdGlvbnMpO1xuICAgICAgICAgICAgbGF5b3V0cy5hZGRCb3godGhpcywgc2NhbGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gX3VwZGF0ZU1ldGFzZXRzKCkge1xuICAgICAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuX21ldGFzZXRzO1xuICAgICAgICBjb25zdCBudW1EYXRhID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbnVtTWV0YSA9IG1ldGFzZXRzLmxlbmd0aDtcbiAgICAgICAgbWV0YXNldHMuc29ydCgoYSwgYik9PmEuaW5kZXggLSBiLmluZGV4KTtcbiAgICAgICAgaWYgKG51bU1ldGEgPiBudW1EYXRhKSB7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSBudW1EYXRhOyBpIDwgbnVtTWV0YTsgKytpKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRhc2V0cy5zcGxpY2UobnVtRGF0YSwgbnVtTWV0YSAtIG51bURhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NvcnRlZE1ldGFzZXRzID0gbWV0YXNldHMuc2xpY2UoMCkuc29ydChjb21wYXJlMkxldmVsKCdvcmRlcicsICdpbmRleCcpKTtcbiAgICB9XG4gX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzKCkge1xuICAgICAgICBjb25zdCB7IF9tZXRhc2V0czogbWV0YXNldHMgLCBkYXRhOiB7IGRhdGFzZXRzICB9ICB9ID0gdGhpcztcbiAgICAgICAgaWYgKG1ldGFzZXRzLmxlbmd0aCA+IGRhdGFzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3N0YWNrcztcbiAgICAgICAgfVxuICAgICAgICBtZXRhc2V0cy5mb3JFYWNoKChtZXRhLCBpbmRleCk9PntcbiAgICAgICAgICAgIGlmIChkYXRhc2V0cy5maWx0ZXIoKHgpPT54ID09PSBtZXRhLl9kYXRhc2V0KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCkge1xuICAgICAgICBjb25zdCBuZXdDb250cm9sbGVycyA9IFtdO1xuICAgICAgICBjb25zdCBkYXRhc2V0cyA9IHRoaXMuZGF0YS5kYXRhc2V0cztcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIHRoaXMuX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzKCk7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBkYXRhc2V0ID0gZGF0YXNldHNbaV07XG4gICAgICAgICAgICBsZXQgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gZGF0YXNldC50eXBlIHx8IHRoaXMuY29uZmlnLnR5cGU7XG4gICAgICAgICAgICBpZiAobWV0YS50eXBlICYmIG1ldGEudHlwZSAhPT0gdHlwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgICAgICBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGEudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICBtZXRhLmluZGV4QXhpcyA9IGRhdGFzZXQuaW5kZXhBeGlzIHx8IGdldEluZGV4QXhpcyh0eXBlLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgbWV0YS5vcmRlciA9IGRhdGFzZXQub3JkZXIgfHwgMDtcbiAgICAgICAgICAgIG1ldGEuaW5kZXggPSBpO1xuICAgICAgICAgICAgbWV0YS5sYWJlbCA9ICcnICsgZGF0YXNldC5sYWJlbDtcbiAgICAgICAgICAgIG1ldGEudmlzaWJsZSA9IHRoaXMuaXNEYXRhc2V0VmlzaWJsZShpKTtcbiAgICAgICAgICAgIGlmIChtZXRhLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXIudXBkYXRlSW5kZXgoaSk7XG4gICAgICAgICAgICAgICAgbWV0YS5jb250cm9sbGVyLmxpbmtTY2FsZXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgQ29udHJvbGxlckNsYXNzID0gcmVnaXN0cnkuZ2V0Q29udHJvbGxlcih0eXBlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGFzZXRFbGVtZW50VHlwZSAsIGRhdGFFbGVtZW50VHlwZSAgfSA9IGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdO1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oQ29udHJvbGxlckNsYXNzLCB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFFbGVtZW50VHlwZTogcmVnaXN0cnkuZ2V0RWxlbWVudChkYXRhRWxlbWVudFR5cGUpLFxuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IGRhdGFzZXRFbGVtZW50VHlwZSAmJiByZWdpc3RyeS5nZXRFbGVtZW50KGRhdGFzZXRFbGVtZW50VHlwZSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlckNsYXNzKHRoaXMsIGkpO1xuICAgICAgICAgICAgICAgIG5ld0NvbnRyb2xsZXJzLnB1c2gobWV0YS5jb250cm9sbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cGRhdGVNZXRhc2V0cygpO1xuICAgICAgICByZXR1cm4gbmV3Q29udHJvbGxlcnM7XG4gICAgfVxuIF9yZXNldEVsZW1lbnRzKCkge1xuICAgICAgICBlYWNoKHRoaXMuZGF0YS5kYXRhc2V0cywgKGRhdGFzZXQsIGRhdGFzZXRJbmRleCk9PntcbiAgICAgICAgICAgIHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5jb250cm9sbGVyLnJlc2V0KCk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fcmVzZXRFbGVtZW50cygpO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ3Jlc2V0Jyk7XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgICAgICBjb25maWcudXBkYXRlKCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKGNvbmZpZy5jaGFydE9wdGlvblNjb3BlcygpLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IGFuaW1zRGlzYWJsZWQgPSB0aGlzLl9hbmltYXRpb25zRGlzYWJsZWQgPSAhb3B0aW9ucy5hbmltYXRpb247XG4gICAgICAgIHRoaXMuX3VwZGF0ZVNjYWxlcygpO1xuICAgICAgICB0aGlzLl9jaGVja0V2ZW50QmluZGluZ3MoKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlSGlkZGVuSW5kaWNlcygpO1xuICAgICAgICB0aGlzLl9wbHVnaW5zLmludmFsaWRhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlVXBkYXRlJywge1xuICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3Q29udHJvbGxlcnMgPSB0aGlzLmJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUVsZW1lbnRzVXBkYXRlJyk7XG4gICAgICAgIGxldCBtaW5QYWRkaW5nID0gMDtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgeyBjb250cm9sbGVyICB9ID0gdGhpcy5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc2V0ID0gIWFuaW1zRGlzYWJsZWQgJiYgbmV3Q29udHJvbGxlcnMuaW5kZXhPZihjb250cm9sbGVyKSA9PT0gLTE7XG4gICAgICAgICAgICBjb250cm9sbGVyLmJ1aWxkT3JVcGRhdGVFbGVtZW50cyhyZXNldCk7XG4gICAgICAgICAgICBtaW5QYWRkaW5nID0gTWF0aC5tYXgoK2NvbnRyb2xsZXIuZ2V0TWF4T3ZlcmZsb3coKSwgbWluUGFkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgbWluUGFkZGluZyA9IHRoaXMuX21pblBhZGRpbmcgPSBvcHRpb25zLmxheW91dC5hdXRvUGFkZGluZyA/IG1pblBhZGRpbmcgOiAwO1xuICAgICAgICB0aGlzLl91cGRhdGVMYXlvdXQobWluUGFkZGluZyk7XG4gICAgICAgIGlmICghYW5pbXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgZWFjaChuZXdDb250cm9sbGVycywgKGNvbnRyb2xsZXIpPT57XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5yZXNldCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlRGF0YXNldHMobW9kZSk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJVcGRhdGUnLCB7XG4gICAgICAgICAgICBtb2RlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9sYXllcnMuc29ydChjb21wYXJlMkxldmVsKCd6JywgJ19pZHgnKSk7XG4gICAgICAgIGNvbnN0IHsgX2FjdGl2ZSAsIF9sYXN0RXZlbnQgIH0gPSB0aGlzO1xuICAgICAgICBpZiAoX2xhc3RFdmVudCkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKF9sYXN0RXZlbnQsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKF9hY3RpdmUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhfYWN0aXZlLCBfYWN0aXZlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiBfdXBkYXRlU2NhbGVzKCkge1xuICAgICAgICBlYWNoKHRoaXMuc2NhbGVzLCAoc2NhbGUpPT57XG4gICAgICAgICAgICBsYXlvdXRzLnJlbW92ZUJveCh0aGlzLCBzY2FsZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVuc3VyZVNjYWxlc0hhdmVJRHMoKTtcbiAgICAgICAgdGhpcy5idWlsZE9yVXBkYXRlU2NhbGVzKCk7XG4gICAgfVxuIF9jaGVja0V2ZW50QmluZGluZ3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nRXZlbnRzID0gbmV3IFNldChPYmplY3Qua2V5cyh0aGlzLl9saXN0ZW5lcnMpKTtcbiAgICAgICAgY29uc3QgbmV3RXZlbnRzID0gbmV3IFNldChvcHRpb25zLmV2ZW50cyk7XG4gICAgICAgIGlmICghc2V0c0VxdWFsKGV4aXN0aW5nRXZlbnRzLCBuZXdFdmVudHMpIHx8ICEhdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyAhPT0gb3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICAgICAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gX3VwZGF0ZUhpZGRlbkluZGljZXMoKSB7XG4gICAgICAgIGNvbnN0IHsgX2hpZGRlbkluZGljZXMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjaGFuZ2VzID0gdGhpcy5fZ2V0VW5pZm9ybURhdGFDaGFuZ2VzKCkgfHwgW107XG4gICAgICAgIGZvciAoY29uc3QgeyBtZXRob2QgLCBzdGFydCAsIGNvdW50ICB9IG9mIGNoYW5nZXMpe1xuICAgICAgICAgICAgY29uc3QgbW92ZSA9IG1ldGhvZCA9PT0gJ19yZW1vdmVFbGVtZW50cycgPyAtY291bnQgOiBjb3VudDtcbiAgICAgICAgICAgIG1vdmVOdW1lcmljS2V5cyhfaGlkZGVuSW5kaWNlcywgc3RhcnQsIG1vdmUpO1xuICAgICAgICB9XG4gICAgfVxuIF9nZXRVbmlmb3JtRGF0YUNoYW5nZXMoKSB7XG4gICAgICAgIGNvbnN0IF9kYXRhQ2hhbmdlcyA9IHRoaXMuX2RhdGFDaGFuZ2VzO1xuICAgICAgICBpZiAoIV9kYXRhQ2hhbmdlcyB8fCAhX2RhdGFDaGFuZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RhdGFDaGFuZ2VzID0gW107XG4gICAgICAgIGNvbnN0IGRhdGFzZXRDb3VudCA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG1ha2VTZXQgPSAoaWR4KT0+bmV3IFNldChfZGF0YUNoYW5nZXMuZmlsdGVyKChjKT0+Y1swXSA9PT0gaWR4KS5tYXAoKGMsIGkpPT5pICsgJywnICsgYy5zcGxpY2UoMSkuam9pbignLCcpKSk7XG4gICAgICAgIGNvbnN0IGNoYW5nZVNldCA9IG1ha2VTZXQoMCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDE7IGkgPCBkYXRhc2V0Q291bnQ7IGkrKyl7XG4gICAgICAgICAgICBpZiAoIXNldHNFcXVhbChjaGFuZ2VTZXQsIG1ha2VTZXQoaSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGNoYW5nZVNldCkubWFwKChjKT0+Yy5zcGxpdCgnLCcpKS5tYXAoKGEpPT4oe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogYVsxXSxcbiAgICAgICAgICAgICAgICBzdGFydDogK2FbMl0sXG4gICAgICAgICAgICAgICAgY291bnQ6ICthWzNdXG4gICAgICAgICAgICB9KSk7XG4gICAgfVxuIF91cGRhdGVMYXlvdXQobWluUGFkZGluZykge1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVMYXlvdXQnLCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxheW91dHMudXBkYXRlKHRoaXMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBtaW5QYWRkaW5nKTtcbiAgICAgICAgY29uc3QgYXJlYSA9IHRoaXMuY2hhcnRBcmVhO1xuICAgICAgICBjb25zdCBub0FyZWEgPSBhcmVhLndpZHRoIDw9IDAgfHwgYXJlYS5oZWlnaHQgPD0gMDtcbiAgICAgICAgdGhpcy5fbGF5ZXJzID0gW107XG4gICAgICAgIGVhY2godGhpcy5ib3hlcywgKGJveCk9PntcbiAgICAgICAgICAgIGlmIChub0FyZWEgJiYgYm94LnBvc2l0aW9uID09PSAnY2hhcnRBcmVhJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib3guY29uZmlndXJlKSB7XG4gICAgICAgICAgICAgICAgYm94LmNvbmZpZ3VyZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbGF5ZXJzLnB1c2goLi4uYm94Ll9sYXllcnMoKSk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB0aGlzLl9sYXllcnMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpPT57XG4gICAgICAgICAgICBpdGVtLl9pZHggPSBpbmRleDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJMYXlvdXQnKTtcbiAgICB9XG4gX3VwZGF0ZURhdGFzZXRzKG1vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldHNVcGRhdGUnLCB7XG4gICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aGlzLmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXIuY29uZmlndXJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlRGF0YXNldChpLCBpc0Z1bmN0aW9uKG1vZGUpID8gbW9kZSh7XG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4OiBpXG4gICAgICAgICAgICB9KSA6IG1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0c1VwZGF0ZScsIHtcbiAgICAgICAgICAgIG1vZGVcbiAgICAgICAgfSk7XG4gICAgfVxuIF91cGRhdGVEYXRhc2V0KGluZGV4LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGluZGV4KTtcbiAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgIG1ldGEsXG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRVcGRhdGUnLCBhcmdzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtZXRhLmNvbnRyb2xsZXIuX3VwZGF0ZShtb2RlKTtcbiAgICAgICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0VXBkYXRlJywgYXJncyk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlUmVuZGVyJywge1xuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5pbWF0b3IuaGFzKHRoaXMpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhYW5pbWF0b3IucnVubmluZyh0aGlzKSkge1xuICAgICAgICAgICAgICAgIGFuaW1hdG9yLnN0YXJ0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICBvbkFuaW1hdGlvbnNDb21wbGV0ZSh7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBpZiAodGhpcy5fcmVzaXplQmVmb3JlRHJhdykge1xuICAgICAgICAgICAgY29uc3QgeyB3aWR0aCAsIGhlaWdodCAgfSA9IHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXc7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemVCZWZvcmVEcmF3ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIGlmICh0aGlzLndpZHRoIDw9IDAgfHwgdGhpcy5oZWlnaHQgPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURyYXcnLCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxheWVycyA9IHRoaXMuX2xheWVycztcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGF5ZXJzLmxlbmd0aCAmJiBsYXllcnNbaV0ueiA8PSAwOyArK2kpe1xuICAgICAgICAgICAgbGF5ZXJzW2ldLmRyYXcodGhpcy5jaGFydEFyZWEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RyYXdEYXRhc2V0cygpO1xuICAgICAgICBmb3IoOyBpIDwgbGF5ZXJzLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgIGxheWVyc1tpXS5kcmF3KHRoaXMuY2hhcnRBcmVhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRHJhdycpO1xuICAgIH1cbiBfZ2V0U29ydGVkRGF0YXNldE1ldGFzKGZpbHRlclZpc2libGUpIHtcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLl9zb3J0ZWRNZXRhc2V0cztcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IG1ldGFzZXRzW2ldO1xuICAgICAgICAgICAgaWYgKCFmaWx0ZXJWaXNpYmxlIHx8IG1ldGEudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG1ldGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuIGdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRTb3J0ZWREYXRhc2V0TWV0YXModHJ1ZSk7XG4gICAgfVxuIF9kcmF3RGF0YXNldHMoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRzRHJhdycsIHtcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICAgICAgZm9yKGxldCBpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgdGhpcy5fZHJhd0RhdGFzZXQobWV0YXNldHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0c0RyYXcnKTtcbiAgICB9XG4gX2RyYXdEYXRhc2V0KG1ldGEpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IGNsaXAgPSBtZXRhLl9jbGlwO1xuICAgICAgICBjb25zdCB1c2VDbGlwID0gIWNsaXAuZGlzYWJsZWQ7XG4gICAgICAgIGNvbnN0IGFyZWEgPSBnZXREYXRhc2V0QXJlYShtZXRhKSB8fCB0aGlzLmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgIG1ldGEsXG4gICAgICAgICAgICBpbmRleDogbWV0YS5pbmRleCxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldERyYXcnLCBhcmdzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXNlQ2xpcCkge1xuICAgICAgICAgICAgY2xpcEFyZWEoY3R4LCB7XG4gICAgICAgICAgICAgICAgbGVmdDogY2xpcC5sZWZ0ID09PSBmYWxzZSA/IDAgOiBhcmVhLmxlZnQgLSBjbGlwLmxlZnQsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IGNsaXAucmlnaHQgPT09IGZhbHNlID8gdGhpcy53aWR0aCA6IGFyZWEucmlnaHQgKyBjbGlwLnJpZ2h0LFxuICAgICAgICAgICAgICAgIHRvcDogY2xpcC50b3AgPT09IGZhbHNlID8gMCA6IGFyZWEudG9wIC0gY2xpcC50b3AsXG4gICAgICAgICAgICAgICAgYm90dG9tOiBjbGlwLmJvdHRvbSA9PT0gZmFsc2UgPyB0aGlzLmhlaWdodCA6IGFyZWEuYm90dG9tICsgY2xpcC5ib3R0b21cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIG1ldGEuY29udHJvbGxlci5kcmF3KCk7XG4gICAgICAgIGlmICh1c2VDbGlwKSB7XG4gICAgICAgICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgICAgIH1cbiAgICAgICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0RHJhdycsIGFyZ3MpO1xuICAgIH1cbiBpc1BvaW50SW5BcmVhKHBvaW50KSB7XG4gICAgICAgIHJldHVybiBfaXNQb2ludEluQXJlYShwb2ludCwgdGhpcy5jaGFydEFyZWEsIHRoaXMuX21pblBhZGRpbmcpO1xuICAgIH1cbiAgICBnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGUsIG1vZGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gSW50ZXJhY3Rpb24ubW9kZXNbbW9kZV07XG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kKHRoaXMsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLl9tZXRhc2V0cztcbiAgICAgICAgbGV0IG1ldGEgPSBtZXRhc2V0cy5maWx0ZXIoKHgpPT54ICYmIHguX2RhdGFzZXQgPT09IGRhdGFzZXQpLnBvcCgpO1xuICAgICAgICBpZiAoIW1ldGEpIHtcbiAgICAgICAgICAgIG1ldGEgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgICAgICBkYXRhc2V0OiBudWxsLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgaGlkZGVuOiBudWxsLFxuICAgICAgICAgICAgICAgIHhBeGlzSUQ6IG51bGwsXG4gICAgICAgICAgICAgICAgeUF4aXNJRDogbnVsbCxcbiAgICAgICAgICAgICAgICBvcmRlcjogZGF0YXNldCAmJiBkYXRhc2V0Lm9yZGVyIHx8IDAsXG4gICAgICAgICAgICAgICAgaW5kZXg6IGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBfZGF0YXNldDogZGF0YXNldCxcbiAgICAgICAgICAgICAgICBfcGFyc2VkOiBbXSxcbiAgICAgICAgICAgICAgICBfc29ydGVkOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG1ldGFzZXRzLnB1c2gobWV0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ldGE7XG4gICAgfVxuICAgIGdldENvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRjb250ZXh0IHx8ICh0aGlzLiRjb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsLCB7XG4gICAgICAgICAgICBjaGFydDogdGhpcyxcbiAgICAgICAgICAgIHR5cGU6ICdjaGFydCdcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZXRWaXNpYmxlRGF0YXNldENvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkubGVuZ3RoO1xuICAgIH1cbiAgICBpc0RhdGFzZXRWaXNpYmxlKGRhdGFzZXRJbmRleCkge1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGlmICghZGF0YXNldCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgIHJldHVybiB0eXBlb2YgbWV0YS5oaWRkZW4gPT09ICdib29sZWFuJyA/ICFtZXRhLmhpZGRlbiA6ICFkYXRhc2V0LmhpZGRlbjtcbiAgICB9XG4gICAgc2V0RGF0YXNldFZpc2liaWxpdHkoZGF0YXNldEluZGV4LCB2aXNpYmxlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgIG1ldGEuaGlkZGVuID0gIXZpc2libGU7XG4gICAgfVxuICAgIHRvZ2dsZURhdGFWaXNpYmlsaXR5KGluZGV4KSB7XG4gICAgICAgIHRoaXMuX2hpZGRlbkluZGljZXNbaW5kZXhdID0gIXRoaXMuX2hpZGRlbkluZGljZXNbaW5kZXhdO1xuICAgIH1cbiAgICBnZXREYXRhVmlzaWJpbGl0eShpbmRleCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuX2hpZGRlbkluZGljZXNbaW5kZXhdO1xuICAgIH1cbiBfdXBkYXRlVmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCwgdmlzaWJsZSkge1xuICAgICAgICBjb25zdCBtb2RlID0gdmlzaWJsZSA/ICdzaG93JyA6ICdoaWRlJztcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgICAgY29uc3QgYW5pbXMgPSBtZXRhLmNvbnRyb2xsZXIuX3Jlc29sdmVBbmltYXRpb25zKHVuZGVmaW5lZCwgbW9kZSk7XG4gICAgICAgIGlmIChkZWZpbmVkKGRhdGFJbmRleCkpIHtcbiAgICAgICAgICAgIG1ldGEuZGF0YVtkYXRhSW5kZXhdLmhpZGRlbiA9ICF2aXNpYmxlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YXNldFZpc2liaWxpdHkoZGF0YXNldEluZGV4LCB2aXNpYmxlKTtcbiAgICAgICAgICAgIGFuaW1zLnVwZGF0ZShtZXRhLCB7XG4gICAgICAgICAgICAgICAgdmlzaWJsZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgoY3R4KT0+Y3R4LmRhdGFzZXRJbmRleCA9PT0gZGF0YXNldEluZGV4ID8gbW9kZSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGlkZShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCkge1xuICAgICAgICB0aGlzLl91cGRhdGVWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4LCBmYWxzZSk7XG4gICAgfVxuICAgIHNob3coZGF0YXNldEluZGV4LCBkYXRhSW5kZXgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlVmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCwgdHJ1ZSk7XG4gICAgfVxuIF9kZXN0cm95RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9tZXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgICAgICBpZiAobWV0YSAmJiBtZXRhLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIG1ldGEuY29udHJvbGxlci5fZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tZXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgIH1cbiAgICBfc3RvcCgpIHtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICBhbmltYXRvci5yZW1vdmUodGhpcyk7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGVzdHJveScpO1xuICAgICAgICBjb25zdCB7IGNhbnZhcyAsIGN0eCAgfSA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3N0b3AoKTtcbiAgICAgICAgdGhpcy5jb25maWcuY2xlYXJDYWNoZSgpO1xuICAgICAgICBpZiAoY2FudmFzKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICAgICAgICAgICAgY2xlYXJDYW52YXMoY2FudmFzLCBjdHgpO1xuICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybS5yZWxlYXNlQ29udGV4dChjdHgpO1xuICAgICAgICAgICAgdGhpcy5jYW52YXMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5jdHggPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBpbnN0YW5jZXNbdGhpcy5pZF07XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEZXN0cm95Jyk7XG4gICAgfVxuICAgIHRvQmFzZTY0SW1hZ2UoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXMudG9EYXRhVVJMKC4uLmFyZ3MpO1xuICAgIH1cbiBiaW5kRXZlbnRzKCkge1xuICAgICAgICB0aGlzLmJpbmRVc2VyRXZlbnRzKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgICAgICAgdGhpcy5iaW5kUmVzcG9uc2l2ZUV2ZW50cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gYmluZFVzZXJFdmVudHMoKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcbiAgICAgICAgY29uc3QgcGxhdGZvcm0gPSB0aGlzLnBsYXRmb3JtO1xuICAgICAgICBjb25zdCBfYWRkID0gKHR5cGUsIGxpc3RlbmVyKT0+e1xuICAgICAgICAgICAgcGxhdGZvcm0uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAoZSwgeCwgeSk9PntcbiAgICAgICAgICAgIGUub2Zmc2V0WCA9IHg7XG4gICAgICAgICAgICBlLm9mZnNldFkgPSB5O1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKGUpO1xuICAgICAgICB9O1xuICAgICAgICBlYWNoKHRoaXMub3B0aW9ucy5ldmVudHMsICh0eXBlKT0+X2FkZCh0eXBlLCBsaXN0ZW5lcikpO1xuICAgIH1cbiBiaW5kUmVzcG9uc2l2ZUV2ZW50cygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycztcbiAgICAgICAgY29uc3QgcGxhdGZvcm0gPSB0aGlzLnBsYXRmb3JtO1xuICAgICAgICBjb25zdCBfYWRkID0gKHR5cGUsIGxpc3RlbmVyKT0+e1xuICAgICAgICAgICAgcGxhdGZvcm0uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgX3JlbW92ZSA9ICh0eXBlLCBsaXN0ZW5lcik9PntcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNbdHlwZV0pIHtcbiAgICAgICAgICAgICAgICBwbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgbGlzdGVuZXJzW3R5cGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBsaXN0ZW5lciA9ICh3aWR0aCwgaGVpZ2h0KT0+e1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGxldCBkZXRhY2hlZDtcbiAgICAgICAgY29uc3QgYXR0YWNoZWQgPSAoKT0+e1xuICAgICAgICAgICAgX3JlbW92ZSgnYXR0YWNoJywgYXR0YWNoZWQpO1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgICAgICAgICAgX2FkZCgncmVzaXplJywgbGlzdGVuZXIpO1xuICAgICAgICAgICAgX2FkZCgnZGV0YWNoJywgZGV0YWNoZWQpO1xuICAgICAgICB9O1xuICAgICAgICBkZXRhY2hlZCA9ICgpPT57XG4gICAgICAgICAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgICAgICAgICBfcmVtb3ZlKCdyZXNpemUnLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLl9zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemUoMCwgMCk7XG4gICAgICAgICAgICBfYWRkKCdhdHRhY2gnLCBhdHRhY2hlZCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChwbGF0Zm9ybS5pc0F0dGFjaGVkKHRoaXMuY2FudmFzKSkge1xuICAgICAgICAgICAgYXR0YWNoZWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRldGFjaGVkKCk7XG4gICAgICAgIH1cbiAgICB9XG4gdW5iaW5kRXZlbnRzKCkge1xuICAgICAgICBlYWNoKHRoaXMuX2xpc3RlbmVycywgKGxpc3RlbmVyLCB0eXBlKT0+e1xuICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgICAgICBlYWNoKHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMsIChsaXN0ZW5lciwgdHlwZSk9PntcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB1cGRhdGVIb3ZlclN0eWxlKGl0ZW1zLCBtb2RlLCBlbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IGVuYWJsZWQgPyAnc2V0JyA6ICdyZW1vdmUnO1xuICAgICAgICBsZXQgbWV0YSwgaXRlbSwgaSwgaWxlbjtcbiAgICAgICAgaWYgKG1vZGUgPT09ICdkYXRhc2V0Jykge1xuICAgICAgICAgICAgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaXRlbXNbMF0uZGF0YXNldEluZGV4KTtcbiAgICAgICAgICAgIG1ldGEuY29udHJvbGxlclsnXycgKyBwcmVmaXggKyAnRGF0YXNldEhvdmVyU3R5bGUnXSgpO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVyID0gaXRlbSAmJiB0aGlzLmdldERhdGFzZXRNZXRhKGl0ZW0uZGF0YXNldEluZGV4KS5jb250cm9sbGVyO1xuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyW3ByZWZpeCArICdIb3ZlclN0eWxlJ10oaXRlbS5lbGVtZW50LCBpdGVtLmRhdGFzZXRJbmRleCwgaXRlbS5pbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gZ2V0QWN0aXZlRWxlbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmUgfHwgW107XG4gICAgfVxuIHNldEFjdGl2ZUVsZW1lbnRzKGFjdGl2ZUVsZW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmUgfHwgW107XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzLm1hcCgoeyBkYXRhc2V0SW5kZXggLCBpbmRleCAgfSk9PntcbiAgICAgICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICBpZiAoIW1ldGEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGRhdGFzZXQgZm91bmQgYXQgaW5kZXggJyArIGRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBtZXRhLmRhdGFbaW5kZXhdLFxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY2hhbmdlZCA9ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gbm90aWZ5UGx1Z2lucyhob29rLCBhcmdzLCBmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsdWdpbnMubm90aWZ5KHRoaXMsIGhvb2ssIGFyZ3MsIGZpbHRlcik7XG4gICAgfVxuIGlzUGx1Z2luRW5hYmxlZChwbHVnaW5JZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGx1Z2lucy5fY2FjaGUuZmlsdGVyKChwKT0+cC5wbHVnaW4uaWQgPT09IHBsdWdpbklkKS5sZW5ndGggPT09IDE7XG4gICAgfVxuIF91cGRhdGVIb3ZlclN0eWxlcyhhY3RpdmUsIGxhc3RBY3RpdmUsIHJlcGxheSkge1xuICAgICAgICBjb25zdCBob3Zlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuaG92ZXI7XG4gICAgICAgIGNvbnN0IGRpZmYgPSAoYSwgYik9PmEuZmlsdGVyKCh4KT0+IWIuc29tZSgoeSk9PnguZGF0YXNldEluZGV4ID09PSB5LmRhdGFzZXRJbmRleCAmJiB4LmluZGV4ID09PSB5LmluZGV4KSk7XG4gICAgICAgIGNvbnN0IGRlYWN0aXZhdGVkID0gZGlmZihsYXN0QWN0aXZlLCBhY3RpdmUpO1xuICAgICAgICBjb25zdCBhY3RpdmF0ZWQgPSByZXBsYXkgPyBhY3RpdmUgOiBkaWZmKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgICAgIGlmIChkZWFjdGl2YXRlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSG92ZXJTdHlsZShkZWFjdGl2YXRlZCwgaG92ZXJPcHRpb25zLm1vZGUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aXZhdGVkLmxlbmd0aCAmJiBob3Zlck9wdGlvbnMubW9kZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVIb3ZlclN0eWxlKGFjdGl2YXRlZCwgaG92ZXJPcHRpb25zLm1vZGUsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuIF9ldmVudEhhbmRsZXIoZSwgcmVwbGF5KSB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICBldmVudDogZSxcbiAgICAgICAgICAgIHJlcGxheSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgICAgICBpbkNoYXJ0QXJlYTogdGhpcy5pc1BvaW50SW5BcmVhKGUpXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGV2ZW50RmlsdGVyID0gKHBsdWdpbik9PihwbHVnaW4ub3B0aW9ucy5ldmVudHMgfHwgdGhpcy5vcHRpb25zLmV2ZW50cykuaW5jbHVkZXMoZS5uYXRpdmUudHlwZSk7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUV2ZW50JywgYXJncywgZXZlbnRGaWx0ZXIpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLl9oYW5kbGVFdmVudChlLCByZXBsYXksIGFyZ3MuaW5DaGFydEFyZWEpO1xuICAgICAgICBhcmdzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckV2ZW50JywgYXJncywgZXZlbnRGaWx0ZXIpO1xuICAgICAgICBpZiAoY2hhbmdlZCB8fCBhcmdzLmNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuIF9oYW5kbGVFdmVudChlLCByZXBsYXksIGluQ2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IHsgX2FjdGl2ZTogbGFzdEFjdGl2ZSA9IFtdICwgb3B0aW9ucyAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHVzZUZpbmFsUG9zaXRpb24gPSByZXBsYXk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIGluQ2hhcnRBcmVhLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgaXNDbGljayA9IF9pc0NsaWNrRXZlbnQoZSk7XG4gICAgICAgIGNvbnN0IGxhc3RFdmVudCA9IGRldGVybWluZUxhc3RFdmVudChlLCB0aGlzLl9sYXN0RXZlbnQsIGluQ2hhcnRBcmVhLCBpc0NsaWNrKTtcbiAgICAgICAgaWYgKGluQ2hhcnRBcmVhKSB7XG4gICAgICAgICAgICB0aGlzLl9sYXN0RXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgY2FsbGJhY2sob3B0aW9ucy5vbkhvdmVyLCBbXG4gICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICBhY3RpdmUsXG4gICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgICAgICBpZiAoaXNDbGljaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG9wdGlvbnMub25DbGljaywgW1xuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFuZ2VkID0gIV9lbGVtZW50c0VxdWFsKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgICAgIGlmIChjaGFuZ2VkIHx8IHJlcGxheSkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlSG92ZXJTdHlsZXMoYWN0aXZlLCBsYXN0QWN0aXZlLCByZXBsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xhc3RFdmVudCA9IGxhc3RFdmVudDtcbiAgICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgfVxuIF9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCBpbkNoYXJ0QXJlYSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbkNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RBY3RpdmU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaG92ZXJPcHRpb25zID0gdGhpcy5vcHRpb25zLmhvdmVyO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGUsIGhvdmVyT3B0aW9ucy5tb2RlLCBob3Zlck9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGludmFsaWRhdGVQbHVnaW5zKCkge1xuICAgIHJldHVybiBlYWNoKENoYXJ0Lmluc3RhbmNlcywgKGNoYXJ0KT0+Y2hhcnQuX3BsdWdpbnMuaW52YWxpZGF0ZSgpKTtcbn1cblxuZnVuY3Rpb24gY2xpcEFyYyhjdHgsIGVsZW1lbnQsIGVuZEFuZ2xlKSB7XG4gICAgY29uc3QgeyBzdGFydEFuZ2xlICwgcGl4ZWxNYXJnaW4gLCB4ICwgeSAsIG91dGVyUmFkaXVzICwgaW5uZXJSYWRpdXMgIH0gPSBlbGVtZW50O1xuICAgIGxldCBhbmdsZU1hcmdpbiA9IHBpeGVsTWFyZ2luIC8gb3V0ZXJSYWRpdXM7XG4gICAgLy8gRHJhdyBhbiBpbm5lciBib3JkZXIgYnkgY2xpcHBpbmcgdGhlIGFyYyBhbmQgZHJhd2luZyBhIGRvdWJsZS13aWR0aCBib3JkZXJcbiAgICAvLyBFbmxhcmdlIHRoZSBjbGlwcGluZyBhcmMgYnkgMC4zMyBwaXhlbHMgdG8gZWxpbWluYXRlIGdsaXRjaGVzIGJldHdlZW4gYm9yZGVyc1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKHgsIHksIG91dGVyUmFkaXVzLCBzdGFydEFuZ2xlIC0gYW5nbGVNYXJnaW4sIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4pO1xuICAgIGlmIChpbm5lclJhZGl1cyA+IHBpeGVsTWFyZ2luKSB7XG4gICAgICAgIGFuZ2xlTWFyZ2luID0gcGl4ZWxNYXJnaW4gLyBpbm5lclJhZGl1cztcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBpbm5lclJhZGl1cywgZW5kQW5nbGUgKyBhbmdsZU1hcmdpbiwgc3RhcnRBbmdsZSAtIGFuZ2xlTWFyZ2luLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjdHguYXJjKHgsIHksIHBpeGVsTWFyZ2luLCBlbmRBbmdsZSArIEhBTEZfUEksIHN0YXJ0QW5nbGUgLSBIQUxGX1BJKTtcbiAgICB9XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiB0b1JhZGl1c0Nvcm5lcnModmFsdWUpIHtcbiAgICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIFtcbiAgICAgICAgJ291dGVyU3RhcnQnLFxuICAgICAgICAnb3V0ZXJFbmQnLFxuICAgICAgICAnaW5uZXJTdGFydCcsXG4gICAgICAgICdpbm5lckVuZCdcbiAgICBdKTtcbn1cbi8qKlxuICogUGFyc2UgYm9yZGVyIHJhZGl1cyBmcm9tIHRoZSBwcm92aWRlZCBvcHRpb25zXG4gKi8gZnVuY3Rpb24gcGFyc2VCb3JkZXJSYWRpdXMkMShhcmMsIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgYW5nbGVEZWx0YSkge1xuICAgIGNvbnN0IG8gPSB0b1JhZGl1c0Nvcm5lcnMoYXJjLm9wdGlvbnMuYm9yZGVyUmFkaXVzKTtcbiAgICBjb25zdCBoYWxmVGhpY2tuZXNzID0gKG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMpIC8gMjtcbiAgICBjb25zdCBpbm5lckxpbWl0ID0gTWF0aC5taW4oaGFsZlRoaWNrbmVzcywgYW5nbGVEZWx0YSAqIGlubmVyUmFkaXVzIC8gMik7XG4gICAgLy8gT3V0ZXIgbGltaXRzIGFyZSBjb21wbGljYXRlZC4gV2Ugd2FudCB0byBjb21wdXRlIHRoZSBhdmFpbGFibGUgYW5ndWxhciBkaXN0YW5jZSBhdFxuICAgIC8vIGEgcmFkaXVzIG9mIG91dGVyUmFkaXVzIC0gYm9yZGVyUmFkaXVzIGJlY2F1c2UgZm9yIHNtYWxsIGFuZ3VsYXIgZGlzdGFuY2VzLCB0aGlzIHRlcm0gbGltaXRzLlxuICAgIC8vIFdlIGNvbXB1dGUgYXQgciA9IG91dGVyUmFkaXVzIC0gYm9yZGVyUmFkaXVzIGJlY2F1c2UgdGhpcyBjaXJjbGUgZGVmaW5lcyB0aGUgY2VudGVyIG9mIHRoZSBib3JkZXIgY29ybmVycy5cbiAgICAvL1xuICAgIC8vIElmIHRoZSBib3JkZXJSYWRpdXMgaXMgbGFyZ2UsIHRoYXQgdmFsdWUgY2FuIGJlY29tZSBuZWdhdGl2ZS5cbiAgICAvLyBUaGlzIGNhdXNlcyB0aGUgb3V0ZXIgYm9yZGVycyB0byBsb3NlIHRoZWlyIHJhZGl1cyBlbnRpcmVseSwgd2hpY2ggaXMgcmF0aGVyIHVuZXhwZWN0ZWQuIFRvIHNvbHZlIHRoYXQsIGlmIGJvcmRlclJhZGl1cyA+IG91dGVyUmFkaXVzXG4gICAgLy8gd2Uga25vdyB0aGF0IHRoZSB0aGlja25lc3MgdGVybSB3aWxsIGRvbWluYXRlIGFuZCBjb21wdXRlIHRoZSBsaW1pdHMgYXQgdGhhdCBwb2ludFxuICAgIGNvbnN0IGNvbXB1dGVPdXRlckxpbWl0ID0gKHZhbCk9PntcbiAgICAgICAgY29uc3Qgb3V0ZXJBcmNMaW1pdCA9IChvdXRlclJhZGl1cyAtIE1hdGgubWluKGhhbGZUaGlja25lc3MsIHZhbCkpICogYW5nbGVEZWx0YSAvIDI7XG4gICAgICAgIHJldHVybiBfbGltaXRWYWx1ZSh2YWwsIDAsIE1hdGgubWluKGhhbGZUaGlja25lc3MsIG91dGVyQXJjTGltaXQpKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIG91dGVyU3RhcnQ6IGNvbXB1dGVPdXRlckxpbWl0KG8ub3V0ZXJTdGFydCksXG4gICAgICAgIG91dGVyRW5kOiBjb21wdXRlT3V0ZXJMaW1pdChvLm91dGVyRW5kKSxcbiAgICAgICAgaW5uZXJTdGFydDogX2xpbWl0VmFsdWUoby5pbm5lclN0YXJ0LCAwLCBpbm5lckxpbWl0KSxcbiAgICAgICAgaW5uZXJFbmQ6IF9saW1pdFZhbHVlKG8uaW5uZXJFbmQsIDAsIGlubmVyTGltaXQpXG4gICAgfTtcbn1cbi8qKlxuICogQ29udmVydCAociwg8J2cgykgdG8gKHgsIHkpXG4gKi8gZnVuY3Rpb24gclRoZXRhVG9YWShyLCB0aGV0YSwgeCwgeSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHggKyByICogTWF0aC5jb3ModGhldGEpLFxuICAgICAgICB5OiB5ICsgciAqIE1hdGguc2luKHRoZXRhKVxuICAgIH07XG59XG4vKipcbiAqIFBhdGggdGhlIGFyYywgcmVzcGVjdGluZyBib3JkZXIgcmFkaXVzIGJ5IHNlcGFyYXRpbmcgaW50byBsZWZ0IGFuZCByaWdodCBoYWx2ZXMuXG4gKlxuICogICBTdGFydCAgICAgIEVuZFxuICpcbiAqICAgIDEtLS0+YS0tLT4yICAgIE91dGVyXG4gKiAgIC8gICAgICAgICAgIFxcXG4gKiAgIDggICAgICAgICAgIDNcbiAqICAgfCAgICAgICAgICAgfFxuICogICB8ICAgICAgICAgICB8XG4gKiAgIDcgICAgICAgICAgIDRcbiAqICAgXFwgICAgICAgICAgIC9cbiAqICAgIDY8LS0tYjwtLS01ICAgIElubmVyXG4gKi8gZnVuY3Rpb24gcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kLCBjaXJjdWxhcikge1xuICAgIGNvbnN0IHsgeCAsIHkgLCBzdGFydEFuZ2xlOiBzdGFydCAsIHBpeGVsTWFyZ2luICwgaW5uZXJSYWRpdXM6IGlubmVyUiAgfSA9IGVsZW1lbnQ7XG4gICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBNYXRoLm1heChlbGVtZW50Lm91dGVyUmFkaXVzICsgc3BhY2luZyArIG9mZnNldCAtIHBpeGVsTWFyZ2luLCAwKTtcbiAgICBjb25zdCBpbm5lclJhZGl1cyA9IGlubmVyUiA+IDAgPyBpbm5lclIgKyBzcGFjaW5nICsgb2Zmc2V0ICsgcGl4ZWxNYXJnaW4gOiAwO1xuICAgIGxldCBzcGFjaW5nT2Zmc2V0ID0gMDtcbiAgICBjb25zdCBhbHBoYSA9IGVuZCAtIHN0YXJ0O1xuICAgIGlmIChzcGFjaW5nKSB7XG4gICAgICAgIC8vIFdoZW4gc3BhY2luZyBpcyBwcmVzZW50LCBpdCBpcyB0aGUgc2FtZSBmb3IgYWxsIGl0ZW1zXG4gICAgICAgIC8vIFNvIHdlIGFkanVzdCB0aGUgc3RhcnQgYW5kIGVuZCBhbmdsZSBvZiB0aGUgYXJjIHN1Y2ggdGhhdFxuICAgICAgICAvLyB0aGUgZGlzdGFuY2UgaXMgdGhlIHNhbWUgYXMgaXQgd291bGQgYmUgd2l0aG91dCB0aGUgc3BhY2luZ1xuICAgICAgICBjb25zdCBub1NwYWNpbmdJbm5lclJhZGl1cyA9IGlubmVyUiA+IDAgPyBpbm5lclIgLSBzcGFjaW5nIDogMDtcbiAgICAgICAgY29uc3Qgbm9TcGFjaW5nT3V0ZXJSYWRpdXMgPSBvdXRlclJhZGl1cyA+IDAgPyBvdXRlclJhZGl1cyAtIHNwYWNpbmcgOiAwO1xuICAgICAgICBjb25zdCBhdk5vZ1NwYWNpbmdSYWRpdXMgPSAobm9TcGFjaW5nSW5uZXJSYWRpdXMgKyBub1NwYWNpbmdPdXRlclJhZGl1cykgLyAyO1xuICAgICAgICBjb25zdCBhZGp1c3RlZEFuZ2xlID0gYXZOb2dTcGFjaW5nUmFkaXVzICE9PSAwID8gYWxwaGEgKiBhdk5vZ1NwYWNpbmdSYWRpdXMgLyAoYXZOb2dTcGFjaW5nUmFkaXVzICsgc3BhY2luZykgOiBhbHBoYTtcbiAgICAgICAgc3BhY2luZ09mZnNldCA9IChhbHBoYSAtIGFkanVzdGVkQW5nbGUpIC8gMjtcbiAgICB9XG4gICAgY29uc3QgYmV0YSA9IE1hdGgubWF4KDAuMDAxLCBhbHBoYSAqIG91dGVyUmFkaXVzIC0gb2Zmc2V0IC8gUEkpIC8gb3V0ZXJSYWRpdXM7XG4gICAgY29uc3QgYW5nbGVPZmZzZXQgPSAoYWxwaGEgLSBiZXRhKSAvIDI7XG4gICAgY29uc3Qgc3RhcnRBbmdsZSA9IHN0YXJ0ICsgYW5nbGVPZmZzZXQgKyBzcGFjaW5nT2Zmc2V0O1xuICAgIGNvbnN0IGVuZEFuZ2xlID0gZW5kIC0gYW5nbGVPZmZzZXQgLSBzcGFjaW5nT2Zmc2V0O1xuICAgIGNvbnN0IHsgb3V0ZXJTdGFydCAsIG91dGVyRW5kICwgaW5uZXJTdGFydCAsIGlubmVyRW5kICB9ID0gcGFyc2VCb3JkZXJSYWRpdXMkMShlbGVtZW50LCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSk7XG4gICAgY29uc3Qgb3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSBvdXRlclN0YXJ0O1xuICAgIGNvbnN0IG91dGVyRW5kQWRqdXN0ZWRSYWRpdXMgPSBvdXRlclJhZGl1cyAtIG91dGVyRW5kO1xuICAgIGNvbnN0IG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlID0gc3RhcnRBbmdsZSArIG91dGVyU3RhcnQgLyBvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXM7XG4gICAgY29uc3Qgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlID0gZW5kQW5nbGUgLSBvdXRlckVuZCAvIG91dGVyRW5kQWRqdXN0ZWRSYWRpdXM7XG4gICAgY29uc3QgaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzID0gaW5uZXJSYWRpdXMgKyBpbm5lclN0YXJ0O1xuICAgIGNvbnN0IGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMgPSBpbm5lclJhZGl1cyArIGlubmVyRW5kO1xuICAgIGNvbnN0IGlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlID0gc3RhcnRBbmdsZSArIGlubmVyU3RhcnQgLyBpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXM7XG4gICAgY29uc3QgaW5uZXJFbmRBZGp1c3RlZEFuZ2xlID0gZW5kQW5nbGUgLSBpbm5lckVuZCAvIGlubmVyRW5kQWRqdXN0ZWRSYWRpdXM7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGlmIChjaXJjdWxhcikge1xuICAgICAgICAvLyBUaGUgZmlyc3QgYXJjIHNlZ21lbnRzIGZyb20gcG9pbnQgMSB0byBwb2ludCBhIHRvIHBvaW50IDJcbiAgICAgICAgY29uc3Qgb3V0ZXJNaWRBZGp1c3RlZEFuZ2xlID0gKG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlICsgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlKSAvIDI7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgb3V0ZXJSYWRpdXMsIG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlLCBvdXRlck1pZEFkanVzdGVkQW5nbGUpO1xuICAgICAgICBjdHguYXJjKHgsIHksIG91dGVyUmFkaXVzLCBvdXRlck1pZEFkanVzdGVkQW5nbGUsIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSk7XG4gICAgICAgIC8vIFRoZSBjb3JuZXIgc2VnbWVudCBmcm9tIHBvaW50IDIgdG8gcG9pbnQgM1xuICAgICAgICBpZiAob3V0ZXJFbmQgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwQ2VudGVyID0gclRoZXRhVG9YWShvdXRlckVuZEFkanVzdGVkUmFkaXVzLCBvdXRlckVuZEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgICAgICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgb3V0ZXJFbmQsIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSwgZW5kQW5nbGUgKyBIQUxGX1BJKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgbGluZSBmcm9tIHBvaW50IDMgdG8gcG9pbnQgNFxuICAgICAgICBjb25zdCBwNCA9IHJUaGV0YVRvWFkoaW5uZXJFbmRBZGp1c3RlZFJhZGl1cywgZW5kQW5nbGUsIHgsIHkpO1xuICAgICAgICBjdHgubGluZVRvKHA0LngsIHA0LnkpO1xuICAgICAgICAvLyBUaGUgY29ybmVyIHNlZ21lbnQgZnJvbSBwb2ludCA0IHRvIHBvaW50IDVcbiAgICAgICAgaWYgKGlubmVyRW5kID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkoaW5uZXJFbmRBZGp1c3RlZFJhZGl1cywgaW5uZXJFbmRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIGlubmVyRW5kLCBlbmRBbmdsZSArIEhBTEZfUEksIGlubmVyRW5kQWRqdXN0ZWRBbmdsZSArIE1hdGguUEkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBpbm5lciBhcmMgZnJvbSBwb2ludCA1IHRvIHBvaW50IGIgdG8gcG9pbnQgNlxuICAgICAgICBjb25zdCBpbm5lck1pZEFkanVzdGVkQW5nbGUgPSAoZW5kQW5nbGUgLSBpbm5lckVuZCAvIGlubmVyUmFkaXVzICsgKHN0YXJ0QW5nbGUgKyBpbm5lclN0YXJ0IC8gaW5uZXJSYWRpdXMpKSAvIDI7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGVuZEFuZ2xlIC0gaW5uZXJFbmQgLyBpbm5lclJhZGl1cywgaW5uZXJNaWRBZGp1c3RlZEFuZ2xlLCB0cnVlKTtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBpbm5lclJhZGl1cywgaW5uZXJNaWRBZGp1c3RlZEFuZ2xlLCBzdGFydEFuZ2xlICsgaW5uZXJTdGFydCAvIGlubmVyUmFkaXVzLCB0cnVlKTtcbiAgICAgICAgLy8gVGhlIGNvcm5lciBzZWdtZW50IGZyb20gcG9pbnQgNiB0byBwb2ludCA3XG4gICAgICAgIGlmIChpbm5lclN0YXJ0ID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkoaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzLCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgICAgICAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBpbm5lclN0YXJ0LCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSArIE1hdGguUEksIHN0YXJ0QW5nbGUgLSBIQUxGX1BJKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgbGluZSBmcm9tIHBvaW50IDcgdG8gcG9pbnQgOFxuICAgICAgICBjb25zdCBwOCA9IHJUaGV0YVRvWFkob3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzLCBzdGFydEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgY3R4LmxpbmVUbyhwOC54LCBwOC55KTtcbiAgICAgICAgLy8gVGhlIGNvcm5lciBzZWdtZW50IGZyb20gcG9pbnQgOCB0byBwb2ludCAxXG4gICAgICAgIGlmIChvdXRlclN0YXJ0ID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkob3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgICAgICAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBvdXRlclN0YXJ0LCBzdGFydEFuZ2xlIC0gSEFMRl9QSSwgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgY29uc3Qgb3V0ZXJTdGFydFggPSBNYXRoLmNvcyhvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSkgKiBvdXRlclJhZGl1cyArIHg7XG4gICAgICAgIGNvbnN0IG91dGVyU3RhcnRZID0gTWF0aC5zaW4ob3V0ZXJTdGFydEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB5O1xuICAgICAgICBjdHgubGluZVRvKG91dGVyU3RhcnRYLCBvdXRlclN0YXJ0WSk7XG4gICAgICAgIGNvbnN0IG91dGVyRW5kWCA9IE1hdGguY29zKG91dGVyRW5kQWRqdXN0ZWRBbmdsZSkgKiBvdXRlclJhZGl1cyArIHg7XG4gICAgICAgIGNvbnN0IG91dGVyRW5kWSA9IE1hdGguc2luKG91dGVyRW5kQWRqdXN0ZWRBbmdsZSkgKiBvdXRlclJhZGl1cyArIHk7XG4gICAgICAgIGN0eC5saW5lVG8ob3V0ZXJFbmRYLCBvdXRlckVuZFkpO1xuICAgIH1cbiAgICBjdHguY2xvc2VQYXRoKCk7XG59XG5mdW5jdGlvbiBkcmF3QXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBjaXJjdWxhcikge1xuICAgIGNvbnN0IHsgZnVsbENpcmNsZXMgLCBzdGFydEFuZ2xlICwgY2lyY3VtZmVyZW5jZSAgfSA9IGVsZW1lbnQ7XG4gICAgbGV0IGVuZEFuZ2xlID0gZWxlbWVudC5lbmRBbmdsZTtcbiAgICBpZiAoZnVsbENpcmNsZXMpIHtcbiAgICAgICAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUsIGNpcmN1bGFyKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGZ1bGxDaXJjbGVzOyArK2kpe1xuICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzTmFOKGNpcmN1bWZlcmVuY2UpKSB7XG4gICAgICAgICAgICBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyAoY2lyY3VtZmVyZW5jZSAlIFRBVSB8fCBUQVUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gICAgY3R4LmZpbGwoKTtcbiAgICByZXR1cm4gZW5kQW5nbGU7XG59XG5mdW5jdGlvbiBkcmF3Qm9yZGVyKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBjaXJjdWxhcikge1xuICAgIGNvbnN0IHsgZnVsbENpcmNsZXMgLCBzdGFydEFuZ2xlICwgY2lyY3VtZmVyZW5jZSAsIG9wdGlvbnMgIH0gPSBlbGVtZW50O1xuICAgIGNvbnN0IHsgYm9yZGVyV2lkdGggLCBib3JkZXJKb2luU3R5bGUgLCBib3JkZXJEYXNoICwgYm9yZGVyRGFzaE9mZnNldCAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgaW5uZXIgPSBvcHRpb25zLmJvcmRlckFsaWduID09PSAnaW5uZXInO1xuICAgIGlmICghYm9yZGVyV2lkdGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHguc2V0TGluZURhc2goYm9yZGVyRGFzaCB8fCBbXSk7XG4gICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gYm9yZGVyRGFzaE9mZnNldDtcbiAgICBpZiAoaW5uZXIpIHtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlcldpZHRoICogMjtcbiAgICAgICAgY3R4LmxpbmVKb2luID0gYm9yZGVySm9pblN0eWxlIHx8ICdyb3VuZCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlcldpZHRoO1xuICAgICAgICBjdHgubGluZUpvaW4gPSBib3JkZXJKb2luU3R5bGUgfHwgJ2JldmVsJztcbiAgICB9XG4gICAgbGV0IGVuZEFuZ2xlID0gZWxlbWVudC5lbmRBbmdsZTtcbiAgICBpZiAoZnVsbENpcmNsZXMpIHtcbiAgICAgICAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUsIGNpcmN1bGFyKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGZ1bGxDaXJjbGVzOyArK2kpe1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNOYU4oY2lyY3VtZmVyZW5jZSkpIHtcbiAgICAgICAgICAgIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIChjaXJjdW1mZXJlbmNlICUgVEFVIHx8IFRBVSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlubmVyKSB7XG4gICAgICAgIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBlbmRBbmdsZSk7XG4gICAgfVxuICAgIGlmICghZnVsbENpcmNsZXMpIHtcbiAgICAgICAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUsIGNpcmN1bGFyKTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbn1cbmNsYXNzIEFyY0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBzdGF0aWMgaWQgPSAnYXJjJztcbiAgICBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGJvcmRlckFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyRGFzaDogW10sXG4gICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IDAsXG4gICAgICAgIGJvcmRlckpvaW5TdHlsZTogdW5kZWZpbmVkLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgIGJvcmRlcldpZHRoOiAyLFxuICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgIHNwYWNpbmc6IDAsXG4gICAgICAgIGFuZ2xlOiB1bmRlZmluZWQsXG4gICAgICAgIGNpcmN1bGFyOiB0cnVlXG4gICAgfTtcbiAgICBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJ1xuICAgIH07XG4gICAgc3RhdGljIGRlc2NyaXB0b3JzID0ge1xuICAgICAgICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICAgICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnYm9yZGVyRGFzaCdcbiAgICB9O1xuICAgIGNpcmN1bWZlcmVuY2U7XG4gICAgZW5kQW5nbGU7XG4gICAgZnVsbENpcmNsZXM7XG4gICAgaW5uZXJSYWRpdXM7XG4gICAgb3V0ZXJSYWRpdXM7XG4gICAgcGl4ZWxNYXJnaW47XG4gICAgc3RhcnRBbmdsZTtcbiAgICBjb25zdHJ1Y3RvcihjZmcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2lyY3VtZmVyZW5jZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zdGFydEFuZ2xlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmVuZEFuZ2xlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm91dGVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBpeGVsTWFyZ2luID0gMDtcbiAgICAgICAgdGhpcy5mdWxsQ2lyY2xlcyA9IDA7XG4gICAgICAgIGlmIChjZmcpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpblJhbmdlKGNoYXJ0WCwgY2hhcnRZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHsgYW5nbGUgLCBkaXN0YW5jZSAgfSA9IGdldEFuZ2xlRnJvbVBvaW50KHBvaW50LCB7XG4gICAgICAgICAgICB4OiBjaGFydFgsXG4gICAgICAgICAgICB5OiBjaGFydFlcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHsgc3RhcnRBbmdsZSAsIGVuZEFuZ2xlICwgaW5uZXJSYWRpdXMgLCBvdXRlclJhZGl1cyAsIGNpcmN1bWZlcmVuY2UgIH0gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICAgICAgICdlbmRBbmdsZScsXG4gICAgICAgICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgICAgICAgJ291dGVyUmFkaXVzJyxcbiAgICAgICAgICAgICdjaXJjdW1mZXJlbmNlJ1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgckFkanVzdCA9ICh0aGlzLm9wdGlvbnMuc3BhY2luZyArIHRoaXMub3B0aW9ucy5ib3JkZXJXaWR0aCkgLyAyO1xuICAgICAgICBjb25zdCBfY2lyY3VtZmVyZW5jZSA9IHZhbHVlT3JEZWZhdWx0KGNpcmN1bWZlcmVuY2UsIGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSk7XG4gICAgICAgIGNvbnN0IGJldHdlZW5BbmdsZXMgPSBfY2lyY3VtZmVyZW5jZSA+PSBUQVUgfHwgX2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCB3aXRoaW5SYWRpdXMgPSBfaXNCZXR3ZWVuKGRpc3RhbmNlLCBpbm5lclJhZGl1cyArIHJBZGp1c3QsIG91dGVyUmFkaXVzICsgckFkanVzdCk7XG4gICAgICAgIHJldHVybiBiZXR3ZWVuQW5nbGVzICYmIHdpdGhpblJhZGl1cztcbiAgICB9XG4gICAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCB7IHggLCB5ICwgc3RhcnRBbmdsZSAsIGVuZEFuZ2xlICwgaW5uZXJSYWRpdXMgLCBvdXRlclJhZGl1cyAgfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgICAgICAgJ2VuZEFuZ2xlJyxcbiAgICAgICAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAgICAgICAnb3V0ZXJSYWRpdXMnXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCB7IG9mZnNldCAsIHNwYWNpbmcgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGhhbGZBbmdsZSA9IChzdGFydEFuZ2xlICsgZW5kQW5nbGUpIC8gMjtcbiAgICAgICAgY29uc3QgaGFsZlJhZGl1cyA9IChpbm5lclJhZGl1cyArIG91dGVyUmFkaXVzICsgc3BhY2luZyArIG9mZnNldCkgLyAyO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCArIE1hdGguY29zKGhhbGZBbmdsZSkgKiBoYWxmUmFkaXVzLFxuICAgICAgICAgICAgeTogeSArIE1hdGguc2luKGhhbGZBbmdsZSkgKiBoYWxmUmFkaXVzXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRvb2x0aXBQb3NpdGlvbih1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBkcmF3KGN0eCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgLCBjaXJjdW1mZXJlbmNlICB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gKG9wdGlvbnMub2Zmc2V0IHx8IDApIC8gNDtcbiAgICAgICAgY29uc3Qgc3BhY2luZyA9IChvcHRpb25zLnNwYWNpbmcgfHwgMCkgLyAyO1xuICAgICAgICBjb25zdCBjaXJjdWxhciA9IG9wdGlvbnMuY2lyY3VsYXI7XG4gICAgICAgIHRoaXMucGl4ZWxNYXJnaW4gPSBvcHRpb25zLmJvcmRlckFsaWduID09PSAnaW5uZXInID8gMC4zMyA6IDA7XG4gICAgICAgIHRoaXMuZnVsbENpcmNsZXMgPSBjaXJjdW1mZXJlbmNlID4gVEFVID8gTWF0aC5mbG9vcihjaXJjdW1mZXJlbmNlIC8gVEFVKSA6IDA7XG4gICAgICAgIGlmIChjaXJjdW1mZXJlbmNlID09PSAwIHx8IHRoaXMuaW5uZXJSYWRpdXMgPCAwIHx8IHRoaXMub3V0ZXJSYWRpdXMgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY29uc3QgaGFsZkFuZ2xlID0gKHRoaXMuc3RhcnRBbmdsZSArIHRoaXMuZW5kQW5nbGUpIC8gMjtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZShNYXRoLmNvcyhoYWxmQW5nbGUpICogb2Zmc2V0LCBNYXRoLnNpbihoYWxmQW5nbGUpICogb2Zmc2V0KTtcbiAgICAgICAgY29uc3QgZml4ID0gMSAtIE1hdGguc2luKE1hdGgubWluKFBJLCBjaXJjdW1mZXJlbmNlIHx8IDApKTtcbiAgICAgICAgY29uc3QgcmFkaXVzT2Zmc2V0ID0gb2Zmc2V0ICogZml4O1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgICAgIGRyYXdBcmMoY3R4LCB0aGlzLCByYWRpdXNPZmZzZXQsIHNwYWNpbmcsIGNpcmN1bGFyKTtcbiAgICAgICAgZHJhd0JvcmRlcihjdHgsIHRoaXMsIHJhZGl1c09mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0U3R5bGUoY3R4LCBvcHRpb25zLCBzdHlsZSA9IG9wdGlvbnMpIHtcbiAgICBjdHgubGluZUNhcCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckNhcFN0eWxlLCBvcHRpb25zLmJvcmRlckNhcFN0eWxlKTtcbiAgICBjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyRGFzaCwgb3B0aW9ucy5ib3JkZXJEYXNoKSk7XG4gICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyRGFzaE9mZnNldCwgb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0KTtcbiAgICBjdHgubGluZUpvaW4gPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJKb2luU3R5bGUsIG9wdGlvbnMuYm9yZGVySm9pblN0eWxlKTtcbiAgICBjdHgubGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyV2lkdGgsIG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckNvbG9yLCBvcHRpb25zLmJvcmRlckNvbG9yKTtcbn1cbmZ1bmN0aW9uIGxpbmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQpIHtcbiAgICBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG59XG4gZnVuY3Rpb24gZ2V0TGluZU1ldGhvZChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuc3RlcHBlZCkge1xuICAgICAgICByZXR1cm4gX3N0ZXBwZWRMaW5lVG87XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnRlbnNpb24gfHwgb3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgICAgIHJldHVybiBfYmV6aWVyQ3VydmVUbztcbiAgICB9XG4gICAgcmV0dXJuIGxpbmVUbztcbn1cbmZ1bmN0aW9uIHBhdGhWYXJzKHBvaW50cywgc2VnbWVudCwgcGFyYW1zID0ge30pIHtcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgeyBzdGFydDogcGFyYW1zU3RhcnQgPSAwICwgZW5kOiBwYXJhbXNFbmQgPSBjb3VudCAtIDEgIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgeyBzdGFydDogc2VnbWVudFN0YXJ0ICwgZW5kOiBzZWdtZW50RW5kICB9ID0gc2VnbWVudDtcbiAgICBjb25zdCBzdGFydCA9IE1hdGgubWF4KHBhcmFtc1N0YXJ0LCBzZWdtZW50U3RhcnQpO1xuICAgIGNvbnN0IGVuZCA9IE1hdGgubWluKHBhcmFtc0VuZCwgc2VnbWVudEVuZCk7XG4gICAgY29uc3Qgb3V0c2lkZSA9IHBhcmFtc1N0YXJ0IDwgc2VnbWVudFN0YXJ0ICYmIHBhcmFtc0VuZCA8IHNlZ21lbnRTdGFydCB8fCBwYXJhbXNTdGFydCA+IHNlZ21lbnRFbmQgJiYgcGFyYW1zRW5kID4gc2VnbWVudEVuZDtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb3VudCxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGxvb3A6IHNlZ21lbnQubG9vcCxcbiAgICAgICAgaWxlbjogZW5kIDwgc3RhcnQgJiYgIW91dHNpZGUgPyBjb3VudCArIGVuZCAtIHN0YXJ0IDogZW5kIC0gc3RhcnRcbiAgICB9O1xufVxuIGZ1bmN0aW9uIHBhdGhTZWdtZW50KGN0eCwgbGluZSwgc2VnbWVudCwgcGFyYW1zKSB7XG4gICAgY29uc3QgeyBwb2ludHMgLCBvcHRpb25zICB9ID0gbGluZTtcbiAgICBjb25zdCB7IGNvdW50ICwgc3RhcnQgLCBsb29wICwgaWxlbiAgfSA9IHBhdGhWYXJzKHBvaW50cywgc2VnbWVudCwgcGFyYW1zKTtcbiAgICBjb25zdCBsaW5lTWV0aG9kID0gZ2V0TGluZU1ldGhvZChvcHRpb25zKTtcbiAgICBsZXQgeyBtb3ZlID10cnVlICwgcmV2ZXJzZSAgfSA9IHBhcmFtcyB8fCB7fTtcbiAgICBsZXQgaSwgcG9pbnQsIHByZXY7XG4gICAgZm9yKGkgPSAwOyBpIDw9IGlsZW47ICsraSl7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzWyhzdGFydCArIChyZXZlcnNlID8gaWxlbiAtIGkgOiBpKSkgJSBjb3VudF07XG4gICAgICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmIChtb3ZlKSB7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgICAgICAgbW92ZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGluZU1ldGhvZChjdHgsIHByZXYsIHBvaW50LCByZXZlcnNlLCBvcHRpb25zLnN0ZXBwZWQpO1xuICAgICAgICB9XG4gICAgICAgIHByZXYgPSBwb2ludDtcbiAgICB9XG4gICAgaWYgKGxvb3ApIHtcbiAgICAgICAgcG9pbnQgPSBwb2ludHNbKHN0YXJ0ICsgKHJldmVyc2UgPyBpbGVuIDogMCkpICUgY291bnRdO1xuICAgICAgICBsaW5lTWV0aG9kKGN0eCwgcHJldiwgcG9pbnQsIHJldmVyc2UsIG9wdGlvbnMuc3RlcHBlZCk7XG4gICAgfVxuICAgIHJldHVybiAhIWxvb3A7XG59XG4gZnVuY3Rpb24gZmFzdFBhdGhTZWdtZW50KGN0eCwgbGluZSwgc2VnbWVudCwgcGFyYW1zKSB7XG4gICAgY29uc3QgcG9pbnRzID0gbGluZS5wb2ludHM7XG4gICAgY29uc3QgeyBjb3VudCAsIHN0YXJ0ICwgaWxlbiAgfSA9IHBhdGhWYXJzKHBvaW50cywgc2VnbWVudCwgcGFyYW1zKTtcbiAgICBjb25zdCB7IG1vdmUgPXRydWUgLCByZXZlcnNlICB9ID0gcGFyYW1zIHx8IHt9O1xuICAgIGxldCBhdmdYID0gMDtcbiAgICBsZXQgY291bnRYID0gMDtcbiAgICBsZXQgaSwgcG9pbnQsIHByZXZYLCBtaW5ZLCBtYXhZLCBsYXN0WTtcbiAgICBjb25zdCBwb2ludEluZGV4ID0gKGluZGV4KT0+KHN0YXJ0ICsgKHJldmVyc2UgPyBpbGVuIC0gaW5kZXggOiBpbmRleCkpICUgY291bnQ7XG4gICAgY29uc3QgZHJhd1ggPSAoKT0+e1xuICAgICAgICBpZiAobWluWSAhPT0gbWF4WSkge1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhhdmdYLCBtYXhZKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oYXZnWCwgbWluWSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKGF2Z1gsIGxhc3RZKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgaWYgKG1vdmUpIHtcbiAgICAgICAgcG9pbnQgPSBwb2ludHNbcG9pbnRJbmRleCgwKV07XG4gICAgICAgIGN0eC5tb3ZlVG8ocG9pbnQueCwgcG9pbnQueSk7XG4gICAgfVxuICAgIGZvcihpID0gMDsgaSA8PSBpbGVuOyArK2kpe1xuICAgICAgICBwb2ludCA9IHBvaW50c1twb2ludEluZGV4KGkpXTtcbiAgICAgICAgaWYgKHBvaW50LnNraXApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHggPSBwb2ludC54O1xuICAgICAgICBjb25zdCB5ID0gcG9pbnQueTtcbiAgICAgICAgY29uc3QgdHJ1bmNYID0geCB8IDA7XG4gICAgICAgIGlmICh0cnVuY1ggPT09IHByZXZYKSB7XG4gICAgICAgICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgICAgICAgICBtaW5ZID0geTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgICAgICAgICBtYXhZID0geTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF2Z1ggPSAoY291bnRYICogYXZnWCArIHgpIC8gKytjb3VudFg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkcmF3WCgpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgIHByZXZYID0gdHJ1bmNYO1xuICAgICAgICAgICAgY291bnRYID0gMDtcbiAgICAgICAgICAgIG1pblkgPSBtYXhZID0geTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0WSA9IHk7XG4gICAgfVxuICAgIGRyYXdYKCk7XG59XG4gZnVuY3Rpb24gX2dldFNlZ21lbnRNZXRob2QobGluZSkge1xuICAgIGNvbnN0IG9wdHMgPSBsaW5lLm9wdGlvbnM7XG4gICAgY29uc3QgYm9yZGVyRGFzaCA9IG9wdHMuYm9yZGVyRGFzaCAmJiBvcHRzLmJvcmRlckRhc2gubGVuZ3RoO1xuICAgIGNvbnN0IHVzZUZhc3RQYXRoID0gIWxpbmUuX2RlY2ltYXRlZCAmJiAhbGluZS5fbG9vcCAmJiAhb3B0cy50ZW5zaW9uICYmIG9wdHMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSAhPT0gJ21vbm90b25lJyAmJiAhb3B0cy5zdGVwcGVkICYmICFib3JkZXJEYXNoO1xuICAgIHJldHVybiB1c2VGYXN0UGF0aCA/IGZhc3RQYXRoU2VnbWVudCA6IHBhdGhTZWdtZW50O1xufVxuIGZ1bmN0aW9uIF9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5zdGVwcGVkKSB7XG4gICAgICAgIHJldHVybiBfc3RlcHBlZEludGVycG9sYXRpb247XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnRlbnNpb24gfHwgb3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgICAgIHJldHVybiBfYmV6aWVySW50ZXJwb2xhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIF9wb2ludEluTGluZTtcbn1cbmZ1bmN0aW9uIHN0cm9rZVBhdGhXaXRoQ2FjaGUoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgICBsZXQgcGF0aCA9IGxpbmUuX3BhdGg7XG4gICAgaWYgKCFwYXRoKSB7XG4gICAgICAgIHBhdGggPSBsaW5lLl9wYXRoID0gbmV3IFBhdGgyRCgpO1xuICAgICAgICBpZiAobGluZS5wYXRoKHBhdGgsIHN0YXJ0LCBjb3VudCkpIHtcbiAgICAgICAgICAgIHBhdGguY2xvc2VQYXRoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0U3R5bGUoY3R4LCBsaW5lLm9wdGlvbnMpO1xuICAgIGN0eC5zdHJva2UocGF0aCk7XG59XG5mdW5jdGlvbiBzdHJva2VQYXRoRGlyZWN0KGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgeyBzZWdtZW50cyAsIG9wdGlvbnMgIH0gPSBsaW5lO1xuICAgIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZChsaW5lKTtcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpe1xuICAgICAgICBzZXRTdHlsZShjdHgsIG9wdGlvbnMsIHNlZ21lbnQuc3R5bGUpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGlmIChzZWdtZW50TWV0aG9kKGN0eCwgbGluZSwgc2VnbWVudCwge1xuICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IHN0YXJ0ICsgY291bnQgLSAxXG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbn1cbmNvbnN0IHVzZVBhdGgyRCA9IHR5cGVvZiBQYXRoMkQgPT09ICdmdW5jdGlvbic7XG5mdW5jdGlvbiBkcmF3KGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KSB7XG4gICAgaWYgKHVzZVBhdGgyRCAmJiAhbGluZS5vcHRpb25zLnNlZ21lbnQpIHtcbiAgICAgICAgc3Ryb2tlUGF0aFdpdGhDYWNoZShjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3Ryb2tlUGF0aERpcmVjdChjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCk7XG4gICAgfVxufVxuY2xhc3MgTGluZUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBzdGF0aWMgaWQgPSAnbGluZSc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBib3JkZXJDYXBTdHlsZTogJ2J1dHQnLFxuICAgICAgICBib3JkZXJEYXNoOiBbXSxcbiAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogMCxcbiAgICAgICAgYm9yZGVySm9pblN0eWxlOiAnbWl0ZXInLFxuICAgICAgICBib3JkZXJXaWR0aDogMyxcbiAgICAgICAgY2FwQmV6aWVyUG9pbnRzOiB0cnVlLFxuICAgICAgICBjdWJpY0ludGVycG9sYXRpb25Nb2RlOiAnZGVmYXVsdCcsXG4gICAgICAgIGZpbGw6IGZhbHNlLFxuICAgICAgICBzcGFuR2FwczogZmFsc2UsXG4gICAgICAgIHN0ZXBwZWQ6IGZhbHNlLFxuICAgICAgICB0ZW5zaW9uOiAwXG4gICAgfTtcbiBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbiAgICB9O1xuICAgIHN0YXRpYyBkZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IHRydWUsXG4gICAgICAgIF9pbmRleGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2JvcmRlckRhc2gnICYmIG5hbWUgIT09ICdmaWxsJ1xuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5hbmltYXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fY2hhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2xvb3AgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2Z1bGxMb29wID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wYXRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wb2ludHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NlZ21lbnRzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9kZWNpbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kYXRhc2V0SW5kZXggPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChjZmcpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVDb250cm9sUG9pbnRzKGNoYXJ0QXJlYSwgaW5kZXhBeGlzKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmICgob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykgJiYgIW9wdGlvbnMuc3RlcHBlZCAmJiAhdGhpcy5fcG9pbnRzVXBkYXRlZCkge1xuICAgICAgICAgICAgY29uc3QgbG9vcCA9IG9wdGlvbnMuc3BhbkdhcHMgPyB0aGlzLl9sb29wIDogdGhpcy5fZnVsbExvb3A7XG4gICAgICAgICAgICBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyh0aGlzLl9wb2ludHMsIG9wdGlvbnMsIGNoYXJ0QXJlYSwgbG9vcCwgaW5kZXhBeGlzKTtcbiAgICAgICAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldCBwb2ludHMocG9pbnRzKSB7XG4gICAgICAgIHRoaXMuX3BvaW50cyA9IHBvaW50cztcbiAgICAgICAgZGVsZXRlIHRoaXMuX3NlZ21lbnRzO1xuICAgICAgICBkZWxldGUgdGhpcy5fcGF0aDtcbiAgICAgICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBnZXQgcG9pbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRzO1xuICAgIH1cbiAgICBnZXQgc2VnbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWdtZW50cyB8fCAodGhpcy5fc2VnbWVudHMgPSBfY29tcHV0ZVNlZ21lbnRzKHRoaXMsIHRoaXMub3B0aW9ucy5zZWdtZW50KSk7XG4gICAgfVxuIGZpcnN0KCkge1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgICAgICByZXR1cm4gc2VnbWVudHMubGVuZ3RoICYmIHBvaW50c1tzZWdtZW50c1swXS5zdGFydF07XG4gICAgfVxuIGxhc3QoKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gc2VnbWVudHMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gY291bnQgJiYgcG9pbnRzW3NlZ21lbnRzW2NvdW50IC0gMV0uZW5kXTtcbiAgICB9XG4gaW50ZXJwb2xhdGUocG9pbnQsIHByb3BlcnR5KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9pbnRbcHJvcGVydHldO1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBfYm91bmRTZWdtZW50cyh0aGlzLCB7XG4gICAgICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgICAgIHN0YXJ0OiB2YWx1ZSxcbiAgICAgICAgICAgIGVuZDogdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGNvbnN0IF9pbnRlcnBvbGF0ZSA9IF9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kKG9wdGlvbnMpO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhcnQgLCBlbmQgIH0gPSBzZWdtZW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHAxID0gcG9pbnRzW3N0YXJ0XTtcbiAgICAgICAgICAgIGNvbnN0IHAyID0gcG9pbnRzW2VuZF07XG4gICAgICAgICAgICBpZiAocDEgPT09IHAyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocDEpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdCA9IE1hdGguYWJzKCh2YWx1ZSAtIHAxW3Byb3BlcnR5XSkgLyAocDJbcHJvcGVydHldIC0gcDFbcHJvcGVydHldKSk7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0ZWQgPSBfaW50ZXJwb2xhdGUocDEsIHAyLCB0LCBvcHRpb25zLnN0ZXBwZWQpO1xuICAgICAgICAgICAgaW50ZXJwb2xhdGVkW3Byb3BlcnR5XSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGludGVycG9sYXRlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDEgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgfVxuIHBhdGhTZWdtZW50KGN0eCwgc2VnbWVudCwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHNlZ21lbnRNZXRob2QoY3R4LCB0aGlzLCBzZWdtZW50LCBwYXJhbXMpO1xuICAgIH1cbiBwYXRoKGN0eCwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICAgICAgY29uc3Qgc2VnbWVudE1ldGhvZCA9IF9nZXRTZWdtZW50TWV0aG9kKHRoaXMpO1xuICAgICAgICBsZXQgbG9vcCA9IHRoaXMuX2xvb3A7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICAgICAgY291bnQgPSBjb3VudCB8fCB0aGlzLnBvaW50cy5sZW5ndGggLSBzdGFydDtcbiAgICAgICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKXtcbiAgICAgICAgICAgIGxvb3AgJj0gc2VnbWVudE1ldGhvZChjdHgsIHRoaXMsIHNlZ21lbnQsIHtcbiAgICAgICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgICAgICBlbmQ6IHN0YXJ0ICsgY291bnQgLSAxXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gISFsb29wO1xuICAgIH1cbiBkcmF3KGN0eCwgY2hhcnRBcmVhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyB8fCB7fTtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHMgfHwgW107XG4gICAgICAgIGlmIChwb2ludHMubGVuZ3RoICYmIG9wdGlvbnMuYm9yZGVyV2lkdGgpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBkcmF3KGN0eCwgdGhpcywgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX3BhdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGluUmFuZ2UkMShlbCwgcG9zLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGVsLm9wdGlvbnM7XG4gICAgY29uc3QgeyBbYXhpc106IHZhbHVlICB9ID0gZWwuZ2V0UHJvcHMoW1xuICAgICAgICBheGlzXG4gICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgcmV0dXJuIE1hdGguYWJzKHBvcyAtIHZhbHVlKSA8IG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy5oaXRSYWRpdXM7XG59XG5jbGFzcyBQb2ludEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBzdGF0aWMgaWQgPSAncG9pbnQnO1xuICAgIHBhcnNlZDtcbiAgICBza2lwO1xuICAgIHN0b3A7XG4gICAgLyoqXG4gICAqIEB0eXBlIHthbnl9XG4gICAqLyBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICBoaXRSYWRpdXM6IDEsXG4gICAgICAgIGhvdmVyQm9yZGVyV2lkdGg6IDEsXG4gICAgICAgIGhvdmVyUmFkaXVzOiA0LFxuICAgICAgICBwb2ludFN0eWxlOiAnY2lyY2xlJyxcbiAgICAgICAgcmFkaXVzOiAzLFxuICAgICAgICByb3RhdGlvbjogMFxuICAgIH07XG4gICAgLyoqXG4gICAqIEB0eXBlIHthbnl9XG4gICAqLyBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wYXJzZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2tpcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zdG9wID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoY2ZnKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IHggLCB5ICB9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdyhtb3VzZVggLSB4LCAyKSArIE1hdGgucG93KG1vdXNlWSAtIHksIDIpIDwgTWF0aC5wb3cob3B0aW9ucy5oaXRSYWRpdXMgKyBvcHRpb25zLnJhZGl1cywgMik7XG4gICAgfVxuICAgIGluWFJhbmdlKG1vdXNlWCwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSQxKHRoaXMsIG1vdXNlWCwgJ3gnLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgaW5ZUmFuZ2UobW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBpblJhbmdlJDEodGhpcywgbW91c2VZLCAneScsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgIH0gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5J1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5XG4gICAgICAgIH07XG4gICAgfVxuICAgIHNpemUob3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB0aGlzLm9wdGlvbnMgfHwge307XG4gICAgICAgIGxldCByYWRpdXMgPSBvcHRpb25zLnJhZGl1cyB8fCAwO1xuICAgICAgICByYWRpdXMgPSBNYXRoLm1heChyYWRpdXMsIHJhZGl1cyAmJiBvcHRpb25zLmhvdmVyUmFkaXVzIHx8IDApO1xuICAgICAgICBjb25zdCBib3JkZXJXaWR0aCA9IHJhZGl1cyAmJiBvcHRpb25zLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgICAgIHJldHVybiAocmFkaXVzICsgYm9yZGVyV2lkdGgpICogMjtcbiAgICB9XG4gICAgZHJhdyhjdHgsIGFyZWEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuc2tpcCB8fCBvcHRpb25zLnJhZGl1cyA8IDAuMSB8fCAhX2lzUG9pbnRJbkFyZWEodGhpcywgYXJlYSwgdGhpcy5zaXplKG9wdGlvbnMpIC8gMikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBkcmF3UG9pbnQoY3R4LCBvcHRpb25zLCB0aGlzLngsIHRoaXMueSk7XG4gICAgfVxuICAgIGdldFJhbmdlKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEZhbGxiYWNrcyBzaG91bGQgbmV2ZXIgYmUgaGl0IGluIHByYWN0aWNlXG4gICAgICAgIHJldHVybiBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMuaGl0UmFkaXVzO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0QmFyQm91bmRzKGJhciwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHsgeCAsIHkgLCBiYXNlICwgd2lkdGggLCBoZWlnaHQgIH0gPSAgYmFyLmdldFByb3BzKFtcbiAgICAgICAgJ3gnLFxuICAgICAgICAneScsXG4gICAgICAgICdiYXNlJyxcbiAgICAgICAgJ3dpZHRoJyxcbiAgICAgICAgJ2hlaWdodCdcbiAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBsZXQgbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBoYWxmO1xuICAgIGlmIChiYXIuaG9yaXpvbnRhbCkge1xuICAgICAgICBoYWxmID0gaGVpZ2h0IC8gMjtcbiAgICAgICAgbGVmdCA9IE1hdGgubWluKHgsIGJhc2UpO1xuICAgICAgICByaWdodCA9IE1hdGgubWF4KHgsIGJhc2UpO1xuICAgICAgICB0b3AgPSB5IC0gaGFsZjtcbiAgICAgICAgYm90dG9tID0geSArIGhhbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaGFsZiA9IHdpZHRoIC8gMjtcbiAgICAgICAgbGVmdCA9IHggLSBoYWxmO1xuICAgICAgICByaWdodCA9IHggKyBoYWxmO1xuICAgICAgICB0b3AgPSBNYXRoLm1pbih5LCBiYXNlKTtcbiAgICAgICAgYm90dG9tID0gTWF0aC5tYXgoeSwgYmFzZSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQsXG4gICAgICAgIHRvcCxcbiAgICAgICAgcmlnaHQsXG4gICAgICAgIGJvdHRvbVxuICAgIH07XG59XG5mdW5jdGlvbiBza2lwT3JMaW1pdChza2lwLCB2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gc2tpcCA/IDAgOiBfbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpO1xufVxuZnVuY3Rpb24gcGFyc2VCb3JkZXJXaWR0aChiYXIsIG1heFcsIG1heEgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGJhci5vcHRpb25zLmJvcmRlcldpZHRoO1xuICAgIGNvbnN0IHNraXAgPSBiYXIuYm9yZGVyU2tpcHBlZDtcbiAgICBjb25zdCBvID0gdG9UUkJMKHZhbHVlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0OiBza2lwT3JMaW1pdChza2lwLnRvcCwgby50b3AsIDAsIG1heEgpLFxuICAgICAgICByOiBza2lwT3JMaW1pdChza2lwLnJpZ2h0LCBvLnJpZ2h0LCAwLCBtYXhXKSxcbiAgICAgICAgYjogc2tpcE9yTGltaXQoc2tpcC5ib3R0b20sIG8uYm90dG9tLCAwLCBtYXhIKSxcbiAgICAgICAgbDogc2tpcE9yTGltaXQoc2tpcC5sZWZ0LCBvLmxlZnQsIDAsIG1heFcpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyUmFkaXVzKGJhciwgbWF4VywgbWF4SCkge1xuICAgIGNvbnN0IHsgZW5hYmxlQm9yZGVyUmFkaXVzICB9ID0gYmFyLmdldFByb3BzKFtcbiAgICAgICAgJ2VuYWJsZUJvcmRlclJhZGl1cydcbiAgICBdKTtcbiAgICBjb25zdCB2YWx1ZSA9IGJhci5vcHRpb25zLmJvcmRlclJhZGl1cztcbiAgICBjb25zdCBvID0gdG9UUkJMQ29ybmVycyh2YWx1ZSk7XG4gICAgY29uc3QgbWF4UiA9IE1hdGgubWluKG1heFcsIG1heEgpO1xuICAgIGNvbnN0IHNraXAgPSBiYXIuYm9yZGVyU2tpcHBlZDtcbiAgICBjb25zdCBlbmFibGVCb3JkZXIgPSBlbmFibGVCb3JkZXJSYWRpdXMgfHwgaXNPYmplY3QodmFsdWUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvcExlZnQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC50b3AgfHwgc2tpcC5sZWZ0LCBvLnRvcExlZnQsIDAsIG1heFIpLFxuICAgICAgICB0b3BSaWdodDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLnRvcCB8fCBza2lwLnJpZ2h0LCBvLnRvcFJpZ2h0LCAwLCBtYXhSKSxcbiAgICAgICAgYm90dG9tTGVmdDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLmJvdHRvbSB8fCBza2lwLmxlZnQsIG8uYm90dG9tTGVmdCwgMCwgbWF4UiksXG4gICAgICAgIGJvdHRvbVJpZ2h0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAuYm90dG9tIHx8IHNraXAucmlnaHQsIG8uYm90dG9tUmlnaHQsIDAsIG1heFIpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGJvdW5kaW5nUmVjdHMoYmFyKSB7XG4gICAgY29uc3QgYm91bmRzID0gZ2V0QmFyQm91bmRzKGJhcik7XG4gICAgY29uc3Qgd2lkdGggPSBib3VuZHMucmlnaHQgLSBib3VuZHMubGVmdDtcbiAgICBjb25zdCBoZWlnaHQgPSBib3VuZHMuYm90dG9tIC0gYm91bmRzLnRvcDtcbiAgICBjb25zdCBib3JkZXIgPSBwYXJzZUJvcmRlcldpZHRoKGJhciwgd2lkdGggLyAyLCBoZWlnaHQgLyAyKTtcbiAgICBjb25zdCByYWRpdXMgPSBwYXJzZUJvcmRlclJhZGl1cyhiYXIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb3V0ZXI6IHtcbiAgICAgICAgICAgIHg6IGJvdW5kcy5sZWZ0LFxuICAgICAgICAgICAgeTogYm91bmRzLnRvcCxcbiAgICAgICAgICAgIHc6IHdpZHRoLFxuICAgICAgICAgICAgaDogaGVpZ2h0LFxuICAgICAgICAgICAgcmFkaXVzXG4gICAgICAgIH0sXG4gICAgICAgIGlubmVyOiB7XG4gICAgICAgICAgICB4OiBib3VuZHMubGVmdCArIGJvcmRlci5sLFxuICAgICAgICAgICAgeTogYm91bmRzLnRvcCArIGJvcmRlci50LFxuICAgICAgICAgICAgdzogd2lkdGggLSBib3JkZXIubCAtIGJvcmRlci5yLFxuICAgICAgICAgICAgaDogaGVpZ2h0IC0gYm9yZGVyLnQgLSBib3JkZXIuYixcbiAgICAgICAgICAgIHJhZGl1czoge1xuICAgICAgICAgICAgICAgIHRvcExlZnQ6IE1hdGgubWF4KDAsIHJhZGl1cy50b3BMZWZ0IC0gTWF0aC5tYXgoYm9yZGVyLnQsIGJvcmRlci5sKSksXG4gICAgICAgICAgICAgICAgdG9wUmlnaHQ6IE1hdGgubWF4KDAsIHJhZGl1cy50b3BSaWdodCAtIE1hdGgubWF4KGJvcmRlci50LCBib3JkZXIucikpLFxuICAgICAgICAgICAgICAgIGJvdHRvbUxlZnQ6IE1hdGgubWF4KDAsIHJhZGl1cy5ib3R0b21MZWZ0IC0gTWF0aC5tYXgoYm9yZGVyLmIsIGJvcmRlci5sKSksXG4gICAgICAgICAgICAgICAgYm90dG9tUmlnaHQ6IE1hdGgubWF4KDAsIHJhZGl1cy5ib3R0b21SaWdodCAtIE1hdGgubWF4KGJvcmRlci5iLCBib3JkZXIucikpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gaW5SYW5nZShiYXIsIHgsIHksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCBza2lwWCA9IHggPT09IG51bGw7XG4gICAgY29uc3Qgc2tpcFkgPSB5ID09PSBudWxsO1xuICAgIGNvbnN0IHNraXBCb3RoID0gc2tpcFggJiYgc2tpcFk7XG4gICAgY29uc3QgYm91bmRzID0gYmFyICYmICFza2lwQm90aCAmJiBnZXRCYXJCb3VuZHMoYmFyLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICByZXR1cm4gYm91bmRzICYmIChza2lwWCB8fCBfaXNCZXR3ZWVuKHgsIGJvdW5kcy5sZWZ0LCBib3VuZHMucmlnaHQpKSAmJiAoc2tpcFkgfHwgX2lzQmV0d2Vlbih5LCBib3VuZHMudG9wLCBib3VuZHMuYm90dG9tKSk7XG59XG5mdW5jdGlvbiBoYXNSYWRpdXMocmFkaXVzKSB7XG4gICAgcmV0dXJuIHJhZGl1cy50b3BMZWZ0IHx8IHJhZGl1cy50b3BSaWdodCB8fCByYWRpdXMuYm90dG9tTGVmdCB8fCByYWRpdXMuYm90dG9tUmlnaHQ7XG59XG4gZnVuY3Rpb24gYWRkTm9ybWFsUmVjdFBhdGgoY3R4LCByZWN0KSB7XG4gICAgY3R4LnJlY3QocmVjdC54LCByZWN0LnksIHJlY3QudywgcmVjdC5oKTtcbn1cbmZ1bmN0aW9uIGluZmxhdGVSZWN0KHJlY3QsIGFtb3VudCwgcmVmUmVjdCA9IHt9KSB7XG4gICAgY29uc3QgeCA9IHJlY3QueCAhPT0gcmVmUmVjdC54ID8gLWFtb3VudCA6IDA7XG4gICAgY29uc3QgeSA9IHJlY3QueSAhPT0gcmVmUmVjdC55ID8gLWFtb3VudCA6IDA7XG4gICAgY29uc3QgdyA9IChyZWN0LnggKyByZWN0LncgIT09IHJlZlJlY3QueCArIHJlZlJlY3QudyA/IGFtb3VudCA6IDApIC0geDtcbiAgICBjb25zdCBoID0gKHJlY3QueSArIHJlY3QuaCAhPT0gcmVmUmVjdC55ICsgcmVmUmVjdC5oID8gYW1vdW50IDogMCkgLSB5O1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHJlY3QueCArIHgsXG4gICAgICAgIHk6IHJlY3QueSArIHksXG4gICAgICAgIHc6IHJlY3QudyArIHcsXG4gICAgICAgIGg6IHJlY3QuaCArIGgsXG4gICAgICAgIHJhZGl1czogcmVjdC5yYWRpdXNcbiAgICB9O1xufVxuY2xhc3MgQmFyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICAgIHN0YXRpYyBpZCA9ICdiYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgYm9yZGVyU2tpcHBlZDogJ3N0YXJ0JyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgICAgaW5mbGF0ZUFtb3VudDogJ2F1dG8nLFxuICAgICAgICBwb2ludFN0eWxlOiB1bmRlZmluZWRcbiAgICB9O1xuIHN0YXRpYyBkZWZhdWx0Um91dGVzID0ge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICAgICAgICBib3JkZXJDb2xvcjogJ2JvcmRlckNvbG9yJ1xuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmhvcml6b250YWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYmFzZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaW5mbGF0ZUFtb3VudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGNmZykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXcoY3R4KSB7XG4gICAgICAgIGNvbnN0IHsgaW5mbGF0ZUFtb3VudCAsIG9wdGlvbnM6IHsgYm9yZGVyQ29sb3IgLCBiYWNrZ3JvdW5kQ29sb3IgIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGlubmVyICwgb3V0ZXIgIH0gPSBib3VuZGluZ1JlY3RzKHRoaXMpO1xuICAgICAgICBjb25zdCBhZGRSZWN0UGF0aCA9IGhhc1JhZGl1cyhvdXRlci5yYWRpdXMpID8gYWRkUm91bmRlZFJlY3RQYXRoIDogYWRkTm9ybWFsUmVjdFBhdGg7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGlmIChvdXRlci53ICE9PSBpbm5lci53IHx8IG91dGVyLmggIT09IGlubmVyLmgpIHtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3Qob3V0ZXIsIGluZmxhdGVBbW91bnQsIGlubmVyKSk7XG4gICAgICAgICAgICBjdHguY2xpcCgpO1xuICAgICAgICAgICAgYWRkUmVjdFBhdGgoY3R4LCBpbmZsYXRlUmVjdChpbm5lciwgLWluZmxhdGVBbW91bnQsIG91dGVyKSk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYm9yZGVyQ29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbCgnZXZlbm9kZCcpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgYWRkUmVjdFBhdGgoY3R4LCBpbmZsYXRlUmVjdChpbm5lciwgaW5mbGF0ZUFtb3VudCkpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgICBpblJhbmdlKG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgaW5YUmFuZ2UobW91c2VYLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG1vdXNlWCwgbnVsbCwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIGluWVJhbmdlKG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBudWxsLCBtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgLCBiYXNlICwgaG9yaXpvbnRhbCAgfSA9ICB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICdiYXNlJyxcbiAgICAgICAgICAgICdob3Jpem9udGFsJ1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGhvcml6b250YWwgPyAoeCArIGJhc2UpIC8gMiA6IHgsXG4gICAgICAgICAgICB5OiBob3Jpem9udGFsID8geSA6ICh5ICsgYmFzZSkgLyAyXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldFJhbmdlKGF4aXMpIHtcbiAgICAgICAgcmV0dXJuIGF4aXMgPT09ICd4JyA/IHRoaXMud2lkdGggLyAyIDogdGhpcy5oZWlnaHQgLyAyO1xuICAgIH1cbn1cblxudmFyIGVsZW1lbnRzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQXJjRWxlbWVudDogQXJjRWxlbWVudCxcbkJhckVsZW1lbnQ6IEJhckVsZW1lbnQsXG5MaW5lRWxlbWVudDogTGluZUVsZW1lbnQsXG5Qb2ludEVsZW1lbnQ6IFBvaW50RWxlbWVudFxufSk7XG5cbmNvbnN0IEJPUkRFUl9DT0xPUlMgPSBbXG4gICAgJ3JnYig1NCwgMTYyLCAyMzUpJyxcbiAgICAncmdiKDI1NSwgOTksIDEzMiknLFxuICAgICdyZ2IoMjU1LCAxNTksIDY0KScsXG4gICAgJ3JnYigyNTUsIDIwNSwgODYpJyxcbiAgICAncmdiKDc1LCAxOTIsIDE5MiknLFxuICAgICdyZ2IoMTUzLCAxMDIsIDI1NSknLFxuICAgICdyZ2IoMjAxLCAyMDMsIDIwNyknIC8vIGdyZXlcbl07XG4vLyBCb3JkZXIgY29sb3JzIHdpdGggNTAlIHRyYW5zcGFyZW5jeVxuY29uc3QgQkFDS0dST1VORF9DT0xPUlMgPSAvKiAjX19QVVJFX18gKi8gQk9SREVSX0NPTE9SUy5tYXAoKGNvbG9yKT0+Y29sb3IucmVwbGFjZSgncmdiKCcsICdyZ2JhKCcpLnJlcGxhY2UoJyknLCAnLCAwLjUpJykpO1xuZnVuY3Rpb24gZ2V0Qm9yZGVyQ29sb3IoaSkge1xuICAgIHJldHVybiBCT1JERVJfQ09MT1JTW2kgJSBCT1JERVJfQ09MT1JTLmxlbmd0aF07XG59XG5mdW5jdGlvbiBnZXRCYWNrZ3JvdW5kQ29sb3IoaSkge1xuICAgIHJldHVybiBCQUNLR1JPVU5EX0NPTE9SU1tpICUgQkFDS0dST1VORF9DT0xPUlMubGVuZ3RoXTtcbn1cbmZ1bmN0aW9uIGNvbG9yaXplRGVmYXVsdERhdGFzZXQoZGF0YXNldCwgaSkge1xuICAgIGRhdGFzZXQuYm9yZGVyQ29sb3IgPSBnZXRCb3JkZXJDb2xvcihpKTtcbiAgICBkYXRhc2V0LmJhY2tncm91bmRDb2xvciA9IGdldEJhY2tncm91bmRDb2xvcihpKTtcbiAgICByZXR1cm4gKytpO1xufVxuZnVuY3Rpb24gY29sb3JpemVEb3VnaG51dERhdGFzZXQoZGF0YXNldCwgaSkge1xuICAgIGRhdGFzZXQuYmFja2dyb3VuZENvbG9yID0gZGF0YXNldC5kYXRhLm1hcCgoKT0+Z2V0Qm9yZGVyQ29sb3IoaSsrKSk7XG4gICAgcmV0dXJuIGk7XG59XG5mdW5jdGlvbiBjb2xvcml6ZVBvbGFyQXJlYURhdGFzZXQoZGF0YXNldCwgaSkge1xuICAgIGRhdGFzZXQuYmFja2dyb3VuZENvbG9yID0gZGF0YXNldC5kYXRhLm1hcCgoKT0+Z2V0QmFja2dyb3VuZENvbG9yKGkrKykpO1xuICAgIHJldHVybiBpO1xufVxuZnVuY3Rpb24gZ2V0Q29sb3JpemVyKGNoYXJ0KSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIHJldHVybiAoZGF0YXNldCwgZGF0YXNldEluZGV4KT0+e1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5jb250cm9sbGVyO1xuICAgICAgICBpZiAoY29udHJvbGxlciBpbnN0YW5jZW9mIERvdWdobnV0Q29udHJvbGxlcikge1xuICAgICAgICAgICAgaSA9IGNvbG9yaXplRG91Z2hudXREYXRhc2V0KGRhdGFzZXQsIGkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZXIgaW5zdGFuY2VvZiBQb2xhckFyZWFDb250cm9sbGVyKSB7XG4gICAgICAgICAgICBpID0gY29sb3JpemVQb2xhckFyZWFEYXRhc2V0KGRhdGFzZXQsIGkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGkgPSBjb2xvcml6ZURlZmF1bHREYXRhc2V0KGRhdGFzZXQsIGkpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbnMoZGVzY3JpcHRvcnMpIHtcbiAgICBsZXQgaztcbiAgICBmb3IoayBpbiBkZXNjcmlwdG9ycyl7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yc1trXS5ib3JkZXJDb2xvciB8fCBkZXNjcmlwdG9yc1trXS5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbihkZXNjcmlwdG9yKSB7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgKGRlc2NyaXB0b3IuYm9yZGVyQ29sb3IgfHwgZGVzY3JpcHRvci5iYWNrZ3JvdW5kQ29sb3IpO1xufVxudmFyIHBsdWdpbl9jb2xvcnMgPSB7XG4gICAgaWQ6ICdjb2xvcnMnLFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGZvcmNlT3ZlcnJpZGU6IGZhbHNlXG4gICAgfSxcbiAgICBiZWZvcmVMYXlvdXQgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMuZW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgZGF0YTogeyBkYXRhc2V0cyAgfSAsIG9wdGlvbnM6IGNoYXJ0T3B0aW9ucyAgfSA9IGNoYXJ0LmNvbmZpZztcbiAgICAgICAgY29uc3QgeyBlbGVtZW50cyAgfSA9IGNoYXJ0T3B0aW9ucztcbiAgICAgICAgaWYgKCFvcHRpb25zLmZvcmNlT3ZlcnJpZGUgJiYgKGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbnMoZGF0YXNldHMpIHx8IGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbihjaGFydE9wdGlvbnMpIHx8IGVsZW1lbnRzICYmIGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbnMoZWxlbWVudHMpKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbG9yaXplciA9IGdldENvbG9yaXplcihjaGFydCk7XG4gICAgICAgIGRhdGFzZXRzLmZvckVhY2goY29sb3JpemVyKTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBsdHRiRGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoLCBvcHRpb25zKSB7XG4gY29uc3Qgc2FtcGxlcyA9IG9wdGlvbnMuc2FtcGxlcyB8fCBhdmFpbGFibGVXaWR0aDtcbiAgICBpZiAoc2FtcGxlcyA+PSBjb3VudCkge1xuICAgICAgICByZXR1cm4gZGF0YS5zbGljZShzdGFydCwgc3RhcnQgKyBjb3VudCk7XG4gICAgfVxuICAgIGNvbnN0IGRlY2ltYXRlZCA9IFtdO1xuICAgIGNvbnN0IGJ1Y2tldFdpZHRoID0gKGNvdW50IC0gMikgLyAoc2FtcGxlcyAtIDIpO1xuICAgIGxldCBzYW1wbGVkSW5kZXggPSAwO1xuICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnQgKyBjb3VudCAtIDE7XG4gICAgbGV0IGEgPSBzdGFydDtcbiAgICBsZXQgaSwgbWF4QXJlYVBvaW50LCBtYXhBcmVhLCBhcmVhLCBuZXh0QTtcbiAgICBkZWNpbWF0ZWRbc2FtcGxlZEluZGV4KytdID0gZGF0YVthXTtcbiAgICBmb3IoaSA9IDA7IGkgPCBzYW1wbGVzIC0gMjsgaSsrKXtcbiAgICAgICAgbGV0IGF2Z1ggPSAwO1xuICAgICAgICBsZXQgYXZnWSA9IDA7XG4gICAgICAgIGxldCBqO1xuICAgICAgICBjb25zdCBhdmdSYW5nZVN0YXJ0ID0gTWF0aC5mbG9vcigoaSArIDEpICogYnVja2V0V2lkdGgpICsgMSArIHN0YXJ0O1xuICAgICAgICBjb25zdCBhdmdSYW5nZUVuZCA9IE1hdGgubWluKE1hdGguZmxvb3IoKGkgKyAyKSAqIGJ1Y2tldFdpZHRoKSArIDEsIGNvdW50KSArIHN0YXJ0O1xuICAgICAgICBjb25zdCBhdmdSYW5nZUxlbmd0aCA9IGF2Z1JhbmdlRW5kIC0gYXZnUmFuZ2VTdGFydDtcbiAgICAgICAgZm9yKGogPSBhdmdSYW5nZVN0YXJ0OyBqIDwgYXZnUmFuZ2VFbmQ7IGorKyl7XG4gICAgICAgICAgICBhdmdYICs9IGRhdGFbal0ueDtcbiAgICAgICAgICAgIGF2Z1kgKz0gZGF0YVtqXS55O1xuICAgICAgICB9XG4gICAgICAgIGF2Z1ggLz0gYXZnUmFuZ2VMZW5ndGg7XG4gICAgICAgIGF2Z1kgLz0gYXZnUmFuZ2VMZW5ndGg7XG4gICAgICAgIGNvbnN0IHJhbmdlT2ZmcyA9IE1hdGguZmxvb3IoaSAqIGJ1Y2tldFdpZHRoKSArIDEgKyBzdGFydDtcbiAgICAgICAgY29uc3QgcmFuZ2VUbyA9IE1hdGgubWluKE1hdGguZmxvb3IoKGkgKyAxKSAqIGJ1Y2tldFdpZHRoKSArIDEsIGNvdW50KSArIHN0YXJ0O1xuICAgICAgICBjb25zdCB7IHg6IHBvaW50QXggLCB5OiBwb2ludEF5ICB9ID0gZGF0YVthXTtcbiAgICAgICAgbWF4QXJlYSA9IGFyZWEgPSAtMTtcbiAgICAgICAgZm9yKGogPSByYW5nZU9mZnM7IGogPCByYW5nZVRvOyBqKyspe1xuICAgICAgICAgICAgYXJlYSA9IDAuNSAqIE1hdGguYWJzKChwb2ludEF4IC0gYXZnWCkgKiAoZGF0YVtqXS55IC0gcG9pbnRBeSkgLSAocG9pbnRBeCAtIGRhdGFbal0ueCkgKiAoYXZnWSAtIHBvaW50QXkpKTtcbiAgICAgICAgICAgIGlmIChhcmVhID4gbWF4QXJlYSkge1xuICAgICAgICAgICAgICAgIG1heEFyZWEgPSBhcmVhO1xuICAgICAgICAgICAgICAgIG1heEFyZWFQb2ludCA9IGRhdGFbal07XG4gICAgICAgICAgICAgICAgbmV4dEEgPSBqO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlY2ltYXRlZFtzYW1wbGVkSW5kZXgrK10gPSBtYXhBcmVhUG9pbnQ7XG4gICAgICAgIGEgPSBuZXh0QTtcbiAgICB9XG4gICAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IGRhdGFbZW5kSW5kZXhdO1xuICAgIHJldHVybiBkZWNpbWF0ZWQ7XG59XG5mdW5jdGlvbiBtaW5NYXhEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgpIHtcbiAgICBsZXQgYXZnWCA9IDA7XG4gICAgbGV0IGNvdW50WCA9IDA7XG4gICAgbGV0IGksIHBvaW50LCB4LCB5LCBwcmV2WCwgbWluSW5kZXgsIG1heEluZGV4LCBzdGFydEluZGV4LCBtaW5ZLCBtYXhZO1xuICAgIGNvbnN0IGRlY2ltYXRlZCA9IFtdO1xuICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnQgKyBjb3VudCAtIDE7XG4gICAgY29uc3QgeE1pbiA9IGRhdGFbc3RhcnRdLng7XG4gICAgY29uc3QgeE1heCA9IGRhdGFbZW5kSW5kZXhdLng7XG4gICAgY29uc3QgZHggPSB4TWF4IC0geE1pbjtcbiAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKXtcbiAgICAgICAgcG9pbnQgPSBkYXRhW2ldO1xuICAgICAgICB4ID0gKHBvaW50LnggLSB4TWluKSAvIGR4ICogYXZhaWxhYmxlV2lkdGg7XG4gICAgICAgIHkgPSBwb2ludC55O1xuICAgICAgICBjb25zdCB0cnVuY1ggPSB4IHwgMDtcbiAgICAgICAgaWYgKHRydW5jWCA9PT0gcHJldlgpIHtcbiAgICAgICAgICAgIGlmICh5IDwgbWluWSkge1xuICAgICAgICAgICAgICAgIG1pblkgPSB5O1xuICAgICAgICAgICAgICAgIG1pbkluZGV4ID0gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgICAgICAgICBtYXhZID0geTtcbiAgICAgICAgICAgICAgICBtYXhJbmRleCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdmdYID0gKGNvdW50WCAqIGF2Z1ggKyBwb2ludC54KSAvICsrY291bnRYO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gaSAtIDE7XG4gICAgICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYobWluSW5kZXgpICYmICFpc051bGxPclVuZGVmKG1heEluZGV4KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVybWVkaWF0ZUluZGV4MSA9IE1hdGgubWluKG1pbkluZGV4LCBtYXhJbmRleCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJtZWRpYXRlSW5kZXgyID0gTWF0aC5tYXgobWluSW5kZXgsIG1heEluZGV4KTtcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJtZWRpYXRlSW5kZXgxICE9PSBzdGFydEluZGV4ICYmIGludGVybWVkaWF0ZUluZGV4MSAhPT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRhdGFbaW50ZXJtZWRpYXRlSW5kZXgxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGF2Z1hcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbnRlcm1lZGlhdGVJbmRleDIgIT09IHN0YXJ0SW5kZXggJiYgaW50ZXJtZWRpYXRlSW5kZXgyICE9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVjaW1hdGVkLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZGF0YVtpbnRlcm1lZGlhdGVJbmRleDJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogYXZnWFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSA+IDAgJiYgbGFzdEluZGV4ICE9PSBzdGFydEluZGV4KSB7XG4gICAgICAgICAgICAgICAgZGVjaW1hdGVkLnB1c2goZGF0YVtsYXN0SW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHBvaW50KTtcbiAgICAgICAgICAgIHByZXZYID0gdHJ1bmNYO1xuICAgICAgICAgICAgY291bnRYID0gMDtcbiAgICAgICAgICAgIG1pblkgPSBtYXhZID0geTtcbiAgICAgICAgICAgIG1pbkluZGV4ID0gbWF4SW5kZXggPSBzdGFydEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVjaW1hdGVkO1xufVxuZnVuY3Rpb24gY2xlYW5EZWNpbWF0ZWREYXRhc2V0KGRhdGFzZXQpIHtcbiAgICBpZiAoZGF0YXNldC5fZGVjaW1hdGVkKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBkYXRhc2V0Ll9kYXRhO1xuICAgICAgICBkZWxldGUgZGF0YXNldC5fZGVjaW1hdGVkO1xuICAgICAgICBkZWxldGUgZGF0YXNldC5fZGF0YTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGFzZXQsICdkYXRhJywge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGRhdGFcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KSB7XG4gICAgY2hhcnQuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKChkYXRhc2V0KT0+e1xuICAgICAgICBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzU2ltcGxpZmllZChtZXRhLCBwb2ludHMpIHtcbiAgICBjb25zdCBwb2ludENvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBjb3VudDtcbiAgICBjb25zdCB7IGlTY2FsZSAgfSA9IG1ldGE7XG4gICAgY29uc3QgeyBtaW4gLCBtYXggLCBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IGlTY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICAgICAgc3RhcnQgPSBfbGltaXRWYWx1ZShfbG9va3VwQnlLZXkocG9pbnRzLCBpU2NhbGUuYXhpcywgbWluKS5sbywgMCwgcG9pbnRDb3VudCAtIDEpO1xuICAgIH1cbiAgICBpZiAobWF4RGVmaW5lZCkge1xuICAgICAgICBjb3VudCA9IF9saW1pdFZhbHVlKF9sb29rdXBCeUtleShwb2ludHMsIGlTY2FsZS5heGlzLCBtYXgpLmhpICsgMSwgc3RhcnQsIHBvaW50Q291bnQpIC0gc3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY291bnQgPSBwb2ludENvdW50IC0gc3RhcnQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBjb3VudFxuICAgIH07XG59XG52YXIgcGx1Z2luX2RlY2ltYXRpb24gPSB7XG4gICAgaWQ6ICdkZWNpbWF0aW9uJyxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBhbGdvcml0aG06ICdtaW4tbWF4JyxcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICB9LFxuICAgIGJlZm9yZUVsZW1lbnRzVXBkYXRlOiAoY2hhcnQsIGFyZ3MsIG9wdGlvbnMpPT57XG4gICAgICAgIGlmICghb3B0aW9ucy5lbmFibGVkKSB7XG4gICAgICAgICAgICBjbGVhbkRlY2ltYXRlZERhdGEoY2hhcnQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gY2hhcnQud2lkdGg7XG4gICAgICAgIGNoYXJ0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCwgZGF0YXNldEluZGV4KT0+e1xuICAgICAgICAgICAgY29uc3QgeyBfZGF0YSAsIGluZGV4QXhpcyAgfSA9IGRhdGFzZXQ7XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBfZGF0YSB8fCBkYXRhc2V0LmRhdGE7XG4gICAgICAgICAgICBpZiAocmVzb2x2ZShbXG4gICAgICAgICAgICAgICAgaW5kZXhBeGlzLFxuICAgICAgICAgICAgICAgIGNoYXJ0Lm9wdGlvbnMuaW5kZXhBeGlzXG4gICAgICAgICAgICBdKSA9PT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFtZXRhLmNvbnRyb2xsZXIuc3VwcG9ydHNEZWNpbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeEF4aXMgPSBjaGFydC5zY2FsZXNbbWV0YS54QXhpc0lEXTtcbiAgICAgICAgICAgIGlmICh4QXhpcy50eXBlICE9PSAnbGluZWFyJyAmJiB4QXhpcy50eXBlICE9PSAndGltZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hhcnQub3B0aW9ucy5wYXJzaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHsgc3RhcnQgLCBjb3VudCAgfSA9IGdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHNTaW1wbGlmaWVkKG1ldGEsIGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgdGhyZXNob2xkID0gb3B0aW9ucy50aHJlc2hvbGQgfHwgNCAqIGF2YWlsYWJsZVdpZHRoO1xuICAgICAgICAgICAgaWYgKGNvdW50IDw9IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgIGNsZWFuRGVjaW1hdGVkRGF0YXNldChkYXRhc2V0KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZihfZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0Ll9kYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZGF0YXNldC5kYXRhO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhc2V0LCAnZGF0YScsIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlY2ltYXRlZDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kYXRhID0gZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRlY2ltYXRlZDtcbiAgICAgICAgICAgIHN3aXRjaChvcHRpb25zLmFsZ29yaXRobSl7XG4gICAgICAgICAgICAgICAgY2FzZSAnbHR0Yic6XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYXRlZCA9IGx0dGJEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtaW4tbWF4JzpcbiAgICAgICAgICAgICAgICAgICAgZGVjaW1hdGVkID0gbWluTWF4RGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkZWNpbWF0aW9uIGFsZ29yaXRobSAnJHtvcHRpb25zLmFsZ29yaXRobX0nYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhc2V0Ll9kZWNpbWF0ZWQgPSBkZWNpbWF0ZWQ7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVzdHJveSAoY2hhcnQpIHtcbiAgICAgICAgY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBfc2VnbWVudHMobGluZSwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCB0cG9pbnRzID0gdGFyZ2V0LnBvaW50cztcbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgIGxldCB7IHN0YXJ0ICwgZW5kICB9ID0gc2VnbWVudDtcbiAgICAgICAgZW5kID0gX2ZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIHBvaW50cyk7XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IF9nZXRCb3VuZHMocHJvcGVydHksIHBvaW50c1tzdGFydF0sIHBvaW50c1tlbmRdLCBzZWdtZW50Lmxvb3ApO1xuICAgICAgICBpZiAoIXRhcmdldC5zZWdtZW50cykge1xuICAgICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgc291cmNlOiBzZWdtZW50LFxuICAgICAgICAgICAgICAgIHRhcmdldDogYm91bmRzLFxuICAgICAgICAgICAgICAgIHN0YXJ0OiBwb2ludHNbc3RhcnRdLFxuICAgICAgICAgICAgICAgIGVuZDogcG9pbnRzW2VuZF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0U2VnbWVudHMgPSBfYm91bmRTZWdtZW50cyh0YXJnZXQsIGJvdW5kcyk7XG4gICAgICAgIGZvciAoY29uc3QgdGd0IG9mIHRhcmdldFNlZ21lbnRzKXtcbiAgICAgICAgICAgIGNvbnN0IHN1YkJvdW5kcyA9IF9nZXRCb3VuZHMocHJvcGVydHksIHRwb2ludHNbdGd0LnN0YXJ0XSwgdHBvaW50c1t0Z3QuZW5kXSwgdGd0Lmxvb3ApO1xuICAgICAgICAgICAgY29uc3QgZmlsbFNvdXJjZXMgPSBfYm91bmRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgc3ViQm91bmRzKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmlsbFNvdXJjZSBvZiBmaWxsU291cmNlcyl7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogZmlsbFNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0Z3QsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBbcHJvcGVydHldOiBfZ2V0RWRnZShib3VuZHMsIHN1YkJvdW5kcywgJ3N0YXJ0JywgTWF0aC5tYXgpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVuZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3Byb3BlcnR5XTogX2dldEVkZ2UoYm91bmRzLCBzdWJCb3VuZHMsICdlbmQnLCBNYXRoLm1pbilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbn1cbmZ1bmN0aW9uIF9nZXRCb3VuZHMocHJvcGVydHksIGZpcnN0LCBsYXN0LCBsb29wKSB7XG4gICAgaWYgKGxvb3ApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgc3RhcnQgPSBmaXJzdFtwcm9wZXJ0eV07XG4gICAgbGV0IGVuZCA9IGxhc3RbcHJvcGVydHldO1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ2FuZ2xlJykge1xuICAgICAgICBzdGFydCA9IF9ub3JtYWxpemVBbmdsZShzdGFydCk7XG4gICAgICAgIGVuZCA9IF9ub3JtYWxpemVBbmdsZShlbmQpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZFxuICAgIH07XG59XG5mdW5jdGlvbiBfcG9pbnRzRnJvbVNlZ21lbnRzKGJvdW5kYXJ5LCBsaW5lKSB7XG4gICAgY29uc3QgeyB4ID1udWxsICwgeSA9bnVsbCAgfSA9IGJvdW5kYXJ5IHx8IHt9O1xuICAgIGNvbnN0IGxpbmVQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcbiAgICBsaW5lLnNlZ21lbnRzLmZvckVhY2goKHsgc3RhcnQgLCBlbmQgIH0pPT57XG4gICAgICAgIGVuZCA9IF9maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBsaW5lUG9pbnRzKTtcbiAgICAgICAgY29uc3QgZmlyc3QgPSBsaW5lUG9pbnRzW3N0YXJ0XTtcbiAgICAgICAgY29uc3QgbGFzdCA9IGxpbmVQb2ludHNbZW5kXTtcbiAgICAgICAgaWYgKHkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB4OiBmaXJzdC54LFxuICAgICAgICAgICAgICAgIHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHg6IGxhc3QueCxcbiAgICAgICAgICAgICAgICB5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICB5OiBmaXJzdC55XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgIHk6IGxhc3QueVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcG9pbnRzO1xufVxuZnVuY3Rpb24gX2ZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIHBvaW50cykge1xuICAgIGZvcig7IGVuZCA+IHN0YXJ0OyBlbmQtLSl7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2VuZF07XG4gICAgICAgIGlmICghaXNOYU4ocG9pbnQueCkgJiYgIWlzTmFOKHBvaW50LnkpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5kO1xufVxuZnVuY3Rpb24gX2dldEVkZ2UoYSwgYiwgcHJvcCwgZm4pIHtcbiAgICBpZiAoYSAmJiBiKSB7XG4gICAgICAgIHJldHVybiBmbihhW3Byb3BdLCBiW3Byb3BdKTtcbiAgICB9XG4gICAgcmV0dXJuIGEgPyBhW3Byb3BdIDogYiA/IGJbcHJvcF0gOiAwO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlQm91bmRhcnlMaW5lKGJvdW5kYXJ5LCBsaW5lKSB7XG4gICAgbGV0IHBvaW50cyA9IFtdO1xuICAgIGxldCBfbG9vcCA9IGZhbHNlO1xuICAgIGlmIChpc0FycmF5KGJvdW5kYXJ5KSkge1xuICAgICAgICBfbG9vcCA9IHRydWU7XG4gICAgICAgIHBvaW50cyA9IGJvdW5kYXJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBvaW50cyA9IF9wb2ludHNGcm9tU2VnbWVudHMoYm91bmRhcnksIGxpbmUpO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA/IG5ldyBMaW5lRWxlbWVudCh7XG4gICAgICAgIHBvaW50cyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgdGVuc2lvbjogMFxuICAgICAgICB9LFxuICAgICAgICBfbG9vcCxcbiAgICAgICAgX2Z1bGxMb29wOiBfbG9vcFxuICAgIH0pIDogbnVsbDtcbn1cbmZ1bmN0aW9uIF9zaG91bGRBcHBseUZpbGwoc291cmNlKSB7XG4gICAgcmV0dXJuIHNvdXJjZSAmJiBzb3VyY2UuZmlsbCAhPT0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIF9yZXNvbHZlVGFyZ2V0KHNvdXJjZXMsIGluZGV4LCBwcm9wYWdhdGUpIHtcbiAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICBsZXQgZmlsbCA9IHNvdXJjZS5maWxsO1xuICAgIGNvbnN0IHZpc2l0ZWQgPSBbXG4gICAgICAgIGluZGV4XG4gICAgXTtcbiAgICBsZXQgdGFyZ2V0O1xuICAgIGlmICghcHJvcGFnYXRlKSB7XG4gICAgICAgIHJldHVybiBmaWxsO1xuICAgIH1cbiAgICB3aGlsZShmaWxsICE9PSBmYWxzZSAmJiB2aXNpdGVkLmluZGV4T2YoZmlsbCkgPT09IC0xKXtcbiAgICAgICAgaWYgKCFpc051bWJlckZpbml0ZShmaWxsKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbGw7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0ID0gc291cmNlc1tmaWxsXTtcbiAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0LnZpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxsO1xuICAgICAgICB9XG4gICAgICAgIHZpc2l0ZWQucHVzaChmaWxsKTtcbiAgICAgICAgZmlsbCA9IHRhcmdldC5maWxsO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4gZnVuY3Rpb24gX2RlY29kZUZpbGwobGluZSwgaW5kZXgsIGNvdW50KSB7XG4gICAgIGNvbnN0IGZpbGwgPSBwYXJzZUZpbGxPcHRpb24obGluZSk7XG4gICAgaWYgKGlzT2JqZWN0KGZpbGwpKSB7XG4gICAgICAgIHJldHVybiBpc05hTihmaWxsLnZhbHVlKSA/IGZhbHNlIDogZmlsbDtcbiAgICB9XG4gICAgbGV0IHRhcmdldCA9IHBhcnNlRmxvYXQoZmlsbCk7XG4gICAgaWYgKGlzTnVtYmVyRmluaXRlKHRhcmdldCkgJiYgTWF0aC5mbG9vcih0YXJnZXQpID09PSB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVRhcmdldEluZGV4KGZpbGxbMF0sIGluZGV4LCB0YXJnZXQsIGNvdW50KTtcbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgICAgJ29yaWdpbicsXG4gICAgICAgICdzdGFydCcsXG4gICAgICAgICdlbmQnLFxuICAgICAgICAnc3RhY2snLFxuICAgICAgICAnc2hhcGUnXG4gICAgXS5pbmRleE9mKGZpbGwpID49IDAgJiYgZmlsbDtcbn1cbmZ1bmN0aW9uIGRlY29kZVRhcmdldEluZGV4KGZpcnN0Q2gsIGluZGV4LCB0YXJnZXQsIGNvdW50KSB7XG4gICAgaWYgKGZpcnN0Q2ggPT09ICctJyB8fCBmaXJzdENoID09PSAnKycpIHtcbiAgICAgICAgdGFyZ2V0ID0gaW5kZXggKyB0YXJnZXQ7XG4gICAgfVxuICAgIGlmICh0YXJnZXQgPT09IGluZGV4IHx8IHRhcmdldCA8IDAgfHwgdGFyZ2V0ID49IGNvdW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbiBmdW5jdGlvbiBfZ2V0VGFyZ2V0UGl4ZWwoZmlsbCwgc2NhbGUpIHtcbiAgICBsZXQgcGl4ZWwgPSBudWxsO1xuICAgIGlmIChmaWxsID09PSAnc3RhcnQnKSB7XG4gICAgICAgIHBpeGVsID0gc2NhbGUuYm90dG9tO1xuICAgIH0gZWxzZSBpZiAoZmlsbCA9PT0gJ2VuZCcpIHtcbiAgICAgICAgcGl4ZWwgPSBzY2FsZS50b3A7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgICAgICBwaXhlbCA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUoZmlsbC52YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChzY2FsZS5nZXRCYXNlUGl4ZWwpIHtcbiAgICAgICAgcGl4ZWwgPSBzY2FsZS5nZXRCYXNlUGl4ZWwoKTtcbiAgICB9XG4gICAgcmV0dXJuIHBpeGVsO1xufVxuIGZ1bmN0aW9uIF9nZXRUYXJnZXRWYWx1ZShmaWxsLCBzY2FsZSwgc3RhcnRWYWx1ZSkge1xuICAgIGxldCB2YWx1ZTtcbiAgICBpZiAoZmlsbCA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICB2YWx1ZSA9IHN0YXJ0VmFsdWU7XG4gICAgfSBlbHNlIGlmIChmaWxsID09PSAnZW5kJykge1xuICAgICAgICB2YWx1ZSA9IHNjYWxlLm9wdGlvbnMucmV2ZXJzZSA/IHNjYWxlLm1pbiA6IHNjYWxlLm1heDtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGZpbGwpKSB7XG4gICAgICAgIHZhbHVlID0gZmlsbC52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHNjYWxlLmdldEJhc2VWYWx1ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4gZnVuY3Rpb24gcGFyc2VGaWxsT3B0aW9uKGxpbmUpIHtcbiAgICBjb25zdCBvcHRpb25zID0gbGluZS5vcHRpb25zO1xuICAgIGNvbnN0IGZpbGxPcHRpb24gPSBvcHRpb25zLmZpbGw7XG4gICAgbGV0IGZpbGwgPSB2YWx1ZU9yRGVmYXVsdChmaWxsT3B0aW9uICYmIGZpbGxPcHRpb24udGFyZ2V0LCBmaWxsT3B0aW9uKTtcbiAgICBpZiAoZmlsbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZpbGwgPSAhIW9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgIH1cbiAgICBpZiAoZmlsbCA9PT0gZmFsc2UgfHwgZmlsbCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChmaWxsID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiAnb3JpZ2luJztcbiAgICB9XG4gICAgcmV0dXJuIGZpbGw7XG59XG5cbmZ1bmN0aW9uIF9idWlsZFN0YWNrTGluZShzb3VyY2UpIHtcbiAgICBjb25zdCB7IHNjYWxlICwgaW5kZXggLCBsaW5lICB9ID0gc291cmNlO1xuICAgIGNvbnN0IHBvaW50cyA9IFtdO1xuICAgIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgICBjb25zdCBzb3VyY2VQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCBsaW5lc0JlbG93ID0gZ2V0TGluZXNCZWxvdyhzY2FsZSwgaW5kZXgpO1xuICAgIGxpbmVzQmVsb3cucHVzaChfY3JlYXRlQm91bmRhcnlMaW5lKHtcbiAgICAgICAgeDogbnVsbCxcbiAgICAgICAgeTogc2NhbGUuYm90dG9tXG4gICAgfSwgbGluZSkpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICAgICAgZm9yKGxldCBqID0gc2VnbWVudC5zdGFydDsgaiA8PSBzZWdtZW50LmVuZDsgaisrKXtcbiAgICAgICAgICAgIGFkZFBvaW50c0JlbG93KHBvaW50cywgc291cmNlUG9pbnRzW2pdLCBsaW5lc0JlbG93KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IExpbmVFbGVtZW50KHtcbiAgICAgICAgcG9pbnRzLFxuICAgICAgICBvcHRpb25zOiB7fVxuICAgIH0pO1xufVxuIGZ1bmN0aW9uIGdldExpbmVzQmVsb3coc2NhbGUsIGluZGV4KSB7XG4gICAgY29uc3QgYmVsb3cgPSBbXTtcbiAgICBjb25zdCBtZXRhcyA9IHNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCdsaW5lJyk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IG1ldGFzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgbWV0YSA9IG1ldGFzW2ldO1xuICAgICAgICBpZiAobWV0YS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbWV0YS5oaWRkZW4pIHtcbiAgICAgICAgICAgIGJlbG93LnVuc2hpZnQobWV0YS5kYXRhc2V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmVsb3c7XG59XG4gZnVuY3Rpb24gYWRkUG9pbnRzQmVsb3cocG9pbnRzLCBzb3VyY2VQb2ludCwgbGluZXNCZWxvdykge1xuICAgIGNvbnN0IHBvc3Rwb25lZCA9IFtdO1xuICAgIGZvcihsZXQgaiA9IDA7IGogPCBsaW5lc0JlbG93Lmxlbmd0aDsgaisrKXtcbiAgICAgICAgY29uc3QgbGluZSA9IGxpbmVzQmVsb3dbal07XG4gICAgICAgIGNvbnN0IHsgZmlyc3QgLCBsYXN0ICwgcG9pbnQgIH0gPSBmaW5kUG9pbnQobGluZSwgc291cmNlUG9pbnQsICd4Jyk7XG4gICAgICAgIGlmICghcG9pbnQgfHwgZmlyc3QgJiYgbGFzdCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICBwb3N0cG9uZWQudW5zaGlmdChwb2ludCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb2ludHMucHVzaChwb2ludCk7XG4gICAgICAgICAgICBpZiAoIWxhc3QpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwb2ludHMucHVzaCguLi5wb3N0cG9uZWQpO1xufVxuIGZ1bmN0aW9uIGZpbmRQb2ludChsaW5lLCBzb3VyY2VQb2ludCwgcHJvcGVydHkpIHtcbiAgICBjb25zdCBwb2ludCA9IGxpbmUuaW50ZXJwb2xhdGUoc291cmNlUG9pbnQsIHByb3BlcnR5KTtcbiAgICBpZiAoIXBvaW50KSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgY29uc3QgcG9pbnRWYWx1ZSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gICAgY29uc3QgbGluZVBvaW50cyA9IGxpbmUucG9pbnRzO1xuICAgIGxldCBmaXJzdCA9IGZhbHNlO1xuICAgIGxldCBsYXN0ID0gZmFsc2U7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3Qgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgICAgICBjb25zdCBmaXJzdFZhbHVlID0gbGluZVBvaW50c1tzZWdtZW50LnN0YXJ0XVtwcm9wZXJ0eV07XG4gICAgICAgIGNvbnN0IGxhc3RWYWx1ZSA9IGxpbmVQb2ludHNbc2VnbWVudC5lbmRdW3Byb3BlcnR5XTtcbiAgICAgICAgaWYgKF9pc0JldHdlZW4ocG9pbnRWYWx1ZSwgZmlyc3RWYWx1ZSwgbGFzdFZhbHVlKSkge1xuICAgICAgICAgICAgZmlyc3QgPSBwb2ludFZhbHVlID09PSBmaXJzdFZhbHVlO1xuICAgICAgICAgICAgbGFzdCA9IHBvaW50VmFsdWUgPT09IGxhc3RWYWx1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGZpcnN0LFxuICAgICAgICBsYXN0LFxuICAgICAgICBwb2ludFxuICAgIH07XG59XG5cbmNsYXNzIHNpbXBsZUFyYyB7XG4gICAgY29uc3RydWN0b3Iob3B0cyl7XG4gICAgICAgIHRoaXMueCA9IG9wdHMueDtcbiAgICAgICAgdGhpcy55ID0gb3B0cy55O1xuICAgICAgICB0aGlzLnJhZGl1cyA9IG9wdHMucmFkaXVzO1xuICAgIH1cbiAgICBwYXRoU2VnbWVudChjdHgsIGJvdW5kcywgb3B0cykge1xuICAgICAgICBjb25zdCB7IHggLCB5ICwgcmFkaXVzICB9ID0gdGhpcztcbiAgICAgICAgYm91bmRzID0gYm91bmRzIHx8IHtcbiAgICAgICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICAgICAgZW5kOiBUQVVcbiAgICAgICAgfTtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIGJvdW5kcy5lbmQsIGJvdW5kcy5zdGFydCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiAhb3B0cy5ib3VuZHM7XG4gICAgfVxuICAgIGludGVycG9sYXRlKHBvaW50KSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgLCByYWRpdXMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBhbmdsZSA9IHBvaW50LmFuZ2xlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCArIE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cyxcbiAgICAgICAgICAgIHk6IHkgKyBNYXRoLnNpbihhbmdsZSkgKiByYWRpdXMsXG4gICAgICAgICAgICBhbmdsZVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX2dldFRhcmdldChzb3VyY2UpIHtcbiAgICBjb25zdCB7IGNoYXJ0ICwgZmlsbCAsIGxpbmUgIH0gPSBzb3VyY2U7XG4gICAgaWYgKGlzTnVtYmVyRmluaXRlKGZpbGwpKSB7XG4gICAgICAgIHJldHVybiBnZXRMaW5lQnlJbmRleChjaGFydCwgZmlsbCk7XG4gICAgfVxuICAgIGlmIChmaWxsID09PSAnc3RhY2snKSB7XG4gICAgICAgIHJldHVybiBfYnVpbGRTdGFja0xpbmUoc291cmNlKTtcbiAgICB9XG4gICAgaWYgKGZpbGwgPT09ICdzaGFwZScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGJvdW5kYXJ5ID0gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSk7XG4gICAgaWYgKGJvdW5kYXJ5IGluc3RhbmNlb2Ygc2ltcGxlQXJjKSB7XG4gICAgICAgIHJldHVybiBib3VuZGFyeTtcbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVCb3VuZGFyeUxpbmUoYm91bmRhcnksIGxpbmUpO1xufVxuIGZ1bmN0aW9uIGdldExpbmVCeUluZGV4KGNoYXJ0LCBpbmRleCkge1xuICAgIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpbmRleCk7XG4gICAgY29uc3QgdmlzaWJsZSA9IG1ldGEgJiYgY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpbmRleCk7XG4gICAgcmV0dXJuIHZpc2libGUgPyBtZXRhLmRhdGFzZXQgOiBudWxsO1xufVxuZnVuY3Rpb24gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSkge1xuICAgIGNvbnN0IHNjYWxlID0gc291cmNlLnNjYWxlIHx8IHt9O1xuICAgIGlmIChzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5KHNvdXJjZSk7XG4gICAgfVxuICAgIHJldHVybiBjb21wdXRlTGluZWFyQm91bmRhcnkoc291cmNlKTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVMaW5lYXJCb3VuZGFyeShzb3VyY2UpIHtcbiAgICBjb25zdCB7IHNjYWxlID17fSAsIGZpbGwgIH0gPSBzb3VyY2U7XG4gICAgY29uc3QgcGl4ZWwgPSBfZ2V0VGFyZ2V0UGl4ZWwoZmlsbCwgc2NhbGUpO1xuICAgIGlmIChpc051bWJlckZpbml0ZShwaXhlbCkpIHtcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbCA9IHNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogaG9yaXpvbnRhbCA/IHBpeGVsIDogbnVsbCxcbiAgICAgICAgICAgIHk6IGhvcml6b250YWwgPyBudWxsIDogcGl4ZWxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeShzb3VyY2UpIHtcbiAgICBjb25zdCB7IHNjYWxlICwgZmlsbCAgfSA9IHNvdXJjZTtcbiAgICBjb25zdCBvcHRpb25zID0gc2NhbGUub3B0aW9ucztcbiAgICBjb25zdCBsZW5ndGggPSBzY2FsZS5nZXRMYWJlbHMoKS5sZW5ndGg7XG4gICAgY29uc3Qgc3RhcnQgPSBvcHRpb25zLnJldmVyc2UgPyBzY2FsZS5tYXggOiBzY2FsZS5taW47XG4gICAgY29uc3QgdmFsdWUgPSBfZ2V0VGFyZ2V0VmFsdWUoZmlsbCwgc2NhbGUsIHN0YXJ0KTtcbiAgICBjb25zdCB0YXJnZXQgPSBbXTtcbiAgICBpZiAob3B0aW9ucy5ncmlkLmNpcmN1bGFyKSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSgwLCBzdGFydCk7XG4gICAgICAgIHJldHVybiBuZXcgc2ltcGxlQXJjKHtcbiAgICAgICAgICAgIHg6IGNlbnRlci54LFxuICAgICAgICAgICAgeTogY2VudGVyLnksXG4gICAgICAgICAgICByYWRpdXM6IHNjYWxlLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKXtcbiAgICAgICAgdGFyZ2V0LnB1c2goc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGksIHZhbHVlKSk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9kcmF3ZmlsbChjdHgsIHNvdXJjZSwgYXJlYSkge1xuICAgIGNvbnN0IHRhcmdldCA9IF9nZXRUYXJnZXQoc291cmNlKTtcbiAgICBjb25zdCB7IGxpbmUgLCBzY2FsZSAsIGF4aXMgIH0gPSBzb3VyY2U7XG4gICAgY29uc3QgbGluZU9wdHMgPSBsaW5lLm9wdGlvbnM7XG4gICAgY29uc3QgZmlsbE9wdGlvbiA9IGxpbmVPcHRzLmZpbGw7XG4gICAgY29uc3QgY29sb3IgPSBsaW5lT3B0cy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgY29uc3QgeyBhYm92ZSA9Y29sb3IgLCBiZWxvdyA9Y29sb3IgIH0gPSBmaWxsT3B0aW9uIHx8IHt9O1xuICAgIGlmICh0YXJnZXQgJiYgbGluZS5wb2ludHMubGVuZ3RoKSB7XG4gICAgICAgIGNsaXBBcmVhKGN0eCwgYXJlYSk7XG4gICAgICAgIGRvRmlsbChjdHgsIHtcbiAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICBhYm92ZSxcbiAgICAgICAgICAgIGJlbG93LFxuICAgICAgICAgICAgYXJlYSxcbiAgICAgICAgICAgIHNjYWxlLFxuICAgICAgICAgICAgYXhpc1xuICAgICAgICB9KTtcbiAgICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRvRmlsbChjdHgsIGNmZykge1xuICAgIGNvbnN0IHsgbGluZSAsIHRhcmdldCAsIGFib3ZlICwgYmVsb3cgLCBhcmVhICwgc2NhbGUgIH0gPSBjZmc7XG4gICAgY29uc3QgcHJvcGVydHkgPSBsaW5lLl9sb29wID8gJ2FuZ2xlJyA6IGNmZy5heGlzO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgaWYgKHByb3BlcnR5ID09PSAneCcgJiYgYmVsb3cgIT09IGFib3ZlKSB7XG4gICAgICAgIGNsaXBWZXJ0aWNhbChjdHgsIHRhcmdldCwgYXJlYS50b3ApO1xuICAgICAgICBmaWxsKGN0eCwge1xuICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIGNvbG9yOiBhYm92ZSxcbiAgICAgICAgICAgIHNjYWxlLFxuICAgICAgICAgICAgcHJvcGVydHlcbiAgICAgICAgfSk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGNsaXBWZXJ0aWNhbChjdHgsIHRhcmdldCwgYXJlYS5ib3R0b20pO1xuICAgIH1cbiAgICBmaWxsKGN0eCwge1xuICAgICAgICBsaW5lLFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIGNvbG9yOiBiZWxvdyxcbiAgICAgICAgc2NhbGUsXG4gICAgICAgIHByb3BlcnR5XG4gICAgfSk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGNsaXBWZXJ0aWNhbChjdHgsIHRhcmdldCwgY2xpcFkpIHtcbiAgICBjb25zdCB7IHNlZ21lbnRzICwgcG9pbnRzICB9ID0gdGFyZ2V0O1xuICAgIGxldCBmaXJzdCA9IHRydWU7XG4gICAgbGV0IGxpbmVMb29wID0gZmFsc2U7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgIGNvbnN0IHsgc3RhcnQgLCBlbmQgIH0gPSBzZWdtZW50O1xuICAgICAgICBjb25zdCBmaXJzdFBvaW50ID0gcG9pbnRzW3N0YXJ0XTtcbiAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gcG9pbnRzW19maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpXTtcbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICBjdHgubW92ZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcbiAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHgubGluZVRvKGZpcnN0UG9pbnQueCwgY2xpcFkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XG4gICAgICAgIH1cbiAgICAgICAgbGluZUxvb3AgPSAhIXRhcmdldC5wYXRoU2VnbWVudChjdHgsIHNlZ21lbnQsIHtcbiAgICAgICAgICAgIG1vdmU6IGxpbmVMb29wXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobGluZUxvb3ApIHtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5saW5lVG8obGFzdFBvaW50LngsIGNsaXBZKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjdHgubGluZVRvKHRhcmdldC5maXJzdCgpLngsIGNsaXBZKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LmNsaXAoKTtcbn1cbmZ1bmN0aW9uIGZpbGwoY3R4LCBjZmcpIHtcbiAgICBjb25zdCB7IGxpbmUgLCB0YXJnZXQgLCBwcm9wZXJ0eSAsIGNvbG9yICwgc2NhbGUgIH0gPSBjZmc7XG4gICAgY29uc3Qgc2VnbWVudHMgPSBfc2VnbWVudHMobGluZSwgdGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgZm9yIChjb25zdCB7IHNvdXJjZTogc3JjICwgdGFyZ2V0OiB0Z3QgLCBzdGFydCAsIGVuZCAgfSBvZiBzZWdtZW50cyl7XG4gICAgICAgIGNvbnN0IHsgc3R5bGU6IHsgYmFja2dyb3VuZENvbG9yID1jb2xvciAgfSA9IHt9ICB9ID0gc3JjO1xuICAgICAgICBjb25zdCBub3RTaGFwZSA9IHRhcmdldCAhPT0gdHJ1ZTtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY2xpcEJvdW5kcyhjdHgsIHNjYWxlLCBub3RTaGFwZSAmJiBfZ2V0Qm91bmRzKHByb3BlcnR5LCBzdGFydCwgZW5kKSk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY29uc3QgbGluZUxvb3AgPSAhIWxpbmUucGF0aFNlZ21lbnQoY3R4LCBzcmMpO1xuICAgICAgICBsZXQgbG9vcDtcbiAgICAgICAgaWYgKG5vdFNoYXBlKSB7XG4gICAgICAgICAgICBpZiAobGluZUxvb3ApIHtcbiAgICAgICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgZW5kLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRMb29wID0gISF0YXJnZXQucGF0aFNlZ21lbnQoY3R4LCB0Z3QsIHtcbiAgICAgICAgICAgICAgICBtb3ZlOiBsaW5lTG9vcCxcbiAgICAgICAgICAgICAgICByZXZlcnNlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxvb3AgPSBsaW5lTG9vcCAmJiB0YXJnZXRMb29wO1xuICAgICAgICAgICAgaWYgKCFsb29wKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkTGluZVRvKGN0eCwgdGFyZ2V0LCBzdGFydCwgcHJvcGVydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGwobG9vcCA/ICdldmVub2RkJyA6ICdub256ZXJvJyk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xpcEJvdW5kcyhjdHgsIHNjYWxlLCBib3VuZHMpIHtcbiAgICBjb25zdCB7IHRvcCAsIGJvdHRvbSAgfSA9IHNjYWxlLmNoYXJ0LmNoYXJ0QXJlYTtcbiAgICBjb25zdCB7IHByb3BlcnR5ICwgc3RhcnQgLCBlbmQgIH0gPSBib3VuZHMgfHwge307XG4gICAgaWYgKHByb3BlcnR5ID09PSAneCcpIHtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgucmVjdChzdGFydCwgdG9wLCBlbmQgLSBzdGFydCwgYm90dG9tIC0gdG9wKTtcbiAgICAgICAgY3R4LmNsaXAoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZWRMaW5lVG8oY3R4LCB0YXJnZXQsIHBvaW50LCBwcm9wZXJ0eSkge1xuICAgIGNvbnN0IGludGVycG9sYXRlZFBvaW50ID0gdGFyZ2V0LmludGVycG9sYXRlKHBvaW50LCBwcm9wZXJ0eSk7XG4gICAgaWYgKGludGVycG9sYXRlZFBvaW50KSB7XG4gICAgICAgIGN0eC5saW5lVG8oaW50ZXJwb2xhdGVkUG9pbnQueCwgaW50ZXJwb2xhdGVkUG9pbnQueSk7XG4gICAgfVxufVxuXG52YXIgaW5kZXggPSB7XG4gICAgaWQ6ICdmaWxsZXInLFxuICAgIGFmdGVyRGF0YXNldHNVcGRhdGUgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBjb3VudCA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHNvdXJjZXMgPSBbXTtcbiAgICAgICAgbGV0IG1ldGEsIGksIGxpbmUsIHNvdXJjZTtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgY291bnQ7ICsraSl7XG4gICAgICAgICAgICBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICBsaW5lID0gbWV0YS5kYXRhc2V0O1xuICAgICAgICAgICAgc291cmNlID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChsaW5lICYmIGxpbmUub3B0aW9ucyAmJiBsaW5lIGluc3RhbmNlb2YgTGluZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSksXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBfZGVjb2RlRmlsbChsaW5lLCBpLCBjb3VudCksXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICBheGlzOiBtZXRhLmNvbnRyb2xsZXIub3B0aW9ucy5pbmRleEF4aXMsXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiBtZXRhLnZTY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgbGluZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRhLiRmaWxsZXIgPSBzb3VyY2U7XG4gICAgICAgICAgICBzb3VyY2VzLnB1c2goc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDA7IGkgPCBjb3VudDsgKytpKXtcbiAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZXNbaV07XG4gICAgICAgICAgICBpZiAoIXNvdXJjZSB8fCBzb3VyY2UuZmlsbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZS5maWxsID0gX3Jlc29sdmVUYXJnZXQoc291cmNlcywgaSwgb3B0aW9ucy5wcm9wYWdhdGUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVEcmF3IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZHJhdyA9IG9wdGlvbnMuZHJhd1RpbWUgPT09ICdiZWZvcmVEcmF3JztcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgICAgIGNvbnN0IGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgICAgIGZvcihsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IG1ldGFzZXRzW2ldLiRmaWxsZXI7XG4gICAgICAgICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc291cmNlLmxpbmUudXBkYXRlQ29udHJvbFBvaW50cyhhcmVhLCBzb3VyY2UuYXhpcyk7XG4gICAgICAgICAgICBpZiAoZHJhdyAmJiBzb3VyY2UuZmlsbCkge1xuICAgICAgICAgICAgICAgIF9kcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgYXJlYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZURhdGFzZXRzRHJhdyAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmRyYXdUaW1lICE9PSAnYmVmb3JlRGF0YXNldHNEcmF3Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgICAgICBmb3IobGV0IGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuICAgICAgICAgICAgaWYgKF9zaG91bGRBcHBseUZpbGwoc291cmNlKSkge1xuICAgICAgICAgICAgICAgIF9kcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlRGF0YXNldERyYXcgKGNoYXJ0LCBhcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGFyZ3MubWV0YS4kZmlsbGVyO1xuICAgICAgICBpZiAoIV9zaG91bGRBcHBseUZpbGwoc291cmNlKSB8fCBvcHRpb25zLmRyYXdUaW1lICE9PSAnYmVmb3JlRGF0YXNldERyYXcnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX2RyYXdmaWxsKGNoYXJ0LmN0eCwgc291cmNlLCBjaGFydC5jaGFydEFyZWEpO1xuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgcHJvcGFnYXRlOiB0cnVlLFxuICAgICAgICBkcmF3VGltZTogJ2JlZm9yZURhdGFzZXREcmF3J1xuICAgIH1cbn07XG5cbmNvbnN0IGdldEJveFNpemUgPSAobGFiZWxPcHRzLCBmb250U2l6ZSk9PntcbiAgICBsZXQgeyBib3hIZWlnaHQgPWZvbnRTaXplICwgYm94V2lkdGggPWZvbnRTaXplICB9ID0gbGFiZWxPcHRzO1xuICAgIGlmIChsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSkge1xuICAgICAgICBib3hIZWlnaHQgPSBNYXRoLm1pbihib3hIZWlnaHQsIGZvbnRTaXplKTtcbiAgICAgICAgYm94V2lkdGggPSBsYWJlbE9wdHMucG9pbnRTdHlsZVdpZHRoIHx8IE1hdGgubWluKGJveFdpZHRoLCBmb250U2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGJveFdpZHRoLFxuICAgICAgICBib3hIZWlnaHQsXG4gICAgICAgIGl0ZW1IZWlnaHQ6IE1hdGgubWF4KGZvbnRTaXplLCBib3hIZWlnaHQpXG4gICAgfTtcbn07XG5jb25zdCBpdGVtc0VxdWFsID0gKGEsIGIpPT5hICE9PSBudWxsICYmIGIgIT09IG51bGwgJiYgYS5kYXRhc2V0SW5kZXggPT09IGIuZGF0YXNldEluZGV4ICYmIGEuaW5kZXggPT09IGIuaW5kZXg7XG5jbGFzcyBMZWdlbmQgZXh0ZW5kcyBFbGVtZW50IHtcbiBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9hZGRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG4gdGhpcy5faG92ZXJlZEl0ZW0gPSBudWxsO1xuICAgICAgICB0aGlzLmRvdWdobnV0TW9kZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICAgICAgdGhpcy5jdHggPSBjb25maWcuY3R4O1xuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNvbHVtblNpemVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxpbmVXaWR0aHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWF4SGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1heFdpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX21hcmdpbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2VpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmZ1bGxTaXplID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuICAgICAgICB0aGlzLm1heFdpZHRoID0gbWF4V2lkdGg7XG4gICAgICAgIHRoaXMubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgICB0aGlzLl9tYXJnaW5zID0gbWFyZ2lucztcbiAgICAgICAgdGhpcy5zZXREaW1lbnNpb25zKCk7XG4gICAgICAgIHRoaXMuYnVpbGRMYWJlbHMoKTtcbiAgICAgICAgdGhpcy5maXQoKTtcbiAgICB9XG4gICAgc2V0RGltZW5zaW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gdGhpcy5fbWFyZ2lucy5sZWZ0O1xuICAgICAgICAgICAgdGhpcy5yaWdodCA9IHRoaXMud2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy50b3AgPSB0aGlzLl9tYXJnaW5zLnRvcDtcbiAgICAgICAgICAgIHRoaXMuYm90dG9tID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYnVpbGRMYWJlbHMoKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsT3B0cyA9IHRoaXMub3B0aW9ucy5sYWJlbHMgfHwge307XG4gICAgICAgIGxldCBsZWdlbmRJdGVtcyA9IGNhbGxiYWNrKGxhYmVsT3B0cy5nZW5lcmF0ZUxhYmVscywgW1xuICAgICAgICAgICAgdGhpcy5jaGFydFxuICAgICAgICBdLCB0aGlzKSB8fCBbXTtcbiAgICAgICAgaWYgKGxhYmVsT3B0cy5maWx0ZXIpIHtcbiAgICAgICAgICAgIGxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXMuZmlsdGVyKChpdGVtKT0+bGFiZWxPcHRzLmZpbHRlcihpdGVtLCB0aGlzLmNoYXJ0LmRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFiZWxPcHRzLnNvcnQpIHtcbiAgICAgICAgICAgIGxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXMuc29ydCgoYSwgYik9PmxhYmVsT3B0cy5zb3J0KGEsIGIsIHRoaXMuY2hhcnQuZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgICAgICAgbGVnZW5kSXRlbXMucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcztcbiAgICB9XG4gICAgZml0KCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgLCBjdHggIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIW9wdGlvbnMuZGlzcGxheSkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbE9wdHMgPSBvcHRpb25zLmxhYmVscztcbiAgICAgICAgY29uc3QgbGFiZWxGb250ID0gdG9Gb250KGxhYmVsT3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgZm9udFNpemUgPSBsYWJlbEZvbnQuc2l6ZTtcbiAgICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICAgICAgY29uc3QgeyBib3hXaWR0aCAsIGl0ZW1IZWlnaHQgIH0gPSBnZXRCb3hTaXplKGxhYmVsT3B0cywgZm9udFNpemUpO1xuICAgICAgICBsZXQgd2lkdGgsIGhlaWdodDtcbiAgICAgICAgY3R4LmZvbnQgPSBsYWJlbEZvbnQuc3RyaW5nO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgd2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5fZml0Um93cyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSArIDEwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQ7XG4gICAgICAgICAgICB3aWR0aCA9IHRoaXMuX2ZpdENvbHModGl0bGVIZWlnaHQsIGxhYmVsRm9udCwgYm94V2lkdGgsIGl0ZW1IZWlnaHQpICsgMTA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53aWR0aCA9IE1hdGgubWluKHdpZHRoLCBvcHRpb25zLm1heFdpZHRoIHx8IHRoaXMubWF4V2lkdGgpO1xuICAgICAgICB0aGlzLmhlaWdodCA9IE1hdGgubWluKGhlaWdodCwgb3B0aW9ucy5tYXhIZWlnaHQgfHwgdGhpcy5tYXhIZWlnaHQpO1xuICAgIH1cbiBfZml0Um93cyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4ICwgbWF4V2lkdGggLCBvcHRpb25zOiB7IGxhYmVsczogeyBwYWRkaW5nICB9ICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaGl0Ym94ZXMgPSB0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG4gICAgICAgIGNvbnN0IGxpbmVXaWR0aHMgPSB0aGlzLmxpbmVXaWR0aHMgPSBbXG4gICAgICAgICAgICAwXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgbGV0IHRvdGFsSGVpZ2h0ID0gdGl0bGVIZWlnaHQ7XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgbGV0IHJvdyA9IC0xO1xuICAgICAgICBsZXQgdG9wID0gLWxpbmVIZWlnaHQ7XG4gICAgICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSk9PntcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1XaWR0aCA9IGJveFdpZHRoICsgZm9udFNpemUgLyAyICsgY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG4gICAgICAgICAgICBpZiAoaSA9PT0gMCB8fCBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gMV0gKyBpdGVtV2lkdGggKyAyICogcGFkZGluZyA+IG1heFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgdG90YWxIZWlnaHQgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gKGkgPiAwID8gMCA6IDEpXSA9IDA7XG4gICAgICAgICAgICAgICAgdG9wICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgcm93Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoaXRib3hlc1tpXSA9IHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgd2lkdGg6IGl0ZW1XaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGl0ZW1IZWlnaHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gMV0gKz0gaXRlbVdpZHRoICsgcGFkZGluZztcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0b3RhbEhlaWdodDtcbiAgICB9XG4gICAgX2ZpdENvbHModGl0bGVIZWlnaHQsIGxhYmVsRm9udCwgYm94V2lkdGgsIF9pdGVtSGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4ICwgbWF4SGVpZ2h0ICwgb3B0aW9uczogeyBsYWJlbHM6IHsgcGFkZGluZyAgfSAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGhpdGJveGVzID0gdGhpcy5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuICAgICAgICBjb25zdCBjb2x1bW5TaXplcyA9IHRoaXMuY29sdW1uU2l6ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgaGVpZ2h0TGltaXQgPSBtYXhIZWlnaHQgLSB0aXRsZUhlaWdodDtcbiAgICAgICAgbGV0IHRvdGFsV2lkdGggPSBwYWRkaW5nO1xuICAgICAgICBsZXQgY3VycmVudENvbFdpZHRoID0gMDtcbiAgICAgICAgbGV0IGN1cnJlbnRDb2xIZWlnaHQgPSAwO1xuICAgICAgICBsZXQgbGVmdCA9IDA7XG4gICAgICAgIGxldCBjb2wgPSAwO1xuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zLmZvckVhY2goKGxlZ2VuZEl0ZW0sIGkpPT57XG4gICAgICAgICAgICBjb25zdCB7IGl0ZW1XaWR0aCAsIGl0ZW1IZWlnaHQgIH0gPSBjYWxjdWxhdGVJdGVtU2l6ZShib3hXaWR0aCwgbGFiZWxGb250LCBjdHgsIGxlZ2VuZEl0ZW0sIF9pdGVtSGVpZ2h0KTtcbiAgICAgICAgICAgIGlmIChpID4gMCAmJiBjdXJyZW50Q29sSGVpZ2h0ICsgaXRlbUhlaWdodCArIDIgKiBwYWRkaW5nID4gaGVpZ2h0TGltaXQpIHtcbiAgICAgICAgICAgICAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRDb2xXaWR0aCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgY29sdW1uU2l6ZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBjdXJyZW50Q29sV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogY3VycmVudENvbEhlaWdodFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGxlZnQgKz0gY3VycmVudENvbFdpZHRoICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBjb2wrKztcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29sV2lkdGggPSBjdXJyZW50Q29sSGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhpdGJveGVzW2ldID0ge1xuICAgICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgICAgdG9wOiBjdXJyZW50Q29sSGVpZ2h0LFxuICAgICAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgICAgICB3aWR0aDogaXRlbVdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaXRlbUhlaWdodFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGN1cnJlbnRDb2xXaWR0aCA9IE1hdGgubWF4KGN1cnJlbnRDb2xXaWR0aCwgaXRlbVdpZHRoKTtcbiAgICAgICAgICAgIGN1cnJlbnRDb2xIZWlnaHQgKz0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgICAgIH0pO1xuICAgICAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRDb2xXaWR0aDtcbiAgICAgICAgY29sdW1uU2l6ZXMucHVzaCh7XG4gICAgICAgICAgICB3aWR0aDogY3VycmVudENvbFdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBjdXJyZW50Q29sSGVpZ2h0XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdG90YWxXaWR0aDtcbiAgICB9XG4gICAgYWRqdXN0SGl0Qm94ZXMoKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgICAgICBjb25zdCB7IGxlZ2VuZEhpdEJveGVzOiBoaXRib3hlcyAsIG9wdGlvbnM6IHsgYWxpZ24gLCBsYWJlbHM6IHsgcGFkZGluZyAgfSAsIHJ0bCAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIocnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgbGV0IHJvdyA9IDA7XG4gICAgICAgICAgICBsZXQgbGVmdCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gdGhpcy5saW5lV2lkdGhzW3Jvd10pO1xuICAgICAgICAgICAgZm9yIChjb25zdCBoaXRib3ggb2YgaGl0Ym94ZXMpe1xuICAgICAgICAgICAgICAgIGlmIChyb3cgIT09IGhpdGJveC5yb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93ID0gaGl0Ym94LnJvdztcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gdGhpcy5saW5lV2lkdGhzW3Jvd10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoaXRib3gudG9wICs9IHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGhpdGJveC5sZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLngobGVmdCksIGhpdGJveC53aWR0aCk7XG4gICAgICAgICAgICAgICAgbGVmdCArPSBoaXRib3gud2lkdGggKyBwYWRkaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGNvbCA9IDA7XG4gICAgICAgICAgICBsZXQgdG9wID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIHRoaXMuY29sdW1uU2l6ZXNbY29sXS5oZWlnaHQpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBoaXRib3ggb2YgaGl0Ym94ZXMpe1xuICAgICAgICAgICAgICAgIGlmIChoaXRib3guY29sICE9PSBjb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sID0gaGl0Ym94LmNvbDtcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIHRoaXMuY29sdW1uU2l6ZXNbY29sXS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoaXRib3gudG9wID0gdG9wO1xuICAgICAgICAgICAgICAgIGhpdGJveC5sZWZ0ICs9IHRoaXMubGVmdCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgaGl0Ym94LmxlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueChoaXRib3gubGVmdCksIGhpdGJveC53aWR0aCk7XG4gICAgICAgICAgICAgICAgdG9wICs9IGhpdGJveC5oZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ3RvcCcgfHwgdGhpcy5vcHRpb25zLnBvc2l0aW9uID09PSAnYm90dG9tJztcbiAgICB9XG4gICAgZHJhdygpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgIGNsaXBBcmVhKGN0eCwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9kcmF3KCk7XG4gICAgICAgICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgICAgIH1cbiAgICB9XG4gX2RyYXcoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9uczogb3B0cyAsIGNvbHVtblNpemVzICwgbGluZVdpZHRocyAsIGN0eCAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgYWxpZ24gLCBsYWJlbHM6IGxhYmVsT3B0cyAgfSA9IG9wdHM7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRDb2xvciA9IGRlZmF1bHRzLmNvbG9yO1xuICAgICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdHMucnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgICAgICBjb25zdCBsYWJlbEZvbnQgPSB0b0ZvbnQobGFiZWxPcHRzLmZvbnQpO1xuICAgICAgICBjb25zdCB7IHBhZGRpbmcgIH0gPSBsYWJlbE9wdHM7XG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gbGFiZWxGb250LnNpemU7XG4gICAgICAgIGNvbnN0IGhhbGZGb250U2l6ZSA9IGZvbnRTaXplIC8gMjtcbiAgICAgICAgbGV0IGN1cnNvcjtcbiAgICAgICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oJ2xlZnQnKTtcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gMC41O1xuICAgICAgICBjdHguZm9udCA9IGxhYmVsRm9udC5zdHJpbmc7XG4gICAgICAgIGNvbnN0IHsgYm94V2lkdGggLCBib3hIZWlnaHQgLCBpdGVtSGVpZ2h0ICB9ID0gZ2V0Qm94U2l6ZShsYWJlbE9wdHMsIGZvbnRTaXplKTtcbiAgICAgICAgY29uc3QgZHJhd0xlZ2VuZEJveCA9IGZ1bmN0aW9uKHgsIHksIGxlZ2VuZEl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChpc05hTihib3hXaWR0aCkgfHwgYm94V2lkdGggPD0gMCB8fCBpc05hTihib3hIZWlnaHQpIHx8IGJveEhlaWdodCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY29uc3QgbGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lV2lkdGgsIDEpO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0uZmlsbFN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuICAgICAgICAgICAgY3R4LmxpbmVDYXAgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVDYXAsICdidXR0Jyk7XG4gICAgICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVEYXNoT2Zmc2V0LCAwKTtcbiAgICAgICAgICAgIGN0eC5saW5lSm9pbiA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZUpvaW4sICdtaXRlcicpO1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0uc3Ryb2tlU3R5bGUsIGRlZmF1bHRDb2xvcik7XG4gICAgICAgICAgICBjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lRGFzaCwgW10pKTtcbiAgICAgICAgICAgIGlmIChsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRyYXdPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IGJveEhlaWdodCAqIE1hdGguU1FSVDIgLyAyLFxuICAgICAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBsZWdlbmRJdGVtLnBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBsZWdlbmRJdGVtLnJvdGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogbGluZVdpZHRoXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gcnRsSGVscGVyLnhQbHVzKHgsIGJveFdpZHRoIC8gMik7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyWSA9IHkgKyBoYWxmRm9udFNpemU7XG4gICAgICAgICAgICAgICAgZHJhd1BvaW50TGVnZW5kKGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclksIGxhYmVsT3B0cy5wb2ludFN0eWxlV2lkdGggJiYgYm94V2lkdGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB5Qm94VG9wID0geSArIE1hdGgubWF4KChmb250U2l6ZSAtIGJveEhlaWdodCkgLyAyLCAwKTtcbiAgICAgICAgICAgICAgICBjb25zdCB4Qm94TGVmdCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHgsIGJveFdpZHRoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKGxlZ2VuZEl0ZW0uYm9yZGVyUmFkaXVzKTtcbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKCh2KT0+diAhPT0gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogeEJveExlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB5Qm94VG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgdzogYm94V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoOiBib3hIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1c1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdHgucmVjdCh4Qm94TGVmdCwgeUJveFRvcCwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVXaWR0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZmlsbFRleHQgPSBmdW5jdGlvbih4LCB5LCBsZWdlbmRJdGVtKSB7XG4gICAgICAgICAgICByZW5kZXJUZXh0KGN0eCwgbGVnZW5kSXRlbS50ZXh0LCB4LCB5ICsgaXRlbUhlaWdodCAvIDIsIGxhYmVsRm9udCwge1xuICAgICAgICAgICAgICAgIHN0cmlrZXRocm91Z2g6IGxlZ2VuZEl0ZW0uaGlkZGVuLFxuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogcnRsSGVscGVyLnRleHRBbGlnbihsZWdlbmRJdGVtLnRleHRBbGlnbilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgICAgeDogX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSBsaW5lV2lkdGhzWzBdKSxcbiAgICAgICAgICAgICAgICB5OiB0aGlzLnRvcCArIHBhZGRpbmcgKyB0aXRsZUhlaWdodCxcbiAgICAgICAgICAgICAgICBsaW5lOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIHg6IHRoaXMubGVmdCArIHBhZGRpbmcsXG4gICAgICAgICAgICAgICAgeTogX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIGNvbHVtblNpemVzWzBdLmhlaWdodCksXG4gICAgICAgICAgICAgICAgbGluZTogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBvdmVycmlkZVRleHREaXJlY3Rpb24odGhpcy5jdHgsIG9wdHMudGV4dERpcmVjdGlvbik7XG4gICAgICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgdGhpcy5sZWdlbmRJdGVtcy5mb3JFYWNoKChsZWdlbmRJdGVtLCBpKT0+e1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGVnZW5kSXRlbS5mb250Q29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbGVnZW5kSXRlbS5mb250Q29sb3I7XG4gICAgICAgICAgICBjb25zdCB0ZXh0V2lkdGggPSBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcbiAgICAgICAgICAgIGNvbnN0IHRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24obGVnZW5kSXRlbS50ZXh0QWxpZ24gfHwgKGxlZ2VuZEl0ZW0udGV4dEFsaWduID0gbGFiZWxPcHRzLnRleHRBbGlnbikpO1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBib3hXaWR0aCArIGhhbGZGb250U2l6ZSArIHRleHRXaWR0aDtcbiAgICAgICAgICAgIGxldCB4ID0gY3Vyc29yLng7XG4gICAgICAgICAgICBsZXQgeSA9IGN1cnNvci55O1xuICAgICAgICAgICAgcnRsSGVscGVyLnNldFdpZHRoKHRoaXMud2lkdGgpO1xuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIGlmIChpID4gMCAmJiB4ICsgd2lkdGggKyBwYWRkaW5nID4gdGhpcy5yaWdodCkge1xuICAgICAgICAgICAgICAgICAgICB5ID0gY3Vyc29yLnkgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmxpbmUrKztcbiAgICAgICAgICAgICAgICAgICAgeCA9IGN1cnNvci54ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSBsaW5lV2lkdGhzW2N1cnNvci5saW5lXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpID4gMCAmJiB5ICsgbGluZUhlaWdodCA+IHRoaXMuYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgeCA9IGN1cnNvci54ID0geCArIGNvbHVtblNpemVzW2N1cnNvci5saW5lXS53aWR0aCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgY3Vyc29yLmxpbmUrKztcbiAgICAgICAgICAgICAgICB5ID0gY3Vyc29yLnkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gY29sdW1uU2l6ZXNbY3Vyc29yLmxpbmVdLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZWFsWCA9IHJ0bEhlbHBlci54KHgpO1xuICAgICAgICAgICAgZHJhd0xlZ2VuZEJveChyZWFsWCwgeSwgbGVnZW5kSXRlbSk7XG4gICAgICAgICAgICB4ID0gX3RleHRYKHRleHRBbGlnbiwgeCArIGJveFdpZHRoICsgaGFsZkZvbnRTaXplLCBpc0hvcml6b250YWwgPyB4ICsgd2lkdGggOiB0aGlzLnJpZ2h0LCBvcHRzLnJ0bCk7XG4gICAgICAgICAgICBmaWxsVGV4dChydGxIZWxwZXIueCh4KSwgeSwgbGVnZW5kSXRlbSk7XG4gICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgY3Vyc29yLnggKz0gd2lkdGggKyBwYWRkaW5nO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGVnZW5kSXRlbS50ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvbnRMaW5lSGVpZ2h0ID0gbGFiZWxGb250LmxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgY3Vyc29yLnkgKz0gY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodChsZWdlbmRJdGVtLCBmb250TGluZUhlaWdodCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnNvci55ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXN0b3JlVGV4dERpcmVjdGlvbih0aGlzLmN0eCwgb3B0cy50ZXh0RGlyZWN0aW9uKTtcbiAgICB9XG4gZHJhd1RpdGxlKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB0aXRsZU9wdHMgPSBvcHRzLnRpdGxlO1xuICAgICAgICBjb25zdCB0aXRsZUZvbnQgPSB0b0ZvbnQodGl0bGVPcHRzLmZvbnQpO1xuICAgICAgICBjb25zdCB0aXRsZVBhZGRpbmcgPSB0b1BhZGRpbmcodGl0bGVPcHRzLnBhZGRpbmcpO1xuICAgICAgICBpZiAoIXRpdGxlT3B0cy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRzLnJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGl0bGVPcHRzLnBvc2l0aW9uO1xuICAgICAgICBjb25zdCBoYWxmRm9udFNpemUgPSB0aXRsZUZvbnQuc2l6ZSAvIDI7XG4gICAgICAgIGNvbnN0IHRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplID0gdGl0bGVQYWRkaW5nLnRvcCArIGhhbGZGb250U2l6ZTtcbiAgICAgICAgbGV0IHk7XG4gICAgICAgIGxldCBsZWZ0ID0gdGhpcy5sZWZ0O1xuICAgICAgICBsZXQgbWF4V2lkdGggPSB0aGlzLndpZHRoO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgbWF4V2lkdGggPSBNYXRoLm1heCguLi50aGlzLmxpbmVXaWR0aHMpO1xuICAgICAgICAgICAgeSA9IHRoaXMudG9wICsgdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemU7XG4gICAgICAgICAgICBsZWZ0ID0gX2FsaWduU3RhcnRFbmQob3B0cy5hbGlnbiwgbGVmdCwgdGhpcy5yaWdodCAtIG1heFdpZHRoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG1heEhlaWdodCA9IHRoaXMuY29sdW1uU2l6ZXMucmVkdWNlKChhY2MsIHNpemUpPT5NYXRoLm1heChhY2MsIHNpemUuaGVpZ2h0KSwgMCk7XG4gICAgICAgICAgICB5ID0gdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUgKyBfYWxpZ25TdGFydEVuZChvcHRzLmFsaWduLCB0aGlzLnRvcCwgdGhpcy5ib3R0b20gLSBtYXhIZWlnaHQgLSBvcHRzLmxhYmVscy5wYWRkaW5nIC0gdGhpcy5fY29tcHV0ZVRpdGxlSGVpZ2h0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHggPSBfYWxpZ25TdGFydEVuZChwb3NpdGlvbiwgbGVmdCwgbGVmdCArIG1heFdpZHRoKTtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oX3RvTGVmdFJpZ2h0Q2VudGVyKHBvc2l0aW9uKSk7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdGl0bGVPcHRzLmNvbG9yO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gdGl0bGVPcHRzLmNvbG9yO1xuICAgICAgICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gICAgICAgIHJlbmRlclRleHQoY3R4LCB0aXRsZU9wdHMudGV4dCwgeCwgeSwgdGl0bGVGb250KTtcbiAgICB9XG4gX2NvbXB1dGVUaXRsZUhlaWdodCgpIHtcbiAgICAgICAgY29uc3QgdGl0bGVPcHRzID0gdGhpcy5vcHRpb25zLnRpdGxlO1xuICAgICAgICBjb25zdCB0aXRsZUZvbnQgPSB0b0ZvbnQodGl0bGVPcHRzLmZvbnQpO1xuICAgICAgICBjb25zdCB0aXRsZVBhZGRpbmcgPSB0b1BhZGRpbmcodGl0bGVPcHRzLnBhZGRpbmcpO1xuICAgICAgICByZXR1cm4gdGl0bGVPcHRzLmRpc3BsYXkgPyB0aXRsZUZvbnQubGluZUhlaWdodCArIHRpdGxlUGFkZGluZy5oZWlnaHQgOiAwO1xuICAgIH1cbiBfZ2V0TGVnZW5kSXRlbUF0KHgsIHkpIHtcbiAgICAgICAgbGV0IGksIGhpdEJveCwgbGg7XG4gICAgICAgIGlmIChfaXNCZXR3ZWVuKHgsIHRoaXMubGVmdCwgdGhpcy5yaWdodCkgJiYgX2lzQmV0d2Vlbih5LCB0aGlzLnRvcCwgdGhpcy5ib3R0b20pKSB7XG4gICAgICAgICAgICBsaCA9IHRoaXMubGVnZW5kSGl0Qm94ZXM7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsaC5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICAgICAgaGl0Qm94ID0gbGhbaV07XG4gICAgICAgICAgICAgICAgaWYgKF9pc0JldHdlZW4oeCwgaGl0Qm94LmxlZnQsIGhpdEJveC5sZWZ0ICsgaGl0Qm94LndpZHRoKSAmJiBfaXNCZXR3ZWVuKHksIGhpdEJveC50b3AsIGhpdEJveC50b3AgKyBoaXRCb3guaGVpZ2h0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZWdlbmRJdGVtc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuIGhhbmRsZUV2ZW50KGUpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKCFpc0xpc3RlbmVkKGUudHlwZSwgb3B0cykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBob3ZlcmVkSXRlbSA9IHRoaXMuX2dldExlZ2VuZEl0ZW1BdChlLngsIGUueSk7XG4gICAgICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW1vdmUnIHx8IGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXMgPSB0aGlzLl9ob3ZlcmVkSXRlbTtcbiAgICAgICAgICAgIGNvbnN0IHNhbWVJdGVtID0gaXRlbXNFcXVhbChwcmV2aW91cywgaG92ZXJlZEl0ZW0pO1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzICYmICFzYW1lSXRlbSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG9wdHMub25MZWF2ZSwgW1xuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyxcbiAgICAgICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faG92ZXJlZEl0ZW0gPSBob3ZlcmVkSXRlbTtcbiAgICAgICAgICAgIGlmIChob3ZlcmVkSXRlbSAmJiAhc2FtZUl0ZW0pIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhvcHRzLm9uSG92ZXIsIFtcbiAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgaG92ZXJlZEl0ZW0sXG4gICAgICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChob3ZlcmVkSXRlbSkge1xuICAgICAgICAgICAgY2FsbGJhY2sob3B0cy5vbkNsaWNrLCBbXG4gICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICBob3ZlcmVkSXRlbSxcbiAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZUl0ZW1TaXplKGJveFdpZHRoLCBsYWJlbEZvbnQsIGN0eCwgbGVnZW5kSXRlbSwgX2l0ZW1IZWlnaHQpIHtcbiAgICBjb25zdCBpdGVtV2lkdGggPSBjYWxjdWxhdGVJdGVtV2lkdGgobGVnZW5kSXRlbSwgYm94V2lkdGgsIGxhYmVsRm9udCwgY3R4KTtcbiAgICBjb25zdCBpdGVtSGVpZ2h0ID0gY2FsY3VsYXRlSXRlbUhlaWdodChfaXRlbUhlaWdodCwgbGVnZW5kSXRlbSwgbGFiZWxGb250LmxpbmVIZWlnaHQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1XaWR0aCxcbiAgICAgICAgaXRlbUhlaWdodFxuICAgIH07XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVJdGVtV2lkdGgobGVnZW5kSXRlbSwgYm94V2lkdGgsIGxhYmVsRm9udCwgY3R4KSB7XG4gICAgbGV0IGxlZ2VuZEl0ZW1UZXh0ID0gbGVnZW5kSXRlbS50ZXh0O1xuICAgIGlmIChsZWdlbmRJdGVtVGV4dCAmJiB0eXBlb2YgbGVnZW5kSXRlbVRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGxlZ2VuZEl0ZW1UZXh0ID0gbGVnZW5kSXRlbVRleHQucmVkdWNlKChhLCBiKT0+YS5sZW5ndGggPiBiLmxlbmd0aCA/IGEgOiBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGJveFdpZHRoICsgbGFiZWxGb250LnNpemUgLyAyICsgY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW1UZXh0KS53aWR0aDtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZUl0ZW1IZWlnaHQoX2l0ZW1IZWlnaHQsIGxlZ2VuZEl0ZW0sIGZvbnRMaW5lSGVpZ2h0KSB7XG4gICAgbGV0IGl0ZW1IZWlnaHQgPSBfaXRlbUhlaWdodDtcbiAgICBpZiAodHlwZW9mIGxlZ2VuZEl0ZW0udGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgaXRlbUhlaWdodCA9IGNhbGN1bGF0ZUxlZ2VuZEl0ZW1IZWlnaHQobGVnZW5kSXRlbSwgZm9udExpbmVIZWlnaHQpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbUhlaWdodDtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZUxlZ2VuZEl0ZW1IZWlnaHQobGVnZW5kSXRlbSwgZm9udExpbmVIZWlnaHQpIHtcbiAgICBjb25zdCBsYWJlbEhlaWdodCA9IGxlZ2VuZEl0ZW0udGV4dCA/IGxlZ2VuZEl0ZW0udGV4dC5sZW5ndGggKyAwLjUgOiAwO1xuICAgIHJldHVybiBmb250TGluZUhlaWdodCAqIGxhYmVsSGVpZ2h0O1xufVxuZnVuY3Rpb24gaXNMaXN0ZW5lZCh0eXBlLCBvcHRzKSB7XG4gICAgaWYgKCh0eXBlID09PSAnbW91c2Vtb3ZlJyB8fCB0eXBlID09PSAnbW91c2VvdXQnKSAmJiAob3B0cy5vbkhvdmVyIHx8IG9wdHMub25MZWF2ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChvcHRzLm9uQ2xpY2sgJiYgKHR5cGUgPT09ICdjbGljaycgfHwgdHlwZSA9PT0gJ21vdXNldXAnKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxudmFyIHBsdWdpbl9sZWdlbmQgPSB7XG4gICAgaWQ6ICdsZWdlbmQnLFxuIF9lbGVtZW50OiBMZWdlbmQsXG4gICAgc3RhcnQgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBsZWdlbmQgPSBjaGFydC5sZWdlbmQgPSBuZXcgTGVnZW5kKHtcbiAgICAgICAgICAgIGN0eDogY2hhcnQuY3R4LFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIGNoYXJ0XG4gICAgICAgIH0pO1xuICAgICAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgbGVnZW5kLCBvcHRpb25zKTtcbiAgICAgICAgbGF5b3V0cy5hZGRCb3goY2hhcnQsIGxlZ2VuZCk7XG4gICAgfSxcbiAgICBzdG9wIChjaGFydCkge1xuICAgICAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgY2hhcnQubGVnZW5kKTtcbiAgICAgICAgZGVsZXRlIGNoYXJ0LmxlZ2VuZDtcbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZSAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICAgICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIGxlZ2VuZCwgb3B0aW9ucyk7XG4gICAgICAgIGxlZ2VuZC5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9LFxuICAgIGFmdGVyVXBkYXRlIChjaGFydCkge1xuICAgICAgICBjb25zdCBsZWdlbmQgPSBjaGFydC5sZWdlbmQ7XG4gICAgICAgIGxlZ2VuZC5idWlsZExhYmVscygpO1xuICAgICAgICBsZWdlbmQuYWRqdXN0SGl0Qm94ZXMoKTtcbiAgICB9LFxuICAgIGFmdGVyRXZlbnQgKGNoYXJ0LCBhcmdzKSB7XG4gICAgICAgIGlmICghYXJncy5yZXBsYXkpIHtcbiAgICAgICAgICAgIGNoYXJ0LmxlZ2VuZC5oYW5kbGVFdmVudChhcmdzLmV2ZW50KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgcG9zaXRpb246ICd0b3AnLFxuICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGZ1bGxTaXplOiB0cnVlLFxuICAgICAgICByZXZlcnNlOiBmYWxzZSxcbiAgICAgICAgd2VpZ2h0OiAxMDAwLFxuICAgICAgICBvbkNsaWNrIChlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbGVnZW5kSXRlbS5kYXRhc2V0SW5kZXg7XG4gICAgICAgICAgICBjb25zdCBjaSA9IGxlZ2VuZC5jaGFydDtcbiAgICAgICAgICAgIGlmIChjaS5pc0RhdGFzZXRWaXNpYmxlKGluZGV4KSkge1xuICAgICAgICAgICAgICAgIGNpLmhpZGUoaW5kZXgpO1xuICAgICAgICAgICAgICAgIGxlZ2VuZEl0ZW0uaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2kuc2hvdyhpbmRleCk7XG4gICAgICAgICAgICAgICAgbGVnZW5kSXRlbS5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25Ib3ZlcjogbnVsbCxcbiAgICAgICAgb25MZWF2ZTogbnVsbCxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICBjb2xvcjogKGN0eCk9PmN0eC5jaGFydC5vcHRpb25zLmNvbG9yLFxuICAgICAgICAgICAgYm94V2lkdGg6IDQwLFxuICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICBnZW5lcmF0ZUxhYmVscyAoY2hhcnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhc2V0cyA9IGNoYXJ0LmRhdGEuZGF0YXNldHM7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBsYWJlbHM6IHsgdXNlUG9pbnRTdHlsZSAsIHBvaW50U3R5bGUgLCB0ZXh0QWxpZ24gLCBjb2xvciAsIHVzZUJvcmRlclJhZGl1cyAsIGJvcmRlclJhZGl1cyAgfSAgfSA9IGNoYXJ0LmxlZ2VuZC5vcHRpb25zO1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGFydC5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKCkubWFwKChtZXRhKT0+e1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZSh1c2VQb2ludFN0eWxlID8gMCA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvcmRlcldpZHRoID0gdG9QYWRkaW5nKHN0eWxlLmJvcmRlcldpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGRhdGFzZXRzW21ldGEuaW5kZXhdLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiAhbWV0YS52aXNpYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZUNhcDogc3R5bGUuYm9yZGVyQ2FwU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lRGFzaDogc3R5bGUuYm9yZGVyRGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVEYXNoT2Zmc2V0OiBzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZUpvaW46IHN0eWxlLmJvcmRlckpvaW5TdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogKGJvcmRlcldpZHRoLndpZHRoICsgYm9yZGVyV2lkdGguaGVpZ2h0KSAvIDQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlIHx8IHN0eWxlLnBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogc3R5bGUucm90YXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IHRleHRBbGlnbiB8fCBzdHlsZS50ZXh0QWxpZ24sXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IHVzZUJvcmRlclJhZGl1cyAmJiAoYm9yZGVyUmFkaXVzIHx8IHN0eWxlLmJvcmRlclJhZGl1cyksXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXg6IG1ldGEuaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIGNvbG9yOiAoY3R4KT0+Y3R4LmNoYXJ0Lm9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICAgICAgICAgIHRleHQ6ICcnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRlc2NyaXB0b3JzOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9PiFuYW1lLnN0YXJ0c1dpdGgoJ29uJyksXG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+IVtcbiAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlTGFiZWxzJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZpbHRlcicsXG4gICAgICAgICAgICAgICAgICAgICdzb3J0J1xuICAgICAgICAgICAgICAgIF0uaW5jbHVkZXMobmFtZSlcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmNsYXNzIFRpdGxlIGV4dGVuZHMgRWxlbWVudCB7XG4gY29uc3RydWN0b3IoY29uZmlnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgICAgIHRoaXMuY3R4ID0gY29uZmlnLmN0eDtcbiAgICAgICAgdGhpcy5fcGFkZGluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxlZnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLndlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5mdWxsU2l6ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdXBkYXRlKG1heFdpZHRoLCBtYXhIZWlnaHQpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgdGhpcy5sZWZ0ID0gMDtcbiAgICAgICAgdGhpcy50b3AgPSAwO1xuICAgICAgICBpZiAoIW9wdHMuZGlzcGxheSkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaGVpZ2h0ID0gdGhpcy5yaWdodCA9IHRoaXMuYm90dG9tID0gMDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5yaWdodCA9IG1heFdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuYm90dG9tID0gbWF4SGVpZ2h0O1xuICAgICAgICBjb25zdCBsaW5lQ291bnQgPSBpc0FycmF5KG9wdHMudGV4dCkgPyBvcHRzLnRleHQubGVuZ3RoIDogMTtcbiAgICAgICAgdGhpcy5fcGFkZGluZyA9IHRvUGFkZGluZyhvcHRzLnBhZGRpbmcpO1xuICAgICAgICBjb25zdCB0ZXh0U2l6ZSA9IGxpbmVDb3VudCAqIHRvRm9udChvcHRzLmZvbnQpLmxpbmVIZWlnaHQgKyB0aGlzLl9wYWRkaW5nLmhlaWdodDtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGV4dFNpemU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGV4dFNpemU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG4gICAgICAgIHJldHVybiBwb3MgPT09ICd0b3AnIHx8IHBvcyA9PT0gJ2JvdHRvbSc7XG4gICAgfVxuICAgIF9kcmF3QXJncyhvZmZzZXQpIHtcbiAgICAgICAgY29uc3QgeyB0b3AgLCBsZWZ0ICwgYm90dG9tICwgcmlnaHQgLCBvcHRpb25zICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYWxpZ24gPSBvcHRpb25zLmFsaWduO1xuICAgICAgICBsZXQgcm90YXRpb24gPSAwO1xuICAgICAgICBsZXQgbWF4V2lkdGgsIHRpdGxlWCwgdGl0bGVZO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgdGl0bGVYID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGxlZnQsIHJpZ2h0KTtcbiAgICAgICAgICAgIHRpdGxlWSA9IHRvcCArIG9mZnNldDtcbiAgICAgICAgICAgIG1heFdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIHRpdGxlWCA9IGxlZnQgKyBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGJvdHRvbSwgdG9wKTtcbiAgICAgICAgICAgICAgICByb3RhdGlvbiA9IFBJICogLTAuNTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGl0bGVYID0gcmlnaHQgLSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRvcCwgYm90dG9tKTtcbiAgICAgICAgICAgICAgICByb3RhdGlvbiA9IFBJICogMC41O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWF4V2lkdGggPSBib3R0b20gLSB0b3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpdGxlWCxcbiAgICAgICAgICAgIHRpdGxlWSxcbiAgICAgICAgICAgIG1heFdpZHRoLFxuICAgICAgICAgICAgcm90YXRpb25cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZHJhdygpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmICghb3B0cy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZm9udE9wdHMgPSB0b0ZvbnQob3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgbGluZUhlaWdodCA9IGZvbnRPcHRzLmxpbmVIZWlnaHQ7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGxpbmVIZWlnaHQgLyAyICsgdGhpcy5fcGFkZGluZy50b3A7XG4gICAgICAgIGNvbnN0IHsgdGl0bGVYICwgdGl0bGVZICwgbWF4V2lkdGggLCByb3RhdGlvbiAgfSA9IHRoaXMuX2RyYXdBcmdzKG9mZnNldCk7XG4gICAgICAgIHJlbmRlclRleHQoY3R4LCBvcHRzLnRleHQsIDAsIDAsIGZvbnRPcHRzLCB7XG4gICAgICAgICAgICBjb2xvcjogb3B0cy5jb2xvcixcbiAgICAgICAgICAgIG1heFdpZHRoLFxuICAgICAgICAgICAgcm90YXRpb24sXG4gICAgICAgICAgICB0ZXh0QWxpZ246IF90b0xlZnRSaWdodENlbnRlcihvcHRzLmFsaWduKSxcbiAgICAgICAgICAgIHRleHRCYXNlbGluZTogJ21pZGRsZScsXG4gICAgICAgICAgICB0cmFuc2xhdGlvbjogW1xuICAgICAgICAgICAgICAgIHRpdGxlWCxcbiAgICAgICAgICAgICAgICB0aXRsZVlcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlVGl0bGUoY2hhcnQsIHRpdGxlT3B0cykge1xuICAgIGNvbnN0IHRpdGxlID0gbmV3IFRpdGxlKHtcbiAgICAgICAgY3R4OiBjaGFydC5jdHgsXG4gICAgICAgIG9wdGlvbnM6IHRpdGxlT3B0cyxcbiAgICAgICAgY2hhcnRcbiAgICB9KTtcbiAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIHRpdGxlT3B0cyk7XG4gICAgbGF5b3V0cy5hZGRCb3goY2hhcnQsIHRpdGxlKTtcbiAgICBjaGFydC50aXRsZUJsb2NrID0gdGl0bGU7XG59XG52YXIgcGx1Z2luX3RpdGxlID0ge1xuICAgIGlkOiAndGl0bGUnLFxuIF9lbGVtZW50OiBUaXRsZSxcbiAgICBzdGFydCAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNyZWF0ZVRpdGxlKGNoYXJ0LCBvcHRpb25zKTtcbiAgICB9LFxuICAgIHN0b3AgKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IHRpdGxlQmxvY2sgPSBjaGFydC50aXRsZUJsb2NrO1xuICAgICAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgdGl0bGVCbG9jayk7XG4gICAgICAgIGRlbGV0ZSBjaGFydC50aXRsZUJsb2NrO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBjaGFydC50aXRsZUJsb2NrO1xuICAgICAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIG9wdGlvbnMpO1xuICAgICAgICB0aXRsZS5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9LFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgIGZvbnQ6IHtcbiAgICAgICAgICAgIHdlaWdodDogJ2JvbGQnXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bGxTaXplOiB0cnVlLFxuICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgcG9zaXRpb246ICd0b3AnLFxuICAgICAgICB0ZXh0OiAnJyxcbiAgICAgICAgd2VpZ2h0OiAyMDAwXG4gICAgfSxcbiAgICBkZWZhdWx0Um91dGVzOiB7XG4gICAgICAgIGNvbG9yOiAnY29sb3InXG4gICAgfSxcbiAgICBkZXNjcmlwdG9yczoge1xuICAgICAgICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICAgICAgX2luZGV4YWJsZTogZmFsc2VcbiAgICB9XG59O1xuXG5jb25zdCBtYXAgPSBuZXcgV2Vha01hcCgpO1xudmFyIHBsdWdpbl9zdWJ0aXRsZSA9IHtcbiAgICBpZDogJ3N1YnRpdGxlJyxcbiAgICBzdGFydCAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gbmV3IFRpdGxlKHtcbiAgICAgICAgICAgIGN0eDogY2hhcnQuY3R4LFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIGNoYXJ0XG4gICAgICAgIH0pO1xuICAgICAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIG9wdGlvbnMpO1xuICAgICAgICBsYXlvdXRzLmFkZEJveChjaGFydCwgdGl0bGUpO1xuICAgICAgICBtYXAuc2V0KGNoYXJ0LCB0aXRsZSk7XG4gICAgfSxcbiAgICBzdG9wIChjaGFydCkge1xuICAgICAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgbWFwLmdldChjaGFydCkpO1xuICAgICAgICBtYXAuZGVsZXRlKGNoYXJ0KTtcbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZSAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gbWFwLmdldChjaGFydCk7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgICAgIHRpdGxlLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgZm9udDoge1xuICAgICAgICAgICAgd2VpZ2h0OiAnbm9ybWFsJ1xuICAgICAgICB9LFxuICAgICAgICBmdWxsU2l6ZTogdHJ1ZSxcbiAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgcG9zaXRpb246ICd0b3AnLFxuICAgICAgICB0ZXh0OiAnJyxcbiAgICAgICAgd2VpZ2h0OiAxNTAwXG4gICAgfSxcbiAgICBkZWZhdWx0Um91dGVzOiB7XG4gICAgICAgIGNvbG9yOiAnY29sb3InXG4gICAgfSxcbiAgICBkZXNjcmlwdG9yczoge1xuICAgICAgICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICAgICAgX2luZGV4YWJsZTogZmFsc2VcbiAgICB9XG59O1xuXG5jb25zdCBwb3NpdGlvbmVycyA9IHtcbiBhdmVyYWdlIChpdGVtcykge1xuICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpLCBsZW47XG4gICAgICAgIGxldCB4ID0gMDtcbiAgICAgICAgbGV0IHkgPSAwO1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBmb3IoaSA9IDAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gaXRlbXNbaV0uZWxlbWVudDtcbiAgICAgICAgICAgIGlmIChlbCAmJiBlbC5oYXNWYWx1ZSgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zID0gZWwudG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgeCArPSBwb3MueDtcbiAgICAgICAgICAgICAgICB5ICs9IHBvcy55O1xuICAgICAgICAgICAgICAgICsrY291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHggLyBjb3VudCxcbiAgICAgICAgICAgIHk6IHkgLyBjb3VudFxuICAgICAgICB9O1xuICAgIH0sXG4gbmVhcmVzdCAoaXRlbXMsIGV2ZW50UG9zaXRpb24pIHtcbiAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgeCA9IGV2ZW50UG9zaXRpb24ueDtcbiAgICAgICAgbGV0IHkgPSBldmVudFBvc2l0aW9uLnk7XG4gICAgICAgIGxldCBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgbGV0IGksIGxlbiwgbmVhcmVzdEVsZW1lbnQ7XG4gICAgICAgIGZvcihpID0gMCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3QgZWwgPSBpdGVtc1tpXS5lbGVtZW50O1xuICAgICAgICAgICAgaWYgKGVsICYmIGVsLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXIgPSBlbC5nZXRDZW50ZXJQb2ludCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMoZXZlbnRQb3NpdGlvbiwgY2VudGVyKTtcbiAgICAgICAgICAgICAgICBpZiAoZCA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gZDtcbiAgICAgICAgICAgICAgICAgICAgbmVhcmVzdEVsZW1lbnQgPSBlbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5lYXJlc3RFbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCB0cCA9IG5lYXJlc3RFbGVtZW50LnRvb2x0aXBQb3NpdGlvbigpO1xuICAgICAgICAgICAgeCA9IHRwLng7XG4gICAgICAgICAgICB5ID0gdHAueTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHlcbiAgICAgICAgfTtcbiAgICB9XG59O1xuZnVuY3Rpb24gcHVzaE9yQ29uY2F0KGJhc2UsIHRvUHVzaCkge1xuICAgIGlmICh0b1B1c2gpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkodG9QdXNoKSkge1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYmFzZSwgdG9QdXNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhc2UucHVzaCh0b1B1c2gpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiYXNlO1xufVxuIGZ1bmN0aW9uIHNwbGl0TmV3bGluZXMoc3RyKSB7XG4gICAgaWYgKCh0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyB8fCBzdHIgaW5zdGFuY2VvZiBTdHJpbmcpICYmIHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiBzdHIuc3BsaXQoJ1xcbicpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuIGZ1bmN0aW9uIGNyZWF0ZVRvb2x0aXBJdGVtKGNoYXJ0LCBpdGVtKSB7XG4gICAgY29uc3QgeyBlbGVtZW50ICwgZGF0YXNldEluZGV4ICwgaW5kZXggIH0gPSBpdGVtO1xuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXI7XG4gICAgY29uc3QgeyBsYWJlbCAsIHZhbHVlICB9ID0gY29udHJvbGxlci5nZXRMYWJlbEFuZFZhbHVlKGluZGV4KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjaGFydCxcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIHBhcnNlZDogY29udHJvbGxlci5nZXRQYXJzZWQoaW5kZXgpLFxuICAgICAgICByYXc6IGNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSxcbiAgICAgICAgZm9ybWF0dGVkVmFsdWU6IHZhbHVlLFxuICAgICAgICBkYXRhc2V0OiBjb250cm9sbGVyLmdldERhdGFzZXQoKSxcbiAgICAgICAgZGF0YUluZGV4OiBpbmRleCxcbiAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICBlbGVtZW50XG4gICAgfTtcbn1cbiBmdW5jdGlvbiBnZXRUb29sdGlwU2l6ZSh0b29sdGlwLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY3R4ID0gdG9vbHRpcC5jaGFydC5jdHg7XG4gICAgY29uc3QgeyBib2R5ICwgZm9vdGVyICwgdGl0bGUgIH0gPSB0b29sdGlwO1xuICAgIGNvbnN0IHsgYm94V2lkdGggLCBib3hIZWlnaHQgIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udChvcHRpb25zLnRpdGxlRm9udCk7XG4gICAgY29uc3QgZm9vdGVyRm9udCA9IHRvRm9udChvcHRpb25zLmZvb3RlckZvbnQpO1xuICAgIGNvbnN0IHRpdGxlTGluZUNvdW50ID0gdGl0bGUubGVuZ3RoO1xuICAgIGNvbnN0IGZvb3RlckxpbmVDb3VudCA9IGZvb3Rlci5sZW5ndGg7XG4gICAgY29uc3QgYm9keUxpbmVJdGVtQ291bnQgPSBib2R5Lmxlbmd0aDtcbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gICAgbGV0IGhlaWdodCA9IHBhZGRpbmcuaGVpZ2h0O1xuICAgIGxldCB3aWR0aCA9IDA7XG4gICAgbGV0IGNvbWJpbmVkQm9keUxlbmd0aCA9IGJvZHkucmVkdWNlKChjb3VudCwgYm9keUl0ZW0pPT5jb3VudCArIGJvZHlJdGVtLmJlZm9yZS5sZW5ndGggKyBib2R5SXRlbS5saW5lcy5sZW5ndGggKyBib2R5SXRlbS5hZnRlci5sZW5ndGgsIDApO1xuICAgIGNvbWJpbmVkQm9keUxlbmd0aCArPSB0b29sdGlwLmJlZm9yZUJvZHkubGVuZ3RoICsgdG9vbHRpcC5hZnRlckJvZHkubGVuZ3RoO1xuICAgIGlmICh0aXRsZUxpbmVDb3VudCkge1xuICAgICAgICBoZWlnaHQgKz0gdGl0bGVMaW5lQ291bnQgKiB0aXRsZUZvbnQubGluZUhlaWdodCArICh0aXRsZUxpbmVDb3VudCAtIDEpICogb3B0aW9ucy50aXRsZVNwYWNpbmcgKyBvcHRpb25zLnRpdGxlTWFyZ2luQm90dG9tO1xuICAgIH1cbiAgICBpZiAoY29tYmluZWRCb2R5TGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGJvZHlMaW5lSGVpZ2h0ID0gb3B0aW9ucy5kaXNwbGF5Q29sb3JzID8gTWF0aC5tYXgoYm94SGVpZ2h0LCBib2R5Rm9udC5saW5lSGVpZ2h0KSA6IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgICAgIGhlaWdodCArPSBib2R5TGluZUl0ZW1Db3VudCAqIGJvZHlMaW5lSGVpZ2h0ICsgKGNvbWJpbmVkQm9keUxlbmd0aCAtIGJvZHlMaW5lSXRlbUNvdW50KSAqIGJvZHlGb250LmxpbmVIZWlnaHQgKyAoY29tYmluZWRCb2R5TGVuZ3RoIC0gMSkgKiBvcHRpb25zLmJvZHlTcGFjaW5nO1xuICAgIH1cbiAgICBpZiAoZm9vdGVyTGluZUNvdW50KSB7XG4gICAgICAgIGhlaWdodCArPSBvcHRpb25zLmZvb3Rlck1hcmdpblRvcCArIGZvb3RlckxpbmVDb3VudCAqIGZvb3RlckZvbnQubGluZUhlaWdodCArIChmb290ZXJMaW5lQ291bnQgLSAxKSAqIG9wdGlvbnMuZm9vdGVyU3BhY2luZztcbiAgICB9XG4gICAgbGV0IHdpZHRoUGFkZGluZyA9IDA7XG4gICAgY29uc3QgbWF4TGluZVdpZHRoID0gZnVuY3Rpb24obGluZSkge1xuICAgICAgICB3aWR0aCA9IE1hdGgubWF4KHdpZHRoLCBjdHgubWVhc3VyZVRleHQobGluZSkud2lkdGggKyB3aWR0aFBhZGRpbmcpO1xuICAgIH07XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gICAgZWFjaCh0b29sdGlwLnRpdGxlLCBtYXhMaW5lV2lkdGgpO1xuICAgIGN0eC5mb250ID0gYm9keUZvbnQuc3RyaW5nO1xuICAgIGVhY2godG9vbHRpcC5iZWZvcmVCb2R5LmNvbmNhdCh0b29sdGlwLmFmdGVyQm9keSksIG1heExpbmVXaWR0aCk7XG4gICAgd2lkdGhQYWRkaW5nID0gb3B0aW9ucy5kaXNwbGF5Q29sb3JzID8gYm94V2lkdGggKyAyICsgb3B0aW9ucy5ib3hQYWRkaW5nIDogMDtcbiAgICBlYWNoKGJvZHksIChib2R5SXRlbSk9PntcbiAgICAgICAgZWFjaChib2R5SXRlbS5iZWZvcmUsIG1heExpbmVXaWR0aCk7XG4gICAgICAgIGVhY2goYm9keUl0ZW0ubGluZXMsIG1heExpbmVXaWR0aCk7XG4gICAgICAgIGVhY2goYm9keUl0ZW0uYWZ0ZXIsIG1heExpbmVXaWR0aCk7XG4gICAgfSk7XG4gICAgd2lkdGhQYWRkaW5nID0gMDtcbiAgICBjdHguZm9udCA9IGZvb3RlckZvbnQuc3RyaW5nO1xuICAgIGVhY2godG9vbHRpcC5mb290ZXIsIG1heExpbmVXaWR0aCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICB3aWR0aCArPSBwYWRkaW5nLndpZHRoO1xuICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHRcbiAgICB9O1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lWUFsaWduKGNoYXJ0LCBzaXplKSB7XG4gICAgY29uc3QgeyB5ICwgaGVpZ2h0ICB9ID0gc2l6ZTtcbiAgICBpZiAoeSA8IGhlaWdodCAvIDIpIHtcbiAgICAgICAgcmV0dXJuICd0b3AnO1xuICAgIH0gZWxzZSBpZiAoeSA+IGNoYXJ0LmhlaWdodCAtIGhlaWdodCAvIDIpIHtcbiAgICAgICAgcmV0dXJuICdib3R0b20nO1xuICAgIH1cbiAgICByZXR1cm4gJ2NlbnRlcic7XG59XG5mdW5jdGlvbiBkb2VzTm90Rml0V2l0aEFsaWduKHhBbGlnbiwgY2hhcnQsIG9wdGlvbnMsIHNpemUpIHtcbiAgICBjb25zdCB7IHggLCB3aWR0aCAgfSA9IHNpemU7XG4gICAgY29uc3QgY2FyZXQgPSBvcHRpb25zLmNhcmV0U2l6ZSArIG9wdGlvbnMuY2FyZXRQYWRkaW5nO1xuICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0JyAmJiB4ICsgd2lkdGggKyBjYXJldCA+IGNoYXJ0LndpZHRoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoeEFsaWduID09PSAncmlnaHQnICYmIHggLSB3aWR0aCAtIGNhcmV0IDwgMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVYQWxpZ24oY2hhcnQsIG9wdGlvbnMsIHNpemUsIHlBbGlnbikge1xuICAgIGNvbnN0IHsgeCAsIHdpZHRoICB9ID0gc2l6ZTtcbiAgICBjb25zdCB7IHdpZHRoOiBjaGFydFdpZHRoICwgY2hhcnRBcmVhOiB7IGxlZnQgLCByaWdodCAgfSAgfSA9IGNoYXJ0O1xuICAgIGxldCB4QWxpZ24gPSAnY2VudGVyJztcbiAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICB4QWxpZ24gPSB4IDw9IChsZWZ0ICsgcmlnaHQpIC8gMiA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgfSBlbHNlIGlmICh4IDw9IHdpZHRoIC8gMikge1xuICAgICAgICB4QWxpZ24gPSAnbGVmdCc7XG4gICAgfSBlbHNlIGlmICh4ID49IGNoYXJ0V2lkdGggLSB3aWR0aCAvIDIpIHtcbiAgICAgICAgeEFsaWduID0gJ3JpZ2h0JztcbiAgICB9XG4gICAgaWYgKGRvZXNOb3RGaXRXaXRoQWxpZ24oeEFsaWduLCBjaGFydCwgb3B0aW9ucywgc2l6ZSkpIHtcbiAgICAgICAgeEFsaWduID0gJ2NlbnRlcic7XG4gICAgfVxuICAgIHJldHVybiB4QWxpZ247XG59XG4gZnVuY3Rpb24gZGV0ZXJtaW5lQWxpZ25tZW50KGNoYXJ0LCBvcHRpb25zLCBzaXplKSB7XG4gICAgY29uc3QgeUFsaWduID0gc2l6ZS55QWxpZ24gfHwgb3B0aW9ucy55QWxpZ24gfHwgZGV0ZXJtaW5lWUFsaWduKGNoYXJ0LCBzaXplKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB4QWxpZ246IHNpemUueEFsaWduIHx8IG9wdGlvbnMueEFsaWduIHx8IGRldGVybWluZVhBbGlnbihjaGFydCwgb3B0aW9ucywgc2l6ZSwgeUFsaWduKSxcbiAgICAgICAgeUFsaWduXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGFsaWduWChzaXplLCB4QWxpZ24pIHtcbiAgICBsZXQgeyB4ICwgd2lkdGggIH0gPSBzaXplO1xuICAgIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgeCAtPSB3aWR0aDtcbiAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgeCAtPSB3aWR0aCAvIDI7XG4gICAgfVxuICAgIHJldHVybiB4O1xufVxuZnVuY3Rpb24gYWxpZ25ZKHNpemUsIHlBbGlnbiwgcGFkZGluZ0FuZFNpemUpIHtcbiAgICBsZXQgeyB5ICwgaGVpZ2h0ICB9ID0gc2l6ZTtcbiAgICBpZiAoeUFsaWduID09PSAndG9wJykge1xuICAgICAgICB5ICs9IHBhZGRpbmdBbmRTaXplO1xuICAgIH0gZWxzZSBpZiAoeUFsaWduID09PSAnYm90dG9tJykge1xuICAgICAgICB5IC09IGhlaWdodCArIHBhZGRpbmdBbmRTaXplO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHkgLT0gaGVpZ2h0IC8gMjtcbiAgICB9XG4gICAgcmV0dXJuIHk7XG59XG4gZnVuY3Rpb24gZ2V0QmFja2dyb3VuZFBvaW50KG9wdGlvbnMsIHNpemUsIGFsaWdubWVudCwgY2hhcnQpIHtcbiAgICBjb25zdCB7IGNhcmV0U2l6ZSAsIGNhcmV0UGFkZGluZyAsIGNvcm5lclJhZGl1cyAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgeyB4QWxpZ24gLCB5QWxpZ24gIH0gPSBhbGlnbm1lbnQ7XG4gICAgY29uc3QgcGFkZGluZ0FuZFNpemUgPSBjYXJldFNpemUgKyBjYXJldFBhZGRpbmc7XG4gICAgY29uc3QgeyB0b3BMZWZ0ICwgdG9wUmlnaHQgLCBib3R0b21MZWZ0ICwgYm90dG9tUmlnaHQgIH0gPSB0b1RSQkxDb3JuZXJzKGNvcm5lclJhZGl1cyk7XG4gICAgbGV0IHggPSBhbGlnblgoc2l6ZSwgeEFsaWduKTtcbiAgICBjb25zdCB5ID0gYWxpZ25ZKHNpemUsIHlBbGlnbiwgcGFkZGluZ0FuZFNpemUpO1xuICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgeCArPSBwYWRkaW5nQW5kU2l6ZTtcbiAgICAgICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIHggLT0gcGFkZGluZ0FuZFNpemU7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIHggLT0gTWF0aC5tYXgodG9wTGVmdCwgYm90dG9tTGVmdCkgKyBjYXJldFNpemU7XG4gICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgeCArPSBNYXRoLm1heCh0b3BSaWdodCwgYm90dG9tUmlnaHQpICsgY2FyZXRTaXplO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBfbGltaXRWYWx1ZSh4LCAwLCBjaGFydC53aWR0aCAtIHNpemUud2lkdGgpLFxuICAgICAgICB5OiBfbGltaXRWYWx1ZSh5LCAwLCBjaGFydC5oZWlnaHQgLSBzaXplLmhlaWdodClcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0QWxpZ25lZFgodG9vbHRpcCwgYWxpZ24sIG9wdGlvbnMpIHtcbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gICAgcmV0dXJuIGFsaWduID09PSAnY2VudGVyJyA/IHRvb2x0aXAueCArIHRvb2x0aXAud2lkdGggLyAyIDogYWxpZ24gPT09ICdyaWdodCcgPyB0b29sdGlwLnggKyB0b29sdGlwLndpZHRoIC0gcGFkZGluZy5yaWdodCA6IHRvb2x0aXAueCArIHBhZGRpbmcubGVmdDtcbn1cbiBmdW5jdGlvbiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhjYWxsYmFjaykge1xuICAgIHJldHVybiBwdXNoT3JDb25jYXQoW10sIHNwbGl0TmV3bGluZXMoY2FsbGJhY2spKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRvb2x0aXBDb250ZXh0KHBhcmVudCwgdG9vbHRpcCwgdG9vbHRpcEl0ZW1zKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgICAgIHRvb2x0aXAsXG4gICAgICAgIHRvb2x0aXBJdGVtcyxcbiAgICAgICAgdHlwZTogJ3Rvb2x0aXAnXG4gICAgfSk7XG59XG5mdW5jdGlvbiBvdmVycmlkZUNhbGxiYWNrcyhjYWxsYmFja3MsIGNvbnRleHQpIHtcbiAgICBjb25zdCBvdmVycmlkZSA9IGNvbnRleHQgJiYgY29udGV4dC5kYXRhc2V0ICYmIGNvbnRleHQuZGF0YXNldC50b29sdGlwICYmIGNvbnRleHQuZGF0YXNldC50b29sdGlwLmNhbGxiYWNrcztcbiAgICByZXR1cm4gb3ZlcnJpZGUgPyBjYWxsYmFja3Mub3ZlcnJpZGUob3ZlcnJpZGUpIDogY2FsbGJhY2tzO1xufVxuY29uc3QgZGVmYXVsdENhbGxiYWNrcyA9IHtcbiAgICBiZWZvcmVUaXRsZTogbm9vcCxcbiAgICB0aXRsZSAodG9vbHRpcEl0ZW1zKSB7XG4gICAgICAgIGlmICh0b29sdGlwSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRvb2x0aXBJdGVtc1swXTtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVscyA9IGl0ZW0uY2hhcnQuZGF0YS5sYWJlbHM7XG4gICAgICAgICAgICBjb25zdCBsYWJlbENvdW50ID0gbGFiZWxzID8gbGFiZWxzLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICBpZiAodGhpcyAmJiB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLm1vZGUgPT09ICdkYXRhc2V0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmRhdGFzZXQubGFiZWwgfHwgJyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5sYWJlbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFiZWxDb3VudCA+IDAgJiYgaXRlbS5kYXRhSW5kZXggPCBsYWJlbENvdW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsc1tpdGVtLmRhdGFJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH0sXG4gICAgYWZ0ZXJUaXRsZTogbm9vcCxcbiAgICBiZWZvcmVCb2R5OiBub29wLFxuICAgIGJlZm9yZUxhYmVsOiBub29wLFxuICAgIGxhYmVsICh0b29sdGlwSXRlbSkge1xuICAgICAgICBpZiAodGhpcyAmJiB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLm1vZGUgPT09ICdkYXRhc2V0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRvb2x0aXBJdGVtLmxhYmVsICsgJzogJyArIHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlIHx8IHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsYWJlbCA9IHRvb2x0aXBJdGVtLmRhdGFzZXQubGFiZWwgfHwgJyc7XG4gICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgbGFiZWwgKz0gJzogJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICAgICAgICBsYWJlbCArPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgfSxcbiAgICBsYWJlbENvbG9yICh0b29sdGlwSXRlbSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdG9vbHRpcEl0ZW0uY2hhcnQuZ2V0RGF0YXNldE1ldGEodG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4KTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZSh0b29sdGlwSXRlbS5kYXRhSW5kZXgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgYm9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICBib3JkZXJEYXNoOiBvcHRpb25zLmJvcmRlckRhc2gsXG4gICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiBvcHRpb25zLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDBcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGxhYmVsVGV4dENvbG9yICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ib2R5Q29sb3I7XG4gICAgfSxcbiAgICBsYWJlbFBvaW50U3R5bGUgKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0b29sdGlwSXRlbS5jaGFydC5nZXREYXRhc2V0TWV0YSh0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHRvb2x0aXBJdGVtLmRhdGFJbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwb2ludFN0eWxlOiBvcHRpb25zLnBvaW50U3R5bGUsXG4gICAgICAgICAgICByb3RhdGlvbjogb3B0aW9ucy5yb3RhdGlvblxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWZ0ZXJMYWJlbDogbm9vcCxcbiAgICBhZnRlckJvZHk6IG5vb3AsXG4gICAgYmVmb3JlRm9vdGVyOiBub29wLFxuICAgIGZvb3Rlcjogbm9vcCxcbiAgICBhZnRlckZvb3Rlcjogbm9vcFxufTtcbiBmdW5jdGlvbiBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsIG5hbWUsIGN0eCwgYXJnKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gY2FsbGJhY2tzW25hbWVdLmNhbGwoY3R4LCBhcmcpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdENhbGxiYWNrc1tuYW1lXS5jYWxsKGN0eCwgYXJnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNsYXNzIFRvb2x0aXAgZXh0ZW5kcyBFbGVtZW50IHtcbiBzdGF0aWMgcG9zaXRpb25lcnMgPSBwb3NpdGlvbmVycztcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wYWNpdHkgPSAwO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBbXTtcbiAgICAgICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fY2FjaGVkQW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdG9vbHRpcEl0ZW1zID0gW107XG4gICAgICAgIHRoaXMuJGFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2hhcnQgPSBjb25maWcuY2hhcnQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgICAgICB0aGlzLmRhdGFQb2ludHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudGl0bGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYmVmb3JlQm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmFmdGVyQm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5mb290ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueEFsaWduID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnlBbGlnbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy54ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNhcmV0WCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jYXJldFkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGFiZWxDb2xvcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGFiZWxQb2ludFN0eWxlcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYWJlbFRleHRDb2xvcnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGluaXRpYWxpemUob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiBfcmVzb2x2ZUFuaW1hdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuX2NhY2hlZEFuaW1hdGlvbnM7XG4gICAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBjb25zdCBvcHRzID0gb3B0aW9ucy5lbmFibGVkICYmIGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uICYmIG9wdGlvbnMuYW5pbWF0aW9ucztcbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IG5ldyBBbmltYXRpb25zKHRoaXMuY2hhcnQsIG9wdHMpO1xuICAgICAgICBpZiAob3B0cy5fY2FjaGVhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gT2JqZWN0LmZyZWV6ZShhbmltYXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgICB9XG4gZ2V0Q29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGNvbnRleHQgfHwgKHRoaXMuJGNvbnRleHQgPSBjcmVhdGVUb29sdGlwQ29udGV4dCh0aGlzLmNoYXJ0LmdldENvbnRleHQoKSwgdGhpcywgdGhpcy5fdG9vbHRpcEl0ZW1zKSk7XG4gICAgfVxuICAgIGdldFRpdGxlKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBjYWxsYmFja3MgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBiZWZvcmVUaXRsZSA9IGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgJ2JlZm9yZVRpdGxlJywgdGhpcywgY29udGV4dCk7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAndGl0bGUnLCB0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgY29uc3QgYWZ0ZXJUaXRsZSA9IGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgJ2FmdGVyVGl0bGUnLCB0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgbGV0IGxpbmVzID0gW107XG4gICAgICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGJlZm9yZVRpdGxlKSk7XG4gICAgICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKHRpdGxlKSk7XG4gICAgICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGFmdGVyVGl0bGUpKTtcbiAgICAgICAgcmV0dXJuIGxpbmVzO1xuICAgIH1cbiAgICBnZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMoaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2sob3B0aW9ucy5jYWxsYmFja3MsICdiZWZvcmVCb2R5JywgdGhpcywgdG9vbHRpcEl0ZW1zKSk7XG4gICAgfVxuICAgIGdldEJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgY2FsbGJhY2tzICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgYm9keUl0ZW1zID0gW107XG4gICAgICAgIGVhY2godG9vbHRpcEl0ZW1zLCAoY29udGV4dCk9PntcbiAgICAgICAgICAgIGNvbnN0IGJvZHlJdGVtID0ge1xuICAgICAgICAgICAgICAgIGJlZm9yZTogW10sXG4gICAgICAgICAgICAgICAgbGluZXM6IFtdLFxuICAgICAgICAgICAgICAgIGFmdGVyOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHNjb3BlZCA9IG92ZXJyaWRlQ2FsbGJhY2tzKGNhbGxiYWNrcywgY29udGV4dCk7XG4gICAgICAgICAgICBwdXNoT3JDb25jYXQoYm9keUl0ZW0uYmVmb3JlLCBzcGxpdE5ld2xpbmVzKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKHNjb3BlZCwgJ2JlZm9yZUxhYmVsJywgdGhpcywgY29udGV4dCkpKTtcbiAgICAgICAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5saW5lcywgaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnbGFiZWwnLCB0aGlzLCBjb250ZXh0KSk7XG4gICAgICAgICAgICBwdXNoT3JDb25jYXQoYm9keUl0ZW0uYWZ0ZXIsIHNwbGl0TmV3bGluZXMoaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnYWZ0ZXJMYWJlbCcsIHRoaXMsIGNvbnRleHQpKSk7XG4gICAgICAgICAgICBib2R5SXRlbXMucHVzaChib2R5SXRlbSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYm9keUl0ZW1zO1xuICAgIH1cbiAgICBnZXRBZnRlckJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhvcHRpb25zLmNhbGxiYWNrcywgJ2FmdGVyQm9keScsIHRoaXMsIHRvb2x0aXBJdGVtcykpO1xuICAgIH1cbiAgICBnZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgY2FsbGJhY2tzICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgYmVmb3JlRm9vdGVyID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAnYmVmb3JlRm9vdGVyJywgdGhpcywgdG9vbHRpcEl0ZW1zKTtcbiAgICAgICAgY29uc3QgZm9vdGVyID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAnZm9vdGVyJywgdGhpcywgdG9vbHRpcEl0ZW1zKTtcbiAgICAgICAgY29uc3QgYWZ0ZXJGb290ZXIgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICdhZnRlckZvb3RlcicsIHRoaXMsIHRvb2x0aXBJdGVtcyk7XG4gICAgICAgIGxldCBsaW5lcyA9IFtdO1xuICAgICAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhiZWZvcmVGb290ZXIpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoZm9vdGVyKSk7XG4gICAgICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGFmdGVyRm9vdGVyKSk7XG4gICAgICAgIHJldHVybiBsaW5lcztcbiAgICB9XG4gX2NyZWF0ZUl0ZW1zKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5jaGFydC5kYXRhO1xuICAgICAgICBjb25zdCBsYWJlbENvbG9ycyA9IFtdO1xuICAgICAgICBjb25zdCBsYWJlbFBvaW50U3R5bGVzID0gW107XG4gICAgICAgIGNvbnN0IGxhYmVsVGV4dENvbG9ycyA9IFtdO1xuICAgICAgICBsZXQgdG9vbHRpcEl0ZW1zID0gW107XG4gICAgICAgIGxldCBpLCBsZW47XG4gICAgICAgIGZvcihpID0gMCwgbGVuID0gYWN0aXZlLmxlbmd0aDsgaSA8IGxlbjsgKytpKXtcbiAgICAgICAgICAgIHRvb2x0aXBJdGVtcy5wdXNoKGNyZWF0ZVRvb2x0aXBJdGVtKHRoaXMuY2hhcnQsIGFjdGl2ZVtpXSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmZpbHRlcikge1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLmZpbHRlcigoZWxlbWVudCwgaW5kZXgsIGFycmF5KT0+b3B0aW9ucy5maWx0ZXIoZWxlbWVudCwgaW5kZXgsIGFycmF5LCBkYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaXRlbVNvcnQpIHtcbiAgICAgICAgICAgIHRvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcy5zb3J0KChhLCBiKT0+b3B0aW9ucy5pdGVtU29ydChhLCBiLCBkYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWFjaCh0b29sdGlwSXRlbXMsIChjb250ZXh0KT0+e1xuICAgICAgICAgICAgY29uc3Qgc2NvcGVkID0gb3ZlcnJpZGVDYWxsYmFja3Mob3B0aW9ucy5jYWxsYmFja3MsIGNvbnRleHQpO1xuICAgICAgICAgICAgbGFiZWxDb2xvcnMucHVzaChpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhzY29wZWQsICdsYWJlbENvbG9yJywgdGhpcywgY29udGV4dCkpO1xuICAgICAgICAgICAgbGFiZWxQb2ludFN0eWxlcy5wdXNoKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKHNjb3BlZCwgJ2xhYmVsUG9pbnRTdHlsZScsIHRoaXMsIGNvbnRleHQpKTtcbiAgICAgICAgICAgIGxhYmVsVGV4dENvbG9ycy5wdXNoKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKHNjb3BlZCwgJ2xhYmVsVGV4dENvbG9yJywgdGhpcywgY29udGV4dCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sYWJlbENvbG9ycyA9IGxhYmVsQ29sb3JzO1xuICAgICAgICB0aGlzLmxhYmVsUG9pbnRTdHlsZXMgPSBsYWJlbFBvaW50U3R5bGVzO1xuICAgICAgICB0aGlzLmxhYmVsVGV4dENvbG9ycyA9IGxhYmVsVGV4dENvbG9ycztcbiAgICAgICAgdGhpcy5kYXRhUG9pbnRzID0gdG9vbHRpcEl0ZW1zO1xuICAgICAgICByZXR1cm4gdG9vbHRpcEl0ZW1zO1xuICAgIH1cbiAgICB1cGRhdGUoY2hhbmdlZCwgcmVwbGF5KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcbiAgICAgICAgbGV0IHByb3BlcnRpZXM7XG4gICAgICAgIGxldCB0b29sdGlwSXRlbXMgPSBbXTtcbiAgICAgICAgaWYgKCFhY3RpdmUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcGFjaXR5ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdGlvbnMucG9zaXRpb25dLmNhbGwodGhpcywgYWN0aXZlLCB0aGlzLl9ldmVudFBvc2l0aW9uKTtcbiAgICAgICAgICAgIHRvb2x0aXBJdGVtcyA9IHRoaXMuX2NyZWF0ZUl0ZW1zKG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy50aXRsZSA9IHRoaXMuZ2V0VGl0bGUodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlQm9keSA9IHRoaXMuZ2V0QmVmb3JlQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5ib2R5ID0gdGhpcy5nZXRCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmFmdGVyQm9keSA9IHRoaXMuZ2V0QWZ0ZXJCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmZvb3RlciA9IHRoaXMuZ2V0Rm9vdGVyKHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gdGhpcy5fc2l6ZSA9IGdldFRvb2x0aXBTaXplKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BbmRTaXplID0gT2JqZWN0LmFzc2lnbih7fSwgcG9zaXRpb24sIHNpemUpO1xuICAgICAgICAgICAgY29uc3QgYWxpZ25tZW50ID0gZGV0ZXJtaW5lQWxpZ25tZW50KHRoaXMuY2hhcnQsIG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSk7XG4gICAgICAgICAgICBjb25zdCBiYWNrZ3JvdW5kUG9pbnQgPSBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgcG9zaXRpb25BbmRTaXplLCBhbGlnbm1lbnQsIHRoaXMuY2hhcnQpO1xuICAgICAgICAgICAgdGhpcy54QWxpZ24gPSBhbGlnbm1lbnQueEFsaWduO1xuICAgICAgICAgICAgdGhpcy55QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuICAgICAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIHg6IGJhY2tncm91bmRQb2ludC54LFxuICAgICAgICAgICAgICAgIHk6IGJhY2tncm91bmRQb2ludC55LFxuICAgICAgICAgICAgICAgIHdpZHRoOiBzaXplLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogc2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgY2FyZXRYOiBwb3NpdGlvbi54LFxuICAgICAgICAgICAgICAgIGNhcmV0WTogcG9zaXRpb24ueVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXM7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucygpLnVwZGF0ZSh0aGlzLCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbmdlZCAmJiBvcHRpb25zLmV4dGVybmFsKSB7XG4gICAgICAgICAgICBvcHRpb25zLmV4dGVybmFsLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB0aGlzLmNoYXJ0LFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHRoaXMsXG4gICAgICAgICAgICAgICAgcmVwbGF5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3Q2FyZXQodG9vbHRpcFBvaW50LCBjdHgsIHNpemUsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY2FyZXRQb3NpdGlvbiA9IHRoaXMuZ2V0Q2FyZXRQb3NpdGlvbih0b29sdGlwUG9pbnQsIHNpemUsIG9wdGlvbnMpO1xuICAgICAgICBjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDEsIGNhcmV0UG9zaXRpb24ueTEpO1xuICAgICAgICBjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDIsIGNhcmV0UG9zaXRpb24ueTIpO1xuICAgICAgICBjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDMsIGNhcmV0UG9zaXRpb24ueTMpO1xuICAgIH1cbiAgICBnZXRDYXJldFBvc2l0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHhBbGlnbiAsIHlBbGlnbiAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgY2FyZXRTaXplICwgY29ybmVyUmFkaXVzICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgeyB0b3BMZWZ0ICwgdG9wUmlnaHQgLCBib3R0b21MZWZ0ICwgYm90dG9tUmlnaHQgIH0gPSB0b1RSQkxDb3JuZXJzKGNvcm5lclJhZGl1cyk7XG4gICAgICAgIGNvbnN0IHsgeDogcHRYICwgeTogcHRZICB9ID0gdG9vbHRpcFBvaW50O1xuICAgICAgICBjb25zdCB7IHdpZHRoICwgaGVpZ2h0ICB9ID0gc2l6ZTtcbiAgICAgICAgbGV0IHgxLCB4MiwgeDMsIHkxLCB5MiwgeTM7XG4gICAgICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICB5MiA9IHB0WSArIGhlaWdodCAvIDI7XG4gICAgICAgICAgICBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgICAgICB4MSA9IHB0WDtcbiAgICAgICAgICAgICAgICB4MiA9IHgxIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHkxID0geTIgKyBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeTMgPSB5MiAtIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeDEgPSBwdFggKyB3aWR0aDtcbiAgICAgICAgICAgICAgICB4MiA9IHgxICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHkxID0geTIgLSBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeTMgPSB5MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHgzID0geDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgICAgICB4MiA9IHB0WCArIE1hdGgubWF4KHRvcExlZnQsIGJvdHRvbUxlZnQpICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgICB4MiA9IHB0WCArIHdpZHRoIC0gTWF0aC5tYXgodG9wUmlnaHQsIGJvdHRvbVJpZ2h0KSAtIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeDIgPSB0aGlzLmNhcmV0WDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICAgICAgeTEgPSBwdFk7XG4gICAgICAgICAgICAgICAgeTIgPSB5MSAtIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB4MSA9IHgyIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHgzID0geDIgKyBjYXJldFNpemU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHkxID0gcHRZICsgaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHkyID0geTEgKyBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeDEgPSB4MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB4MyA9IHgyIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeTMgPSB5MTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICB4MixcbiAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgeTEsXG4gICAgICAgICAgICB5MixcbiAgICAgICAgICAgIHkzXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRyYXdUaXRsZShwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gdGhpcy50aXRsZTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGl0bGUubGVuZ3RoO1xuICAgICAgICBsZXQgdGl0bGVGb250LCB0aXRsZVNwYWNpbmcsIGk7XG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0aW9ucy5ydGwsIHRoaXMueCwgdGhpcy53aWR0aCk7XG4gICAgICAgICAgICBwdC54ID0gZ2V0QWxpZ25lZFgodGhpcywgb3B0aW9ucy50aXRsZUFsaWduLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKG9wdGlvbnMudGl0bGVBbGlnbik7XG4gICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgICAgICB0aXRsZUZvbnQgPSB0b0ZvbnQob3B0aW9ucy50aXRsZUZvbnQpO1xuICAgICAgICAgICAgdGl0bGVTcGFjaW5nID0gb3B0aW9ucy50aXRsZVNwYWNpbmc7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy50aXRsZUNvbG9yO1xuICAgICAgICAgICAgY3R4LmZvbnQgPSB0aXRsZUZvbnQuc3RyaW5nO1xuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgICAgIGN0eC5maWxsVGV4dCh0aXRsZVtpXSwgcnRsSGVscGVyLngocHQueCksIHB0LnkgKyB0aXRsZUZvbnQubGluZUhlaWdodCAvIDIpO1xuICAgICAgICAgICAgICAgIHB0LnkgKz0gdGl0bGVGb250LmxpbmVIZWlnaHQgKyB0aXRsZVNwYWNpbmc7XG4gICAgICAgICAgICAgICAgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcHQueSArPSBvcHRpb25zLnRpdGxlTWFyZ2luQm90dG9tIC0gdGl0bGVTcGFjaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiBfZHJhd0NvbG9yQm94KGN0eCwgcHQsIGksIHJ0bEhlbHBlciwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBsYWJlbENvbG9yID0gdGhpcy5sYWJlbENvbG9yc1tpXTtcbiAgICAgICAgY29uc3QgbGFiZWxQb2ludFN0eWxlID0gdGhpcy5sYWJlbFBvaW50U3R5bGVzW2ldO1xuICAgICAgICBjb25zdCB7IGJveEhlaWdodCAsIGJveFdpZHRoICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgYm9keUZvbnQgPSB0b0ZvbnQob3B0aW9ucy5ib2R5Rm9udCk7XG4gICAgICAgIGNvbnN0IGNvbG9yWCA9IGdldEFsaWduZWRYKHRoaXMsICdsZWZ0Jywgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHJ0bENvbG9yWCA9IHJ0bEhlbHBlci54KGNvbG9yWCk7XG4gICAgICAgIGNvbnN0IHlPZmZTZXQgPSBib3hIZWlnaHQgPCBib2R5Rm9udC5saW5lSGVpZ2h0ID8gKGJvZHlGb250LmxpbmVIZWlnaHQgLSBib3hIZWlnaHQpIC8gMiA6IDA7XG4gICAgICAgIGNvbnN0IGNvbG9yWSA9IHB0LnkgKyB5T2ZmU2V0O1xuICAgICAgICBpZiAob3B0aW9ucy51c2VQb2ludFN0eWxlKSB7XG4gICAgICAgICAgICBjb25zdCBkcmF3T3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICByYWRpdXM6IE1hdGgubWluKGJveFdpZHRoLCBib3hIZWlnaHQpIC8gMixcbiAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBsYWJlbFBvaW50U3R5bGUucG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICByb3RhdGlvbjogbGFiZWxQb2ludFN0eWxlLnJvdGF0aW9uLFxuICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAxXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgY2VudGVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bENvbG9yWCwgYm94V2lkdGgpICsgYm94V2lkdGggLyAyO1xuICAgICAgICAgICAgY29uc3QgY2VudGVyWSA9IGNvbG9yWSArIGJveEhlaWdodCAvIDI7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLm11bHRpS2V5QmFja2dyb3VuZDtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLm11bHRpS2V5QmFja2dyb3VuZDtcbiAgICAgICAgICAgIGRyYXdQb2ludChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxhYmVsQ29sb3IuYm9yZGVyQ29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvci5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICBkcmF3UG9pbnQoY3R4LCBkcmF3T3B0aW9ucywgY2VudGVyWCwgY2VudGVyWSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHgubGluZVdpZHRoID0gaXNPYmplY3QobGFiZWxDb2xvci5ib3JkZXJXaWR0aCkgPyBNYXRoLm1heCguLi5PYmplY3QudmFsdWVzKGxhYmVsQ29sb3IuYm9yZGVyV2lkdGgpKSA6IGxhYmVsQ29sb3IuYm9yZGVyV2lkdGggfHwgMTtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxhYmVsQ29sb3IuYm9yZGVyQ29sb3I7XG4gICAgICAgICAgICBjdHguc2V0TGluZURhc2gobGFiZWxDb2xvci5ib3JkZXJEYXNoIHx8IFtdKTtcbiAgICAgICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGxhYmVsQ29sb3IuYm9yZGVyRGFzaE9mZnNldCB8fCAwO1xuICAgICAgICAgICAgY29uc3Qgb3V0ZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib3hXaWR0aCk7XG4gICAgICAgICAgICBjb25zdCBpbm5lclggPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueFBsdXMocnRsQ29sb3JYLCAxKSwgYm94V2lkdGggLSAyKTtcbiAgICAgICAgICAgIGNvbnN0IGJvcmRlclJhZGl1cyA9IHRvVFJCTENvcm5lcnMobGFiZWxDb2xvci5ib3JkZXJSYWRpdXMpO1xuICAgICAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKCh2KT0+diAhPT0gMCkpIHtcbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgeDogb3V0ZXJYLFxuICAgICAgICAgICAgICAgICAgICB5OiBjb2xvclksXG4gICAgICAgICAgICAgICAgICAgIHc6IGJveFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoOiBib3hIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGxhYmVsQ29sb3IuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGlubmVyWCxcbiAgICAgICAgICAgICAgICAgICAgeTogY29sb3JZICsgMSxcbiAgICAgICAgICAgICAgICAgICAgdzogYm94V2lkdGggLSAyLFxuICAgICAgICAgICAgICAgICAgICBoOiBib3hIZWlnaHQgLSAyLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1c1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLm11bHRpS2V5QmFja2dyb3VuZDtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3Qob3V0ZXJYLCBjb2xvclksIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2VSZWN0KG91dGVyWCwgY29sb3JZLCBib3hXaWR0aCwgYm94SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvci5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGlubmVyWCwgY29sb3JZICsgMSwgYm94V2lkdGggLSAyLCBib3hIZWlnaHQgLSAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5sYWJlbFRleHRDb2xvcnNbaV07XG4gICAgfVxuICAgIGRyYXdCb2R5KHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBib2R5ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBib2R5U3BhY2luZyAsIGJvZHlBbGlnbiAsIGRpc3BsYXlDb2xvcnMgLCBib3hIZWlnaHQgLCBib3hXaWR0aCAsIGJveFBhZGRpbmcgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBib2R5Rm9udCA9IHRvRm9udChvcHRpb25zLmJvZHlGb250KTtcbiAgICAgICAgbGV0IGJvZHlMaW5lSGVpZ2h0ID0gYm9keUZvbnQubGluZUhlaWdodDtcbiAgICAgICAgbGV0IHhMaW5lUGFkZGluZyA9IDA7XG4gICAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0aW9ucy5ydGwsIHRoaXMueCwgdGhpcy53aWR0aCk7XG4gICAgICAgIGNvbnN0IGZpbGxMaW5lT2ZUZXh0ID0gZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGxpbmUsIHJ0bEhlbHBlci54KHB0LnggKyB4TGluZVBhZGRpbmcpLCBwdC55ICsgYm9keUxpbmVIZWlnaHQgLyAyKTtcbiAgICAgICAgICAgIHB0LnkgKz0gYm9keUxpbmVIZWlnaHQgKyBib2R5U3BhY2luZztcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24gPSBydGxIZWxwZXIudGV4dEFsaWduKGJvZHlBbGlnbik7XG4gICAgICAgIGxldCBib2R5SXRlbSwgdGV4dENvbG9yLCBsaW5lcywgaSwgaiwgaWxlbiwgamxlbjtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IGJvZHlBbGlnbjtcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBjdHguZm9udCA9IGJvZHlGb250LnN0cmluZztcbiAgICAgICAgcHQueCA9IGdldEFsaWduZWRYKHRoaXMsIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYm9keUNvbG9yO1xuICAgICAgICBlYWNoKHRoaXMuYmVmb3JlQm9keSwgZmlsbExpbmVPZlRleHQpO1xuICAgICAgICB4TGluZVBhZGRpbmcgPSBkaXNwbGF5Q29sb3JzICYmIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uICE9PSAncmlnaHQnID8gYm9keUFsaWduID09PSAnY2VudGVyJyA/IGJveFdpZHRoIC8gMiArIGJveFBhZGRpbmcgOiBib3hXaWR0aCArIDIgKyBib3hQYWRkaW5nIDogMDtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gYm9keS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgYm9keUl0ZW0gPSBib2R5W2ldO1xuICAgICAgICAgICAgdGV4dENvbG9yID0gdGhpcy5sYWJlbFRleHRDb2xvcnNbaV07XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gdGV4dENvbG9yO1xuICAgICAgICAgICAgZWFjaChib2R5SXRlbS5iZWZvcmUsIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICAgICAgICAgIGxpbmVzID0gYm9keUl0ZW0ubGluZXM7XG4gICAgICAgICAgICBpZiAoZGlzcGxheUNvbG9ycyAmJiBsaW5lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmF3Q29sb3JCb3goY3R4LCBwdCwgaSwgcnRsSGVscGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBib2R5TGluZUhlaWdodCA9IE1hdGgubWF4KGJvZHlGb250LmxpbmVIZWlnaHQsIGJveEhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IoaiA9IDAsIGpsZW4gPSBsaW5lcy5sZW5ndGg7IGogPCBqbGVuOyArK2ope1xuICAgICAgICAgICAgICAgIGZpbGxMaW5lT2ZUZXh0KGxpbmVzW2pdKTtcbiAgICAgICAgICAgICAgICBib2R5TGluZUhlaWdodCA9IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlYWNoKGJvZHlJdGVtLmFmdGVyLCBmaWxsTGluZU9mVGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgeExpbmVQYWRkaW5nID0gMDtcbiAgICAgICAgYm9keUxpbmVIZWlnaHQgPSBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgICAgICBlYWNoKHRoaXMuYWZ0ZXJCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG4gICAgICAgIHB0LnkgLT0gYm9keVNwYWNpbmc7XG4gICAgfVxuICAgIGRyYXdGb290ZXIocHQsIGN0eCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBmb290ZXIgPSB0aGlzLmZvb3RlcjtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gZm9vdGVyLmxlbmd0aDtcbiAgICAgICAgbGV0IGZvb3RlckZvbnQsIGk7XG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0aW9ucy5ydGwsIHRoaXMueCwgdGhpcy53aWR0aCk7XG4gICAgICAgICAgICBwdC54ID0gZ2V0QWxpZ25lZFgodGhpcywgb3B0aW9ucy5mb290ZXJBbGlnbiwgb3B0aW9ucyk7XG4gICAgICAgICAgICBwdC55ICs9IG9wdGlvbnMuZm9vdGVyTWFyZ2luVG9wO1xuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24ob3B0aW9ucy5mb290ZXJBbGlnbik7XG4gICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgICAgICBmb290ZXJGb250ID0gdG9Gb250KG9wdGlvbnMuZm9vdGVyRm9udCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5mb290ZXJDb2xvcjtcbiAgICAgICAgICAgIGN0eC5mb250ID0gZm9vdGVyRm9udC5zdHJpbmc7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSl7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGZvb3RlcltpXSwgcnRsSGVscGVyLngocHQueCksIHB0LnkgKyBmb290ZXJGb250LmxpbmVIZWlnaHQgLyAyKTtcbiAgICAgICAgICAgICAgICBwdC55ICs9IGZvb3RlckZvbnQubGluZUhlaWdodCArIG9wdGlvbnMuZm9vdGVyU3BhY2luZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3QmFja2dyb3VuZChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHhBbGlnbiAsIHlBbGlnbiAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgIH0gPSBwdDtcbiAgICAgICAgY29uc3QgeyB3aWR0aCAsIGhlaWdodCAgfSA9IHRvb2x0aXBTaXplO1xuICAgICAgICBjb25zdCB7IHRvcExlZnQgLCB0b3BSaWdodCAsIGJvdHRvbUxlZnQgLCBib3R0b21SaWdodCAgfSA9IHRvVFJCTENvcm5lcnMob3B0aW9ucy5jb3JuZXJSYWRpdXMpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRpb25zLmJvcmRlcldpZHRoO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCArIHRvcExlZnQsIHkpO1xuICAgICAgICBpZiAoeUFsaWduID09PSAndG9wJykge1xuICAgICAgICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHdpZHRoIC0gdG9wUmlnaHQsIHkpO1xuICAgICAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHksIHggKyB3aWR0aCwgeSArIHRvcFJpZ2h0KTtcbiAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicgJiYgeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQgLSBib3R0b21SaWdodCk7XG4gICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCwgeCArIHdpZHRoIC0gYm90dG9tUmlnaHQsIHkgKyBoZWlnaHQpO1xuICAgICAgICBpZiAoeUFsaWduID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5saW5lVG8oeCArIGJvdHRvbUxlZnQsIHkgKyBoZWlnaHQpO1xuICAgICAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5ICsgaGVpZ2h0LCB4LCB5ICsgaGVpZ2h0IC0gYm90dG9tTGVmdCk7XG4gICAgICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInICYmIHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVUbyh4LCB5ICsgdG9wTGVmdCk7XG4gICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHksIHggKyB0b3BMZWZ0LCB5KTtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBpZiAob3B0aW9ucy5ib3JkZXJXaWR0aCA+IDApIHtcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiBfdXBkYXRlQW5pbWF0aW9uVGFyZ2V0KG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBhbmltcyA9IHRoaXMuJGFuaW1hdGlvbnM7XG4gICAgICAgIGNvbnN0IGFuaW1YID0gYW5pbXMgJiYgYW5pbXMueDtcbiAgICAgICAgY29uc3QgYW5pbVkgPSBhbmltcyAmJiBhbmltcy55O1xuICAgICAgICBpZiAoYW5pbVggfHwgYW5pbVkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCB0aGlzLl9hY3RpdmUsIHRoaXMuX2V2ZW50UG9zaXRpb24pO1xuICAgICAgICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9zaXplID0gZ2V0VG9vbHRpcFNpemUodGhpcywgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbkFuZFNpemUgPSBPYmplY3QuYXNzaWduKHt9LCBwb3NpdGlvbiwgdGhpcy5fc2l6ZSk7XG4gICAgICAgICAgICBjb25zdCBhbGlnbm1lbnQgPSBkZXRlcm1pbmVBbGlnbm1lbnQoY2hhcnQsIG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSk7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUsIGFsaWdubWVudCwgY2hhcnQpO1xuICAgICAgICAgICAgaWYgKGFuaW1YLl90byAhPT0gcG9pbnQueCB8fCBhbmltWS5fdG8gIT09IHBvaW50LnkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG4gICAgICAgICAgICAgICAgdGhpcy55QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSBzaXplLndpZHRoO1xuICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgdGhpcy5jYXJldFggPSBwb3NpdGlvbi54O1xuICAgICAgICAgICAgICAgIHRoaXMuY2FyZXRZID0gcG9zaXRpb24ueTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucygpLnVwZGF0ZSh0aGlzLCBwb2ludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gX3dpbGxSZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMub3BhY2l0eTtcbiAgICB9XG4gICAgZHJhdyhjdHgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgbGV0IG9wYWNpdHkgPSB0aGlzLm9wYWNpdHk7XG4gICAgICAgIGlmICghb3BhY2l0eSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZUFuaW1hdGlvblRhcmdldChvcHRpb25zKTtcbiAgICAgICAgY29uc3QgdG9vbHRpcFNpemUgPSB7XG4gICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHRcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcHQgPSB7XG4gICAgICAgICAgICB4OiB0aGlzLngsXG4gICAgICAgICAgICB5OiB0aGlzLnlcbiAgICAgICAgfTtcbiAgICAgICAgb3BhY2l0eSA9IE1hdGguYWJzKG9wYWNpdHkpIDwgMWUtMyA/IDAgOiBvcGFjaXR5O1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gICAgICAgIGNvbnN0IGhhc1Rvb2x0aXBDb250ZW50ID0gdGhpcy50aXRsZS5sZW5ndGggfHwgdGhpcy5iZWZvcmVCb2R5Lmxlbmd0aCB8fCB0aGlzLmJvZHkubGVuZ3RoIHx8IHRoaXMuYWZ0ZXJCb2R5Lmxlbmd0aCB8fCB0aGlzLmZvb3Rlci5sZW5ndGg7XG4gICAgICAgIGlmIChvcHRpb25zLmVuYWJsZWQgJiYgaGFzVG9vbHRpcENvbnRlbnQpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xuICAgICAgICAgICAgdGhpcy5kcmF3QmFja2dyb3VuZChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBvdmVycmlkZVRleHREaXJlY3Rpb24oY3R4LCBvcHRpb25zLnRleHREaXJlY3Rpb24pO1xuICAgICAgICAgICAgcHQueSArPSBwYWRkaW5nLnRvcDtcbiAgICAgICAgICAgIHRoaXMuZHJhd1RpdGxlKHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5kcmF3Qm9keShwdCwgY3R4LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuZHJhd0Zvb3RlcihwdCwgY3R4LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJlc3RvcmVUZXh0RGlyZWN0aW9uKGN0eCwgb3B0aW9ucy50ZXh0RGlyZWN0aW9uKTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gZ2V0QWN0aXZlRWxlbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmUgfHwgW107XG4gICAgfVxuIHNldEFjdGl2ZUVsZW1lbnRzKGFjdGl2ZUVsZW1lbnRzLCBldmVudFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzLm1hcCgoeyBkYXRhc2V0SW5kZXggLCBpbmRleCAgfSk9PntcbiAgICAgICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICBpZiAoIW1ldGEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIGEgZGF0YXNldCBhdCBpbmRleCAnICsgZGF0YXNldEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IG1ldGEuZGF0YVtpbmRleF0sXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjaGFuZ2VkID0gIV9lbGVtZW50c0VxdWFsKGxhc3RBY3RpdmUsIGFjdGl2ZSk7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQ2hhbmdlZCA9IHRoaXMuX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGV2ZW50UG9zaXRpb24pO1xuICAgICAgICBpZiAoY2hhbmdlZCB8fCBwb3NpdGlvbkNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50UG9zaXRpb24gPSBldmVudFBvc2l0aW9uO1xuICAgICAgICAgICAgdGhpcy5faWdub3JlUmVwbGF5RXZlbnRzID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuIGhhbmRsZUV2ZW50KGUsIHJlcGxheSwgaW5DaGFydEFyZWEgPSB0cnVlKSB7XG4gICAgICAgIGlmIChyZXBsYXkgJiYgdGhpcy5faWdub3JlUmVwbGF5RXZlbnRzKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faWdub3JlUmVwbGF5RXZlbnRzID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmUgfHwgW107XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIHJlcGxheSwgaW5DaGFydEFyZWEpO1xuICAgICAgICBjb25zdCBwb3NpdGlvbkNoYW5nZWQgPSB0aGlzLl9wb3NpdGlvbkNoYW5nZWQoYWN0aXZlLCBlKTtcbiAgICAgICAgY29uc3QgY2hhbmdlZCA9IHJlcGxheSB8fCAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKSB8fCBwb3NpdGlvbkNoYW5nZWQ7XG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5lbmFibGVkIHx8IG9wdGlvbnMuZXh0ZXJuYWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiBlLngsXG4gICAgICAgICAgICAgICAgICAgIHk6IGUueVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUodHJ1ZSwgcmVwbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbmdlZDtcbiAgICB9XG4gX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIHJlcGxheSwgaW5DaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW5DaGFydEFyZWEpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0QWN0aXZlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuY2hhcnQuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBvcHRpb25zLm1vZGUsIG9wdGlvbnMsIHJlcGxheSk7XG4gICAgICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIGFjdGl2ZS5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGl2ZTtcbiAgICB9XG4gX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGUpIHtcbiAgICAgICAgY29uc3QgeyBjYXJldFggLCBjYXJldFkgLCBvcHRpb25zICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbmVyc1tvcHRpb25zLnBvc2l0aW9uXS5jYWxsKHRoaXMsIGFjdGl2ZSwgZSk7XG4gICAgICAgIHJldHVybiBwb3NpdGlvbiAhPT0gZmFsc2UgJiYgKGNhcmV0WCAhPT0gcG9zaXRpb24ueCB8fCBjYXJldFkgIT09IHBvc2l0aW9uLnkpO1xuICAgIH1cbn1cbnZhciBwbHVnaW5fdG9vbHRpcCA9IHtcbiAgICBpZDogJ3Rvb2x0aXAnLFxuICAgIF9lbGVtZW50OiBUb29sdGlwLFxuICAgIHBvc2l0aW9uZXJzLFxuICAgIGFmdGVySW5pdCAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICBjaGFydC50b29sdGlwID0gbmV3IFRvb2x0aXAoe1xuICAgICAgICAgICAgICAgIGNoYXJ0LFxuICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVVcGRhdGUgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBpZiAoY2hhcnQudG9vbHRpcCkge1xuICAgICAgICAgICAgY2hhcnQudG9vbHRpcC5pbml0aWFsaXplKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICByZXNldCAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICAgICAgICBjaGFydC50b29sdGlwLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGFmdGVyRHJhdyAoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IGNoYXJ0LnRvb2x0aXA7XG4gICAgICAgIGlmICh0b29sdGlwICYmIHRvb2x0aXAuX3dpbGxSZW5kZXIoKSkge1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgICAgICB0b29sdGlwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2JlZm9yZVRvb2x0aXBEcmF3Jywge1xuICAgICAgICAgICAgICAgIC4uLmFyZ3MsXG4gICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9vbHRpcC5kcmF3KGNoYXJ0LmN0eCk7XG4gICAgICAgICAgICBjaGFydC5ub3RpZnlQbHVnaW5zKCdhZnRlclRvb2x0aXBEcmF3JywgYXJncyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGFmdGVyRXZlbnQgKGNoYXJ0LCBhcmdzKSB7XG4gICAgICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VGaW5hbFBvc2l0aW9uID0gYXJncy5yZXBsYXk7XG4gICAgICAgICAgICBpZiAoY2hhcnQudG9vbHRpcC5oYW5kbGVFdmVudChhcmdzLmV2ZW50LCB1c2VGaW5hbFBvc2l0aW9uLCBhcmdzLmluQ2hhcnRBcmVhKSkge1xuICAgICAgICAgICAgICAgIGFyZ3MuY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGV4dGVybmFsOiBudWxsLFxuICAgICAgICBwb3NpdGlvbjogJ2F2ZXJhZ2UnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknLFxuICAgICAgICB0aXRsZUNvbG9yOiAnI2ZmZicsXG4gICAgICAgIHRpdGxlRm9udDoge1xuICAgICAgICAgICAgd2VpZ2h0OiAnYm9sZCdcbiAgICAgICAgfSxcbiAgICAgICAgdGl0bGVTcGFjaW5nOiAyLFxuICAgICAgICB0aXRsZU1hcmdpbkJvdHRvbTogNixcbiAgICAgICAgdGl0bGVBbGlnbjogJ2xlZnQnLFxuICAgICAgICBib2R5Q29sb3I6ICcjZmZmJyxcbiAgICAgICAgYm9keVNwYWNpbmc6IDIsXG4gICAgICAgIGJvZHlGb250OiB7fSxcbiAgICAgICAgYm9keUFsaWduOiAnbGVmdCcsXG4gICAgICAgIGZvb3RlckNvbG9yOiAnI2ZmZicsXG4gICAgICAgIGZvb3RlclNwYWNpbmc6IDIsXG4gICAgICAgIGZvb3Rlck1hcmdpblRvcDogNixcbiAgICAgICAgZm9vdGVyRm9udDoge1xuICAgICAgICAgICAgd2VpZ2h0OiAnYm9sZCdcbiAgICAgICAgfSxcbiAgICAgICAgZm9vdGVyQWxpZ246ICdsZWZ0JyxcbiAgICAgICAgcGFkZGluZzogNixcbiAgICAgICAgY2FyZXRQYWRkaW5nOiAyLFxuICAgICAgICBjYXJldFNpemU6IDUsXG4gICAgICAgIGNvcm5lclJhZGl1czogNixcbiAgICAgICAgYm94SGVpZ2h0OiAoY3R4LCBvcHRzKT0+b3B0cy5ib2R5Rm9udC5zaXplLFxuICAgICAgICBib3hXaWR0aDogKGN0eCwgb3B0cyk9Pm9wdHMuYm9keUZvbnQuc2l6ZSxcbiAgICAgICAgbXVsdGlLZXlCYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgIGRpc3BsYXlDb2xvcnM6IHRydWUsXG4gICAgICAgIGJveFBhZGRpbmc6IDAsXG4gICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIGJvcmRlcldpZHRoOiAwLFxuICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiA0MDAsXG4gICAgICAgICAgICBlYXNpbmc6ICdlYXNlT3V0UXVhcnQnXG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgIG51bWJlcnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICAgICAnd2lkdGgnLFxuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgJ2NhcmV0WCcsXG4gICAgICAgICAgICAgICAgICAgICdjYXJldFknXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wYWNpdHk6IHtcbiAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyMDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsbGJhY2tzOiBkZWZhdWx0Q2FsbGJhY2tzXG4gICAgfSxcbiAgICBkZWZhdWx0Um91dGVzOiB7XG4gICAgICAgIGJvZHlGb250OiAnZm9udCcsXG4gICAgICAgIGZvb3RlckZvbnQ6ICdmb250JyxcbiAgICAgICAgdGl0bGVGb250OiAnZm9udCdcbiAgICB9LFxuICAgIGRlc2NyaXB0b3JzOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdmaWx0ZXInICYmIG5hbWUgIT09ICdpdGVtU29ydCcgJiYgbmFtZSAhPT0gJ2V4dGVybmFsJyxcbiAgICAgICAgX2luZGV4YWJsZTogZmFsc2UsXG4gICAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICAgICAgX3NjcmlwdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgX2luZGV4YWJsZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICBfZmFsbGJhY2s6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgIF9mYWxsYmFjazogJ2FuaW1hdGlvbidcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWRkaXRpb25hbE9wdGlvblNjb3BlczogW1xuICAgICAgICAnaW50ZXJhY3Rpb24nXG4gICAgXVxufTtcblxudmFyIHBsdWdpbnMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5Db2xvcnM6IHBsdWdpbl9jb2xvcnMsXG5EZWNpbWF0aW9uOiBwbHVnaW5fZGVjaW1hdGlvbixcbkZpbGxlcjogaW5kZXgsXG5MZWdlbmQ6IHBsdWdpbl9sZWdlbmQsXG5TdWJUaXRsZTogcGx1Z2luX3N1YnRpdGxlLFxuVGl0bGU6IHBsdWdpbl90aXRsZSxcblRvb2x0aXA6IHBsdWdpbl90b29sdGlwXG59KTtcblxuY29uc3QgYWRkSWZTdHJpbmcgPSAobGFiZWxzLCByYXcsIGluZGV4LCBhZGRlZExhYmVscyk9PntcbiAgICBpZiAodHlwZW9mIHJhdyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaW5kZXggPSBsYWJlbHMucHVzaChyYXcpIC0gMTtcbiAgICAgICAgYWRkZWRMYWJlbHMudW5zaGlmdCh7XG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgIGxhYmVsOiByYXdcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpc05hTihyYXcpKSB7XG4gICAgICAgIGluZGV4ID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xufTtcbmZ1bmN0aW9uIGZpbmRPckFkZExhYmVsKGxhYmVscywgcmF3LCBpbmRleCwgYWRkZWRMYWJlbHMpIHtcbiAgICBjb25zdCBmaXJzdCA9IGxhYmVscy5pbmRleE9mKHJhdyk7XG4gICAgaWYgKGZpcnN0ID09PSAtMSkge1xuICAgICAgICByZXR1cm4gYWRkSWZTdHJpbmcobGFiZWxzLCByYXcsIGluZGV4LCBhZGRlZExhYmVscyk7XG4gICAgfVxuICAgIGNvbnN0IGxhc3QgPSBsYWJlbHMubGFzdEluZGV4T2YocmF3KTtcbiAgICByZXR1cm4gZmlyc3QgIT09IGxhc3QgPyBpbmRleCA6IGZpcnN0O1xufVxuY29uc3QgdmFsaWRJbmRleCA9IChpbmRleCwgbWF4KT0+aW5kZXggPT09IG51bGwgPyBudWxsIDogX2xpbWl0VmFsdWUoTWF0aC5yb3VuZChpbmRleCksIDAsIG1heCk7XG5mdW5jdGlvbiBfZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgaWYgKHZhbHVlID49IDAgJiYgdmFsdWUgPCBsYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBsYWJlbHNbdmFsdWVdO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5jbGFzcyBDYXRlZ29yeVNjYWxlIGV4dGVuZHMgU2NhbGUge1xuICAgIHN0YXRpYyBpZCA9ICdjYXRlZ29yeSc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgY2FsbGJhY2s6IF9nZXRMYWJlbEZvclZhbHVlXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgICB0aGlzLl9zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl92YWx1ZVJhbmdlID0gMDtcbiAgICAgICAgdGhpcy5fYWRkZWRMYWJlbHMgPSBbXTtcbiAgICB9XG4gICAgaW5pdChzY2FsZU9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWRkZWQgPSB0aGlzLl9hZGRlZExhYmVscztcbiAgICAgICAgaWYgKGFkZGVkLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBpbmRleCAsIGxhYmVsICB9IG9mIGFkZGVkKXtcbiAgICAgICAgICAgICAgICBpZiAobGFiZWxzW2luZGV4XSA9PT0gbGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYWRkZWRMYWJlbHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5pbml0KHNjYWxlT3B0aW9ucyk7XG4gICAgfVxuICAgIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYocmF3KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICAgICAgaW5kZXggPSBpc0Zpbml0ZShpbmRleCkgJiYgbGFiZWxzW2luZGV4XSA9PT0gcmF3ID8gaW5kZXggOiBmaW5kT3JBZGRMYWJlbChsYWJlbHMsIHJhdywgdmFsdWVPckRlZmF1bHQoaW5kZXgsIHJhdyksIHRoaXMuX2FkZGVkTGFiZWxzKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkSW5kZXgoaW5kZXgsIGxhYmVscy5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICAgICAgY29uc3QgeyBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgICAgICBsZXQgeyBtaW4gLCBtYXggIH0gPSB0aGlzLmdldE1pbk1heCh0cnVlKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgICAgIGlmICghbWluRGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1pbiA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW1heERlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtYXggPSB0aGlzLmdldExhYmVscygpLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cbiAgICBidWlsZFRpY2tzKCkge1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMub3B0aW9ucy5vZmZzZXQ7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gW107XG4gICAgICAgIGxldCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICBsYWJlbHMgPSBtaW4gPT09IDAgJiYgbWF4ID09PSBsYWJlbHMubGVuZ3RoIC0gMSA/IGxhYmVscyA6IGxhYmVscy5zbGljZShtaW4sIG1heCArIDEpO1xuICAgICAgICB0aGlzLl92YWx1ZVJhbmdlID0gTWF0aC5tYXgobGFiZWxzLmxlbmd0aCAtIChvZmZzZXQgPyAwIDogMSksIDEpO1xuICAgICAgICB0aGlzLl9zdGFydFZhbHVlID0gdGhpcy5taW4gLSAob2Zmc2V0ID8gMC41IDogMCk7XG4gICAgICAgIGZvcihsZXQgdmFsdWUgPSBtaW47IHZhbHVlIDw9IG1heDsgdmFsdWUrKyl7XG4gICAgICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cbiAgICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBfZ2V0TGFiZWxGb3JWYWx1ZS5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICB9XG4gY29uZmlndXJlKCkge1xuICAgICAgICBzdXBlci5jb25maWd1cmUoKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXZlcnNlUGl4ZWxzID0gIXRoaXMuX3JldmVyc2VQaXhlbHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBOYU4gOiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgodmFsdWUgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbiAgICBnZXRQaXhlbEZvclRpY2soaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGlja3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aWNrc1tpbmRleF0udmFsdWUpO1xuICAgIH1cbiAgICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHRoaXMuX3N0YXJ0VmFsdWUgKyB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgKiB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgICB9XG4gICAgZ2V0QmFzZVBpeGVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib3R0b207XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVRpY2tzJDEoZ2VuZXJhdGlvbk9wdGlvbnMsIGRhdGFSYW5nZSkge1xuICAgIGNvbnN0IHRpY2tzID0gW107XG4gICAgY29uc3QgTUlOX1NQQUNJTkcgPSAxZS0xNDtcbiAgICBjb25zdCB7IGJvdW5kcyAsIHN0ZXAgLCBtaW4gLCBtYXggLCBwcmVjaXNpb24gLCBjb3VudCAsIG1heFRpY2tzICwgbWF4RGlnaXRzICwgaW5jbHVkZUJvdW5kcyAgfSA9IGdlbmVyYXRpb25PcHRpb25zO1xuICAgIGNvbnN0IHVuaXQgPSBzdGVwIHx8IDE7XG4gICAgY29uc3QgbWF4U3BhY2VzID0gbWF4VGlja3MgLSAxO1xuICAgIGNvbnN0IHsgbWluOiBybWluICwgbWF4OiBybWF4ICB9ID0gZGF0YVJhbmdlO1xuICAgIGNvbnN0IG1pbkRlZmluZWQgPSAhaXNOdWxsT3JVbmRlZihtaW4pO1xuICAgIGNvbnN0IG1heERlZmluZWQgPSAhaXNOdWxsT3JVbmRlZihtYXgpO1xuICAgIGNvbnN0IGNvdW50RGVmaW5lZCA9ICFpc051bGxPclVuZGVmKGNvdW50KTtcbiAgICBjb25zdCBtaW5TcGFjaW5nID0gKHJtYXggLSBybWluKSAvIChtYXhEaWdpdHMgKyAxKTtcbiAgICBsZXQgc3BhY2luZyA9IG5pY2VOdW0oKHJtYXggLSBybWluKSAvIG1heFNwYWNlcyAvIHVuaXQpICogdW5pdDtcbiAgICBsZXQgZmFjdG9yLCBuaWNlTWluLCBuaWNlTWF4LCBudW1TcGFjZXM7XG4gICAgaWYgKHNwYWNpbmcgPCBNSU5fU1BBQ0lORyAmJiAhbWluRGVmaW5lZCAmJiAhbWF4RGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBybWluXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBybWF4XG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgfVxuICAgIG51bVNwYWNlcyA9IE1hdGguY2VpbChybWF4IC8gc3BhY2luZykgLSBNYXRoLmZsb29yKHJtaW4gLyBzcGFjaW5nKTtcbiAgICBpZiAobnVtU3BhY2VzID4gbWF4U3BhY2VzKSB7XG4gICAgICAgIHNwYWNpbmcgPSBuaWNlTnVtKG51bVNwYWNlcyAqIHNwYWNpbmcgLyBtYXhTcGFjZXMgLyB1bml0KSAqIHVuaXQ7XG4gICAgfVxuICAgIGlmICghaXNOdWxsT3JVbmRlZihwcmVjaXNpb24pKSB7XG4gICAgICAgIGZhY3RvciA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuICAgICAgICBzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcgKiBmYWN0b3IpIC8gZmFjdG9yO1xuICAgIH1cbiAgICBpZiAoYm91bmRzID09PSAndGlja3MnKSB7XG4gICAgICAgIG5pY2VNaW4gPSBNYXRoLmZsb29yKHJtaW4gLyBzcGFjaW5nKSAqIHNwYWNpbmc7XG4gICAgICAgIG5pY2VNYXggPSBNYXRoLmNlaWwocm1heCAvIHNwYWNpbmcpICogc3BhY2luZztcbiAgICB9IGVsc2Uge1xuICAgICAgICBuaWNlTWluID0gcm1pbjtcbiAgICAgICAgbmljZU1heCA9IHJtYXg7XG4gICAgfVxuICAgIGlmIChtaW5EZWZpbmVkICYmIG1heERlZmluZWQgJiYgc3RlcCAmJiBhbG1vc3RXaG9sZSgobWF4IC0gbWluKSAvIHN0ZXAsIHNwYWNpbmcgLyAxMDAwKSkge1xuICAgICAgICBudW1TcGFjZXMgPSBNYXRoLnJvdW5kKE1hdGgubWluKChtYXggLSBtaW4pIC8gc3BhY2luZywgbWF4VGlja3MpKTtcbiAgICAgICAgc3BhY2luZyA9IChtYXggLSBtaW4pIC8gbnVtU3BhY2VzO1xuICAgICAgICBuaWNlTWluID0gbWluO1xuICAgICAgICBuaWNlTWF4ID0gbWF4O1xuICAgIH0gZWxzZSBpZiAoY291bnREZWZpbmVkKSB7XG4gICAgICAgIG5pY2VNaW4gPSBtaW5EZWZpbmVkID8gbWluIDogbmljZU1pbjtcbiAgICAgICAgbmljZU1heCA9IG1heERlZmluZWQgPyBtYXggOiBuaWNlTWF4O1xuICAgICAgICBudW1TcGFjZXMgPSBjb3VudCAtIDE7XG4gICAgICAgIHNwYWNpbmcgPSAobmljZU1heCAtIG5pY2VNaW4pIC8gbnVtU3BhY2VzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG51bVNwYWNlcyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBzcGFjaW5nO1xuICAgICAgICBpZiAoYWxtb3N0RXF1YWxzKG51bVNwYWNlcywgTWF0aC5yb3VuZChudW1TcGFjZXMpLCBzcGFjaW5nIC8gMTAwMCkpIHtcbiAgICAgICAgICAgIG51bVNwYWNlcyA9IE1hdGgucm91bmQobnVtU3BhY2VzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG51bVNwYWNlcyA9IE1hdGguY2VpbChudW1TcGFjZXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGRlY2ltYWxQbGFjZXMgPSBNYXRoLm1heChfZGVjaW1hbFBsYWNlcyhzcGFjaW5nKSwgX2RlY2ltYWxQbGFjZXMobmljZU1pbikpO1xuICAgIGZhY3RvciA9IE1hdGgucG93KDEwLCBpc051bGxPclVuZGVmKHByZWNpc2lvbikgPyBkZWNpbWFsUGxhY2VzIDogcHJlY2lzaW9uKTtcbiAgICBuaWNlTWluID0gTWF0aC5yb3VuZChuaWNlTWluICogZmFjdG9yKSAvIGZhY3RvcjtcbiAgICBuaWNlTWF4ID0gTWF0aC5yb3VuZChuaWNlTWF4ICogZmFjdG9yKSAvIGZhY3RvcjtcbiAgICBsZXQgaiA9IDA7XG4gICAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICAgICAgaWYgKGluY2x1ZGVCb3VuZHMgJiYgbmljZU1pbiAhPT0gbWluKSB7XG4gICAgICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbWluXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChuaWNlTWluIDwgbWluKSB7XG4gICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFsbW9zdEVxdWFscyhNYXRoLnJvdW5kKChuaWNlTWluICsgaiAqIHNwYWNpbmcpICogZmFjdG9yKSAvIGZhY3RvciwgbWluLCByZWxhdGl2ZUxhYmVsU2l6ZShtaW4sIG1pblNwYWNpbmcsIGdlbmVyYXRpb25PcHRpb25zKSkpIHtcbiAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobmljZU1pbiA8IG1pbikge1xuICAgICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcig7IGogPCBudW1TcGFjZXM7ICsrail7XG4gICAgICAgIGNvbnN0IHRpY2tWYWx1ZSA9IE1hdGgucm91bmQoKG5pY2VNaW4gKyBqICogc3BhY2luZykgKiBmYWN0b3IpIC8gZmFjdG9yO1xuICAgICAgICBpZiAobWF4RGVmaW5lZCAmJiB0aWNrVmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgdmFsdWU6IHRpY2tWYWx1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKG1heERlZmluZWQgJiYgaW5jbHVkZUJvdW5kcyAmJiBuaWNlTWF4ICE9PSBtYXgpIHtcbiAgICAgICAgaWYgKHRpY2tzLmxlbmd0aCAmJiBhbG1vc3RFcXVhbHModGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWUsIG1heCwgcmVsYXRpdmVMYWJlbFNpemUobWF4LCBtaW5TcGFjaW5nLCBnZW5lcmF0aW9uT3B0aW9ucykpKSB7XG4gICAgICAgICAgICB0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSA9IG1heDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBtYXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICghbWF4RGVmaW5lZCB8fCBuaWNlTWF4ID09PSBtYXgpIHtcbiAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZTogbmljZU1heFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRpY2tzO1xufVxuZnVuY3Rpb24gcmVsYXRpdmVMYWJlbFNpemUodmFsdWUsIG1pblNwYWNpbmcsIHsgaG9yaXpvbnRhbCAsIG1pblJvdGF0aW9uICB9KSB7XG4gICAgY29uc3QgcmFkID0gdG9SYWRpYW5zKG1pblJvdGF0aW9uKTtcbiAgICBjb25zdCByYXRpbyA9IChob3Jpem9udGFsID8gTWF0aC5zaW4ocmFkKSA6IE1hdGguY29zKHJhZCkpIHx8IDAuMDAxO1xuICAgIGNvbnN0IGxlbmd0aCA9IDAuNzUgKiBtaW5TcGFjaW5nICogKCcnICsgdmFsdWUpLmxlbmd0aDtcbiAgICByZXR1cm4gTWF0aC5taW4obWluU3BhY2luZyAvIHJhdGlvLCBsZW5ndGgpO1xufVxuY2xhc3MgTGluZWFyU2NhbGVCYXNlIGV4dGVuZHMgU2NhbGUge1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgICB0aGlzLnN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5lbmQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fZW5kVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSAwO1xuICAgIH1cbiAgICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgICAgIGlmIChpc051bGxPclVuZGVmKHJhdykpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICgodHlwZW9mIHJhdyA9PT0gJ251bWJlcicgfHwgcmF3IGluc3RhbmNlb2YgTnVtYmVyKSAmJiAhaXNGaW5pdGUoK3JhdykpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiArcmF3O1xuICAgIH1cbiAgICBoYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCkge1xuICAgICAgICBjb25zdCB7IGJlZ2luQXRaZXJvICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgICAgIGxldCB7IG1pbiAsIG1heCAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHNldE1pbiA9ICh2KT0+bWluID0gbWluRGVmaW5lZCA/IG1pbiA6IHY7XG4gICAgICAgIGNvbnN0IHNldE1heCA9ICh2KT0+bWF4ID0gbWF4RGVmaW5lZCA/IG1heCA6IHY7XG4gICAgICAgIGlmIChiZWdpbkF0WmVybykge1xuICAgICAgICAgICAgY29uc3QgbWluU2lnbiA9IHNpZ24obWluKTtcbiAgICAgICAgICAgIGNvbnN0IG1heFNpZ24gPSBzaWduKG1heCk7XG4gICAgICAgICAgICBpZiAobWluU2lnbiA8IDAgJiYgbWF4U2lnbiA8IDApIHtcbiAgICAgICAgICAgICAgICBzZXRNYXgoMCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1pblNpZ24gPiAwICYmIG1heFNpZ24gPiAwKSB7XG4gICAgICAgICAgICAgICAgc2V0TWluKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtaW4gPT09IG1heCkge1xuICAgICAgICAgICAgbGV0IG9mZnNldCA9IG1heCA9PT0gMCA/IDEgOiBNYXRoLmFicyhtYXggKiAwLjA1KTtcbiAgICAgICAgICAgIHNldE1heChtYXggKyBvZmZzZXQpO1xuICAgICAgICAgICAgaWYgKCFiZWdpbkF0WmVybykge1xuICAgICAgICAgICAgICAgIHNldE1pbihtaW4gLSBvZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubWluID0gbWluO1xuICAgICAgICB0aGlzLm1heCA9IG1heDtcbiAgICB9XG4gICAgZ2V0VGlja0xpbWl0KCkge1xuICAgICAgICBjb25zdCB0aWNrT3B0cyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICAgICAgbGV0IHsgbWF4VGlja3NMaW1pdCAsIHN0ZXBTaXplICB9ID0gdGlja09wdHM7XG4gICAgICAgIGxldCBtYXhUaWNrcztcbiAgICAgICAgaWYgKHN0ZXBTaXplKSB7XG4gICAgICAgICAgICBtYXhUaWNrcyA9IE1hdGguY2VpbCh0aGlzLm1heCAvIHN0ZXBTaXplKSAtIE1hdGguZmxvb3IodGhpcy5taW4gLyBzdGVwU2l6ZSkgKyAxO1xuICAgICAgICAgICAgaWYgKG1heFRpY2tzID4gMTAwMCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybihgc2NhbGVzLiR7dGhpcy5pZH0udGlja3Muc3RlcFNpemU6ICR7c3RlcFNpemV9IHdvdWxkIHJlc3VsdCBnZW5lcmF0aW5nIHVwIHRvICR7bWF4VGlja3N9IHRpY2tzLiBMaW1pdGluZyB0byAxMDAwLmApO1xuICAgICAgICAgICAgICAgIG1heFRpY2tzID0gMTAwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heFRpY2tzID0gdGhpcy5jb21wdXRlVGlja0xpbWl0KCk7XG4gICAgICAgICAgICBtYXhUaWNrc0xpbWl0ID0gbWF4VGlja3NMaW1pdCB8fCAxMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4VGlja3NMaW1pdCkge1xuICAgICAgICAgICAgbWF4VGlja3MgPSBNYXRoLm1pbihtYXhUaWNrc0xpbWl0LCBtYXhUaWNrcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heFRpY2tzO1xuICAgIH1cbiBjb21wdXRlVGlja0xpbWl0KCkge1xuICAgICAgICByZXR1cm4gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIH1cbiAgICBidWlsZFRpY2tzKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gICAgICAgIGxldCBtYXhUaWNrcyA9IHRoaXMuZ2V0VGlja0xpbWl0KCk7XG4gICAgICAgIG1heFRpY2tzID0gTWF0aC5tYXgoMiwgbWF4VGlja3MpO1xuICAgICAgICBjb25zdCBudW1lcmljR2VuZXJhdG9yT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1heFRpY2tzLFxuICAgICAgICAgICAgYm91bmRzOiBvcHRzLmJvdW5kcyxcbiAgICAgICAgICAgIG1pbjogb3B0cy5taW4sXG4gICAgICAgICAgICBtYXg6IG9wdHMubWF4LFxuICAgICAgICAgICAgcHJlY2lzaW9uOiB0aWNrT3B0cy5wcmVjaXNpb24sXG4gICAgICAgICAgICBzdGVwOiB0aWNrT3B0cy5zdGVwU2l6ZSxcbiAgICAgICAgICAgIGNvdW50OiB0aWNrT3B0cy5jb3VudCxcbiAgICAgICAgICAgIG1heERpZ2l0czogdGhpcy5fbWF4RGlnaXRzKCksXG4gICAgICAgICAgICBob3Jpem9udGFsOiB0aGlzLmlzSG9yaXpvbnRhbCgpLFxuICAgICAgICAgICAgbWluUm90YXRpb246IHRpY2tPcHRzLm1pblJvdGF0aW9uIHx8IDAsXG4gICAgICAgICAgICBpbmNsdWRlQm91bmRzOiB0aWNrT3B0cy5pbmNsdWRlQm91bmRzICE9PSBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBkYXRhUmFuZ2UgPSB0aGlzLl9yYW5nZSB8fCB0aGlzO1xuICAgICAgICBjb25zdCB0aWNrcyA9IGdlbmVyYXRlVGlja3MkMShudW1lcmljR2VuZXJhdG9yT3B0aW9ucywgZGF0YVJhbmdlKTtcbiAgICAgICAgaWYgKG9wdHMuYm91bmRzID09PSAndGlja3MnKSB7XG4gICAgICAgICAgICBfc2V0TWluQW5kTWF4QnlLZXkodGlja3MsIHRoaXMsICd2YWx1ZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHRpY2tzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1heDtcbiAgICAgICAgICAgIHRoaXMuZW5kID0gdGhpcy5taW47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ID0gdGhpcy5taW47XG4gICAgICAgICAgICB0aGlzLmVuZCA9IHRoaXMubWF4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aWNrcztcbiAgICB9XG4gY29uZmlndXJlKCkge1xuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgIGxldCBzdGFydCA9IHRoaXMubWluO1xuICAgICAgICBsZXQgZW5kID0gdGhpcy5tYXg7XG4gICAgICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm9mZnNldCAmJiB0aWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IChlbmQgLSBzdGFydCkgLyBNYXRoLm1heCh0aWNrcy5sZW5ndGggLSAxLCAxKSAvIDI7XG4gICAgICAgICAgICBzdGFydCAtPSBvZmZzZXQ7XG4gICAgICAgICAgICBlbmQgKz0gb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSBzdGFydDtcbiAgICAgICAgdGhpcy5fZW5kVmFsdWUgPSBlbmQ7XG4gICAgICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSBlbmQgLSBzdGFydDtcbiAgICB9XG4gICAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZm9ybWF0TnVtYmVyKHZhbHVlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgICB9XG59XG5cbmNsYXNzIExpbmVhclNjYWxlIGV4dGVuZHMgTGluZWFyU2NhbGVCYXNlIHtcbiAgICBzdGF0aWMgaWQgPSAnbGluZWFyJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy5udW1lcmljXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcy5nZXRNaW5NYXgodHJ1ZSk7XG4gICAgICAgIHRoaXMubWluID0gaXNOdW1iZXJGaW5pdGUobWluKSA/IG1pbiA6IDA7XG4gICAgICAgIHRoaXMubWF4ID0gaXNOdW1iZXJGaW5pdGUobWF4KSA/IG1heCA6IDE7XG4gICAgICAgIHRoaXMuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuICAgIH1cbiBjb21wdXRlVGlja0xpbWl0KCkge1xuICAgICAgICBjb25zdCBob3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gaG9yaXpvbnRhbCA/IHRoaXMud2lkdGggOiB0aGlzLmhlaWdodDtcbiAgICAgICAgY29uc3QgbWluUm90YXRpb24gPSB0b1JhZGlhbnModGhpcy5vcHRpb25zLnRpY2tzLm1pblJvdGF0aW9uKTtcbiAgICAgICAgY29uc3QgcmF0aW8gPSAoaG9yaXpvbnRhbCA/IE1hdGguc2luKG1pblJvdGF0aW9uKSA6IE1hdGguY29zKG1pblJvdGF0aW9uKSkgfHwgMC4wMDE7XG4gICAgICAgIGNvbnN0IHRpY2tGb250ID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKTtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChsZW5ndGggLyBNYXRoLm1pbig0MCwgdGlja0ZvbnQubGluZUhlaWdodCAvIHJhdGlvKSk7XG4gICAgfVxuICAgIGdldFBpeGVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gTmFOIDogdGhpcy5nZXRQaXhlbEZvckRlY2ltYWwoKHZhbHVlIC0gdGhpcy5fc3RhcnRWYWx1ZSkgLyB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgICB9XG4gICAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnRWYWx1ZSArIHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAqIHRoaXMuX3ZhbHVlUmFuZ2U7XG4gICAgfVxufVxuXG5jb25zdCBsb2cxMEZsb29yID0gKHYpPT5NYXRoLmZsb29yKGxvZzEwKHYpKTtcbmNvbnN0IGNoYW5nZUV4cG9uZW50ID0gKHYsIG0pPT5NYXRoLnBvdygxMCwgbG9nMTBGbG9vcih2KSArIG0pO1xuZnVuY3Rpb24gaXNNYWpvcih0aWNrVmFsKSB7XG4gICAgY29uc3QgcmVtYWluID0gdGlja1ZhbCAvIE1hdGgucG93KDEwLCBsb2cxMEZsb29yKHRpY2tWYWwpKTtcbiAgICByZXR1cm4gcmVtYWluID09PSAxO1xufVxuZnVuY3Rpb24gc3RlcHMobWluLCBtYXgsIHJhbmdlRXhwKSB7XG4gICAgY29uc3QgcmFuZ2VTdGVwID0gTWF0aC5wb3coMTAsIHJhbmdlRXhwKTtcbiAgICBjb25zdCBzdGFydCA9IE1hdGguZmxvb3IobWluIC8gcmFuZ2VTdGVwKTtcbiAgICBjb25zdCBlbmQgPSBNYXRoLmNlaWwobWF4IC8gcmFuZ2VTdGVwKTtcbiAgICByZXR1cm4gZW5kIC0gc3RhcnQ7XG59XG5mdW5jdGlvbiBzdGFydEV4cChtaW4sIG1heCkge1xuICAgIGNvbnN0IHJhbmdlID0gbWF4IC0gbWluO1xuICAgIGxldCByYW5nZUV4cCA9IGxvZzEwRmxvb3IocmFuZ2UpO1xuICAgIHdoaWxlKHN0ZXBzKG1pbiwgbWF4LCByYW5nZUV4cCkgPiAxMCl7XG4gICAgICAgIHJhbmdlRXhwKys7XG4gICAgfVxuICAgIHdoaWxlKHN0ZXBzKG1pbiwgbWF4LCByYW5nZUV4cCkgPCAxMCl7XG4gICAgICAgIHJhbmdlRXhwLS07XG4gICAgfVxuICAgIHJldHVybiBNYXRoLm1pbihyYW5nZUV4cCwgbG9nMTBGbG9vcihtaW4pKTtcbn1cbiBmdW5jdGlvbiBnZW5lcmF0ZVRpY2tzKGdlbmVyYXRpb25PcHRpb25zLCB7IG1pbiAsIG1heCAgfSkge1xuICAgIG1pbiA9IGZpbml0ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5taW4sIG1pbik7XG4gICAgY29uc3QgdGlja3MgPSBbXTtcbiAgICBjb25zdCBtaW5FeHAgPSBsb2cxMEZsb29yKG1pbik7XG4gICAgbGV0IGV4cCA9IHN0YXJ0RXhwKG1pbiwgbWF4KTtcbiAgICBsZXQgcHJlY2lzaW9uID0gZXhwIDwgMCA/IE1hdGgucG93KDEwLCBNYXRoLmFicyhleHApKSA6IDE7XG4gICAgY29uc3Qgc3RlcFNpemUgPSBNYXRoLnBvdygxMCwgZXhwKTtcbiAgICBjb25zdCBiYXNlID0gbWluRXhwID4gZXhwID8gTWF0aC5wb3coMTAsIG1pbkV4cCkgOiAwO1xuICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5yb3VuZCgobWluIC0gYmFzZSkgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuICAgIGNvbnN0IG9mZnNldCA9IE1hdGguZmxvb3IoKG1pbiAtIGJhc2UpIC8gc3RlcFNpemUgLyAxMCkgKiBzdGVwU2l6ZSAqIDEwO1xuICAgIGxldCBzaWduaWZpY2FuZCA9IE1hdGguZmxvb3IoKHN0YXJ0IC0gb2Zmc2V0KSAvIE1hdGgucG93KDEwLCBleHApKTtcbiAgICBsZXQgdmFsdWUgPSBmaW5pdGVPckRlZmF1bHQoZ2VuZXJhdGlvbk9wdGlvbnMubWluLCBNYXRoLnJvdW5kKChiYXNlICsgb2Zmc2V0ICsgc2lnbmlmaWNhbmQgKiBNYXRoLnBvdygxMCwgZXhwKSkgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uKTtcbiAgICB3aGlsZSh2YWx1ZSA8IG1heCl7XG4gICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBtYWpvcjogaXNNYWpvcih2YWx1ZSksXG4gICAgICAgICAgICBzaWduaWZpY2FuZFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNpZ25pZmljYW5kID49IDEwKSB7XG4gICAgICAgICAgICBzaWduaWZpY2FuZCA9IHNpZ25pZmljYW5kIDwgMTUgPyAxNSA6IDIwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2lnbmlmaWNhbmQrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2lnbmlmaWNhbmQgPj0gMjApIHtcbiAgICAgICAgICAgIGV4cCsrO1xuICAgICAgICAgICAgc2lnbmlmaWNhbmQgPSAyO1xuICAgICAgICAgICAgcHJlY2lzaW9uID0gZXhwID49IDAgPyAxIDogcHJlY2lzaW9uO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCgoYmFzZSArIG9mZnNldCArIHNpZ25pZmljYW5kICogTWF0aC5wb3coMTAsIGV4cCkpICogcHJlY2lzaW9uKSAvIHByZWNpc2lvbjtcbiAgICB9XG4gICAgY29uc3QgbGFzdFRpY2sgPSBmaW5pdGVPckRlZmF1bHQoZ2VuZXJhdGlvbk9wdGlvbnMubWF4LCB2YWx1ZSk7XG4gICAgdGlja3MucHVzaCh7XG4gICAgICAgIHZhbHVlOiBsYXN0VGljayxcbiAgICAgICAgbWFqb3I6IGlzTWFqb3IobGFzdFRpY2spLFxuICAgICAgICBzaWduaWZpY2FuZFxuICAgIH0pO1xuICAgIHJldHVybiB0aWNrcztcbn1cbmNsYXNzIExvZ2FyaXRobWljU2NhbGUgZXh0ZW5kcyBTY2FsZSB7XG4gICAgc3RhdGljIGlkID0gJ2xvZ2FyaXRobWljJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy5sb2dhcml0aG1pYyxcbiAgICAgICAgICAgIG1ham9yOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjZmcpe1xuICAgICAgICBzdXBlcihjZmcpO1xuICAgICAgICAgdGhpcy5zdGFydCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuZW5kID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gICAgfVxuICAgIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBMaW5lYXJTY2FsZUJhc2UucHJvdG90eXBlLnBhcnNlLmFwcGx5KHRoaXMsIFtcbiAgICAgICAgICAgIHJhdyxcbiAgICAgICAgICAgIGluZGV4XG4gICAgICAgIF0pO1xuICAgICAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3plcm8gPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNOdW1iZXJGaW5pdGUodmFsdWUpICYmIHZhbHVlID4gMCA/IHZhbHVlIDogbnVsbDtcbiAgICB9XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggIH0gPSB0aGlzLmdldE1pbk1heCh0cnVlKTtcbiAgICAgICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pID8gTWF0aC5tYXgoMCwgbWluKSA6IG51bGw7XG4gICAgICAgIHRoaXMubWF4ID0gaXNOdW1iZXJGaW5pdGUobWF4KSA/IE1hdGgubWF4KDAsIG1heCkgOiBudWxsO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJlZ2luQXRaZXJvKSB7XG4gICAgICAgICAgICB0aGlzLl96ZXJvID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5femVybyAmJiB0aGlzLm1pbiAhPT0gdGhpcy5fc3VnZ2VzdGVkTWluICYmICFpc051bWJlckZpbml0ZSh0aGlzLl91c2VyTWluKSkge1xuICAgICAgICAgICAgdGhpcy5taW4gPSBtaW4gPT09IGNoYW5nZUV4cG9uZW50KHRoaXMubWluLCAwKSA/IGNoYW5nZUV4cG9uZW50KHRoaXMubWluLCAtMSkgOiBjaGFuZ2VFeHBvbmVudCh0aGlzLm1pbiwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG4gICAgfVxuICAgIGhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHsgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICAgICAgbGV0IG1pbiA9IHRoaXMubWluO1xuICAgICAgICBsZXQgbWF4ID0gdGhpcy5tYXg7XG4gICAgICAgIGNvbnN0IHNldE1pbiA9ICh2KT0+bWluID0gbWluRGVmaW5lZCA/IG1pbiA6IHY7XG4gICAgICAgIGNvbnN0IHNldE1heCA9ICh2KT0+bWF4ID0gbWF4RGVmaW5lZCA/IG1heCA6IHY7XG4gICAgICAgIGlmIChtaW4gPT09IG1heCkge1xuICAgICAgICAgICAgaWYgKG1pbiA8PSAwKSB7XG4gICAgICAgICAgICAgICAgc2V0TWluKDEpO1xuICAgICAgICAgICAgICAgIHNldE1heCgxMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldE1pbihjaGFuZ2VFeHBvbmVudChtaW4sIC0xKSk7XG4gICAgICAgICAgICAgICAgc2V0TWF4KGNoYW5nZUV4cG9uZW50KG1heCwgKzEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWluIDw9IDApIHtcbiAgICAgICAgICAgIHNldE1pbihjaGFuZ2VFeHBvbmVudChtYXgsIC0xKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1heCA8PSAwKSB7XG4gICAgICAgICAgICBzZXRNYXgoY2hhbmdlRXhwb25lbnQobWluLCArMSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWluID0gbWluO1xuICAgICAgICB0aGlzLm1heCA9IG1heDtcbiAgICB9XG4gICAgYnVpbGRUaWNrcygpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgZ2VuZXJhdGlvbk9wdGlvbnMgPSB7XG4gICAgICAgICAgICBtaW46IHRoaXMuX3VzZXJNaW4sXG4gICAgICAgICAgICBtYXg6IHRoaXMuX3VzZXJNYXhcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdGlja3MgPSBnZW5lcmF0ZVRpY2tzKGdlbmVyYXRpb25PcHRpb25zLCB0aGlzKTtcbiAgICAgICAgaWYgKG9wdHMuYm91bmRzID09PSAndGlja3MnKSB7XG4gICAgICAgICAgICBfc2V0TWluQW5kTWF4QnlLZXkodGlja3MsIHRoaXMsICd2YWx1ZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHRpY2tzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1heDtcbiAgICAgICAgICAgIHRoaXMuZW5kID0gdGhpcy5taW47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ID0gdGhpcy5taW47XG4gICAgICAgICAgICB0aGlzLmVuZCA9IHRoaXMubWF4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aWNrcztcbiAgICB9XG4gZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/ICcwJyA6IGZvcm1hdE51bWJlcih2YWx1ZSwgdGhpcy5jaGFydC5vcHRpb25zLmxvY2FsZSwgdGhpcy5vcHRpb25zLnRpY2tzLmZvcm1hdCk7XG4gICAgfVxuIGNvbmZpZ3VyZSgpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgICAgc3VwZXIuY29uZmlndXJlKCk7XG4gICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSBsb2cxMChzdGFydCk7XG4gICAgICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSBsb2cxMCh0aGlzLm1heCkgLSBsb2cxMChzdGFydCk7XG4gICAgfVxuICAgIGdldFBpeGVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5taW47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IGlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvckRlY2ltYWwodmFsdWUgPT09IHRoaXMubWluID8gMCA6IChsb2cxMCh2YWx1ZSkgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbiAgICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIGNvbnN0IGRlY2ltYWwgPSB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCk7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdygxMCwgdGhpcy5fc3RhcnRWYWx1ZSArIGRlY2ltYWwgKiB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpY2tCYWNrZHJvcEhlaWdodChvcHRzKSB7XG4gICAgY29uc3QgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuICAgIGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmIG9wdHMuZGlzcGxheSkge1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKHRpY2tPcHRzLmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICAgIHJldHVybiB2YWx1ZU9yRGVmYXVsdCh0aWNrT3B0cy5mb250ICYmIHRpY2tPcHRzLmZvbnQuc2l6ZSwgZGVmYXVsdHMuZm9udC5zaXplKSArIHBhZGRpbmcuaGVpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIG1lYXN1cmVMYWJlbFNpemUoY3R4LCBmb250LCBsYWJlbCkge1xuICAgIGxhYmVsID0gaXNBcnJheShsYWJlbCkgPyBsYWJlbCA6IFtcbiAgICAgICAgbGFiZWxcbiAgICBdO1xuICAgIHJldHVybiB7XG4gICAgICAgIHc6IF9sb25nZXN0VGV4dChjdHgsIGZvbnQuc3RyaW5nLCBsYWJlbCksXG4gICAgICAgIGg6IGxhYmVsLmxlbmd0aCAqIGZvbnQubGluZUhlaWdodFxuICAgIH07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvcywgc2l6ZSwgbWluLCBtYXgpIHtcbiAgICBpZiAoYW5nbGUgPT09IG1pbiB8fCBhbmdsZSA9PT0gbWF4KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydDogcG9zIC0gc2l6ZSAvIDIsXG4gICAgICAgICAgICBlbmQ6IHBvcyArIHNpemUgLyAyXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChhbmdsZSA8IG1pbiB8fCBhbmdsZSA+IG1heCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhcnQ6IHBvcyAtIHNpemUsXG4gICAgICAgICAgICBlbmQ6IHBvc1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogcG9zLFxuICAgICAgICBlbmQ6IHBvcyArIHNpemVcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGZpdFdpdGhQb2ludExhYmVscyhzY2FsZSkge1xuICAgIGNvbnN0IG9yaWcgPSB7XG4gICAgICAgIGw6IHNjYWxlLmxlZnQgKyBzY2FsZS5fcGFkZGluZy5sZWZ0LFxuICAgICAgICByOiBzY2FsZS5yaWdodCAtIHNjYWxlLl9wYWRkaW5nLnJpZ2h0LFxuICAgICAgICB0OiBzY2FsZS50b3AgKyBzY2FsZS5fcGFkZGluZy50b3AsXG4gICAgICAgIGI6IHNjYWxlLmJvdHRvbSAtIHNjYWxlLl9wYWRkaW5nLmJvdHRvbVxuICAgIH07XG4gICAgY29uc3QgbGltaXRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3JpZyk7XG4gICAgY29uc3QgbGFiZWxTaXplcyA9IFtdO1xuICAgIGNvbnN0IHBhZGRpbmcgPSBbXTtcbiAgICBjb25zdCB2YWx1ZUNvdW50ID0gc2NhbGUuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICBjb25zdCBwb2ludExhYmVsT3B0cyA9IHNjYWxlLm9wdGlvbnMucG9pbnRMYWJlbHM7XG4gICAgY29uc3QgYWRkaXRpb25hbEFuZ2xlID0gcG9pbnRMYWJlbE9wdHMuY2VudGVyUG9pbnRMYWJlbHMgPyBQSSAvIHZhbHVlQ291bnQgOiAwO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCB2YWx1ZUNvdW50OyBpKyspe1xuICAgICAgICBjb25zdCBvcHRzID0gcG9pbnRMYWJlbE9wdHMuc2V0Q29udGV4dChzY2FsZS5nZXRQb2ludExhYmVsQ29udGV4dChpKSk7XG4gICAgICAgIHBhZGRpbmdbaV0gPSBvcHRzLnBhZGRpbmc7XG4gICAgICAgIGNvbnN0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIHNjYWxlLmRyYXdpbmdBcmVhICsgcGFkZGluZ1tpXSwgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICAgICAgY29uc3QgcGxGb250ID0gdG9Gb250KG9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IHRleHRTaXplID0gbWVhc3VyZUxhYmVsU2l6ZShzY2FsZS5jdHgsIHBsRm9udCwgc2NhbGUuX3BvaW50TGFiZWxzW2ldKTtcbiAgICAgICAgbGFiZWxTaXplc1tpXSA9IHRleHRTaXplO1xuICAgICAgICBjb25zdCBhbmdsZVJhZGlhbnMgPSBfbm9ybWFsaXplQW5nbGUoc2NhbGUuZ2V0SW5kZXhBbmdsZShpKSArIGFkZGl0aW9uYWxBbmdsZSk7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5yb3VuZCh0b0RlZ3JlZXMoYW5nbGVSYWRpYW5zKSk7XG4gICAgICAgIGNvbnN0IGhMaW1pdHMgPSBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvaW50UG9zaXRpb24ueCwgdGV4dFNpemUudywgMCwgMTgwKTtcbiAgICAgICAgY29uc3QgdkxpbWl0cyA9IGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9pbnRQb3NpdGlvbi55LCB0ZXh0U2l6ZS5oLCA5MCwgMjcwKTtcbiAgICAgICAgdXBkYXRlTGltaXRzKGxpbWl0cywgb3JpZywgYW5nbGVSYWRpYW5zLCBoTGltaXRzLCB2TGltaXRzKTtcbiAgICB9XG4gICAgc2NhbGUuc2V0Q2VudGVyUG9pbnQob3JpZy5sIC0gbGltaXRzLmwsIGxpbWl0cy5yIC0gb3JpZy5yLCBvcmlnLnQgLSBsaW1pdHMudCwgbGltaXRzLmIgLSBvcmlnLmIpO1xuICAgIHNjYWxlLl9wb2ludExhYmVsSXRlbXMgPSBidWlsZFBvaW50TGFiZWxJdGVtcyhzY2FsZSwgbGFiZWxTaXplcywgcGFkZGluZyk7XG59XG5mdW5jdGlvbiB1cGRhdGVMaW1pdHMobGltaXRzLCBvcmlnLCBhbmdsZSwgaExpbWl0cywgdkxpbWl0cykge1xuICAgIGNvbnN0IHNpbiA9IE1hdGguYWJzKE1hdGguc2luKGFuZ2xlKSk7XG4gICAgY29uc3QgY29zID0gTWF0aC5hYnMoTWF0aC5jb3MoYW5nbGUpKTtcbiAgICBsZXQgeCA9IDA7XG4gICAgbGV0IHkgPSAwO1xuICAgIGlmIChoTGltaXRzLnN0YXJ0IDwgb3JpZy5sKSB7XG4gICAgICAgIHggPSAob3JpZy5sIC0gaExpbWl0cy5zdGFydCkgLyBzaW47XG4gICAgICAgIGxpbWl0cy5sID0gTWF0aC5taW4obGltaXRzLmwsIG9yaWcubCAtIHgpO1xuICAgIH0gZWxzZSBpZiAoaExpbWl0cy5lbmQgPiBvcmlnLnIpIHtcbiAgICAgICAgeCA9IChoTGltaXRzLmVuZCAtIG9yaWcucikgLyBzaW47XG4gICAgICAgIGxpbWl0cy5yID0gTWF0aC5tYXgobGltaXRzLnIsIG9yaWcuciArIHgpO1xuICAgIH1cbiAgICBpZiAodkxpbWl0cy5zdGFydCA8IG9yaWcudCkge1xuICAgICAgICB5ID0gKG9yaWcudCAtIHZMaW1pdHMuc3RhcnQpIC8gY29zO1xuICAgICAgICBsaW1pdHMudCA9IE1hdGgubWluKGxpbWl0cy50LCBvcmlnLnQgLSB5KTtcbiAgICB9IGVsc2UgaWYgKHZMaW1pdHMuZW5kID4gb3JpZy5iKSB7XG4gICAgICAgIHkgPSAodkxpbWl0cy5lbmQgLSBvcmlnLmIpIC8gY29zO1xuICAgICAgICBsaW1pdHMuYiA9IE1hdGgubWF4KGxpbWl0cy5iLCBvcmlnLmIgKyB5KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVQb2ludExhYmVsSXRlbShzY2FsZSwgaW5kZXgsIGl0ZW1PcHRzKSB7XG4gICAgY29uc3Qgb3V0ZXJEaXN0YW5jZSA9IHNjYWxlLmRyYXdpbmdBcmVhO1xuICAgIGNvbnN0IHsgZXh0cmEgLCBhZGRpdGlvbmFsQW5nbGUgLCBwYWRkaW5nICwgc2l6ZSAgfSA9IGl0ZW1PcHRzO1xuICAgIGNvbnN0IHBvaW50TGFiZWxQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaW5kZXgsIG91dGVyRGlzdGFuY2UgKyBleHRyYSArIHBhZGRpbmcsIGFkZGl0aW9uYWxBbmdsZSk7XG4gICAgY29uc3QgYW5nbGUgPSBNYXRoLnJvdW5kKHRvRGVncmVlcyhfbm9ybWFsaXplQW5nbGUocG9pbnRMYWJlbFBvc2l0aW9uLmFuZ2xlICsgSEFMRl9QSSkpKTtcbiAgICBjb25zdCB5ID0geUZvckFuZ2xlKHBvaW50TGFiZWxQb3NpdGlvbi55LCBzaXplLmgsIGFuZ2xlKTtcbiAgICBjb25zdCB0ZXh0QWxpZ24gPSBnZXRUZXh0QWxpZ25Gb3JBbmdsZShhbmdsZSk7XG4gICAgY29uc3QgbGVmdCA9IGxlZnRGb3JUZXh0QWxpZ24ocG9pbnRMYWJlbFBvc2l0aW9uLngsIHNpemUudywgdGV4dEFsaWduKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICB4OiBwb2ludExhYmVsUG9zaXRpb24ueCxcbiAgICAgICAgeSxcbiAgICAgICAgdGV4dEFsaWduLFxuICAgICAgICBsZWZ0LFxuICAgICAgICB0b3A6IHksXG4gICAgICAgIHJpZ2h0OiBsZWZ0ICsgc2l6ZS53LFxuICAgICAgICBib3R0b206IHkgKyBzaXplLmhcbiAgICB9O1xufVxuZnVuY3Rpb24gaXNOb3RPdmVybGFwcGVkKGl0ZW0sIGFyZWEpIHtcbiAgICBpZiAoIWFyZWEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHsgbGVmdCAsIHRvcCAsIHJpZ2h0ICwgYm90dG9tICB9ID0gaXRlbTtcbiAgICBjb25zdCBhcGV4ZXNJbkFyZWEgPSBfaXNQb2ludEluQXJlYSh7XG4gICAgICAgIHg6IGxlZnQsXG4gICAgICAgIHk6IHRvcFxuICAgIH0sIGFyZWEpIHx8IF9pc1BvaW50SW5BcmVhKHtcbiAgICAgICAgeDogbGVmdCxcbiAgICAgICAgeTogYm90dG9tXG4gICAgfSwgYXJlYSkgfHwgX2lzUG9pbnRJbkFyZWEoe1xuICAgICAgICB4OiByaWdodCxcbiAgICAgICAgeTogdG9wXG4gICAgfSwgYXJlYSkgfHwgX2lzUG9pbnRJbkFyZWEoe1xuICAgICAgICB4OiByaWdodCxcbiAgICAgICAgeTogYm90dG9tXG4gICAgfSwgYXJlYSk7XG4gICAgcmV0dXJuICFhcGV4ZXNJbkFyZWE7XG59XG5mdW5jdGlvbiBidWlsZFBvaW50TGFiZWxJdGVtcyhzY2FsZSwgbGFiZWxTaXplcywgcGFkZGluZykge1xuICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgY29uc3QgdmFsdWVDb3VudCA9IHNjYWxlLl9wb2ludExhYmVscy5sZW5ndGg7XG4gICAgY29uc3Qgb3B0cyA9IHNjYWxlLm9wdGlvbnM7XG4gICAgY29uc3QgeyBjZW50ZXJQb2ludExhYmVscyAsIGRpc3BsYXkgIH0gPSBvcHRzLnBvaW50TGFiZWxzO1xuICAgIGNvbnN0IGl0ZW1PcHRzID0ge1xuICAgICAgICBleHRyYTogZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KG9wdHMpIC8gMixcbiAgICAgICAgYWRkaXRpb25hbEFuZ2xlOiBjZW50ZXJQb2ludExhYmVscyA/IFBJIC8gdmFsdWVDb3VudCA6IDBcbiAgICB9O1xuICAgIGxldCBhcmVhO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCB2YWx1ZUNvdW50OyBpKyspe1xuICAgICAgICBpdGVtT3B0cy5wYWRkaW5nID0gcGFkZGluZ1tpXTtcbiAgICAgICAgaXRlbU9wdHMuc2l6ZSA9IGxhYmVsU2l6ZXNbaV07XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBjcmVhdGVQb2ludExhYmVsSXRlbShzY2FsZSwgaSwgaXRlbU9wdHMpO1xuICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICBpZiAoZGlzcGxheSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICBpdGVtLnZpc2libGUgPSBpc05vdE92ZXJsYXBwZWQoaXRlbSwgYXJlYSk7XG4gICAgICAgICAgICBpZiAoaXRlbS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgYXJlYSA9IGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1zO1xufVxuZnVuY3Rpb24gZ2V0VGV4dEFsaWduRm9yQW5nbGUoYW5nbGUpIHtcbiAgICBpZiAoYW5nbGUgPT09IDAgfHwgYW5nbGUgPT09IDE4MCkge1xuICAgICAgICByZXR1cm4gJ2NlbnRlcic7XG4gICAgfSBlbHNlIGlmIChhbmdsZSA8IDE4MCkge1xuICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgIH1cbiAgICByZXR1cm4gJ3JpZ2h0Jztcbn1cbmZ1bmN0aW9uIGxlZnRGb3JUZXh0QWxpZ24oeCwgdywgYWxpZ24pIHtcbiAgICBpZiAoYWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgeCAtPSB3O1xuICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHggLT0gdyAvIDI7XG4gICAgfVxuICAgIHJldHVybiB4O1xufVxuZnVuY3Rpb24geUZvckFuZ2xlKHksIGgsIGFuZ2xlKSB7XG4gICAgaWYgKGFuZ2xlID09PSA5MCB8fCBhbmdsZSA9PT0gMjcwKSB7XG4gICAgICAgIHkgLT0gaCAvIDI7XG4gICAgfSBlbHNlIGlmIChhbmdsZSA+IDI3MCB8fCBhbmdsZSA8IDkwKSB7XG4gICAgICAgIHkgLT0gaDtcbiAgICB9XG4gICAgcmV0dXJuIHk7XG59XG5mdW5jdGlvbiBkcmF3UG9pbnRMYWJlbEJveChjdHgsIG9wdHMsIGl0ZW0pIHtcbiAgICBjb25zdCB7IGxlZnQgLCB0b3AgLCByaWdodCAsIGJvdHRvbSAgfSA9IGl0ZW07XG4gICAgY29uc3QgeyBiYWNrZHJvcENvbG9yICB9ID0gb3B0cztcbiAgICBpZiAoIWlzTnVsbE9yVW5kZWYoYmFja2Ryb3BDb2xvcikpIHtcbiAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhvcHRzLmJvcmRlclJhZGl1cyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0cy5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2Ryb3BDb2xvcjtcbiAgICAgICAgY29uc3QgYmFja2Ryb3BMZWZ0ID0gbGVmdCAtIHBhZGRpbmcubGVmdDtcbiAgICAgICAgY29uc3QgYmFja2Ryb3BUb3AgPSB0b3AgLSBwYWRkaW5nLnRvcDtcbiAgICAgICAgY29uc3QgYmFja2Ryb3BXaWR0aCA9IHJpZ2h0IC0gbGVmdCArIHBhZGRpbmcud2lkdGg7XG4gICAgICAgIGNvbnN0IGJhY2tkcm9wSGVpZ2h0ID0gYm90dG9tIC0gdG9wICsgcGFkZGluZy5oZWlnaHQ7XG4gICAgICAgIGlmIChPYmplY3QudmFsdWVzKGJvcmRlclJhZGl1cykuc29tZSgodik9PnYgIT09IDApKSB7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgICAgICAgICAgICAgeDogYmFja2Ryb3BMZWZ0LFxuICAgICAgICAgICAgICAgIHk6IGJhY2tkcm9wVG9wLFxuICAgICAgICAgICAgICAgIHc6IGJhY2tkcm9wV2lkdGgsXG4gICAgICAgICAgICAgICAgaDogYmFja2Ryb3BIZWlnaHQsXG4gICAgICAgICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChiYWNrZHJvcExlZnQsIGJhY2tkcm9wVG9wLCBiYWNrZHJvcFdpZHRoLCBiYWNrZHJvcEhlaWdodCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBkcmF3UG9pbnRMYWJlbHMoc2NhbGUsIGxhYmVsQ291bnQpIHtcbiAgICBjb25zdCB7IGN0eCAsIG9wdGlvbnM6IHsgcG9pbnRMYWJlbHMgIH0gIH0gPSBzY2FsZTtcbiAgICBmb3IobGV0IGkgPSBsYWJlbENvdW50IC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgICBjb25zdCBpdGVtID0gc2NhbGUuX3BvaW50TGFiZWxJdGVtc1tpXTtcbiAgICAgICAgaWYgKCFpdGVtLnZpc2libGUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gcG9pbnRMYWJlbHMuc2V0Q29udGV4dChzY2FsZS5nZXRQb2ludExhYmVsQ29udGV4dChpKSk7XG4gICAgICAgIGRyYXdQb2ludExhYmVsQm94KGN0eCwgb3B0c0F0SW5kZXgsIGl0ZW0pO1xuICAgICAgICBjb25zdCBwbEZvbnQgPSB0b0ZvbnQob3B0c0F0SW5kZXguZm9udCk7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgLCB0ZXh0QWxpZ24gIH0gPSBpdGVtO1xuICAgICAgICByZW5kZXJUZXh0KGN0eCwgc2NhbGUuX3BvaW50TGFiZWxzW2ldLCB4LCB5ICsgcGxGb250LmxpbmVIZWlnaHQgLyAyLCBwbEZvbnQsIHtcbiAgICAgICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5jb2xvcixcbiAgICAgICAgICAgIHRleHRBbGlnbjogdGV4dEFsaWduLFxuICAgICAgICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBwYXRoUmFkaXVzTGluZShzY2FsZSwgcmFkaXVzLCBjaXJjdWxhciwgbGFiZWxDb3VudCkge1xuICAgIGNvbnN0IHsgY3R4ICB9ID0gc2NhbGU7XG4gICAgaWYgKGNpcmN1bGFyKSB7XG4gICAgICAgIGN0eC5hcmMoc2NhbGUueENlbnRlciwgc2NhbGUueUNlbnRlciwgcmFkaXVzLCAwLCBUQVUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbigwLCByYWRpdXMpO1xuICAgICAgICBjdHgubW92ZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcbiAgICAgICAgZm9yKGxldCBpID0gMTsgaSA8IGxhYmVsQ291bnQ7IGkrKyl7XG4gICAgICAgICAgICBwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCByYWRpdXMpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhwb2ludFBvc2l0aW9uLngsIHBvaW50UG9zaXRpb24ueSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBkcmF3UmFkaXVzTGluZShzY2FsZSwgZ3JpZExpbmVPcHRzLCByYWRpdXMsIGxhYmVsQ291bnQsIGJvcmRlck9wdHMpIHtcbiAgICBjb25zdCBjdHggPSBzY2FsZS5jdHg7XG4gICAgY29uc3QgY2lyY3VsYXIgPSBncmlkTGluZU9wdHMuY2lyY3VsYXI7XG4gICAgY29uc3QgeyBjb2xvciAsIGxpbmVXaWR0aCAgfSA9IGdyaWRMaW5lT3B0cztcbiAgICBpZiAoIWNpcmN1bGFyICYmICFsYWJlbENvdW50IHx8ICFjb2xvciB8fCAhbGluZVdpZHRoIHx8IHJhZGl1cyA8IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgY3R4LnNldExpbmVEYXNoKGJvcmRlck9wdHMuZGFzaCk7XG4gICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gYm9yZGVyT3B0cy5kYXNoT2Zmc2V0O1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBwYXRoUmFkaXVzTGluZShzY2FsZSwgcmFkaXVzLCBjaXJjdWxhciwgbGFiZWxDb3VudCk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gY3JlYXRlUG9pbnRMYWJlbENvbnRleHQocGFyZW50LCBpbmRleCwgbGFiZWwpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIGluZGV4LFxuICAgICAgICB0eXBlOiAncG9pbnRMYWJlbCdcbiAgICB9KTtcbn1cbmNsYXNzIFJhZGlhbExpbmVhclNjYWxlIGV4dGVuZHMgTGluZWFyU2NhbGVCYXNlIHtcbiAgICBzdGF0aWMgaWQgPSAncmFkaWFsTGluZWFyJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgIGFuaW1hdGU6IHRydWUsXG4gICAgICAgIHBvc2l0aW9uOiAnY2hhcnRBcmVhJyxcbiAgICAgICAgYW5nbGVMaW5lczoge1xuICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGxpbmVXaWR0aDogMSxcbiAgICAgICAgICAgIGJvcmRlckRhc2g6IFtdLFxuICAgICAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogMC4wXG4gICAgICAgIH0sXG4gICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgIGNpcmN1bGFyOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBzdGFydEFuZ2xlOiAwLFxuICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgc2hvd0xhYmVsQmFja2Ryb3A6IHRydWUsXG4gICAgICAgICAgICBjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy5udW1lcmljXG4gICAgICAgIH0sXG4gICAgICAgIHBvaW50TGFiZWxzOiB7XG4gICAgICAgICAgICBiYWNrZHJvcENvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBiYWNrZHJvcFBhZGRpbmc6IDIsXG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgZm9udDoge1xuICAgICAgICAgICAgICAgIHNpemU6IDEwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2FsbGJhY2sgKGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhZGRpbmc6IDUsXG4gICAgICAgICAgICBjZW50ZXJQb2ludExhYmVsczogZmFsc2VcbiAgICAgICAgfVxuICAgIH07XG4gICAgc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB7XG4gICAgICAgICdhbmdsZUxpbmVzLmNvbG9yJzogJ2JvcmRlckNvbG9yJyxcbiAgICAgICAgJ3BvaW50TGFiZWxzLmNvbG9yJzogJ2NvbG9yJyxcbiAgICAgICAgJ3RpY2tzLmNvbG9yJzogJ2NvbG9yJ1xuICAgIH07XG4gICAgc3RhdGljIGRlc2NyaXB0b3JzID0ge1xuICAgICAgICBhbmdsZUxpbmVzOiB7XG4gICAgICAgICAgICBfZmFsbGJhY2s6ICdncmlkJ1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjZmcpe1xuICAgICAgICBzdXBlcihjZmcpO1xuICAgICAgICAgdGhpcy54Q2VudGVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy55Q2VudGVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5kcmF3aW5nQXJlYSA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX3BvaW50TGFiZWxzID0gW107XG4gICAgICAgIHRoaXMuX3BvaW50TGFiZWxJdGVtcyA9IFtdO1xuICAgIH1cbiAgICBzZXREaW1lbnNpb25zKCkge1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdGhpcy5fcGFkZGluZyA9IHRvUGFkZGluZyhnZXRUaWNrQmFja2Ryb3BIZWlnaHQodGhpcy5vcHRpb25zKSAvIDIpO1xuICAgICAgICBjb25zdCB3ID0gdGhpcy53aWR0aCA9IHRoaXMubWF4V2lkdGggLSBwYWRkaW5nLndpZHRoO1xuICAgICAgICBjb25zdCBoID0gdGhpcy5oZWlnaHQgPSB0aGlzLm1heEhlaWdodCAtIHBhZGRpbmcuaGVpZ2h0O1xuICAgICAgICB0aGlzLnhDZW50ZXIgPSBNYXRoLmZsb29yKHRoaXMubGVmdCArIHcgLyAyICsgcGFkZGluZy5sZWZ0KTtcbiAgICAgICAgdGhpcy55Q2VudGVyID0gTWF0aC5mbG9vcih0aGlzLnRvcCArIGggLyAyICsgcGFkZGluZy50b3ApO1xuICAgICAgICB0aGlzLmRyYXdpbmdBcmVhID0gTWF0aC5mbG9vcihNYXRoLm1pbih3LCBoKSAvIDIpO1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCB7IG1pbiAsIG1heCAgfSA9IHRoaXMuZ2V0TWluTWF4KGZhbHNlKTtcbiAgICAgICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pICYmICFpc05hTihtaW4pID8gbWluIDogMDtcbiAgICAgICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpICYmICFpc05hTihtYXgpID8gbWF4IDogMDtcbiAgICAgICAgdGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG4gICAgfVxuIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5kcmF3aW5nQXJlYSAvIGdldFRpY2tCYWNrZHJvcEhlaWdodCh0aGlzLm9wdGlvbnMpKTtcbiAgICB9XG4gICAgZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKSB7XG4gICAgICAgIExpbmVhclNjYWxlQmFzZS5wcm90b3R5cGUuZ2VuZXJhdGVUaWNrTGFiZWxzLmNhbGwodGhpcywgdGlja3MpO1xuICAgICAgICB0aGlzLl9wb2ludExhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCkubWFwKCh2YWx1ZSwgaW5kZXgpPT57XG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IGNhbGxiYWNrKHRoaXMub3B0aW9ucy5wb2ludExhYmVscy5jYWxsYmFjaywgW1xuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBsYWJlbCB8fCBsYWJlbCA9PT0gMCA/IGxhYmVsIDogJyc7XG4gICAgICAgIH0pLmZpbHRlcigodiwgaSk9PnRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSkpO1xuICAgIH1cbiAgICBmaXQoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmIChvcHRzLmRpc3BsYXkgJiYgb3B0cy5wb2ludExhYmVscy5kaXNwbGF5KSB7XG4gICAgICAgICAgICBmaXRXaXRoUG9pbnRMYWJlbHModGhpcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldENlbnRlclBvaW50KDAsIDAsIDAsIDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldENlbnRlclBvaW50KGxlZnRNb3ZlbWVudCwgcmlnaHRNb3ZlbWVudCwgdG9wTW92ZW1lbnQsIGJvdHRvbU1vdmVtZW50KSB7XG4gICAgICAgIHRoaXMueENlbnRlciArPSBNYXRoLmZsb29yKChsZWZ0TW92ZW1lbnQgLSByaWdodE1vdmVtZW50KSAvIDIpO1xuICAgICAgICB0aGlzLnlDZW50ZXIgKz0gTWF0aC5mbG9vcigodG9wTW92ZW1lbnQgLSBib3R0b21Nb3ZlbWVudCkgLyAyKTtcbiAgICAgICAgdGhpcy5kcmF3aW5nQXJlYSAtPSBNYXRoLm1pbih0aGlzLmRyYXdpbmdBcmVhIC8gMiwgTWF0aC5tYXgobGVmdE1vdmVtZW50LCByaWdodE1vdmVtZW50LCB0b3BNb3ZlbWVudCwgYm90dG9tTW92ZW1lbnQpKTtcbiAgICB9XG4gICAgZ2V0SW5kZXhBbmdsZShpbmRleCkge1xuICAgICAgICBjb25zdCBhbmdsZU11bHRpcGxpZXIgPSBUQVUgLyAodGhpcy5fcG9pbnRMYWJlbHMubGVuZ3RoIHx8IDEpO1xuICAgICAgICBjb25zdCBzdGFydEFuZ2xlID0gdGhpcy5vcHRpb25zLnN0YXJ0QW5nbGUgfHwgMDtcbiAgICAgICAgcmV0dXJuIF9ub3JtYWxpemVBbmdsZShpbmRleCAqIGFuZ2xlTXVsdGlwbGllciArIHRvUmFkaWFucyhzdGFydEFuZ2xlKSk7XG4gICAgfVxuICAgIGdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmIChpc051bGxPclVuZGVmKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY2FsaW5nRmFjdG9yID0gdGhpcy5kcmF3aW5nQXJlYSAvICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMubWF4IC0gdmFsdWUpICogc2NhbGluZ0ZhY3RvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHZhbHVlIC0gdGhpcy5taW4pICogc2NhbGluZ0ZhY3RvcjtcbiAgICB9XG4gICAgZ2V0VmFsdWVGb3JEaXN0YW5jZUZyb21DZW50ZXIoZGlzdGFuY2UpIHtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYoZGlzdGFuY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxlZERpc3RhbmNlID0gZGlzdGFuY2UgLyAodGhpcy5kcmF3aW5nQXJlYSAvICh0aGlzLm1heCAtIHRoaXMubWluKSk7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmV2ZXJzZSA/IHRoaXMubWF4IC0gc2NhbGVkRGlzdGFuY2UgOiB0aGlzLm1pbiArIHNjYWxlZERpc3RhbmNlO1xuICAgIH1cbiAgICBnZXRQb2ludExhYmVsQ29udGV4dChpbmRleCkge1xuICAgICAgICBjb25zdCBwb2ludExhYmVscyA9IHRoaXMuX3BvaW50TGFiZWxzIHx8IFtdO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHBvaW50TGFiZWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcG9pbnRMYWJlbCA9IHBvaW50TGFiZWxzW2luZGV4XTtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVQb2ludExhYmVsQ29udGV4dCh0aGlzLmdldENvbnRleHQoKSwgaW5kZXgsIHBvaW50TGFiZWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFBvaW50UG9zaXRpb24oaW5kZXgsIGRpc3RhbmNlRnJvbUNlbnRlciwgYWRkaXRpb25hbEFuZ2xlID0gMCkge1xuICAgICAgICBjb25zdCBhbmdsZSA9IHRoaXMuZ2V0SW5kZXhBbmdsZShpbmRleCkgLSBIQUxGX1BJICsgYWRkaXRpb25hbEFuZ2xlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogTWF0aC5jb3MoYW5nbGUpICogZGlzdGFuY2VGcm9tQ2VudGVyICsgdGhpcy54Q2VudGVyLFxuICAgICAgICAgICAgeTogTWF0aC5zaW4oYW5nbGUpICogZGlzdGFuY2VGcm9tQ2VudGVyICsgdGhpcy55Q2VudGVyLFxuICAgICAgICAgICAgYW5nbGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQb2ludFBvc2l0aW9uKGluZGV4LCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKSk7XG4gICAgfVxuICAgIGdldEJhc2VQb3NpdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaW5kZXggfHwgMCwgdGhpcy5nZXRCYXNlVmFsdWUoKSk7XG4gICAgfVxuICAgIGdldFBvaW50TGFiZWxQb3NpdGlvbihpbmRleCkge1xuICAgICAgICBjb25zdCB7IGxlZnQgLCB0b3AgLCByaWdodCAsIGJvdHRvbSAgfSA9IHRoaXMuX3BvaW50TGFiZWxJdGVtc1tpbmRleF07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgdG9wLFxuICAgICAgICAgICAgcmlnaHQsXG4gICAgICAgICAgICBib3R0b21cbiAgICAgICAgfTtcbiAgICB9XG4gZHJhd0JhY2tncm91bmQoKSB7XG4gICAgICAgIGNvbnN0IHsgYmFja2dyb3VuZENvbG9yICwgZ3JpZDogeyBjaXJjdWxhciAgfSAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKGJhY2tncm91bmRDb2xvcikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgcGF0aFJhZGl1c0xpbmUodGhpcywgdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0aGlzLl9lbmRWYWx1ZSksIGNpcmN1bGFyLCB0aGlzLl9wb2ludExhYmVscy5sZW5ndGgpO1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgfVxuIGRyYXdHcmlkKCkge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBhbmdsZUxpbmVzICwgZ3JpZCAsIGJvcmRlciAgfSA9IG9wdHM7XG4gICAgICAgIGNvbnN0IGxhYmVsQ291bnQgPSB0aGlzLl9wb2ludExhYmVscy5sZW5ndGg7XG4gICAgICAgIGxldCBpLCBvZmZzZXQsIHBvc2l0aW9uO1xuICAgICAgICBpZiAob3B0cy5wb2ludExhYmVscy5kaXNwbGF5KSB7XG4gICAgICAgICAgICBkcmF3UG9pbnRMYWJlbHModGhpcywgbGFiZWxDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdyaWQuZGlzcGxheSkge1xuICAgICAgICAgICAgdGhpcy50aWNrcy5mb3JFYWNoKCh0aWNrLCBpbmRleCk9PntcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0aWNrLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gZ3JpZC5zZXRDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRzQXRJbmRleEJvcmRlciA9IGJvcmRlci5zZXRDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICBkcmF3UmFkaXVzTGluZSh0aGlzLCBvcHRzQXRJbmRleCwgb2Zmc2V0LCBsYWJlbENvdW50LCBvcHRzQXRJbmRleEJvcmRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuZ2xlTGluZXMuZGlzcGxheSkge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGZvcihpID0gbGFiZWxDb3VudCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRzQXRJbmRleCA9IGFuZ2xlTGluZXMuc2V0Q29udGV4dCh0aGlzLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNvbG9yICwgbGluZVdpZHRoICB9ID0gb3B0c0F0SW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKCFsaW5lV2lkdGggfHwgIWNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuICAgICAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChvcHRzQXRJbmRleC5ib3JkZXJEYXNoKTtcbiAgICAgICAgICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSBvcHRzQXRJbmRleC5ib3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUob3B0cy50aWNrcy5yZXZlcnNlID8gdGhpcy5taW4gOiB0aGlzLm1heCk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0aGlzLmdldFBvaW50UG9zaXRpb24oaSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh0aGlzLnhDZW50ZXIsIHRoaXMueUNlbnRlcik7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVUbyhwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgfVxuIGRyYXdCb3JkZXIoKSB7fVxuIGRyYXdMYWJlbHMoKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gICAgICAgIGlmICghdGlja09wdHMuZGlzcGxheSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLmdldEluZGV4QW5nbGUoMCk7XG4gICAgICAgIGxldCBvZmZzZXQsIHdpZHRoO1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHgudHJhbnNsYXRlKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyKTtcbiAgICAgICAgY3R4LnJvdGF0ZShzdGFydEFuZ2xlKTtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIHRoaXMudGlja3MuZm9yRWFjaCgodGljaywgaW5kZXgpPT57XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgIW9wdHMucmV2ZXJzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gdGlja09wdHMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaW5kZXgpKTtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tGb250ID0gdG9Gb250KG9wdHNBdEluZGV4LmZvbnQpO1xuICAgICAgICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0aGlzLnRpY2tzW2luZGV4XS52YWx1ZSk7XG4gICAgICAgICAgICBpZiAob3B0c0F0SW5kZXguc2hvd0xhYmVsQmFja2Ryb3ApIHtcbiAgICAgICAgICAgICAgICBjdHguZm9udCA9IHRpY2tGb250LnN0cmluZztcbiAgICAgICAgICAgICAgICB3aWR0aCA9IGN0eC5tZWFzdXJlVGV4dCh0aWNrLmxhYmVsKS53aWR0aDtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0c0F0SW5kZXguYmFja2Ryb3BDb2xvcjtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdHNBdEluZGV4LmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KC13aWR0aCAvIDIgLSBwYWRkaW5nLmxlZnQsIC1vZmZzZXQgLSB0aWNrRm9udC5zaXplIC8gMiAtIHBhZGRpbmcudG9wLCB3aWR0aCArIHBhZGRpbmcud2lkdGgsIHRpY2tGb250LnNpemUgKyBwYWRkaW5nLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW5kZXJUZXh0KGN0eCwgdGljay5sYWJlbCwgMCwgLW9mZnNldCwgdGlja0ZvbnQsIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogb3B0c0F0SW5kZXguY29sb3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gZHJhd1RpdGxlKCkge31cbn1cblxuY29uc3QgSU5URVJWQUxTID0ge1xuICAgIG1pbGxpc2Vjb25kOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMSxcbiAgICAgICAgc3RlcHM6IDEwMDBcbiAgICB9LFxuICAgIHNlY29uZDoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDEwMDAsXG4gICAgICAgIHN0ZXBzOiA2MFxuICAgIH0sXG4gICAgbWludXRlOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogNjAwMDAsXG4gICAgICAgIHN0ZXBzOiA2MFxuICAgIH0sXG4gICAgaG91cjoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDM2MDAwMDAsXG4gICAgICAgIHN0ZXBzOiAyNFxuICAgIH0sXG4gICAgZGF5OiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogODY0MDAwMDAsXG4gICAgICAgIHN0ZXBzOiAzMFxuICAgIH0sXG4gICAgd2Vlazoge1xuICAgICAgICBjb21tb246IGZhbHNlLFxuICAgICAgICBzaXplOiA2MDQ4MDAwMDAsXG4gICAgICAgIHN0ZXBzOiA0XG4gICAgfSxcbiAgICBtb250aDoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDIuNjI4ZTksXG4gICAgICAgIHN0ZXBzOiAxMlxuICAgIH0sXG4gICAgcXVhcnRlcjoge1xuICAgICAgICBjb21tb246IGZhbHNlLFxuICAgICAgICBzaXplOiA3Ljg4NGU5LFxuICAgICAgICBzdGVwczogNFxuICAgIH0sXG4gICAgeWVhcjoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDMuMTU0ZTEwXG4gICAgfVxufTtcbiBjb25zdCBVTklUUyA9ICAvKiAjX19QVVJFX18gKi8gT2JqZWN0LmtleXMoSU5URVJWQUxTKTtcbiBmdW5jdGlvbiBzb3J0ZXIoYSwgYikge1xuICAgIHJldHVybiBhIC0gYjtcbn1cbiBmdW5jdGlvbiBwYXJzZShzY2FsZSwgaW5wdXQpIHtcbiAgICBpZiAoaXNOdWxsT3JVbmRlZihpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcbiAgICBjb25zdCB7IHBhcnNlciAsIHJvdW5kICwgaXNvV2Vla2RheSAgfSA9IHNjYWxlLl9wYXJzZU9wdHM7XG4gICAgbGV0IHZhbHVlID0gaW5wdXQ7XG4gICAgaWYgKHR5cGVvZiBwYXJzZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBwYXJzZXIodmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHR5cGVvZiBwYXJzZXIgPT09ICdzdHJpbmcnID8gYWRhcHRlci5wYXJzZSh2YWx1ZSwgIHBhcnNlcikgOiBhZGFwdGVyLnBhcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAocm91bmQpIHtcbiAgICAgICAgdmFsdWUgPSByb3VuZCA9PT0gJ3dlZWsnICYmIChpc051bWJlcihpc29XZWVrZGF5KSB8fCBpc29XZWVrZGF5ID09PSB0cnVlKSA/IGFkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgJ2lzb1dlZWsnLCBpc29XZWVrZGF5KSA6IGFkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgcm91bmQpO1xuICAgIH1cbiAgICByZXR1cm4gK3ZhbHVlO1xufVxuIGZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JBdXRvVGlja3MobWluVW5pdCwgbWluLCBtYXgsIGNhcGFjaXR5KSB7XG4gICAgY29uc3QgaWxlbiA9IFVOSVRTLmxlbmd0aDtcbiAgICBmb3IobGV0IGkgPSBVTklUUy5pbmRleE9mKG1pblVuaXQpOyBpIDwgaWxlbiAtIDE7ICsraSl7XG4gICAgICAgIGNvbnN0IGludGVydmFsID0gSU5URVJWQUxTW1VOSVRTW2ldXTtcbiAgICAgICAgY29uc3QgZmFjdG9yID0gaW50ZXJ2YWwuc3RlcHMgPyBpbnRlcnZhbC5zdGVwcyA6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgICBpZiAoaW50ZXJ2YWwuY29tbW9uICYmIE1hdGguY2VpbCgobWF4IC0gbWluKSAvIChmYWN0b3IgKiBpbnRlcnZhbC5zaXplKSkgPD0gY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHJldHVybiBVTklUU1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gVU5JVFNbaWxlbiAtIDFdO1xufVxuIGZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nKHNjYWxlLCBudW1UaWNrcywgbWluVW5pdCwgbWluLCBtYXgpIHtcbiAgICBmb3IobGV0IGkgPSBVTklUUy5sZW5ndGggLSAxOyBpID49IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGktLSl7XG4gICAgICAgIGNvbnN0IHVuaXQgPSBVTklUU1tpXTtcbiAgICAgICAgaWYgKElOVEVSVkFMU1t1bml0XS5jb21tb24gJiYgc2NhbGUuX2FkYXB0ZXIuZGlmZihtYXgsIG1pbiwgdW5pdCkgPj0gbnVtVGlja3MgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5pdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gVU5JVFNbbWluVW5pdCA/IFVOSVRTLmluZGV4T2YobWluVW5pdCkgOiAwXTtcbn1cbiBmdW5jdGlvbiBkZXRlcm1pbmVNYWpvclVuaXQodW5pdCkge1xuICAgIGZvcihsZXQgaSA9IFVOSVRTLmluZGV4T2YodW5pdCkgKyAxLCBpbGVuID0gVU5JVFMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgaWYgKElOVEVSVkFMU1tVTklUU1tpXV0uY29tbW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gVU5JVFNbaV07XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcykge1xuICAgIGlmICghdGltZXN0YW1wcykge1xuICAgICAgICB0aWNrc1t0aW1lXSA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB7IGxvICwgaGkgIH0gPSBfbG9va3VwKHRpbWVzdGFtcHMsIHRpbWUpO1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aW1lc3RhbXBzW2xvXSA+PSB0aW1lID8gdGltZXN0YW1wc1tsb10gOiB0aW1lc3RhbXBzW2hpXTtcbiAgICAgICAgdGlja3NbdGltZXN0YW1wXSA9IHRydWU7XG4gICAgfVxufVxuIGZ1bmN0aW9uIHNldE1ham9yVGlja3Moc2NhbGUsIHRpY2tzLCBtYXAsIG1ham9yVW5pdCkge1xuICAgIGNvbnN0IGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcbiAgICBjb25zdCBmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YodGlja3NbMF0udmFsdWUsIG1ham9yVW5pdCk7XG4gICAgY29uc3QgbGFzdCA9IHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlO1xuICAgIGxldCBtYWpvciwgaW5kZXg7XG4gICAgZm9yKG1ham9yID0gZmlyc3Q7IG1ham9yIDw9IGxhc3Q7IG1ham9yID0gK2FkYXB0ZXIuYWRkKG1ham9yLCAxLCBtYWpvclVuaXQpKXtcbiAgICAgICAgaW5kZXggPSBtYXBbbWFqb3JdO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGlja3NbaW5kZXhdLm1ham9yID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG59XG4gZnVuY3Rpb24gdGlja3NGcm9tVGltZXN0YW1wcyhzY2FsZSwgdmFsdWVzLCBtYWpvclVuaXQpIHtcbiAgICBjb25zdCB0aWNrcyA9IFtdO1xuICAgICBjb25zdCBtYXAgPSB7fTtcbiAgICBjb25zdCBpbGVuID0gdmFsdWVzLmxlbmd0aDtcbiAgICBsZXQgaSwgdmFsdWU7XG4gICAgZm9yKGkgPSAwOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgIG1hcFt2YWx1ZV0gPSBpO1xuICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgbWFqb3I6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaWxlbiA9PT0gMCB8fCAhbWFqb3JVbml0ID8gdGlja3MgOiBzZXRNYWpvclRpY2tzKHNjYWxlLCB0aWNrcywgbWFwLCBtYWpvclVuaXQpO1xufVxuY2xhc3MgVGltZVNjYWxlIGV4dGVuZHMgU2NhbGUge1xuICAgIHN0YXRpYyBpZCA9ICd0aW1lJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gYm91bmRzOiAnZGF0YScsXG4gICAgICAgIGFkYXB0ZXJzOiB7fSxcbiAgICAgICAgdGltZToge1xuICAgICAgICAgICAgcGFyc2VyOiBmYWxzZSxcbiAgICAgICAgICAgIHVuaXQ6IGZhbHNlLFxuICAgICAgICAgICAgcm91bmQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNvV2Vla2RheTogZmFsc2UsXG4gICAgICAgICAgICBtaW5Vbml0OiAnbWlsbGlzZWNvbmQnLFxuICAgICAgICAgICAgZGlzcGxheUZvcm1hdHM6IHt9XG4gICAgICAgIH0sXG4gICAgICAgIHRpY2tzOiB7XG4gc291cmNlOiAnYXV0bycsXG4gICAgICAgICAgICBjYWxsYmFjazogZmFsc2UsXG4gICAgICAgICAgICBtYWpvcjoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgdGhpcy5fY2FjaGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgIGxhYmVsczogW10sXG4gICAgICAgICAgICBhbGw6IFtdXG4gICAgICAgIH07XG4gICAgICAgICB0aGlzLl91bml0ID0gJ2RheSc7XG4gICAgICAgICB0aGlzLl9tYWpvclVuaXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX29mZnNldHMgPSB7fTtcbiAgICAgICAgdGhpcy5fbm9ybWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJzZU9wdHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGluaXQoc2NhbGVPcHRzLCBvcHRzID0ge30pIHtcbiAgICAgICAgY29uc3QgdGltZSA9IHNjYWxlT3B0cy50aW1lIHx8IChzY2FsZU9wdHMudGltZSA9IHt9KTtcbiAgICAgICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyID0gbmV3IGFkYXB0ZXJzLl9kYXRlKHNjYWxlT3B0cy5hZGFwdGVycy5kYXRlKTtcbiAgICAgICAgYWRhcHRlci5pbml0KG9wdHMpO1xuICAgICAgICBtZXJnZUlmKHRpbWUuZGlzcGxheUZvcm1hdHMsIGFkYXB0ZXIuZm9ybWF0cygpKTtcbiAgICAgICAgdGhpcy5fcGFyc2VPcHRzID0ge1xuICAgICAgICAgICAgcGFyc2VyOiB0aW1lLnBhcnNlcixcbiAgICAgICAgICAgIHJvdW5kOiB0aW1lLnJvdW5kLFxuICAgICAgICAgICAgaXNvV2Vla2RheTogdGltZS5pc29XZWVrZGF5XG4gICAgICAgIH07XG4gICAgICAgIHN1cGVyLmluaXQoc2NhbGVPcHRzKTtcbiAgICAgICAgdGhpcy5fbm9ybWFsaXplZCA9IG9wdHMubm9ybWFsaXplZDtcbiAgICB9XG4gcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBpZiAocmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZSh0aGlzLCByYXcpO1xuICAgIH1cbiAgICBiZWZvcmVMYXlvdXQoKSB7XG4gICAgICAgIHN1cGVyLmJlZm9yZUxheW91dCgpO1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgbGFiZWxzOiBbXSxcbiAgICAgICAgICAgIGFsbDogW11cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXI7XG4gICAgICAgIGNvbnN0IHVuaXQgPSBvcHRpb25zLnRpbWUudW5pdCB8fCAnZGF5JztcbiAgICAgICAgbGV0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiBmdW5jdGlvbiBfYXBwbHlCb3VuZHMoYm91bmRzKSB7XG4gICAgICAgICAgICBpZiAoIW1pbkRlZmluZWQgJiYgIWlzTmFOKGJvdW5kcy5taW4pKSB7XG4gICAgICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBib3VuZHMubWluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWF4RGVmaW5lZCAmJiAhaXNOYU4oYm91bmRzLm1heCkpIHtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGJvdW5kcy5tYXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghbWluRGVmaW5lZCB8fCAhbWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgX2FwcGx5Qm91bmRzKHRoaXMuX2dldExhYmVsQm91bmRzKCkpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYm91bmRzICE9PSAndGlja3MnIHx8IG9wdGlvbnMudGlja3Muc291cmNlICE9PSAnbGFiZWxzJykge1xuICAgICAgICAgICAgICAgIF9hcHBseUJvdW5kcyh0aGlzLmdldE1pbk1heChmYWxzZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgJiYgIWlzTmFOKG1pbikgPyBtaW4gOiArYWRhcHRlci5zdGFydE9mKERhdGUubm93KCksIHVuaXQpO1xuICAgICAgICBtYXggPSBpc051bWJlckZpbml0ZShtYXgpICYmICFpc05hTihtYXgpID8gbWF4IDogK2FkYXB0ZXIuZW5kT2YoRGF0ZS5ub3coKSwgdW5pdCkgKyAxO1xuICAgICAgICB0aGlzLm1pbiA9IE1hdGgubWluKG1pbiwgbWF4IC0gMSk7XG4gICAgICAgIHRoaXMubWF4ID0gTWF0aC5tYXgobWluICsgMSwgbWF4KTtcbiAgICB9XG4gX2dldExhYmVsQm91bmRzKCkge1xuICAgICAgICBjb25zdCBhcnIgPSB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpO1xuICAgICAgICBsZXQgbWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICBsZXQgbWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgICAgICBpZiAoYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgbWluID0gYXJyWzBdO1xuICAgICAgICAgICAgbWF4ID0gYXJyW2Fyci5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluLFxuICAgICAgICAgICAgbWF4XG4gICAgICAgIH07XG4gICAgfVxuIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuICAgICAgICBjb25zdCB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aWNrT3B0cy5zb3VyY2UgPT09ICdsYWJlbHMnID8gdGhpcy5nZXRMYWJlbFRpbWVzdGFtcHMoKSA6IHRoaXMuX2dlbmVyYXRlKCk7XG4gICAgICAgIGlmIChvcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJyAmJiB0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5taW4gPSB0aGlzLl91c2VyTWluIHx8IHRpbWVzdGFtcHNbMF07XG4gICAgICAgICAgICB0aGlzLm1heCA9IHRoaXMuX3VzZXJNYXggfHwgdGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3QgdGlja3MgPSBfZmlsdGVyQmV0d2Vlbih0aW1lc3RhbXBzLCBtaW4sIG1heCk7XG4gICAgICAgIHRoaXMuX3VuaXQgPSB0aW1lT3B0cy51bml0IHx8ICh0aWNrT3B0cy5hdXRvU2tpcCA/IGRldGVybWluZVVuaXRGb3JBdXRvVGlja3ModGltZU9wdHMubWluVW5pdCwgdGhpcy5taW4sIHRoaXMubWF4LCB0aGlzLl9nZXRMYWJlbENhcGFjaXR5KG1pbikpIDogZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmcodGhpcywgdGlja3MubGVuZ3RoLCB0aW1lT3B0cy5taW5Vbml0LCB0aGlzLm1pbiwgdGhpcy5tYXgpKTtcbiAgICAgICAgdGhpcy5fbWFqb3JVbml0ID0gIXRpY2tPcHRzLm1ham9yLmVuYWJsZWQgfHwgdGhpcy5fdW5pdCA9PT0gJ3llYXInID8gdW5kZWZpbmVkIDogZGV0ZXJtaW5lTWFqb3JVbml0KHRoaXMuX3VuaXQpO1xuICAgICAgICB0aGlzLmluaXRPZmZzZXRzKHRpbWVzdGFtcHMpO1xuICAgICAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICAgICAgICB0aWNrcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzRnJvbVRpbWVzdGFtcHModGhpcywgdGlja3MsIHRoaXMuX21ham9yVW5pdCk7XG4gICAgfVxuICAgIGFmdGVyQXV0b1NraXAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0QWZ0ZXJBdXRvc2tpcCkge1xuICAgICAgICAgICAgdGhpcy5pbml0T2Zmc2V0cyh0aGlzLnRpY2tzLm1hcCgodGljayk9Pit0aWNrLnZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gaW5pdE9mZnNldHModGltZXN0YW1wcyA9IFtdKSB7XG4gICAgICAgIGxldCBzdGFydCA9IDA7XG4gICAgICAgIGxldCBlbmQgPSAwO1xuICAgICAgICBsZXQgZmlyc3QsIGxhc3Q7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0ICYmIHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmaXJzdCA9IHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbMF0pO1xuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSAxIC0gZmlyc3Q7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gKHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbMV0pIC0gZmlyc3QpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3QgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZW5kID0gbGFzdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZW5kID0gKGxhc3QgLSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMl0pKSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGltaXQgPSB0aW1lc3RhbXBzLmxlbmd0aCA8IDMgPyAwLjUgOiAwLjI1O1xuICAgICAgICBzdGFydCA9IF9saW1pdFZhbHVlKHN0YXJ0LCAwLCBsaW1pdCk7XG4gICAgICAgIGVuZCA9IF9saW1pdFZhbHVlKGVuZCwgMCwgbGltaXQpO1xuICAgICAgICB0aGlzLl9vZmZzZXRzID0ge1xuICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICBmYWN0b3I6IDEgLyAoc3RhcnQgKyAxICsgZW5kKVxuICAgICAgICB9O1xuICAgIH1cbiBfZ2VuZXJhdGUoKSB7XG4gICAgICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyO1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuICAgICAgICBjb25zdCBtaW5vciA9IHRpbWVPcHRzLnVuaXQgfHwgZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyh0aW1lT3B0cy5taW5Vbml0LCBtaW4sIG1heCwgdGhpcy5fZ2V0TGFiZWxDYXBhY2l0eShtaW4pKTtcbiAgICAgICAgY29uc3Qgc3RlcFNpemUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnRpY2tzLnN0ZXBTaXplLCAxKTtcbiAgICAgICAgY29uc3Qgd2Vla2RheSA9IG1pbm9yID09PSAnd2VlaycgPyB0aW1lT3B0cy5pc29XZWVrZGF5IDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGhhc1dlZWtkYXkgPSBpc051bWJlcih3ZWVrZGF5KSB8fCB3ZWVrZGF5ID09PSB0cnVlO1xuICAgICAgICBjb25zdCB0aWNrcyA9IHt9O1xuICAgICAgICBsZXQgZmlyc3QgPSBtaW47XG4gICAgICAgIGxldCB0aW1lLCBjb3VudDtcbiAgICAgICAgaWYgKGhhc1dlZWtkYXkpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgJ2lzb1dlZWsnLCB3ZWVrZGF5KTtcbiAgICAgICAgfVxuICAgICAgICBmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YoZmlyc3QsIGhhc1dlZWtkYXkgPyAnZGF5JyA6IG1pbm9yKTtcbiAgICAgICAgaWYgKGFkYXB0ZXIuZGlmZihtYXgsIG1pbiwgbWlub3IpID4gMTAwMDAwICogc3RlcFNpemUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtaW4gKyAnIGFuZCAnICsgbWF4ICsgJyBhcmUgdG9vIGZhciBhcGFydCB3aXRoIHN0ZXBTaXplIG9mICcgKyBzdGVwU2l6ZSArICcgJyArIG1pbm9yKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gb3B0aW9ucy50aWNrcy5zb3VyY2UgPT09ICdkYXRhJyAmJiB0aGlzLmdldERhdGFUaW1lc3RhbXBzKCk7XG4gICAgICAgIGZvcih0aW1lID0gZmlyc3QsIGNvdW50ID0gMDsgdGltZSA8IG1heDsgdGltZSA9ICthZGFwdGVyLmFkZCh0aW1lLCBzdGVwU2l6ZSwgbWlub3IpLCBjb3VudCsrKXtcbiAgICAgICAgICAgIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lID09PSBtYXggfHwgb3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycgfHwgY291bnQgPT09IDEpIHtcbiAgICAgICAgICAgIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aWNrcykuc29ydCgoYSwgYik9PmEgLSBiKS5tYXAoKHgpPT4reCk7XG4gICAgfVxuIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXI7XG4gICAgICAgIGNvbnN0IHRpbWVPcHRzID0gdGhpcy5vcHRpb25zLnRpbWU7XG4gICAgICAgIGlmICh0aW1lT3B0cy50b29sdGlwRm9ybWF0KSB7XG4gICAgICAgICAgICByZXR1cm4gYWRhcHRlci5mb3JtYXQodmFsdWUsIHRpbWVPcHRzLnRvb2x0aXBGb3JtYXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhZGFwdGVyLmZvcm1hdCh2YWx1ZSwgdGltZU9wdHMuZGlzcGxheUZvcm1hdHMuZGF0ZXRpbWUpO1xuICAgIH1cbiBmb3JtYXQodmFsdWUsIGZvcm1hdCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBmb3JtYXRzID0gb3B0aW9ucy50aW1lLmRpc3BsYXlGb3JtYXRzO1xuICAgICAgICBjb25zdCB1bml0ID0gdGhpcy5fdW5pdDtcbiAgICAgICAgY29uc3QgZm10ID0gZm9ybWF0IHx8IGZvcm1hdHNbdW5pdF07XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGFwdGVyLmZvcm1hdCh2YWx1ZSwgZm10KTtcbiAgICB9XG4gX3RpY2tGb3JtYXRGdW5jdGlvbih0aW1lLCBpbmRleCwgdGlja3MsIGZvcm1hdCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSBvcHRpb25zLnRpY2tzLmNhbGxiYWNrO1xuICAgICAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZm9ybWF0dGVyLCBbXG4gICAgICAgICAgICAgICAgdGltZSxcbiAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICB0aWNrc1xuICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZm9ybWF0cyA9IG9wdGlvbnMudGltZS5kaXNwbGF5Rm9ybWF0cztcbiAgICAgICAgY29uc3QgdW5pdCA9IHRoaXMuX3VuaXQ7XG4gICAgICAgIGNvbnN0IG1ham9yVW5pdCA9IHRoaXMuX21ham9yVW5pdDtcbiAgICAgICAgY29uc3QgbWlub3JGb3JtYXQgPSB1bml0ICYmIGZvcm1hdHNbdW5pdF07XG4gICAgICAgIGNvbnN0IG1ham9yRm9ybWF0ID0gbWFqb3JVbml0ICYmIGZvcm1hdHNbbWFqb3JVbml0XTtcbiAgICAgICAgY29uc3QgdGljayA9IHRpY2tzW2luZGV4XTtcbiAgICAgICAgY29uc3QgbWFqb3IgPSBtYWpvclVuaXQgJiYgbWFqb3JGb3JtYXQgJiYgdGljayAmJiB0aWNrLm1ham9yO1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRhcHRlci5mb3JtYXQodGltZSwgZm9ybWF0IHx8IChtYWpvciA/IG1ham9yRm9ybWF0IDogbWlub3JGb3JtYXQpKTtcbiAgICB9XG4gZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKSB7XG4gICAgICAgIGxldCBpLCBpbGVuLCB0aWNrO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdGljayA9IHRpY2tzW2ldO1xuICAgICAgICAgICAgdGljay5sYWJlbCA9IHRoaXMuX3RpY2tGb3JtYXRGdW5jdGlvbih0aWNrLnZhbHVlLCBpLCB0aWNrcyk7XG4gICAgICAgIH1cbiAgICB9XG4gZ2V0RGVjaW1hbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6ICh2YWx1ZSAtIHRoaXMubWluKSAvICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgICB9XG4gZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBvZmZzZXRzID0gdGhpcy5fb2Zmc2V0cztcbiAgICAgICAgY29uc3QgcG9zID0gdGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvckRlY2ltYWwoKG9mZnNldHMuc3RhcnQgKyBwb3MpICogb2Zmc2V0cy5mYWN0b3IpO1xuICAgIH1cbiBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgLyBvZmZzZXRzLmZhY3RvciAtIG9mZnNldHMuZW5kO1xuICAgICAgICByZXR1cm4gdGhpcy5taW4gKyBwb3MgKiAodGhpcy5tYXggLSB0aGlzLm1pbik7XG4gICAgfVxuIF9nZXRMYWJlbFNpemUobGFiZWwpIHtcbiAgICAgICAgY29uc3QgdGlja3NPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBjb25zdCB0aWNrTGFiZWxXaWR0aCA9IHRoaXMuY3R4Lm1lYXN1cmVUZXh0KGxhYmVsKS53aWR0aDtcbiAgICAgICAgY29uc3QgYW5nbGUgPSB0b1JhZGlhbnModGhpcy5pc0hvcml6b250YWwoKSA/IHRpY2tzT3B0cy5tYXhSb3RhdGlvbiA6IHRpY2tzT3B0cy5taW5Sb3RhdGlvbik7XG4gICAgICAgIGNvbnN0IGNvc1JvdGF0aW9uID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBjb25zdCBzaW5Sb3RhdGlvbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgY29uc3QgdGlja0ZvbnRTaXplID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKS5zaXplO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdzogdGlja0xhYmVsV2lkdGggKiBjb3NSb3RhdGlvbiArIHRpY2tGb250U2l6ZSAqIHNpblJvdGF0aW9uLFxuICAgICAgICAgICAgaDogdGlja0xhYmVsV2lkdGggKiBzaW5Sb3RhdGlvbiArIHRpY2tGb250U2l6ZSAqIGNvc1JvdGF0aW9uXG4gICAgICAgIH07XG4gICAgfVxuIF9nZXRMYWJlbENhcGFjaXR5KGV4YW1wbGVUaW1lKSB7XG4gICAgICAgIGNvbnN0IHRpbWVPcHRzID0gdGhpcy5vcHRpb25zLnRpbWU7XG4gICAgICAgIGNvbnN0IGRpc3BsYXlGb3JtYXRzID0gdGltZU9wdHMuZGlzcGxheUZvcm1hdHM7XG4gICAgICAgIGNvbnN0IGZvcm1hdCA9IGRpc3BsYXlGb3JtYXRzW3RpbWVPcHRzLnVuaXRdIHx8IGRpc3BsYXlGb3JtYXRzLm1pbGxpc2Vjb25kO1xuICAgICAgICBjb25zdCBleGFtcGxlTGFiZWwgPSB0aGlzLl90aWNrRm9ybWF0RnVuY3Rpb24oZXhhbXBsZVRpbWUsIDAsIHRpY2tzRnJvbVRpbWVzdGFtcHModGhpcywgW1xuICAgICAgICAgICAgZXhhbXBsZVRpbWVcbiAgICAgICAgXSwgdGhpcy5fbWFqb3JVbml0KSwgZm9ybWF0KTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuX2dldExhYmVsU2l6ZShleGFtcGxlTGFiZWwpO1xuICAgICAgICBjb25zdCBjYXBhY2l0eSA9IE1hdGguZmxvb3IodGhpcy5pc0hvcml6b250YWwoKSA/IHRoaXMud2lkdGggLyBzaXplLncgOiB0aGlzLmhlaWdodCAvIHNpemUuaCkgLSAxO1xuICAgICAgICByZXR1cm4gY2FwYWNpdHkgPiAwID8gY2FwYWNpdHkgOiAxO1xuICAgIH1cbiBnZXREYXRhVGltZXN0YW1wcygpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5kYXRhIHx8IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhcyA9IHRoaXMuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoKTtcbiAgICAgICAgaWYgKHRoaXMuX25vcm1hbGl6ZWQgJiYgbWV0YXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUuZGF0YSA9IG1ldGFzWzBdLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IG1ldGFzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aW1lc3RhbXBzID0gdGltZXN0YW1wcy5jb25jYXQobWV0YXNbaV0uY29udHJvbGxlci5nZXRBbGxQYXJzZWRWYWx1ZXModGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5kYXRhID0gdGhpcy5ub3JtYWxpemUodGltZXN0YW1wcyk7XG4gICAgfVxuIGdldExhYmVsVGltZXN0YW1wcygpIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmxhYmVscyB8fCBbXTtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbGFiZWxzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aW1lc3RhbXBzLnB1c2gocGFyc2UodGhpcywgbGFiZWxzW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLmxhYmVscyA9IHRoaXMuX25vcm1hbGl6ZWQgPyB0aW1lc3RhbXBzIDogdGhpcy5ub3JtYWxpemUodGltZXN0YW1wcyk7XG4gICAgfVxuIG5vcm1hbGl6ZSh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIF9hcnJheVVuaXF1ZSh2YWx1ZXMuc29ydChzb3J0ZXIpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlKHRhYmxlLCB2YWwsIHJldmVyc2UpIHtcbiAgICBsZXQgbG8gPSAwO1xuICAgIGxldCBoaSA9IHRhYmxlLmxlbmd0aCAtIDE7XG4gICAgbGV0IHByZXZTb3VyY2UsIG5leHRTb3VyY2UsIHByZXZUYXJnZXQsIG5leHRUYXJnZXQ7XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgaWYgKHZhbCA+PSB0YWJsZVtsb10ucG9zICYmIHZhbCA8PSB0YWJsZVtoaV0ucG9zKSB7XG4gICAgICAgICAgICAoeyBsbyAsIGhpICB9ID0gX2xvb2t1cEJ5S2V5KHRhYmxlLCAncG9zJywgdmFsKSk7XG4gICAgICAgIH1cbiAgICAgICAgKHsgcG9zOiBwcmV2U291cmNlICwgdGltZTogcHJldlRhcmdldCAgfSA9IHRhYmxlW2xvXSk7XG4gICAgICAgICh7IHBvczogbmV4dFNvdXJjZSAsIHRpbWU6IG5leHRUYXJnZXQgIH0gPSB0YWJsZVtoaV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh2YWwgPj0gdGFibGVbbG9dLnRpbWUgJiYgdmFsIDw9IHRhYmxlW2hpXS50aW1lKSB7XG4gICAgICAgICAgICAoeyBsbyAsIGhpICB9ID0gX2xvb2t1cEJ5S2V5KHRhYmxlLCAndGltZScsIHZhbCkpO1xuICAgICAgICB9XG4gICAgICAgICh7IHRpbWU6IHByZXZTb3VyY2UgLCBwb3M6IHByZXZUYXJnZXQgIH0gPSB0YWJsZVtsb10pO1xuICAgICAgICAoeyB0aW1lOiBuZXh0U291cmNlICwgcG9zOiBuZXh0VGFyZ2V0ICB9ID0gdGFibGVbaGldKTtcbiAgICB9XG4gICAgY29uc3Qgc3BhbiA9IG5leHRTb3VyY2UgLSBwcmV2U291cmNlO1xuICAgIHJldHVybiBzcGFuID8gcHJldlRhcmdldCArIChuZXh0VGFyZ2V0IC0gcHJldlRhcmdldCkgKiAodmFsIC0gcHJldlNvdXJjZSkgLyBzcGFuIDogcHJldlRhcmdldDtcbn1cbmNsYXNzIFRpbWVTZXJpZXNTY2FsZSBleHRlbmRzIFRpbWVTY2FsZSB7XG4gICAgc3RhdGljIGlkID0gJ3RpbWVzZXJpZXMnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IFRpbWVTY2FsZS5kZWZhdWx0cztcbiBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgIHRoaXMuX3RhYmxlID0gW107XG4gICAgICAgICB0aGlzLl9taW5Qb3MgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl90YWJsZVJhbmdlID0gdW5kZWZpbmVkO1xuICAgIH1cbiBpbml0T2Zmc2V0cygpIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wcyA9IHRoaXMuX2dldFRpbWVzdGFtcHNGb3JUYWJsZSgpO1xuICAgICAgICBjb25zdCB0YWJsZSA9IHRoaXMuX3RhYmxlID0gdGhpcy5idWlsZExvb2t1cFRhYmxlKHRpbWVzdGFtcHMpO1xuICAgICAgICB0aGlzLl9taW5Qb3MgPSBpbnRlcnBvbGF0ZSh0YWJsZSwgdGhpcy5taW4pO1xuICAgICAgICB0aGlzLl90YWJsZVJhbmdlID0gaW50ZXJwb2xhdGUodGFibGUsIHRoaXMubWF4KSAtIHRoaXMuX21pblBvcztcbiAgICAgICAgc3VwZXIuaW5pdE9mZnNldHModGltZXN0YW1wcyk7XG4gICAgfVxuIGJ1aWxkTG9va3VwVGFibGUodGltZXN0YW1wcykge1xuICAgICAgICBjb25zdCB7IG1pbiAsIG1heCAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgICAgIGNvbnN0IHRhYmxlID0gW107XG4gICAgICAgIGxldCBpLCBpbGVuLCBwcmV2LCBjdXJyLCBuZXh0O1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aW1lc3RhbXBzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBjdXJyID0gdGltZXN0YW1wc1tpXTtcbiAgICAgICAgICAgIGlmIChjdXJyID49IG1pbiAmJiBjdXJyIDw9IG1heCkge1xuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goY3Vycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aW1lOiBtaW4sXG4gICAgICAgICAgICAgICAgICAgIHBvczogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aW1lOiBtYXgsXG4gICAgICAgICAgICAgICAgICAgIHBvczogMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIG5leHQgPSBpdGVtc1tpICsgMV07XG4gICAgICAgICAgICBwcmV2ID0gaXRlbXNbaSAtIDFdO1xuICAgICAgICAgICAgY3VyciA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgaWYgKE1hdGgucm91bmQoKG5leHQgKyBwcmV2KSAvIDIpICE9PSBjdXJyKSB7XG4gICAgICAgICAgICAgICAgdGFibGUucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IGN1cnIsXG4gICAgICAgICAgICAgICAgICAgIHBvczogaSAvIChpbGVuIC0gMSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfVxuIF9nZXRUaW1lc3RhbXBzRm9yVGFibGUoKSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUuYWxsIHx8IFtdO1xuICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGFUaW1lc3RhbXBzKCk7XG4gICAgICAgIGNvbnN0IGxhYmVsID0gdGhpcy5nZXRMYWJlbFRpbWVzdGFtcHMoKTtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoICYmIGxhYmVsLmxlbmd0aCkge1xuICAgICAgICAgICAgdGltZXN0YW1wcyA9IHRoaXMubm9ybWFsaXplKGRhdGEuY29uY2F0KGxhYmVsKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lc3RhbXBzID0gZGF0YS5sZW5ndGggPyBkYXRhIDogbGFiZWw7XG4gICAgICAgIH1cbiAgICAgICAgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmFsbCA9IHRpbWVzdGFtcHM7XG4gICAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgIH1cbiBnZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIChpbnRlcnBvbGF0ZSh0aGlzLl90YWJsZSwgdmFsdWUpIC0gdGhpcy5fbWluUG9zKSAvIHRoaXMuX3RhYmxlUmFuZ2U7XG4gICAgfVxuIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHRoaXMuX29mZnNldHM7XG4gICAgICAgIGNvbnN0IGRlY2ltYWwgPSB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgLyBvZmZzZXRzLmZhY3RvciAtIG9mZnNldHMuZW5kO1xuICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGUodGhpcy5fdGFibGUsIGRlY2ltYWwgKiB0aGlzLl90YWJsZVJhbmdlICsgdGhpcy5fbWluUG9zLCB0cnVlKTtcbiAgICB9XG59XG5cbnZhciBzY2FsZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5DYXRlZ29yeVNjYWxlOiBDYXRlZ29yeVNjYWxlLFxuTGluZWFyU2NhbGU6IExpbmVhclNjYWxlLFxuTG9nYXJpdGhtaWNTY2FsZTogTG9nYXJpdGhtaWNTY2FsZSxcblJhZGlhbExpbmVhclNjYWxlOiBSYWRpYWxMaW5lYXJTY2FsZSxcblRpbWVTY2FsZTogVGltZVNjYWxlLFxuVGltZVNlcmllc1NjYWxlOiBUaW1lU2VyaWVzU2NhbGVcbn0pO1xuXG5jb25zdCByZWdpc3RlcmFibGVzID0gW1xuICAgIGNvbnRyb2xsZXJzLFxuICAgIGVsZW1lbnRzLFxuICAgIHBsdWdpbnMsXG4gICAgc2NhbGVzXG5dO1xuXG5leHBvcnQgeyBBbmltYXRpb24sIEFuaW1hdGlvbnMsIEFyY0VsZW1lbnQsIEJhckNvbnRyb2xsZXIsIEJhckVsZW1lbnQsIEJhc2VQbGF0Zm9ybSwgQmFzaWNQbGF0Zm9ybSwgQnViYmxlQ29udHJvbGxlciwgQ2F0ZWdvcnlTY2FsZSwgQ2hhcnQsIHBsdWdpbl9jb2xvcnMgYXMgQ29sb3JzLCBEYXRhc2V0Q29udHJvbGxlciwgcGx1Z2luX2RlY2ltYXRpb24gYXMgRGVjaW1hdGlvbiwgRG9tUGxhdGZvcm0sIERvdWdobnV0Q29udHJvbGxlciwgRWxlbWVudCwgaW5kZXggYXMgRmlsbGVyLCBJbnRlcmFjdGlvbiwgcGx1Z2luX2xlZ2VuZCBhcyBMZWdlbmQsIExpbmVDb250cm9sbGVyLCBMaW5lRWxlbWVudCwgTGluZWFyU2NhbGUsIExvZ2FyaXRobWljU2NhbGUsIFBpZUNvbnRyb2xsZXIsIFBvaW50RWxlbWVudCwgUG9sYXJBcmVhQ29udHJvbGxlciwgUmFkYXJDb250cm9sbGVyLCBSYWRpYWxMaW5lYXJTY2FsZSwgU2NhbGUsIFNjYXR0ZXJDb250cm9sbGVyLCBwbHVnaW5fc3VidGl0bGUgYXMgU3ViVGl0bGUsIFRpY2tzLCBUaW1lU2NhbGUsIFRpbWVTZXJpZXNTY2FsZSwgcGx1Z2luX3RpdGxlIGFzIFRpdGxlLCBwbHVnaW5fdG9vbHRpcCBhcyBUb29sdGlwLCBhZGFwdGVycyBhcyBfYWRhcHRlcnMsIF9kZXRlY3RQbGF0Zm9ybSwgYW5pbWF0b3IsIGNvbnRyb2xsZXJzLCBkZWZhdWx0cywgZWxlbWVudHMsIGxheW91dHMsIHBsdWdpbnMsIHJlZ2lzdGVyYWJsZXMsIHJlZ2lzdHJ5LCBzY2FsZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYXJ0LmpzLm1hcFxuIiwiaW1wb3J0IHtDaGFydCwgcmVnaXN0ZXJhYmxlc30gZnJvbSAnLi4vZGlzdC9jaGFydC5qcyc7XG5cbkNoYXJ0LnJlZ2lzdGVyKC4uLnJlZ2lzdGVyYWJsZXMpO1xuXG5leHBvcnQgKiBmcm9tICcuLi9kaXN0L2NoYXJ0LmpzJztcbmV4cG9ydCBkZWZhdWx0IENoYXJ0O1xuIiwiaW1wb3J0IHsgQ2hhcnQsIENoYXJ0SXRlbSB9IGZyb20gXCJjaGFydC5qcy9hdXRvXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2hhcnRHZW5lcmF0b3Ige1xyXG4gICAgY2hhcnQ6IENoYXJ0O1xyXG4gICAgY2hhcnRJdGVtOiBDaGFydEl0ZW07XHJcbiAgICBkYXRhOiBudW1iZXJbXTtcclxuICAgIGJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICBpc01pbnV0ZXM6IGJvb2xlYW5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIH1cclxuXHJcbiAgICBhYnN0cmFjdCBjcmVhdGVIb3Vyc0NoYXJ0KCk6IHZvaWQ7XHJcblxyXG4gICAgYWJzdHJhY3QgY3JlYXRlTWludXRlc0NoYXJ0KCk6IHZvaWQ7XHJcblxyXG4gICAgYWJzdHJhY3QgdG9nZ2xlVGltZVVuaXRzKCk6IHZvaWQ7XHJcbn0iLCJpbXBvcnQgeyBDaGFydCwgQ2hhcnRDb25maWd1cmF0aW9uLCBDaGFydEl0ZW0sIENoYXJ0VHlwZSB9IGZyb20gXCJjaGFydC5qcy9hdXRvXCI7XHJcbmltcG9ydCB7IENoYXJ0R2VuZXJhdG9yIH0gZnJvbSBcIi4vY2hhcnRHZW5lcmF0b3JcIjtcclxuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcIi4vbW9kZWxzL3N0cmVhbVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEhlYXJ0UmF0ZUNoYXJ0R2VuZXJhdG9yIGV4dGVuZHMgQ2hhcnRHZW5lcmF0b3Ige1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IFN0cmVhbVtdKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmdldFRpbWVJblpvbmVMaXN0KGRhdGEpO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzd2l0Y2hIclwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICB0aGlzLmNoYXJ0SXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaHJDaGFydFwiKSBhcyBDaGFydEl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlSG91cnNDaGFydCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5jaGFydCAhPSBudWxsIHx8IHRoaXMuY2hhcnQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhcnQuZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNoYXJ0ID0gbmV3IENoYXJ0KHRoaXMuY2hhcnRJdGVtLCB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdiYXInLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IFsnWm9uZSAxJywgJ1pvbmUgMicsICdab25lIDMnLCAnWm9uZSA0JywgJ1pvbmUgNSddLFxyXG4gICAgICAgICAgICAgICAgZGF0YXNldHM6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUaW1lIGluIFpvbmUgKGhvdXJzKScsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLm1hcCh4ID0+IHggLyAzNjAwKSxcclxuICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMVxyXG4gICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgc2NhbGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaXNNaW51dGVzID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlTWludXRlc0NoYXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmNoYXJ0ICE9IG51bGwgfHwgdGhpcy5jaGFydCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFydC5kZXN0cm95KClcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGFydCA9IG5ldyBDaGFydCh0aGlzLmNoYXJ0SXRlbSwge1xyXG4gICAgICAgICAgICB0eXBlOiAnYmFyJyxcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiBbJ1pvbmUgMScsICdab25lIDInLCAnWm9uZSAzJywgJ1pvbmUgNCcsICdab25lIDUnXSxcclxuICAgICAgICAgICAgICAgIGRhdGFzZXRzOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnVGltZSBpbiBab25lIChtaW51dGVzKScsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLm1hcCh4ID0+IHggLyA2MCksXHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDFcclxuICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBzY2FsZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luQXRaZXJvOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaXNNaW51dGVzID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVUaW1lVW5pdHMoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNNaW51dGVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlSG91cnNDaGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVNaW51dGVzQ2hhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlQ2hhcnRUeXBlKCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBjaGFydENvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnIGFzIENoYXJ0Q29uZmlndXJhdGlvbjtcclxuICAgICAgICBpZiAoY2hhcnRDb25maWcudHlwZSA9PSAncGllJykge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUhvdXJzQ2hhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUGllQ2hhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUGllQ2hhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hhcnQgIT0gbnVsbCB8fCB0aGlzLmNoYXJ0ICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJ0LmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcclxuICAgICAgICAgICAgbGFiZWxzOiBbJ1pvbmUgMScsICdab25lIDInLCAnWm9uZSAzJywgJ1pvbmUgNCcsICdab25lIDUnXSxcclxuICAgICAgICAgICAgZGF0YXNldHM6IFt7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1RpbWUgaW4gWm9uZSAoaG91cnMpJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YS5tYXAoeCA9PiB4IC8gMzYwMCksXHJcbiAgICAgICAgICAgICAgICBob3Zlck9mZnNldDogNFxyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jaGFydCA9IG5ldyBDaGFydCh0aGlzLmNoYXJ0SXRlbSwge1xyXG4gICAgICAgICAgICB0eXBlOiAncGllJyBhcyBDaGFydFR5cGUsXHJcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5pc01pbnV0ZXMgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRab25lKGhlYXJ0UmF0ZTogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICB2YXIgcG93ZXJBc051bWJlciA9IE51bWJlci5wYXJzZUludChoZWFydFJhdGUpO1xyXG4gICAgICAgIGlmIChwb3dlckFzTnVtYmVyIDw9IDExOCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+IDExOCAmJiBwb3dlckFzTnVtYmVyIDw9IDE1Nikge1xyXG4gICAgICAgICAgICByZXR1cm4gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+IDE1NiAmJiBwb3dlckFzTnVtYmVyIDw9IDE3NSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+IDE3NSAmJiBwb3dlckFzTnVtYmVyIDw9IDE5NCkge1xyXG4gICAgICAgICAgICByZXR1cm4gNDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+IDE5NCkge1xyXG4gICAgICAgICAgICByZXR1cm4gNTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGltZUluWm9uZUxpc3Qoc3RyZWFtczogU3RyZWFtW10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgbGV0IHRpbWVJblpvbmVEaWN0OiB7IFtpbmRleDogc3RyaW5nXTogbnVtYmVyIH0gPSB7XHJcbiAgICAgICAgICAgIFwiMVwiOiAwLFxyXG4gICAgICAgICAgICBcIjJcIjogMCxcclxuICAgICAgICAgICAgXCIzXCI6IDAsXHJcbiAgICAgICAgICAgIFwiNFwiOiAwLFxyXG4gICAgICAgICAgICBcIjVcIjogMFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZvciAodmFyIGhyU3RyZWFtIG9mIHN0cmVhbXMpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGhyU3RyZWFtLmhlYXJ0UmF0ZURpY3QpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0aW1lQXRIckluU2Vjb25kcyA9IGhyU3RyZWFtLmhlYXJ0UmF0ZURpY3Rba2V5XTtcclxuICAgICAgICAgICAgICAgIGxldCB6b25lID0gdGhpcy5nZXRab25lKGtleSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgem9uZVN0cmluZyA9IHpvbmUudG9TdHJpbmcoKSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICB0aW1lSW5ab25lRGljdFt6b25lU3RyaW5nXSArPSBOdW1iZXIucGFyc2VJbnQodGltZUF0SHJJblNlY29uZHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aW1lSW5ab25lRGljdCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDaGFydCwgQ2hhcnRDb25maWd1cmF0aW9uLCBDaGFydEl0ZW0sIENoYXJ0VHlwZSwgQ2hhcnRUeXBlUmVnaXN0cnkgfSBmcm9tIFwiY2hhcnQuanMvYXV0b1wiO1xyXG5pbXBvcnQgeyBDaGFydEdlbmVyYXRvciB9IGZyb20gXCIuL2NoYXJ0R2VuZXJhdG9yXCI7XHJcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gXCIuL21vZGVscy9zdHJlYW1cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQb3dlckNoYXJ0R2VuZXJhdG9yIGV4dGVuZHMgQ2hhcnRHZW5lcmF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IoZGF0YTogU3RyZWFtW10pIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0VGltZUluWm9uZUxpc3QoZGF0YSk7XHJcbiAgICAgICAgdGhpcy5idXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN3aXRjaFBvd2VyXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY2hhcnRJdGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwb3dlckNoYXJ0XCIpIGFzIENoYXJ0SXRlbTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVIb3Vyc0NoYXJ0KCkgOiB2b2lke1xyXG4gICAgICAgIGlmICh0aGlzLmNoYXJ0ICE9IG51bGwgfHwgdGhpcy5jaGFydCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFydC5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hhcnQgPSBuZXcgQ2hhcnQodGhpcy5jaGFydEl0ZW0sIHtcclxuICAgICAgICAgICAgdHlwZTogJ2JhcicsXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsczogWydab25lIDEnLCAnWm9uZSAyJywgJ1pvbmUgMycsICdab25lIDQnLCAnWm9uZSA1JywgJ1pvbmUgNicsICdab25lIDcnXSxcclxuICAgICAgICAgICAgICAgIGRhdGFzZXRzOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnVGltZSBpbiBab25lIChob3VycyknLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YS5tYXAoeCA9PiB4IC8gMzYwMCksXHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDFcclxuICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIHNjYWxlczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5BdFplcm86IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmlzTWludXRlcyA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZU1pbnV0ZXNDaGFydCgpIDogdm9pZHtcclxuICAgICAgICBpZiAodGhpcy5jaGFydCAhPSBudWxsIHx8IHRoaXMuY2hhcnQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhcnQuZGVzdHJveSgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hhcnQgPSBuZXcgQ2hhcnQodGhpcy5jaGFydEl0ZW0sIHtcclxuICAgICAgICAgICAgdHlwZTogJ2JhcicsXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsczogWydab25lIDEnLCAnWm9uZSAyJywgJ1pvbmUgMycsICdab25lIDQnLCAnWm9uZSA1JywgJ1pvbmUgNicsICdab25lIDcnXSxcclxuICAgICAgICAgICAgICAgIGRhdGFzZXRzOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnVGltZSBpbiBab25lIChtaW51dGVzKScsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLm1hcCh4ID0+IHggLyA2MCksXHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDFcclxuICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIHNjYWxlczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5BdFplcm86IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5pc01pbnV0ZXMgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZVRpbWVVbml0cygpIDogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNNaW51dGVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlSG91cnNDaGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVNaW51dGVzQ2hhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlQ2hhcnRUeXBlKCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBjaGFydENvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnIGFzIENoYXJ0Q29uZmlndXJhdGlvbjtcclxuICAgICAgICBpZiAoY2hhcnRDb25maWcudHlwZSA9PSAncGllJykge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUhvdXJzQ2hhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUGllQ2hhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNyZWF0ZVBpZUNoYXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmNoYXJ0ICE9IG51bGwgfHwgdGhpcy5jaGFydCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFydC5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgIGxhYmVsczogWydab25lIDEnLCAnWm9uZSAyJywgJ1pvbmUgMycsICdab25lIDQnLCAnWm9uZSA1JywgJ1pvbmUgNicsICdab25lIDcnXSxcclxuICAgICAgICAgICAgZGF0YXNldHM6IFt7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1RpbWUgaW4gWm9uZSAoaG91cnMpJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YS5tYXAoeCA9PiB4IC8gMzYwMCksXHJcbiAgICAgICAgICAgICAgICBob3Zlck9mZnNldDogNFxyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jaGFydCA9IG5ldyBDaGFydCh0aGlzLmNoYXJ0SXRlbSwge1xyXG4gICAgICAgICAgICB0eXBlOiAncGllJyBhcyBDaGFydFR5cGUsXHJcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmlzTWludXRlcyA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0VGltZUluWm9uZUxpc3QocG93ZXJTdHJlYW1zOiBTdHJlYW1bXSk6IG51bWJlcltdIHtcclxuICAgICAgICBsZXQgdGltZUluWm9uZURpY3Q6IHsgW2luZGV4OiBzdHJpbmddOiBudW1iZXIgfSA9IHtcclxuICAgICAgICAgICAgXCIxXCI6IDAsXHJcbiAgICAgICAgICAgIFwiMlwiOiAwLFxyXG4gICAgICAgICAgICBcIjNcIjogMCxcclxuICAgICAgICAgICAgXCI0XCI6IDAsXHJcbiAgICAgICAgICAgIFwiNVwiOiAwLFxyXG4gICAgICAgICAgICBcIjZcIjogMCxcclxuICAgICAgICAgICAgXCI3XCI6IDAsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgcG93ZXJTdHJlYW0gb2YgcG93ZXJTdHJlYW1zKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBwb3dlclN0cmVhbS5wb3dlckRpY3QpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0aW1lQXRQb3dlckluU2Vjb25kcyA9IHBvd2VyU3RyZWFtLnBvd2VyRGljdFtrZXldO1xyXG4gICAgICAgICAgICAgICAgbGV0IHpvbmUgPSB0aGlzLmdldFpvbmUoa2V5KTtcclxuICAgICAgICAgICAgICAgIGxldCB6b25lU3RyaW5nID0gem9uZS50b1N0cmluZygpIGFzIHN0cmluZztcclxuICAgICAgICAgICAgICAgIHRpbWVJblpvbmVEaWN0W3pvbmVTdHJpbmddICs9IE51bWJlci5wYXJzZUludCh0aW1lQXRQb3dlckluU2Vjb25kcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRpbWVJblpvbmVEaWN0KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFpvbmUocG93ZXI6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICAgICAgdmFyIHBvd2VyQXNOdW1iZXIgPSBOdW1iZXIucGFyc2VJbnQocG93ZXIpO1xyXG4gICAgICAgIGlmIChwb3dlckFzTnVtYmVyIDw9IDEzMikge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+IDEzMiAmJiBwb3dlckFzTnVtYmVyIDw9IDE4MCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+IDE4MCAmJiBwb3dlckFzTnVtYmVyIDw9IDIxNikge1xyXG4gICAgICAgICAgICByZXR1cm4gMztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+IDIxNiAmJiBwb3dlckFzTnVtYmVyIDw9IDI1Mikge1xyXG4gICAgICAgICAgICByZXR1cm4gNDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+IDI1MiAmJiBwb3dlckFzTnVtYmVyIDw9IDI4OCkge1xyXG4gICAgICAgICAgICByZXR1cm4gNTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+IDI4OCAmJiBwb3dlckFzTnVtYmVyIDw9IDM2MCkge1xyXG4gICAgICAgICAgICByZXR1cm4gNjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+PSAzNjApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQ2hhcnQgfSBmcm9tIFwiY2hhcnQuanMvZGlzdFwiO1xyXG5pbXBvcnQgeyBTdHJhdmFBcGlDbGllbnQgfSBmcm9tIFwiLi9hcGlDbGllbnRcIjtcclxuaW1wb3J0IHsgQ2hhcnRHZW5lcmF0b3IgfSBmcm9tIFwiLi9jaGFydEdlbmVyYXRvclwiO1xyXG5pbXBvcnQgeyBIZWFydFJhdGVDaGFydEdlbmVyYXRvciB9IGZyb20gXCIuL2hlYXJ0UmF0ZUNoYXJ0R2VuZXJhdG9yXCI7XHJcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gXCIuL21vZGVscy9zdHJlYW1cIjtcclxuaW1wb3J0IHsgUG93ZXJDaGFydEdlbmVyYXRvciB9IGZyb20gXCIuL3Bvd2VyQ2hhcnRHZW5lcmF0b3JcIjtcclxuXHJcblxyXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xyXG4gICAgLy9sZXQgYnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzd2l0Y2hQb3dlclwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIC8vbGV0IGhyQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzd2l0Y2hIclwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuXHJcbiAgICBsZXQgcG93ZXJUb2dnbGVDaGFydEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udmVydFBvd2VyXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgbGV0IGhyVG9nZ2xlQ2hhcnRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnZlcnRIclwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIFxyXG4gICAgbGV0IGNsaWVudCA9IG5ldyBTdHJhdmFBcGlDbGllbnQoKTtcclxuICAgIFxyXG4gICAgdmFyIHBvd2VyU3RyZWFtcyA9IGF3YWl0IGNsaWVudC5nZXRQb3dlckRhdGEoKTtcclxuICAgIHZhciBoclN0cmVhbXMgPSBhd2FpdCBjbGllbnQuZ2V0SGVhcnRSYXRlRGF0YSgpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGhyU3RyZWFtcyk7XHJcbiAgICBjb25zb2xlLmxvZyhwb3dlclN0cmVhbXMpO1xyXG5cclxuICAgIGxldCBwb3dlckNoYXJ0R2VuZXJhdG9yID0gbmV3IFBvd2VyQ2hhcnRHZW5lcmF0b3IocG93ZXJTdHJlYW1zKTtcclxuICAgIHBvd2VyQ2hhcnRHZW5lcmF0b3IuY3JlYXRlUGllQ2hhcnQoKTtcclxuICAgIC8vYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBwb3dlckNoYXJ0R2VuZXJhdG9yLnRvZ2dsZVRpbWVVbml0cygpKTtcclxuICAgIHBvd2VyVG9nZ2xlQ2hhcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHBvd2VyQ2hhcnRHZW5lcmF0b3IudG9nZ2xlQ2hhcnRUeXBlKCkpO1xyXG5cclxuICAgIGxldCBockNoYXJ0R2VuZXJhdG9yID0gbmV3IEhlYXJ0UmF0ZUNoYXJ0R2VuZXJhdG9yKGhyU3RyZWFtcyk7XHJcbiAgICBockNoYXJ0R2VuZXJhdG9yLmNyZWF0ZVBpZUNoYXJ0KCk7XHJcbiAgICAvL2hyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBockNoYXJ0R2VuZXJhdG9yLnRvZ2dsZVRpbWVVbml0cygpKTtcclxuICAgIGhyVG9nZ2xlQ2hhcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IGhyQ2hhcnRHZW5lcmF0b3IudG9nZ2xlQ2hhcnRUeXBlKCkpO1xyXG5cclxufVxyXG5cclxuKGFzeW5jICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgbWFpbigpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICB9XHJcbn0pKCk7XHJcbiJdLCJuYW1lcyI6WyJnZXRQb3dlckRhdGEiLCJmZXRjaCIsImpzb24iLCJnZXRIZWFydFJhdGVEYXRhIiwicm91bmQiLCJ2IiwibGltIiwibCIsImgiLCJNYXRoIiwibWF4IiwibWluIiwicDJiIiwibjJiIiwiYjJuIiwibjJwIiwibWFwJDEiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJhIiwiYiIsImMiLCJkIiwiZSIsImYiLCJoZXgiLCJoMSIsImgyIiwiZXEiLCJIVUVfUkUiLCJoc2wycmdibiIsInMiLCJuIiwiayIsImhzdjJyZ2JuIiwiaHdiMnJnYm4iLCJ3IiwicmdiIiwiaSIsInJnYjJoc2wiLCJyIiwiZyIsImh1ZVZhbHVlIiwiY2FsbG4iLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJoc2wycmdiIiwiaHVlIiwieCIsIloiLCJZIiwiWCIsIlciLCJWIiwiVSIsIlQiLCJTIiwiUiIsIlEiLCJQIiwiTyIsIk4iLCJNIiwiTCIsIksiLCJHIiwiSCIsIkkiLCJKIiwibmFtZXMkMSIsIk9pY2VYZSIsImFudGlxdWV3RXRlIiwiYXF1YSIsImFxdWFtYXJSZSIsImF6dVkiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbktlZE9tb25kIiwiWGUiLCJYZXZpVGV0IiwiYlB3biIsImJ1cmx5d29vZCIsImNhTXRYZSIsIkthcnRZdXNlIiwiS29jVGF0ZSIsImNTTyIsImNTbmZsb3dlclhlIiwiY1Nuc2lsayIsImNyaW1zb24iLCJjeWFuIiwieFhlIiwieGN5YW4iLCJ4Z1RNblBkIiwieFdheSIsInhnWUYiLCJ4Z1l5IiwieGtoYWtpIiwieG1hZ0Z0YSIsInhUaXZlZ1lGIiwieFNhbmdlIiwieFNjRWQiLCJ4WWQiLCJ4c09tb24iLCJ4c0hnWUYiLCJ4VVhlIiwieFVXYXkiLCJ4VWdZeSIsInhRZSIsInh2aVRldCIsImRBcHBSayIsImRBcHNreVhlIiwiZGltV2F5IiwiZGltZ1l5IiwiZG9kZ2VyWGUiLCJmaVlicmljayIsImZsU093RXRlIiwiZm9Zc3RXQW4iLCJmdUtzaWEiLCJnYVJzYlNvIiwiZ2hvc3R3RXRlIiwiZ1RkIiwiZ1RNblBkIiwiV2F5IiwiZ1lGIiwiZ1lGTHciLCJnWXkiLCJob25leU13IiwiaG90cFJrIiwiUmRpYW5ZZCIsIlJkaWdvIiwiaXZTeSIsImtoYWtpIiwibGF2Rk1yIiwibGF2Rk1yWHNoIiwibGF3bmdZRiIsIk5tb25jRWZmb24iLCJaWGUiLCJaY1NPIiwiWmN5YW4iLCJaZ1RNblBkTHciLCJaV2F5IiwiWmdZRiIsIlpnWXkiLCJacFJrIiwiWnNPbW9uIiwiWnNIZ1lGIiwiWnNreVhlIiwiWlVXYXkiLCJaVWdZeSIsIlpzdEFsWGUiLCJaTHciLCJsaW1lIiwibGltZWdZRiIsImxSRiIsIm1hZ0Z0YSIsIm1hUG9uIiwiVmFxdWFtYXJSZSIsIlZYZSIsIlZTY0VkIiwiVnB1cnBOIiwiVnNIZ1lGIiwiVlVYZSIsIlZzcHJSZ2dZRiIsIlZRZSIsIlZ2aVRldFlkIiwibWlkbmlnaHRYZSIsIm1SdGNZYW0iLCJtaXN0eVBzZSIsIm1vY2Nhc1IiLCJuYXZham93RXRlIiwibmF2eSIsIlRkbGFjZSIsIlRpdmUiLCJUaXZlZEJiIiwiU2FuZ2UiLCJTYW5nZVlkIiwiU2NFZCIsInBPZWdUTW5QZCIsInBPZWdZRiIsInBPZVFlIiwicE9ldmlUZXRZZCIsInBhcGF5YXdFcCIsInBIS3B1ZmYiLCJwZXJ1IiwicFJrIiwicGx1bSIsInBvd01yWGUiLCJwdXJwTiIsIlliZWNjYXB1cnBOIiwiWWQiLCJQc3licm93biIsIlB5T1hlIiwic2FkZE5iUHduIiwic09tb24iLCJzYW5keWJQd24iLCJzSGdZRiIsInNIc2hlbGwiLCJzaUZuYSIsInNpbHZlciIsInNreVhlIiwiVVhlIiwiVVdheSIsIlVnWXkiLCJzbm93Iiwic3ByUmdnWUYiLCJzdEFsWGUiLCJ0YW4iLCJ0ZU8iLCJ0RXN0TiIsInRvbWF0byIsIlFlIiwidmlUZXQiLCJKSHQiLCJ3RXRlIiwid0V0ZXNtb2tlIiwiTHciLCJMd2dZRiIsIm5hbWVzIiwiUkdCX1JFIiwidG8iLCJwb3ciLCJmcm9tIiwibW9kSFNMIiwicmF0aW8iLCJ0bXAiLCJjbG9uZSIsInByb3RvIiwiT2JqZWN0IiwiYXNzaWduIiwiZnJvbU9iamVjdCIsImlucHV0IiwibGVuZ3RoIiwiZnVuY3Rpb25QYXJzZSIsInN0ciIsImNoYXJBdCIsIm0iLCJleGVjIiwicmdiUGFyc2UiLCJwMSIsInAyIiwiaHdiMnJnYiIsImhzdjJyZ2IiLCJodWVQYXJzZSIsIkNvbG9yIiwiY29uc3RydWN0b3IiLCJ0eXBlIiwicmV0IiwibGVuIiwidW5wYWNrZWQiLCJrZXlzIiwidGtleXMiLCJqIiwib2siLCJuayIsInJlcGxhY2UiLCJwYXJzZUludCIsInVucGFjayIsInRyYW5zcGFyZW50IiwidG9Mb3dlckNhc2UiLCJuYW1lUGFyc2UiLCJ0aGlzIiwiX3JnYiIsIl92YWxpZCIsInZhbGlkIiwib2JqIiwicmdiU3RyaW5nIiwidW5kZWZpbmVkIiwiaGV4U3RyaW5nIiwiaXNTaG9ydCIsImFscGhhIiwiaHNsU3RyaW5nIiwibWl4IiwiY29sb3IiLCJ3ZWlnaHQiLCJjMSIsImMyIiwidzIiLCJwIiwidzEiLCJpbnRlcnBvbGF0ZSIsInQiLCJyZ2IxIiwicmdiMiIsImNsZWFyZXIiLCJncmV5c2NhbGUiLCJ2YWwiLCJvcGFxdWVyIiwibmVnYXRlIiwibGlnaHRlbiIsImRhcmtlbiIsInNhdHVyYXRlIiwiZGVzYXR1cmF0ZSIsInJvdGF0ZSIsImRlZyIsIm5vb3AiLCJ1aWQiLCJpZCIsImlzTnVsbE9yVW5kZWYiLCJ2YWx1ZSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwiaXNPYmplY3QiLCJpc051bWJlckZpbml0ZSIsIk51bWJlciIsImlzRmluaXRlIiwiZmluaXRlT3JEZWZhdWx0IiwiZGVmYXVsdFZhbHVlIiwidmFsdWVPckRlZmF1bHQiLCJ0b0RpbWVuc2lvbiIsImRpbWVuc2lvbiIsImVuZHNXaXRoIiwicGFyc2VGbG9hdCIsImNhbGxiYWNrIiwiZm4iLCJhcmdzIiwidGhpc0FyZyIsImFwcGx5IiwiZWFjaCIsImxvb3BhYmxlIiwicmV2ZXJzZSIsIl9lbGVtZW50c0VxdWFsIiwiYTAiLCJhMSIsImlsZW4iLCJ2MCIsInYxIiwiZGF0YXNldEluZGV4IiwiaW5kZXgiLCJzb3VyY2UiLCJ0YXJnZXQiLCJjcmVhdGUiLCJrbGVuIiwiaXNWYWxpZEtleSIsImtleSIsImluZGV4T2YiLCJfbWVyZ2VyIiwib3B0aW9ucyIsInR2YWwiLCJzdmFsIiwibWVyZ2UiLCJzb3VyY2VzIiwibWVyZ2VyIiwiY3VycmVudCIsIm1lcmdlSWYiLCJfbWVyZ2VySWYiLCJoYXNPd25Qcm9wZXJ0eSIsImtleVJlc29sdmVycyIsIm8iLCJ5IiwicmVzb2x2ZU9iamVjdEtleSIsInJlc29sdmVyIiwicGFydHMiLCJzcGxpdCIsInBhcnQiLCJwdXNoIiwiX3NwbGl0S2V5IiwiX2dldEtleVJlc29sdmVyIiwiX2NhcGl0YWxpemUiLCJ0b1VwcGVyQ2FzZSIsImRlZmluZWQiLCJpc0Z1bmN0aW9uIiwic2V0c0VxdWFsIiwic2l6ZSIsIml0ZW0iLCJoYXMiLCJQSSIsIlRBVSIsIlBJVEFVIiwiSU5GSU5JVFkiLCJQT1NJVElWRV9JTkZJTklUWSIsIlJBRF9QRVJfREVHIiwiSEFMRl9QSSIsIlFVQVJURVJfUEkiLCJUV09fVEhJUkRTX1BJIiwibG9nMTAiLCJzaWduIiwiYWxtb3N0RXF1YWxzIiwiZXBzaWxvbiIsImFicyIsIm5pY2VOdW0iLCJyYW5nZSIsInJvdW5kZWRSYW5nZSIsIm5pY2VSYW5nZSIsImZsb29yIiwiZnJhY3Rpb24iLCJpc051bWJlciIsImlzTmFOIiwiX3NldE1pbkFuZE1heEJ5S2V5IiwiYXJyYXkiLCJwcm9wZXJ0eSIsInRvUmFkaWFucyIsImRlZ3JlZXMiLCJ0b0RlZ3JlZXMiLCJyYWRpYW5zIiwiX2RlY2ltYWxQbGFjZXMiLCJnZXRBbmdsZUZyb21Qb2ludCIsImNlbnRyZVBvaW50IiwiYW5nbGVQb2ludCIsImRpc3RhbmNlRnJvbVhDZW50ZXIiLCJkaXN0YW5jZUZyb21ZQ2VudGVyIiwicmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyIiwic3FydCIsImFuZ2xlIiwiYXRhbjIiLCJkaXN0YW5jZSIsImRpc3RhbmNlQmV0d2VlblBvaW50cyIsInB0MSIsInB0MiIsIl9hbmdsZURpZmYiLCJfbm9ybWFsaXplQW5nbGUiLCJfYW5nbGVCZXR3ZWVuIiwic3RhcnQiLCJlbmQiLCJzYW1lQW5nbGVJc0Z1bGxDaXJjbGUiLCJhbmdsZVRvU3RhcnQiLCJhbmdsZVRvRW5kIiwic3RhcnRUb0FuZ2xlIiwiZW5kVG9BbmdsZSIsIl9saW1pdFZhbHVlIiwiX2lzQmV0d2VlbiIsIl9sb29rdXAiLCJ0YWJsZSIsImNtcCIsIm1pZCIsImhpIiwibG8iLCJfbG9va3VwQnlLZXkiLCJsYXN0IiwidGkiLCJfcmxvb2t1cEJ5S2V5IiwiYXJyYXlFdmVudHMiLCJ1bmxpc3RlbkFycmF5RXZlbnRzIiwibGlzdGVuZXIiLCJzdHViIiwiX2NoYXJ0anMiLCJsaXN0ZW5lcnMiLCJzcGxpY2UiLCJmb3JFYWNoIiwiX2FycmF5VW5pcXVlIiwiaXRlbXMiLCJzZXQiLCJTZXQiLCJyZXF1ZXN0QW5pbUZyYW1lIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGhyb3R0bGVkIiwiYXJnc1RvVXNlIiwidGlja2luZyIsIl90b0xlZnRSaWdodENlbnRlciIsImFsaWduIiwiX2FsaWduU3RhcnRFbmQiLCJfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyIsIm1ldGEiLCJwb2ludHMiLCJhbmltYXRpb25zRGlzYWJsZWQiLCJwb2ludENvdW50IiwiY291bnQiLCJfc29ydGVkIiwiaVNjYWxlIiwiX3BhcnNlZCIsImF4aXMiLCJtaW5EZWZpbmVkIiwibWF4RGVmaW5lZCIsImdldFVzZXJCb3VuZHMiLCJnZXRQaXhlbEZvclZhbHVlIiwiX3NjYWxlUmFuZ2VzQ2hhbmdlZCIsInhTY2FsZSIsInlTY2FsZSIsIl9zY2FsZVJhbmdlcyIsIm5ld1JhbmdlcyIsInhtaW4iLCJ4bWF4IiwieW1pbiIsInltYXgiLCJjaGFuZ2VkIiwiYXRFZGdlIiwiZWxhc3RpY0luIiwic2luIiwiZWxhc3RpY091dCIsImVmZmVjdHMiLCJsaW5lYXIiLCJlYXNlSW5RdWFkIiwiZWFzZU91dFF1YWQiLCJlYXNlSW5PdXRRdWFkIiwiZWFzZUluQ3ViaWMiLCJlYXNlT3V0Q3ViaWMiLCJlYXNlSW5PdXRDdWJpYyIsImVhc2VJblF1YXJ0IiwiZWFzZU91dFF1YXJ0IiwiZWFzZUluT3V0UXVhcnQiLCJlYXNlSW5RdWludCIsImVhc2VPdXRRdWludCIsImVhc2VJbk91dFF1aW50IiwiZWFzZUluU2luZSIsImNvcyIsImVhc2VPdXRTaW5lIiwiZWFzZUluT3V0U2luZSIsImVhc2VJbkV4cG8iLCJlYXNlT3V0RXhwbyIsImVhc2VJbk91dEV4cG8iLCJlYXNlSW5DaXJjIiwiZWFzZU91dENpcmMiLCJlYXNlSW5PdXRDaXJjIiwiZWFzZUluRWxhc3RpYyIsImVhc2VPdXRFbGFzdGljIiwiZWFzZUluT3V0RWxhc3RpYyIsImVhc2VJbkJhY2siLCJlYXNlT3V0QmFjayIsImVhc2VJbk91dEJhY2siLCJlYXNlSW5Cb3VuY2UiLCJlYXNlT3V0Qm91bmNlIiwiZWFzZUluT3V0Qm91bmNlIiwiaXNQYXR0ZXJuT3JHcmFkaWVudCIsImdldEhvdmVyQ29sb3IiLCJudW1iZXJzIiwiY29sb3JzIiwiaW50bENhY2hlIiwiTWFwIiwiZm9ybWF0TnVtYmVyIiwibnVtIiwibG9jYWxlIiwiY2FjaGVLZXkiLCJKU09OIiwic3RyaW5naWZ5IiwiZm9ybWF0dGVyIiwiZ2V0IiwiSW50bCIsIk51bWJlckZvcm1hdCIsImdldE51bWJlckZvcm1hdCIsImZvcm1hdCIsImZvcm1hdHRlcnMiLCJ2YWx1ZXMiLCJudW1lcmljIiwidGlja1ZhbHVlIiwidGlja3MiLCJjaGFydCIsIm5vdGF0aW9uIiwiZGVsdGEiLCJtYXhUaWNrIiwiY2FsY3VsYXRlRGVsdGEiLCJsb2dEZWx0YSIsIm51bURlY2ltYWwiLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJsb2dhcml0aG1pYyIsInJlbWFpbiIsInNpZ25pZmljYW5kIiwiaW5jbHVkZXMiLCJUaWNrcyIsIm92ZXJyaWRlcyIsImRlc2NyaXB0b3JzIiwiZ2V0U2NvcGUkMSIsIm5vZGUiLCJyb290Iiwic2NvcGUiLCJEZWZhdWx0cyIsIl9kZXNjcmlwdG9ycyIsIl9hcHBsaWVycyIsImFuaW1hdGlvbiIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckNvbG9yIiwiZGF0YXNldHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwiY29udGV4dCIsInBsYXRmb3JtIiwiZ2V0RGV2aWNlUGl4ZWxSYXRpbyIsImVsZW1lbnRzIiwiZXZlbnRzIiwiZm9udCIsImZhbWlseSIsInN0eWxlIiwibGluZUhlaWdodCIsImhvdmVyIiwiaG92ZXJCYWNrZ3JvdW5kQ29sb3IiLCJjdHgiLCJob3ZlckJvcmRlckNvbG9yIiwiaG92ZXJDb2xvciIsImluZGV4QXhpcyIsImludGVyYWN0aW9uIiwibW9kZSIsImludGVyc2VjdCIsImluY2x1ZGVJbnZpc2libGUiLCJtYWludGFpbkFzcGVjdFJhdGlvIiwib25Ib3ZlciIsIm9uQ2xpY2siLCJwYXJzaW5nIiwicGx1Z2lucyIsInJlc3BvbnNpdmUiLCJzY2FsZSIsInNjYWxlcyIsInNob3dMaW5lIiwiZHJhd0FjdGl2ZUVsZW1lbnRzT25Ub3AiLCJkZXNjcmliZSIsIm92ZXJyaWRlIiwicm91dGUiLCJuYW1lIiwidGFyZ2V0U2NvcGUiLCJ0YXJnZXROYW1lIiwic2NvcGVPYmplY3QiLCJ0YXJnZXRTY29wZU9iamVjdCIsInByaXZhdGVOYW1lIiwiZGVmaW5lUHJvcGVydGllcyIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsImxvY2FsIiwiYXBwbGllcnMiLCJkZWZhdWx0cyIsIl9zY3JpcHRhYmxlIiwic3RhcnRzV2l0aCIsIl9pbmRleGFibGUiLCJfZmFsbGJhY2siLCJkZWxheSIsImR1cmF0aW9uIiwiZWFzaW5nIiwibG9vcCIsInByb3BlcnRpZXMiLCJhY3RpdmUiLCJyZXNpemUiLCJzaG93IiwiYW5pbWF0aW9ucyIsInZpc2libGUiLCJoaWRlIiwiYXV0b1BhZGRpbmciLCJwYWRkaW5nIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiZGlzcGxheSIsIm9mZnNldCIsImJlZ2luQXRaZXJvIiwiYm91bmRzIiwiZ3JhY2UiLCJncmlkIiwibGluZVdpZHRoIiwiZHJhd09uQ2hhcnRBcmVhIiwiZHJhd1RpY2tzIiwidGlja0xlbmd0aCIsInRpY2tXaWR0aCIsIl9jdHgiLCJ0aWNrQ29sb3IiLCJib3JkZXIiLCJkYXNoIiwiZGFzaE9mZnNldCIsIndpZHRoIiwidGl0bGUiLCJ0ZXh0IiwibWluUm90YXRpb24iLCJtYXhSb3RhdGlvbiIsIm1pcnJvciIsInRleHRTdHJva2VXaWR0aCIsInRleHRTdHJva2VDb2xvciIsImF1dG9Ta2lwIiwiYXV0b1NraXBQYWRkaW5nIiwibGFiZWxPZmZzZXQiLCJtaW5vciIsIm1ham9yIiwiY3Jvc3NBbGlnbiIsInNob3dMYWJlbEJhY2tkcm9wIiwiYmFja2Ryb3BDb2xvciIsImJhY2tkcm9wUGFkZGluZyIsIl9tZWFzdXJlVGV4dCIsImRhdGEiLCJnYyIsImxvbmdlc3QiLCJzdHJpbmciLCJ0ZXh0V2lkdGgiLCJtZWFzdXJlVGV4dCIsIl9sb25nZXN0VGV4dCIsImFycmF5T2ZUaGluZ3MiLCJjYWNoZSIsImdhcmJhZ2VDb2xsZWN0Iiwic2F2ZSIsImpsZW4iLCJ0aGluZyIsIm5lc3RlZFRoaW5nIiwicmVzdG9yZSIsImdjTGVuIiwiX2FsaWduUGl4ZWwiLCJwaXhlbCIsImN1cnJlbnREZXZpY2VQaXhlbFJhdGlvIiwiaGFsZldpZHRoIiwiY2xlYXJDYW52YXMiLCJjYW52YXMiLCJnZXRDb250ZXh0IiwicmVzZXRUcmFuc2Zvcm0iLCJjbGVhclJlY3QiLCJoZWlnaHQiLCJkcmF3UG9pbnQiLCJkcmF3UG9pbnRMZWdlbmQiLCJ4T2Zmc2V0IiwieU9mZnNldCIsImNvcm5lclJhZGl1cyIsInhPZmZzZXRXIiwieU9mZnNldFciLCJwb2ludFN0eWxlIiwicm90YXRpb24iLCJyYWRpdXMiLCJyYWQiLCJ0cmFuc2xhdGUiLCJkcmF3SW1hZ2UiLCJiZWdpblBhdGgiLCJlbGxpcHNlIiwiYXJjIiwiY2xvc2VQYXRoIiwibW92ZVRvIiwibGluZVRvIiwiU1FSVDFfMiIsInJlY3QiLCJmaWxsIiwiYm9yZGVyV2lkdGgiLCJzdHJva2UiLCJfaXNQb2ludEluQXJlYSIsInBvaW50IiwiYXJlYSIsIm1hcmdpbiIsImNsaXBBcmVhIiwiY2xpcCIsInVuY2xpcEFyZWEiLCJfc3RlcHBlZExpbmVUbyIsInByZXZpb3VzIiwiZmxpcCIsIm1pZHBvaW50IiwiX2JlemllckN1cnZlVG8iLCJiZXppZXJDdXJ2ZVRvIiwiY3AxeCIsImNwMngiLCJjcDF5IiwiY3AyeSIsImRlY29yYXRlVGV4dCIsImxpbmUiLCJvcHRzIiwic3RyaWtldGhyb3VnaCIsInVuZGVybGluZSIsIm1ldHJpY3MiLCJhY3R1YWxCb3VuZGluZ0JveExlZnQiLCJhY3R1YWxCb3VuZGluZ0JveFJpZ2h0IiwiYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQiLCJhY3R1YWxCb3VuZGluZ0JveERlc2NlbnQiLCJ5RGVjb3JhdGlvbiIsInN0cm9rZVN0eWxlIiwiZmlsbFN0eWxlIiwiZGVjb3JhdGlvbldpZHRoIiwiZHJhd0JhY2tkcm9wIiwib2xkQ29sb3IiLCJmaWxsUmVjdCIsInJlbmRlclRleHQiLCJsaW5lcyIsInN0cm9rZVdpZHRoIiwic3Ryb2tlQ29sb3IiLCJ0cmFuc2xhdGlvbiIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsInNldFJlbmRlck9wdHMiLCJiYWNrZHJvcCIsInN0cm9rZVRleHQiLCJtYXhXaWR0aCIsImZpbGxUZXh0IiwiYWRkUm91bmRlZFJlY3RQYXRoIiwidG9wTGVmdCIsImJvdHRvbUxlZnQiLCJib3R0b21SaWdodCIsInRvcFJpZ2h0IiwiTElORV9IRUlHSFQiLCJGT05UX1NUWUxFIiwidG9MaW5lSGVpZ2h0IiwibWF0Y2hlcyIsIm1hdGNoIiwibnVtYmVyT3JaZXJvIiwiX3JlYWRWYWx1ZVRvUHJvcHMiLCJwcm9wcyIsIm9ialByb3BzIiwicmVhZCIsInByb3AiLCJ0b1RSQkwiLCJ0b1RSQkxDb3JuZXJzIiwidG9QYWRkaW5nIiwidG9Gb250IiwiZmFsbGJhY2siLCJjb25zb2xlIiwid2FybiIsInRvRm9udFN0cmluZyIsInJlc29sdmUiLCJpbnB1dHMiLCJpbmZvIiwiY2FjaGVhYmxlIiwiY3JlYXRlQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJfY3JlYXRlUmVzb2x2ZXIiLCJzY29wZXMiLCJwcmVmaXhlcyIsInJvb3RTY29wZXMiLCJnZXRUYXJnZXQiLCJmaW5hbFJvb3RTY29wZXMiLCJfcmVzb2x2ZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX2NhY2hlYWJsZSIsIl9zY29wZXMiLCJfcm9vdFNjb3BlcyIsIl9nZXRUYXJnZXQiLCJQcm94eSIsImRlbGV0ZVByb3BlcnR5IiwiX2tleXMiLCJfY2FjaGVkIiwicHJveHkiLCJwcmVmaXgiLCJyZWFkS2V5IiwibmVlZHNTdWJSZXNvbHZlciIsImNyZWF0ZVN1YlJlc29sdmVyIiwiX3Jlc29sdmVXaXRoUHJlZml4ZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJnZXRLZXlzRnJvbUFsbFNjb3BlcyIsIm93bktleXMiLCJzdG9yYWdlIiwiX3N0b3JhZ2UiLCJfYXR0YWNoQ29udGV4dCIsInN1YlByb3h5IiwiZGVzY3JpcHRvckRlZmF1bHRzIiwiX3Byb3h5IiwiX2NvbnRleHQiLCJfc3ViUHJveHkiLCJfc3RhY2siLCJzZXRDb250ZXh0IiwicmVjZWl2ZXIiLCJpc1NjcmlwdGFibGUiLCJnZXRWYWx1ZSIsIkVycm9yIiwiam9pbiIsImFkZCIsImRlbGV0ZSIsIl9yZXNvbHZlU2NyaXB0YWJsZSIsImlzSW5kZXhhYmxlIiwiYXJyIiwiZmlsdGVyIiwiX3Jlc29sdmVBcnJheSIsIl9yZXNvbHZlV2l0aENvbnRleHQiLCJhbGxLZXlzIiwiY29uZmlndXJhYmxlIiwic2NyaXB0YWJsZSIsImluZGV4YWJsZSIsIl9hbGxLZXlzIiwicmVzb2x2ZUZhbGxiYWNrIiwiZ2V0U2NvcGUiLCJwYXJlbnQiLCJhZGRTY29wZXMiLCJwYXJlbnRTY29wZXMiLCJwYXJlbnRGYWxsYmFjayIsImFsbFNjb3BlcyIsImFkZFNjb3Blc0Zyb21LZXkiLCJzdWJHZXRUYXJnZXQiLCJyZXNvbHZlS2V5c0Zyb21BbGxTY29wZXMiLCJfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUiLCJfcGFyc2luZyIsInBhcnNlZCIsInBhcnNlIiwiRVBTSUxPTiIsImdldFBvaW50Iiwic2tpcCIsImdldFZhbHVlQXhpcyIsInNwbGluZUN1cnZlIiwiZmlyc3RQb2ludCIsIm1pZGRsZVBvaW50IiwiYWZ0ZXJQb2ludCIsIm5leHQiLCJkMDEiLCJkMTIiLCJzMDEiLCJzMTIiLCJmYSIsImZiIiwiY2FwQ29udHJvbFBvaW50IiwicHQiLCJfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyIsImNvbnRyb2xQb2ludHMiLCJzcGFuR2FwcyIsImN1YmljSW50ZXJwb2xhdGlvbk1vZGUiLCJ2YWx1ZUF4aXMiLCJwb2ludHNMZW4iLCJkZWx0YUsiLCJtSyIsInBvaW50QmVmb3JlIiwicG9pbnRDdXJyZW50IiwicG9pbnRBZnRlciIsInNsb3BlRGVsdGEiLCJhbHBoYUsiLCJiZXRhSyIsInRhdUsiLCJzcXVhcmVkTWFnbml0dWRlIiwibW9ub3RvbmVBZGp1c3QiLCJpUGl4ZWwiLCJ2UGl4ZWwiLCJtb25vdG9uZUNvbXB1dGUiLCJzcGxpbmVDdXJ2ZU1vbm90b25lIiwicHJldiIsInRlbnNpb24iLCJjYXBCZXppZXJQb2ludHMiLCJpbkFyZWEiLCJpbkFyZWFQcmV2IiwiaW5BcmVhTmV4dCIsIl9pc0RvbVN1cHBvcnRlZCIsImRvY3VtZW50IiwiX2dldFBhcmVudE5vZGUiLCJkb21Ob2RlIiwicGFyZW50Tm9kZSIsImhvc3QiLCJwYXJzZU1heFN0eWxlIiwic3R5bGVWYWx1ZSIsInBhcmVudFByb3BlcnR5IiwidmFsdWVJblBpeGVscyIsImdldENvbXB1dGVkU3R5bGUiLCJlbGVtZW50Iiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwicG9zaXRpb25zIiwiZ2V0UG9zaXRpb25lZFN0eWxlIiwic3R5bGVzIiwic3VmZml4IiwicmVzdWx0IiwicG9zIiwidXNlT2Zmc2V0UG9zIiwic2hhZG93Um9vdCIsImdldFJlbGF0aXZlUG9zaXRpb24iLCJldmVudCIsImJvcmRlckJveCIsImJveFNpemluZyIsInBhZGRpbmdzIiwiYm9yZGVycyIsImJveCIsInRvdWNoZXMiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFgiLCJjbGllbnRZIiwiZ2V0Q2FudmFzUG9zaXRpb24iLCJyb3VuZDEiLCJyZXRpbmFTY2FsZSIsImZvcmNlUmF0aW8iLCJmb3JjZVN0eWxlIiwicGl4ZWxSYXRpbyIsImRldmljZUhlaWdodCIsImRldmljZVdpZHRoIiwic2V0VHJhbnNmb3JtIiwic3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyIsInBhc3NpdmVTdXBwb3J0ZWQiLCJwYXNzaXZlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkVXNlZFNpemUiLCJlbCIsImdldFByb3BlcnR5VmFsdWUiLCJnZXRTdHlsZSIsIl9wb2ludEluTGluZSIsIl9zdGVwcGVkSW50ZXJwb2xhdGlvbiIsIl9iZXppZXJJbnRlcnBvbGF0aW9uIiwiY3AxIiwiY3AyIiwiZ2V0UnRsQWRhcHRlciIsInJ0bCIsInJlY3RYIiwic2V0V2lkdGgiLCJ4UGx1cyIsImxlZnRGb3JMdHIiLCJpdGVtV2lkdGgiLCJnZXRSaWdodFRvTGVmdEFkYXB0ZXIiLCJfaXRlbVdpZHRoIiwib3ZlcnJpZGVUZXh0RGlyZWN0aW9uIiwiZGlyZWN0aW9uIiwib3JpZ2luYWwiLCJnZXRQcm9wZXJ0eVByaW9yaXR5Iiwic2V0UHJvcGVydHkiLCJwcmV2VGV4dERpcmVjdGlvbiIsInJlc3RvcmVUZXh0RGlyZWN0aW9uIiwicHJvcGVydHlGbiIsImJldHdlZW4iLCJjb21wYXJlIiwibm9ybWFsaXplIiwibm9ybWFsaXplU2VnbWVudCIsIl9ib3VuZFNlZ21lbnQiLCJzZWdtZW50Iiwic3RhcnRCb3VuZCIsImVuZEJvdW5kIiwiZ2V0U2VnbWVudCIsInByZXZWYWx1ZSIsImluc2lkZSIsInN1YlN0YXJ0IiwiX2JvdW5kU2VnbWVudHMiLCJzZWdtZW50cyIsInN1YiIsInJlYWRTdHlsZSIsImJvcmRlckNhcFN0eWxlIiwiYm9yZGVyRGFzaCIsImJvcmRlckRhc2hPZmZzZXQiLCJib3JkZXJKb2luU3R5bGUiLCJzdHlsZUNoYW5nZWQiLCJwcmV2U3R5bGUiLCJyZXBsYWNlciIsIkFuaW1hdG9yIiwiX3JlcXVlc3QiLCJfY2hhcnRzIiwiX3J1bm5pbmciLCJfbGFzdERhdGUiLCJfbm90aWZ5IiwiYW5pbXMiLCJkYXRlIiwiY2FsbGJhY2tzIiwibnVtU3RlcHMiLCJpbml0aWFsIiwiY3VycmVudFN0ZXAiLCJfcmVmcmVzaCIsIl91cGRhdGUiLCJEYXRlIiwibm93IiwicmVtYWluaW5nIiwicnVubmluZyIsImRyYXciLCJfYWN0aXZlIiwiX3RvdGFsIiwidGljayIsInBvcCIsIl9nZXRBbmltcyIsImNoYXJ0cyIsImNvbXBsZXRlIiwicHJvZ3Jlc3MiLCJsaXN0ZW4iLCJjYiIsInJlZHVjZSIsImFjYyIsImN1ciIsIl9kdXJhdGlvbiIsInN0b3AiLCJjYW5jZWwiLCJyZW1vdmUiLCJhbmltYXRvciIsImludGVycG9sYXRvcnMiLCJib29sZWFuIiwiZmFjdG9yIiwiYzAiLCJudW1iZXIiLCJBbmltYXRpb24iLCJjZmciLCJjdXJyZW50VmFsdWUiLCJfZm4iLCJfZWFzaW5nIiwiX3N0YXJ0IiwiX2xvb3AiLCJfdGFyZ2V0IiwiX3Byb3AiLCJfZnJvbSIsIl90byIsIl9wcm9taXNlcyIsInVwZGF0ZSIsImVsYXBzZWQiLCJ3YWl0IiwicHJvbWlzZXMiLCJQcm9taXNlIiwicmVzIiwicmVqIiwicmVzb2x2ZWQiLCJtZXRob2QiLCJBbmltYXRpb25zIiwiY29uZmlnIiwiX2NoYXJ0IiwiX3Byb3BlcnRpZXMiLCJjb25maWd1cmUiLCJhbmltYXRpb25PcHRpb25zIiwiYW5pbWF0ZWRQcm9wcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJvcHRpb24iLCJfYW5pbWF0ZU9wdGlvbnMiLCJuZXdPcHRpb25zIiwiJHNoYXJlZCIsIiRhbmltYXRpb25zIiwicmVzb2x2ZVRhcmdldE9wdGlvbnMiLCJfY3JlYXRlQW5pbWF0aW9ucyIsImFuaW0iLCJhbGwiLCJhd2FpdEFsbCIsInRoZW4iLCJzY2FsZUNsaXAiLCJhbGxvd2VkT3ZlcmZsb3ciLCJnZXRTb3J0ZWREYXRhc2V0SW5kaWNlcyIsImZpbHRlclZpc2libGUiLCJtZXRhc2V0cyIsIl9nZXRTb3J0ZWREYXRhc2V0TWV0YXMiLCJhcHBseVN0YWNrIiwic3RhY2siLCJkc0luZGV4Iiwic2luZ2xlTW9kZSIsIm90aGVyVmFsdWUiLCJpc1N0YWNrZWQiLCJzdGFja2VkIiwiZ2V0T3JDcmVhdGVTdGFjayIsInN0YWNrcyIsInN0YWNrS2V5IiwiaW5kZXhWYWx1ZSIsInN1YlN0YWNrIiwiZ2V0TGFzdEluZGV4SW5TdGFjayIsInZTY2FsZSIsInBvc2l0aXZlIiwiZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMiLCJ1cGRhdGVTdGFja3MiLCJjb250cm9sbGVyIiwiX2NhY2hlZE1ldGEiLCJfc3RhY2tzIiwiaUF4aXMiLCJ2QXhpcyIsImluZGV4U2NhbGUiLCJ2YWx1ZVNjYWxlIiwiZ2V0U3RhY2tLZXkiLCJfdG9wIiwiX2JvdHRvbSIsIl92aXN1YWxWYWx1ZXMiLCJnZXRGaXJzdFNjYWxlSWQiLCJzaGlmdCIsImNsZWFyU3RhY2tzIiwiaXNEaXJlY3RVcGRhdGVNb2RlIiwiY2xvbmVJZk5vdFNoYXJlZCIsImNhY2hlZCIsInNoYXJlZCIsIkRhdGFzZXRDb250cm9sbGVyIiwic3RhdGljIiwiX2NhY2hlZERhdGFPcHRzIiwiZ2V0TWV0YSIsIl90eXBlIiwiX2RhdGEiLCJfb2JqZWN0RGF0YSIsIl9zaGFyZWRPcHRpb25zIiwiX2RyYXdTdGFydCIsIl9kcmF3Q291bnQiLCJlbmFibGVPcHRpb25TaGFyaW5nIiwic3VwcG9ydHNEZWNpbWF0aW9uIiwiJGNvbnRleHQiLCJfc3luY0xpc3QiLCJkYXRhc2V0RWxlbWVudFR5cGUiLCJkYXRhRWxlbWVudFR5cGUiLCJpbml0aWFsaXplIiwibGlua1NjYWxlcyIsIl9zdGFja2VkIiwiYWRkRWxlbWVudHMiLCJpc1BsdWdpbkVuYWJsZWQiLCJ1cGRhdGVJbmRleCIsImRhdGFzZXQiLCJnZXREYXRhc2V0IiwiY2hvb3NlSWQiLCJ4aWQiLCJ4QXhpc0lEIiwieWlkIiwieUF4aXNJRCIsInJpZCIsInJBeGlzSUQiLCJpaWQiLCJpQXhpc0lEIiwidmlkIiwidkF4aXNJRCIsImdldFNjYWxlRm9ySWQiLCJyU2NhbGUiLCJnZXREYXRhc2V0TWV0YSIsInNjYWxlSUQiLCJfZ2V0T3RoZXJTY2FsZSIsInJlc2V0IiwiX2Rlc3Ryb3kiLCJfZGF0YUNoZWNrIiwiYWRhdGEiLCJjb252ZXJ0T2JqZWN0RGF0YVRvQXJyYXkiLCJpc0V4dGVuc2libGUiLCJkZWZpbmVQcm9wZXJ0eSIsImJhc2UiLCJvYmplY3QiLCJidWlsZE9yVXBkYXRlRWxlbWVudHMiLCJyZXNldE5ld0VsZW1lbnRzIiwic3RhY2tDaGFuZ2VkIiwib2xkU3RhY2tlZCIsIl9yZXN5bmNFbGVtZW50cyIsInNjb3BlS2V5cyIsImRhdGFzZXRTY29wZUtleXMiLCJnZXRPcHRpb25TY29wZXMiLCJjcmVhdGVSZXNvbHZlciIsInNvcnRlZCIsInBhcnNlQXJyYXlEYXRhIiwicGFyc2VPYmplY3REYXRhIiwicGFyc2VQcmltaXRpdmVEYXRhIiwiaXNOb3RJbk9yZGVyQ29tcGFyZWRUb1ByZXYiLCJsYWJlbHMiLCJnZXRMYWJlbHMiLCJzaW5nbGVTY2FsZSIsInhBeGlzS2V5IiwieUF4aXNLZXkiLCJnZXRQYXJzZWQiLCJnZXREYXRhRWxlbWVudCIsInVwZGF0ZVJhbmdlRnJvbVBhcnNlZCIsInBhcnNlZFZhbHVlIiwiTmFOIiwiZ2V0TWluTWF4IiwiY2FuU3RhY2siLCJvdGhlclNjYWxlIiwiaGlkZGVuIiwiY3JlYXRlU3RhY2siLCJORUdBVElWRV9JTkZJTklUWSIsIm90aGVyTWluIiwib3RoZXJNYXgiLCJfc2tpcCIsImdldEFsbFBhcnNlZFZhbHVlcyIsImdldE1heE92ZXJmbG93IiwiZ2V0TGFiZWxBbmRWYWx1ZSIsImxhYmVsIiwiZ2V0TGFiZWxGb3JWYWx1ZSIsIl9jbGlwIiwiZGlzYWJsZWQiLCJ0b0NsaXAiLCJkZWZhdWx0Q2xpcCIsImNoYXJ0QXJlYSIsInJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMiLCJyZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zIiwiZGF0YUluZGV4IiwicmF3IiwiY3JlYXRlRGF0YUNvbnRleHQiLCJjcmVhdGVEYXRhc2V0Q29udGV4dCIsIl9yZXNvbHZlRWxlbWVudE9wdGlvbnMiLCJlbGVtZW50VHlwZSIsInNoYXJpbmciLCJkYXRhc2V0RWxlbWVudFNjb3BlS2V5cyIsInJlc29sdmVOYW1lZE9wdGlvbnMiLCJmcmVlemUiLCJfcmVzb2x2ZUFuaW1hdGlvbnMiLCJ0cmFuc2l0aW9uIiwiZGF0YXNldEFuaW1hdGlvblNjb3BlS2V5cyIsImdldFNoYXJlZE9wdGlvbnMiLCJpbmNsdWRlT3B0aW9ucyIsInNoYXJlZE9wdGlvbnMiLCJfYW5pbWF0aW9uc0Rpc2FibGVkIiwiX2dldFNoYXJlZE9wdGlvbnMiLCJmaXJzdE9wdHMiLCJwcmV2aW91c2x5U2hhcmVkT3B0aW9ucyIsInVwZGF0ZVNoYXJlZE9wdGlvbnMiLCJ1cGRhdGVFbGVtZW50IiwiX3NldFN0eWxlIiwicmVtb3ZlSG92ZXJTdHlsZSIsInNldEhvdmVyU3R5bGUiLCJfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGUiLCJfc2V0RGF0YXNldEhvdmVyU3R5bGUiLCJhcmcxIiwiYXJnMiIsIm51bU1ldGEiLCJudW1EYXRhIiwiX2luc2VydEVsZW1lbnRzIiwiX3JlbW92ZUVsZW1lbnRzIiwibW92ZSIsInVwZGF0ZUVsZW1lbnRzIiwicmVtb3ZlZCIsIl9zeW5jIiwiX2RhdGFDaGFuZ2VzIiwiX29uRGF0YVB1c2giLCJhcmd1bWVudHMiLCJfb25EYXRhUG9wIiwiX29uRGF0YVNoaWZ0IiwiX29uRGF0YVNwbGljZSIsIm5ld0NvdW50IiwiX29uRGF0YVVuc2hpZnQiLCJjb21wdXRlTWluU2FtcGxlU2l6ZSIsIl9jYWNoZSIsIiRiYXIiLCJ2aXNpYmxlTWV0YXMiLCJjb25jYXQiLCJzb3J0IiwiZ2V0QWxsU2NhbGVWYWx1ZXMiLCJjdXJyIiwiX2xlbmd0aCIsInVwZGF0ZU1pbkFuZFByZXYiLCJnZXRQaXhlbEZvclRpY2siLCJwYXJzZVZhbHVlIiwiZW50cnkiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJiYXJTdGFydCIsImJhckVuZCIsIl9jdXN0b20iLCJwYXJzZUZsb2F0QmFyIiwicGFyc2VBcnJheU9yUHJpbWl0aXZlIiwiaXNGbG9hdEJhciIsImN1c3RvbSIsInNldEJvcmRlclNraXBwZWQiLCJlZGdlIiwiYm9yZGVyU2tpcHBlZCIsImhvcml6b250YWwiLCJib3JkZXJQcm9wcyIsImVuYWJsZUJvcmRlclJhZGl1cyIsInBhcnNlRWRnZSIsIm9yaWciLCJ2MiIsInN0YXJ0RW5kIiwic2V0SW5mbGF0ZUFtb3VudCIsImluZmxhdGVBbW91bnQiLCJEb3VnaG51dENvbnRyb2xsZXIiLCJhbmltYXRlUm90YXRlIiwiYW5pbWF0ZVNjYWxlIiwiY3V0b3V0IiwiY2lyY3VtZmVyZW5jZSIsInNwYWNpbmciLCJhc3BlY3RSYXRpbyIsImxlZ2VuZCIsImdlbmVyYXRlTGFiZWxzIiwiZm9udENvbG9yIiwiZ2V0RGF0YVZpc2liaWxpdHkiLCJsZWdlbmRJdGVtIiwidG9nZ2xlRGF0YVZpc2liaWxpdHkiLCJzdXBlciIsImlubmVyUmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJnZXR0ZXIiLCJfZ2V0Um90YXRpb24iLCJfZ2V0Q2lyY3VtZmVyZW5jZSIsIl9nZXRSb3RhdGlvbkV4dGVudHMiLCJpc0RhdGFzZXRWaXNpYmxlIiwiYXJjcyIsImdldE1heEJvcmRlcldpZHRoIiwiZ2V0TWF4T2Zmc2V0IiwibWF4U2l6ZSIsImNoYXJ0V2VpZ2h0IiwiX2dldFJpbmdXZWlnaHQiLCJyYXRpb1giLCJyYXRpb1kiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJzdGFydFgiLCJzdGFydFkiLCJlbmRYIiwiZW5kWSIsImNhbGNNYXgiLCJjYWxjTWluIiwibWF4WCIsIm1heFkiLCJtaW5YIiwibWluWSIsImdldFJhdGlvQW5kT2Zmc2V0IiwibWF4SGVpZ2h0IiwibWF4UmFkaXVzIiwicmFkaXVzTGVuZ3RoIiwiX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwiLCJ0b3RhbCIsImNhbGN1bGF0ZVRvdGFsIiwiX2dldFJpbmdXZWlnaHRPZmZzZXQiLCJfY2lyY3VtZmVyZW5jZSIsImNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UiLCJhbmltYXRpb25PcHRzIiwiY2VudGVyWCIsImNlbnRlclkiLCJtZXRhRGF0YSIsImJvcmRlckFsaWduIiwiaG92ZXJCb3JkZXJXaWR0aCIsImhvdmVyT2Zmc2V0IiwicmluZ1dlaWdodE9mZnNldCIsIlBvbGFyQXJlYUNvbnRyb2xsZXIiLCJhbmdsZUxpbmVzIiwiY2lyY3VsYXIiLCJwb2ludExhYmVscyIsImJpbmQiLCJfdXBkYXRlUmFkaXVzIiwibWluU2l6ZSIsImN1dG91dFBlcmNlbnRhZ2UiLCJnZXRWaXNpYmxlRGF0YXNldENvdW50IiwieENlbnRlciIsInlDZW50ZXIiLCJkYXRhc2V0U3RhcnRBbmdsZSIsImdldEluZGV4QW5nbGUiLCJkZWZhdWx0QW5nbGUiLCJjb3VudFZpc2libGVFbGVtZW50cyIsIl9jb21wdXRlQW5nbGUiLCJnZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSIsImNvbnRyb2xsZXJzIiwiX19wcm90b19fIiwiQmFyQ29udHJvbGxlciIsImNhdGVnb3J5UGVyY2VudGFnZSIsImJhclBlcmNlbnRhZ2UiLCJncm91cGVkIiwiX2luZGV4XyIsIl92YWx1ZV8iLCJpQXhpc0tleSIsInZBeGlzS2V5IiwiYmFycyIsImdldEJhc2VQaXhlbCIsImlzSG9yaXpvbnRhbCIsInJ1bGVyIiwiX2dldFJ1bGVyIiwidnBpeGVscyIsImhlYWQiLCJfY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMiLCJpcGl4ZWxzIiwiX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzIiwiY2VudGVyIiwiX2dldFN0YWNrcyIsInNraXBOdWxsIiwiX2dldFN0YWNrQ291bnQiLCJfZ2V0U3RhY2tJbmRleCIsInBpeGVscyIsImJhclRoaWNrbmVzcyIsIl9zdGFydFBpeGVsIiwiX2VuZFBpeGVsIiwic3RhY2tDb3VudCIsImJhc2VWYWx1ZSIsIm1pbkJhckxlbmd0aCIsImFjdHVhbEJhc2UiLCJmbG9hdGluZyIsImJhclNpZ24iLCJzdGFydFBpeGVsIiwiZ2V0UGl4ZWxGb3JEZWNpbWFsIiwiZW5kUGl4ZWwiLCJnZXRWYWx1ZUZvclBpeGVsIiwiaGFsZkdyaWQiLCJnZXRMaW5lV2lkdGhGb3JWYWx1ZSIsIm1heEJhclRoaWNrbmVzcyIsIkluZmluaXR5IiwicGVyY2VudCIsImNodW5rIiwiY29tcHV0ZUZsZXhDYXRlZ29yeVRyYWl0cyIsInRoaWNrbmVzcyIsImNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyIsInN0YWNrSW5kZXgiLCJyZWN0cyIsIkJ1YmJsZUNvbnRyb2xsZXIiLCJMaW5lQ29udHJvbGxlciIsIl9kYXRhc2V0IiwiX2RhdGFzZXRJbmRleCIsIl9kZWNpbWF0ZWQiLCJhbmltYXRlZCIsIm1heEdhcExlbmd0aCIsImRpcmVjdFVwZGF0ZSIsInBvaW50c0NvdW50IiwicHJldlBhcnNlZCIsIm51bGxEYXRhIiwibGFzdFBvaW50IiwidXBkYXRlQ29udHJvbFBvaW50cyIsIlBpZUNvbnRyb2xsZXIiLCJSYWRhckNvbnRyb2xsZXIiLCJfZnVsbExvb3AiLCJwb2ludFBvc2l0aW9uIiwiZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlIiwiU2NhdHRlckNvbnRyb2xsZXIiLCJyZWdpc3RyeSIsImdldEVsZW1lbnQiLCJEYXRlQWRhcHRlckJhc2UiLCJtZW1iZXJzIiwiaW5pdCIsImZvcm1hdHMiLCJkaWZmIiwic3RhcnRPZiIsImVuZE9mIiwiYWRhcHRlcnMiLCJiaW5hcnlTZWFyY2giLCJtZXRhc2V0IiwibG9va3VwTWV0aG9kIiwiX3JldmVyc2VQaXhlbHMiLCJnZXRSYW5nZSIsImV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyIsInBvc2l0aW9uIiwiaGFuZGxlciIsImdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMiLCJnZXRJbnRlcnNlY3RJdGVtcyIsInVzZUZpbmFsUG9zaXRpb24iLCJpc1BvaW50SW5BcmVhIiwiaW5SYW5nZSIsImdldE5lYXJlc3RJdGVtcyIsImRpc3RhbmNlTWV0cmljIiwidXNlWCIsInVzZVkiLCJkZWx0YVgiLCJkZWx0YVkiLCJnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMiLCJtaW5EaXN0YW5jZSIsImdldENlbnRlclBvaW50IiwiZ2V0TmVhcmVzdENhcnRlc2lhbkl0ZW1zIiwiZ2V0UHJvcHMiLCJnZXROZWFyZXN0UmFkaWFsSXRlbXMiLCJnZXRBeGlzSXRlbXMiLCJyYW5nZU1ldGhvZCIsImludGVyc2VjdHNJdGVtIiwiSW50ZXJhY3Rpb24iLCJtb2RlcyIsIm5lYXJlc3QiLCJTVEFUSUNfUE9TSVRJT05TIiwiZmlsdGVyQnlQb3NpdGlvbiIsImZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyIsInNvcnRCeVdlaWdodCIsImdldENvbWJpbmVkTWF4IiwibWF4UGFkZGluZyIsInVwZGF0ZU1heFBhZGRpbmciLCJib3hQYWRkaW5nIiwidXBkYXRlRGltcyIsInBhcmFtcyIsImxheW91dCIsImdldFBhZGRpbmciLCJuZXdXaWR0aCIsIm91dGVyV2lkdGgiLCJuZXdIZWlnaHQiLCJvdXRlckhlaWdodCIsIndpZHRoQ2hhbmdlZCIsImhlaWdodENoYW5nZWQiLCJzYW1lIiwib3RoZXIiLCJnZXRNYXJnaW5zIiwibWFyZ2luRm9yUG9zaXRpb25zIiwiZml0Qm94ZXMiLCJib3hlcyIsInJlZml0Qm94ZXMiLCJyZWZpdCIsImZ1bGxTaXplIiwic2V0Qm94RGltcyIsInBsYWNlQm94ZXMiLCJ1c2VyUGFkZGluZyIsInBsYWNlZCIsInN0YWNrV2VpZ2h0IiwibGF5b3V0cyIsImFkZEJveCIsIl9sYXllcnMiLCJ6IiwicmVtb3ZlQm94IiwibGF5b3V0SXRlbSIsIm1pblBhZGRpbmciLCJhdmFpbGFibGVXaWR0aCIsImF2YWlsYWJsZUhlaWdodCIsImxheW91dEJveGVzIiwid3JhcEJveGVzIiwid3JhcCIsImNlbnRlckhvcml6b250YWwiLCJjZW50ZXJWZXJ0aWNhbCIsImxlZnRBbmRUb3AiLCJyaWdodEFuZEJvdHRvbSIsInZlcnRpY2FsIiwiYnVpbGRMYXlvdXRCb3hlcyIsInZlcnRpY2FsQm94ZXMiLCJob3Jpem9udGFsQm94ZXMiLCJiZWZvcmVMYXlvdXQiLCJ2aXNpYmxlVmVydGljYWxCb3hDb3VudCIsInZCb3hNYXhXaWR0aCIsImhCb3hNYXhIZWlnaHQiLCJidWlsZFN0YWNrcyIsInNldExheW91dERpbXMiLCJ1cGRhdGVQb3MiLCJjaGFuZ2UiLCJoYW5kbGVNYXhQYWRkaW5nIiwiQmFzZVBsYXRmb3JtIiwiYWNxdWlyZUNvbnRleHQiLCJyZWxlYXNlQ29udGV4dCIsImdldE1heGltdW1TaXplIiwiaXNBdHRhY2hlZCIsInVwZGF0ZUNvbmZpZyIsIkJhc2ljUGxhdGZvcm0iLCJFWFBBTkRPX0tFWSIsIkVWRU5UX1RZUEVTIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmRvd24iLCJwb2ludGVybW92ZSIsInBvaW50ZXJ1cCIsInBvaW50ZXJsZWF2ZSIsInBvaW50ZXJvdXQiLCJpc051bGxPckVtcHR5IiwiZXZlbnRMaXN0ZW5lck9wdGlvbnMiLCJyZW1vdmVMaXN0ZW5lciIsIm5vZGVMaXN0Q29udGFpbnMiLCJub2RlTGlzdCIsImNvbnRhaW5zIiwiY3JlYXRlQXR0YWNoT2JzZXJ2ZXIiLCJvYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwidHJpZ2dlciIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImNyZWF0ZURldGFjaE9ic2VydmVyIiwiZHJwTGlzdGVuaW5nQ2hhcnRzIiwib2xkRGV2aWNlUGl4ZWxSYXRpbyIsIm9uV2luZG93UmVzaXplIiwiZHByIiwiY3JlYXRlUmVzaXplT2JzZXJ2ZXIiLCJjb250YWluZXIiLCJjbGllbnRXaWR0aCIsIlJlc2l6ZU9ic2VydmVyIiwiY29udGVudFJlY3QiLCJsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyIsInJlbGVhc2VPYnNlcnZlciIsImRpc2Nvbm5lY3QiLCJ1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzIiwiY3JlYXRlUHJveHlBbmRMaXN0ZW4iLCJuYXRpdmUiLCJmcm9tTmF0aXZlRXZlbnQiLCJhZGRMaXN0ZW5lciIsIkRvbVBsYXRmb3JtIiwicmVuZGVySGVpZ2h0IiwiZ2V0QXR0cmlidXRlIiwicmVuZGVyV2lkdGgiLCJkaXNwbGF5V2lkdGgiLCJkaXNwbGF5SGVpZ2h0IiwiaW5pdENhbnZhcyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInByb3hpZXMiLCIkcHJveGllcyIsImF0dGFjaCIsImRldGFjaCIsImJiV2lkdGgiLCJiYkhlaWdodCIsIm1hcmdpbnMiLCJjb250YWluZXJTaXplIiwiY29udGFpbmVyU3R5bGUiLCJjb250YWluZXJCb3JkZXIiLCJjb250YWluZXJQYWRkaW5nIiwiY2xpZW50SGVpZ2h0IiwiZ2V0Q29udGFpbmVyU2l6ZSIsImlzQ29ubmVjdGVkIiwiRWxlbWVudCIsInRvb2x0aXBQb3NpdGlvbiIsImhhc1ZhbHVlIiwiZmluYWwiLCJuZXdUaWNrcyIsIm1ham9yU3RhcnQiLCJtYWpvckVuZCIsImNlaWwiLCJvZmZzZXRGcm9tRWRnZSIsImdldFRpY2tzTGltaXQiLCJ0aWNrc0xlbmd0aCIsIm1heFRpY2tzTGltaXQiLCJzYW1wbGUiLCJudW1JdGVtcyIsImluY3JlbWVudCIsImdldFBpeGVsRm9yR3JpZExpbmUiLCJvZmZzZXRHcmlkTGluZXMiLCJ2YWxpZEluZGV4IiwibGluZVZhbHVlIiwiZ2V0VGlja01hcmtMZW5ndGgiLCJnZXRUaXRsZUhlaWdodCIsInRpdGxlQWxpZ24iLCJyZXZlcnNlQWxpZ24iLCJTY2FsZSIsIl9tYXJnaW5zIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImxhYmVsUm90YXRpb24iLCJfcmFuZ2UiLCJfZ3JpZExpbmVJdGVtcyIsIl9sYWJlbEl0ZW1zIiwiX2xhYmVsU2l6ZXMiLCJfbWF4TGVuZ3RoIiwiX2xvbmdlc3RUZXh0Q2FjaGUiLCJfdXNlck1heCIsIl91c2VyTWluIiwiX3N1Z2dlc3RlZE1heCIsIl9zdWdnZXN0ZWRNaW4iLCJfdGlja3NMZW5ndGgiLCJfYm9yZGVyVmFsdWUiLCJfZGF0YUxpbWl0c0NhY2hlZCIsInN1Z2dlc3RlZE1pbiIsInN1Z2dlc3RlZE1heCIsIm1ldGFzIiwiZ2V0VGlja3MiLCJ4TGFiZWxzIiwieUxhYmVscyIsImdldExhYmVsSXRlbXMiLCJfY29tcHV0ZUxhYmVsSXRlbXMiLCJiZWZvcmVVcGRhdGUiLCJ0aWNrT3B0cyIsInNhbXBsZVNpemUiLCJiZWZvcmVTZXREaW1lbnNpb25zIiwic2V0RGltZW5zaW9ucyIsImFmdGVyU2V0RGltZW5zaW9ucyIsImJlZm9yZURhdGFMaW1pdHMiLCJkZXRlcm1pbmVEYXRhTGltaXRzIiwiYWZ0ZXJEYXRhTGltaXRzIiwibWlubWF4Iiwia2VlcFplcm8iLCJfYWRkR3JhY2UiLCJiZWZvcmVCdWlsZFRpY2tzIiwiYnVpbGRUaWNrcyIsImFmdGVyQnVpbGRUaWNrcyIsInNhbXBsaW5nRW5hYmxlZCIsIl9jb252ZXJ0VGlja3NUb0xhYmVscyIsImJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24iLCJjYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiYWZ0ZXJDYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiZGV0ZXJtaW5lZE1heFRpY2tzIiwiX3RpY2tTaXplIiwibWF4U2NhbGUiLCJtYXhDaGFydCIsImRldGVybWluZU1heFRpY2tzIiwidGlja3NMaW1pdCIsIm1ham9ySW5kaWNlcyIsImVuYWJsZWQiLCJnZXRNYWpvckluZGljZXMiLCJudW1NYWpvckluZGljZXMiLCJmaXJzdCIsInNraXBNYWpvcnMiLCJldmVuTWFqb3JTcGFjaW5nIiwiZ2V0RXZlblNwYWNpbmciLCJmYWN0b3JzIiwiX2ZhY3Rvcml6ZSIsImNhbGN1bGF0ZVNwYWNpbmciLCJhdmdNYWpvclNwYWNpbmciLCJhZnRlckF1dG9Ta2lwIiwiYmVmb3JlRml0IiwiZml0IiwiYWZ0ZXJGaXQiLCJhZnRlclVwZGF0ZSIsInJldmVyc2VQaXhlbHMiLCJfYWxpZ25Ub1BpeGVscyIsImFsaWduVG9QaXhlbHMiLCJfY2FsbEhvb2tzIiwibm90aWZ5UGx1Z2lucyIsImJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiIsImdlbmVyYXRlVGlja0xhYmVscyIsImFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uIiwibnVtVGlja3MiLCJtYXhMYWJlbERpYWdvbmFsIiwiX2lzVmlzaWJsZSIsImxhYmVsU2l6ZXMiLCJfZ2V0TGFiZWxTaXplcyIsIm1heExhYmVsV2lkdGgiLCJ3aWRlc3QiLCJtYXhMYWJlbEhlaWdodCIsImhpZ2hlc3QiLCJhc2luIiwidGl0bGVPcHRzIiwiZ3JpZE9wdHMiLCJ0aXRsZUhlaWdodCIsInRpY2tQYWRkaW5nIiwiYW5nbGVSYWRpYW5zIiwibGFiZWxIZWlnaHQiLCJsYWJlbFdpZHRoIiwiX2NhbGN1bGF0ZVBhZGRpbmciLCJfaGFuZGxlTWFyZ2lucyIsImlzUm90YXRlZCIsImxhYmVsc0JlbG93VGlja3MiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0UmlnaHQiLCJpc0Z1bGxTaXplIiwiX2NvbXB1dGVMYWJlbFNpemVzIiwiY2FjaGVzIiwid2lkdGhzIiwiaGVpZ2h0cyIsInRpY2tGb250IiwiZm9udFN0cmluZyIsIm5lc3RlZExhYmVsIiwid2lkZXN0TGFiZWxTaXplIiwiaGlnaGVzdExhYmVsU2l6ZSIsIl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zIiwidmFsdWVBdCIsImlkeCIsImRlY2ltYWwiLCJnZXREZWNpbWFsRm9yUGl4ZWwiLCJnZXRCYXNlVmFsdWUiLCJjcmVhdGVUaWNrQ29udGV4dCIsIm9wdGlvblRpY2tzIiwicm90IiwiX2NvbXB1dGVHcmlkTGluZUl0ZW1zIiwidGwiLCJib3JkZXJPcHRzIiwiYXhpc1dpZHRoIiwiYXhpc0hhbGZXaWR0aCIsImFsaWduQm9yZGVyVmFsdWUiLCJib3JkZXJWYWx1ZSIsImFsaWduZWRMaW5lVmFsdWUiLCJ0eDEiLCJ0eTEiLCJ0eDIiLCJ0eTIiLCJ4MSIsInkxIiwieDIiLCJ5MiIsInBvc2l0aW9uQXhpc0lEIiwibGltaXQiLCJzdGVwIiwib3B0c0F0SW5kZXgiLCJvcHRzQXRJbmRleEJvcmRlciIsImxpbmVDb2xvciIsInRpY2tCb3JkZXJEYXNoIiwidGlja0JvcmRlckRhc2hPZmZzZXQiLCJ0aWNrQW5kUGFkZGluZyIsImhUaWNrQW5kUGFkZGluZyIsImxpbmVDb3VudCIsInRleHRPZmZzZXQiLCJfZ2V0WEF4aXNMYWJlbEFsaWdubWVudCIsIl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50IiwiaGFsZkNvdW50IiwidGlja1RleHRBbGlnbiIsImxhYmVsUGFkZGluZyIsIl9jb21wdXRlTGFiZWxBcmVhIiwiZHJhd0JhY2tncm91bmQiLCJmaW5kSW5kZXgiLCJkcmF3R3JpZCIsImRyYXdMaW5lIiwic2V0TGluZURhc2giLCJsaW5lRGFzaE9mZnNldCIsImRyYXdCb3JkZXIiLCJsYXN0TGluZVdpZHRoIiwiZHJhd0xhYmVscyIsInJlbmRlclRleHRPcHRpb25zIiwiZHJhd1RpdGxlIiwidGl0bGVYIiwidGl0bGVZIiwidGl0bGVBcmdzIiwidHoiLCJneiIsImJ6IiwiYXhpc0lEIiwiX21heERpZ2l0cyIsImZvbnRTaXplIiwiVHlwZWRSZWdpc3RyeSIsImlzRm9yVHlwZSIsImlzUHJvdG90eXBlT2YiLCJyZWdpc3RlciIsInBhcmVudFNjb3BlIiwiaXNJQ2hhcnRDb21wb25lbnQiLCJpdGVtRGVmYXVsdHMiLCJkZWZhdWx0Um91dGVzIiwicm91dGVzIiwicHJvcGVydHlQYXJ0cyIsInNvdXJjZU5hbWUiLCJzb3VyY2VTY29wZSIsInJvdXRlRGVmYXVsdHMiLCJyZWdpc3RlckRlZmF1bHRzIiwidW5yZWdpc3RlciIsIlJlZ2lzdHJ5IiwiX3R5cGVkUmVnaXN0cmllcyIsIl9lYWNoIiwiYWRkQ29udHJvbGxlcnMiLCJhZGRQbHVnaW5zIiwiYWRkU2NhbGVzIiwiZ2V0Q29udHJvbGxlciIsIl9nZXQiLCJnZXRQbHVnaW4iLCJnZXRTY2FsZSIsInJlbW92ZUNvbnRyb2xsZXJzIiwicmVtb3ZlRWxlbWVudHMiLCJyZW1vdmVQbHVnaW5zIiwicmVtb3ZlU2NhbGVzIiwidHlwZWRSZWdpc3RyeSIsImFyZyIsInJlZyIsIl9nZXRSZWdpc3RyeUZvclR5cGUiLCJfZXhlYyIsIml0ZW1SZWciLCJjb21wb25lbnQiLCJjYW1lbE1ldGhvZCIsIlBsdWdpblNlcnZpY2UiLCJfaW5pdCIsIm5vdGlmeSIsImhvb2siLCJfY3JlYXRlRGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9yIiwicGx1Z2luIiwiY2FuY2VsYWJsZSIsImludmFsaWRhdGUiLCJfb2xkQ2FjaGUiLCJfbm90aWZ5U3RhdGVDaGFuZ2VzIiwibG9jYWxJZHMiLCJhbGxQbHVnaW5zIiwiZ2V0T3B0cyIsInBsdWdpbk9wdHMiLCJjcmVhdGVEZXNjcmlwdG9ycyIsInByZXZpb3VzRGVzY3JpcHRvcnMiLCJzb21lIiwicGx1Z2luU2NvcGVLZXlzIiwiZ2V0SW5kZXhBeGlzIiwiZGF0YXNldERlZmF1bHRzIiwiaWRNYXRjaGVzQXhpcyIsImRldGVybWluZUF4aXMiLCJzY2FsZU9wdGlvbnMiLCJnZXRBeGlzRnJvbURhdGFzZXQiLCJpbml0T3B0aW9ucyIsImNoYXJ0RGVmYXVsdHMiLCJjb25maWdTY2FsZXMiLCJjaGFydEluZGV4QXhpcyIsInNjYWxlQ29uZiIsImVycm9yIiwiYm91bmREcyIsInJldHJpZXZlQXhpc0Zyb21EYXRhc2V0cyIsImRlZmF1bHRJZCIsImdldERlZmF1bHRTY2FsZUlERnJvbUF4aXMiLCJkZWZhdWx0U2NhbGVPcHRpb25zIiwiZGVmYXVsdElEIiwiZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRCIsIm1lcmdlU2NhbGVDb25maWciLCJpbml0RGF0YSIsImtleUNhY2hlIiwia2V5c0NhY2hlZCIsImNhY2hlZEtleXMiLCJnZW5lcmF0ZSIsImFkZElmRm91bmQiLCJDb25maWciLCJfY29uZmlnIiwiaW5pdENvbmZpZyIsIl9zY29wZUNhY2hlIiwiX3Jlc29sdmVyQ2FjaGUiLCJjbGVhckNhY2hlIiwiY2xlYXIiLCJkYXRhc2V0VHlwZSIsImFkZGl0aW9uYWxPcHRpb25TY29wZXMiLCJfY2FjaGVkU2NvcGVzIiwibWFpblNjb3BlIiwicmVzZXRDYWNoZSIsImtleUxpc3RzIiwiY2hhcnRPcHRpb25TY29wZXMiLCJzdWJQcmVmaXhlcyIsImdldFJlc29sdmVyIiwiaGFzRnVuY3Rpb24iLCJuZWVkQ29udGV4dCIsInJlc29sdmVyQ2FjaGUiLCJLTk9XTl9QT1NJVElPTlMiLCJwb3NpdGlvbklzSG9yaXpvbnRhbCIsImNvbXBhcmUyTGV2ZWwiLCJsMSIsImwyIiwib25BbmltYXRpb25zQ29tcGxldGUiLCJvbkNvbXBsZXRlIiwib25BbmltYXRpb25Qcm9ncmVzcyIsIm9uUHJvZ3Jlc3MiLCJnZXRDYW52YXMiLCJnZXRFbGVtZW50QnlJZCIsImluc3RhbmNlcyIsImdldENoYXJ0IiwibW92ZU51bWVyaWNLZXlzIiwiaW50S2V5IiwiaW52YWxpZGF0ZVBsdWdpbnMiLCJ1c2VyQ29uZmlnIiwiaW5pdGlhbENhbnZhcyIsImV4aXN0aW5nQ2hhcnQiLCJPZmZzY3JlZW5DYW52YXMiLCJfZGV0ZWN0UGxhdGZvcm0iLCJfb3B0aW9ucyIsIl9hc3BlY3RSYXRpbyIsIl9tZXRhc2V0cyIsIl9sYXN0RXZlbnQiLCJfbGlzdGVuZXJzIiwiX3Jlc3BvbnNpdmVMaXN0ZW5lcnMiLCJfc29ydGVkTWV0YXNldHMiLCJfcGx1Z2lucyIsIl9oaWRkZW5JbmRpY2VzIiwiYXR0YWNoZWQiLCJfZG9SZXNpemUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImRlYm91bmNlIiwicmVzaXplRGVsYXkiLCJfaW5pdGlhbGl6ZSIsImJpbmRFdmVudHMiLCJfcmVzaXplQmVmb3JlRHJhdyIsIl9yZXNpemUiLCJuZXdTaXplIiwibmV3UmF0aW8iLCJvblJlc2l6ZSIsInJlbmRlciIsImVuc3VyZVNjYWxlc0hhdmVJRHMiLCJheGlzT3B0aW9ucyIsImJ1aWxkT3JVcGRhdGVTY2FsZXMiLCJzY2FsZU9wdHMiLCJ1cGRhdGVkIiwiaXNSYWRpYWwiLCJkcG9zaXRpb24iLCJkdHlwZSIsInNjYWxlVHlwZSIsImhhc1VwZGF0ZWQiLCJfdXBkYXRlTWV0YXNldHMiLCJfZGVzdHJveURhdGFzZXRNZXRhIiwiX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzIiwiYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzIiwibmV3Q29udHJvbGxlcnMiLCJvcmRlciIsIkNvbnRyb2xsZXJDbGFzcyIsIl9yZXNldEVsZW1lbnRzIiwiYW5pbXNEaXNhYmxlZCIsIl91cGRhdGVTY2FsZXMiLCJfY2hlY2tFdmVudEJpbmRpbmdzIiwiX3VwZGF0ZUhpZGRlbkluZGljZXMiLCJfbWluUGFkZGluZyIsIl91cGRhdGVMYXlvdXQiLCJfdXBkYXRlRGF0YXNldHMiLCJfZXZlbnRIYW5kbGVyIiwiX3VwZGF0ZUhvdmVyU3R5bGVzIiwiZXhpc3RpbmdFdmVudHMiLCJuZXdFdmVudHMiLCJ1bmJpbmRFdmVudHMiLCJjaGFuZ2VzIiwiX2dldFVuaWZvcm1EYXRhQ2hhbmdlcyIsImRhdGFzZXRDb3VudCIsIm1ha2VTZXQiLCJjaGFuZ2VTZXQiLCJub0FyZWEiLCJfaWR4IiwiX3VwZGF0ZURhdGFzZXQiLCJsYXllcnMiLCJfZHJhd0RhdGFzZXRzIiwiX2RyYXdEYXRhc2V0IiwidXNlQ2xpcCIsImdldERhdGFzZXRBcmVhIiwiZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZSIsInNldERhdGFzZXRWaXNpYmlsaXR5IiwiX3VwZGF0ZVZpc2liaWxpdHkiLCJfc3RvcCIsImRlc3Ryb3kiLCJ0b0Jhc2U2NEltYWdlIiwidG9EYXRhVVJMIiwiYmluZFVzZXJFdmVudHMiLCJiaW5kUmVzcG9uc2l2ZUV2ZW50cyIsIl9hZGQiLCJfcmVtb3ZlIiwiZGV0YWNoZWQiLCJ1cGRhdGVIb3ZlclN0eWxlIiwiZ2V0QWN0aXZlRWxlbWVudHMiLCJzZXRBY3RpdmVFbGVtZW50cyIsImFjdGl2ZUVsZW1lbnRzIiwibGFzdEFjdGl2ZSIsInBsdWdpbklkIiwicmVwbGF5IiwiaG92ZXJPcHRpb25zIiwiZGVhY3RpdmF0ZWQiLCJhY3RpdmF0ZWQiLCJpbkNoYXJ0QXJlYSIsImV2ZW50RmlsdGVyIiwiX2hhbmRsZUV2ZW50IiwiX2dldEFjdGl2ZUVsZW1lbnRzIiwiaXNDbGljayIsIl9pc0NsaWNrRXZlbnQiLCJsYXN0RXZlbnQiLCJkZXRlcm1pbmVMYXN0RXZlbnQiLCJyVGhldGFUb1hZIiwidGhldGEiLCJwYXRoQXJjIiwicGl4ZWxNYXJnaW4iLCJpbm5lclIiLCJzcGFjaW5nT2Zmc2V0IiwiYXZOb2dTcGFjaW5nUmFkaXVzIiwiYW5nbGVPZmZzZXQiLCJvdXRlclN0YXJ0Iiwib3V0ZXJFbmQiLCJpbm5lclN0YXJ0IiwiaW5uZXJFbmQiLCJhbmdsZURlbHRhIiwiYm9yZGVyUmFkaXVzIiwiaGFsZlRoaWNrbmVzcyIsImlubmVyTGltaXQiLCJjb21wdXRlT3V0ZXJMaW1pdCIsIm91dGVyQXJjTGltaXQiLCJwYXJzZUJvcmRlclJhZGl1cyQxIiwib3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzIiwib3V0ZXJFbmRBZGp1c3RlZFJhZGl1cyIsIm91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlIiwib3V0ZXJFbmRBZGp1c3RlZEFuZ2xlIiwiaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzIiwiaW5uZXJFbmRBZGp1c3RlZFJhZGl1cyIsImlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlIiwiaW5uZXJFbmRBZGp1c3RlZEFuZ2xlIiwib3V0ZXJNaWRBZGp1c3RlZEFuZ2xlIiwicENlbnRlciIsInA0IiwiaW5uZXJNaWRBZGp1c3RlZEFuZ2xlIiwicDgiLCJvdXRlclN0YXJ0WCIsIm91dGVyU3RhcnRZIiwib3V0ZXJFbmRYIiwib3V0ZXJFbmRZIiwic2V0U3R5bGUiLCJsaW5lQ2FwIiwibGluZUpvaW4iLCJwYXRoVmFycyIsInBhcmFtc1N0YXJ0IiwicGFyYW1zRW5kIiwic2VnbWVudFN0YXJ0Iiwic2VnbWVudEVuZCIsIm91dHNpZGUiLCJwYXRoU2VnbWVudCIsImxpbmVNZXRob2QiLCJzdGVwcGVkIiwiZ2V0TGluZU1ldGhvZCIsImZhc3RQYXRoU2VnbWVudCIsInByZXZYIiwibGFzdFkiLCJhdmdYIiwiY291bnRYIiwicG9pbnRJbmRleCIsImRyYXdYIiwidHJ1bmNYIiwiX2dldFNlZ21lbnRNZXRob2QiLCJ1c2VQYXRoMkQiLCJQYXRoMkQiLCJMaW5lRWxlbWVudCIsIl9wYXRoIiwiX3BvaW50cyIsIl9zZWdtZW50cyIsIl9wb2ludHNVcGRhdGVkIiwic2VnbWVudE9wdGlvbnMiLCJmaW5kU3RhcnRBbmRFbmQiLCJjaGFydENvbnRleHQiLCJiYXNlU3R5bGUiLCJhZGRTdHlsZSIsInN0IiwiZGlyIiwicDAiLCJwMERhdGFJbmRleCIsInAxRGF0YUluZGV4IiwiZG9TcGxpdEJ5U3R5bGVzIiwic3BsaXRCeVN0eWxlcyIsInNvbGlkU2VnbWVudHMiLCJfY29tcHV0ZVNlZ21lbnRzIiwiX2ludGVycG9sYXRlIiwiX2dldEludGVycG9sYXRpb25NZXRob2QiLCJpbnRlcnBvbGF0ZWQiLCJzZWdtZW50TWV0aG9kIiwicGF0aCIsInN0cm9rZVBhdGhXaXRoQ2FjaGUiLCJzdHJva2VQYXRoRGlyZWN0IiwiaW5SYW5nZSQxIiwiaGl0UmFkaXVzIiwiZ2V0QmFyQm91bmRzIiwiYmFyIiwiaGFsZiIsInNraXBPckxpbWl0Iiwic2tpcFgiLCJza2lwWSIsImFkZE5vcm1hbFJlY3RQYXRoIiwiaW5mbGF0ZVJlY3QiLCJhbW91bnQiLCJyZWZSZWN0IiwiQXJjRWxlbWVudCIsImZ1bGxDaXJjbGVzIiwiY2hhcnRYIiwiY2hhcnRZIiwickFkanVzdCIsImJldHdlZW5BbmdsZXMiLCJ3aXRoaW5SYWRpdXMiLCJoYWxmQW5nbGUiLCJoYWxmUmFkaXVzIiwicmFkaXVzT2Zmc2V0IiwiZHJhd0FyYyIsImlubmVyIiwiYW5nbGVNYXJnaW4iLCJjbGlwQXJjIiwiQmFyRWxlbWVudCIsIm91dGVyIiwibWF4VyIsIm1heEgiLCJwYXJzZUJvcmRlcldpZHRoIiwibWF4UiIsImVuYWJsZUJvcmRlciIsInBhcnNlQm9yZGVyUmFkaXVzIiwiYm91bmRpbmdSZWN0cyIsImFkZFJlY3RQYXRoIiwibW91c2VYIiwibW91c2VZIiwiaW5YUmFuZ2UiLCJpbllSYW5nZSIsIlBvaW50RWxlbWVudCIsImhvdmVyUmFkaXVzIiwiQk9SREVSX0NPTE9SUyIsIkJBQ0tHUk9VTkRfQ09MT1JTIiwiZ2V0Qm9yZGVyQ29sb3IiLCJnZXRCYWNrZ3JvdW5kQ29sb3IiLCJjb250YWluc0NvbG9yc0RlZmluaXRpb25zIiwicGx1Z2luX2NvbG9ycyIsImZvcmNlT3ZlcnJpZGUiLCJfYXJncyIsImNoYXJ0T3B0aW9ucyIsImNvbG9yaXplciIsImNvbG9yaXplRG91Z2hudXREYXRhc2V0IiwiY29sb3JpemVQb2xhckFyZWFEYXRhc2V0IiwiY29sb3JpemVEZWZhdWx0RGF0YXNldCIsImdldENvbG9yaXplciIsImNsZWFuRGVjaW1hdGVkRGF0YXNldCIsImNsZWFuRGVjaW1hdGVkRGF0YSIsInBsdWdpbl9kZWNpbWF0aW9uIiwiYWxnb3JpdGhtIiwiYmVmb3JlRWxlbWVudHNVcGRhdGUiLCJ4QXhpcyIsImRlY2ltYXRlZCIsImdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHNTaW1wbGlmaWVkIiwidGhyZXNob2xkIiwic2FtcGxlcyIsImJ1Y2tldFdpZHRoIiwic2FtcGxlZEluZGV4IiwiZW5kSW5kZXgiLCJtYXhBcmVhUG9pbnQiLCJtYXhBcmVhIiwibmV4dEEiLCJhdmdZIiwiYXZnUmFuZ2VTdGFydCIsImF2Z1JhbmdlRW5kIiwiYXZnUmFuZ2VMZW5ndGgiLCJyYW5nZU9mZnMiLCJyYW5nZVRvIiwicG9pbnRBeCIsInBvaW50QXkiLCJsdHRiRGVjaW1hdGlvbiIsIm1pbkluZGV4IiwibWF4SW5kZXgiLCJzdGFydEluZGV4IiwieE1pbiIsImR4IiwibGFzdEluZGV4IiwiaW50ZXJtZWRpYXRlSW5kZXgxIiwiaW50ZXJtZWRpYXRlSW5kZXgyIiwibWluTWF4RGVjaW1hdGlvbiIsIl9nZXRCb3VuZHMiLCJfZmluZFNlZ21lbnRFbmQiLCJfZ2V0RWRnZSIsIl9jcmVhdGVCb3VuZGFyeUxpbmUiLCJib3VuZGFyeSIsImxpbmVQb2ludHMiLCJfcG9pbnRzRnJvbVNlZ21lbnRzIiwiX3Nob3VsZEFwcGx5RmlsbCIsIl9yZXNvbHZlVGFyZ2V0IiwicHJvcGFnYXRlIiwidmlzaXRlZCIsIl9kZWNvZGVGaWxsIiwiZmlsbE9wdGlvbiIsInBhcnNlRmlsbE9wdGlvbiIsImZpcnN0Q2giLCJkZWNvZGVUYXJnZXRJbmRleCIsImFkZFBvaW50c0JlbG93Iiwic291cmNlUG9pbnQiLCJsaW5lc0JlbG93IiwicG9zdHBvbmVkIiwiZmluZFBvaW50IiwidW5zaGlmdCIsInBvaW50VmFsdWUiLCJmaXJzdFZhbHVlIiwibGFzdFZhbHVlIiwic2ltcGxlQXJjIiwiX2RyYXdmaWxsIiwiZ2V0TGluZUJ5SW5kZXgiLCJzb3VyY2VQb2ludHMiLCJiZWxvdyIsImdldExpbmVzQmVsb3ciLCJfYnVpbGRTdGFja0xpbmUiLCJfZ2V0VGFyZ2V0VmFsdWUiLCJjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeSIsIl9nZXRUYXJnZXRQaXhlbCIsImNvbXB1dGVMaW5lYXJCb3VuZGFyeSIsImNvbXB1dGVCb3VuZGFyeSIsImxpbmVPcHRzIiwiYWJvdmUiLCJjbGlwVmVydGljYWwiLCJkb0ZpbGwiLCJjbGlwWSIsImxpbmVMb29wIiwidHBvaW50cyIsInRhcmdldFNlZ21lbnRzIiwidGd0Iiwic3ViQm91bmRzIiwiZmlsbFNvdXJjZXMiLCJmaWxsU291cmNlIiwic3JjIiwibm90U2hhcGUiLCJjbGlwQm91bmRzIiwiaW50ZXJwb2xhdGVkTGluZVRvIiwidGFyZ2V0TG9vcCIsImludGVycG9sYXRlZFBvaW50IiwiYWZ0ZXJEYXRhc2V0c1VwZGF0ZSIsIiRmaWxsZXIiLCJiZWZvcmVEcmF3IiwiZHJhd1RpbWUiLCJiZWZvcmVEYXRhc2V0c0RyYXciLCJiZWZvcmVEYXRhc2V0RHJhdyIsImdldEJveFNpemUiLCJsYWJlbE9wdHMiLCJib3hIZWlnaHQiLCJib3hXaWR0aCIsInVzZVBvaW50U3R5bGUiLCJwb2ludFN0eWxlV2lkdGgiLCJpdGVtSGVpZ2h0IiwiTGVnZW5kIiwiX2FkZGVkIiwibGVnZW5kSGl0Qm94ZXMiLCJfaG92ZXJlZEl0ZW0iLCJkb3VnaG51dE1vZGUiLCJsZWdlbmRJdGVtcyIsImNvbHVtblNpemVzIiwibGluZVdpZHRocyIsImJ1aWxkTGFiZWxzIiwibGFiZWxGb250IiwiX2NvbXB1dGVUaXRsZUhlaWdodCIsIl9maXRSb3dzIiwiX2ZpdENvbHMiLCJoaXRib3hlcyIsInRvdGFsSGVpZ2h0Iiwicm93IiwiX2l0ZW1IZWlnaHQiLCJoZWlnaHRMaW1pdCIsInRvdGFsV2lkdGgiLCJjdXJyZW50Q29sV2lkdGgiLCJjdXJyZW50Q29sSGVpZ2h0IiwiY29sIiwibGVnZW5kSXRlbVRleHQiLCJjYWxjdWxhdGVJdGVtV2lkdGgiLCJmb250TGluZUhlaWdodCIsImNhbGN1bGF0ZUxlZ2VuZEl0ZW1IZWlnaHQiLCJjYWxjdWxhdGVJdGVtSGVpZ2h0IiwiY2FsY3VsYXRlSXRlbVNpemUiLCJhZGp1c3RIaXRCb3hlcyIsInJ0bEhlbHBlciIsImhpdGJveCIsIl9kcmF3IiwiZGVmYXVsdENvbG9yIiwiaGFsZkZvbnRTaXplIiwiY3Vyc29yIiwidGV4dERpcmVjdGlvbiIsImxpbmVEYXNoIiwiZHJhd09wdGlvbnMiLCJTUVJUMiIsInlCb3hUb3AiLCJ4Qm94TGVmdCIsImRyYXdMZWdlbmRCb3giLCJfdGV4dFgiLCJ0aXRsZUZvbnQiLCJ0aXRsZVBhZGRpbmciLCJ0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZSIsIl9nZXRMZWdlbmRJdGVtQXQiLCJoaXRCb3giLCJsaCIsImhhbmRsZUV2ZW50Iiwib25MZWF2ZSIsImlzTGlzdGVuZWQiLCJob3ZlcmVkSXRlbSIsInNhbWVJdGVtIiwicGx1Z2luX2xlZ2VuZCIsIl9lbGVtZW50IiwiYWZ0ZXJFdmVudCIsImNpIiwidXNlQm9yZGVyUmFkaXVzIiwiVGl0bGUiLCJfcGFkZGluZyIsInRleHRTaXplIiwiX2RyYXdBcmdzIiwiZm9udE9wdHMiLCJwbHVnaW5fdGl0bGUiLCJ0aXRsZUJsb2NrIiwiY3JlYXRlVGl0bGUiLCJXZWFrTWFwIiwicGx1Z2luX3N1YnRpdGxlIiwicG9zaXRpb25lcnMiLCJhdmVyYWdlIiwiZXZlbnRQb3NpdGlvbiIsIm5lYXJlc3RFbGVtZW50IiwidHAiLCJwdXNoT3JDb25jYXQiLCJ0b1B1c2giLCJzcGxpdE5ld2xpbmVzIiwiU3RyaW5nIiwiY3JlYXRlVG9vbHRpcEl0ZW0iLCJmb3JtYXR0ZWRWYWx1ZSIsImdldFRvb2x0aXBTaXplIiwidG9vbHRpcCIsImJvZHkiLCJmb290ZXIiLCJib2R5Rm9udCIsImZvb3RlckZvbnQiLCJ0aXRsZUxpbmVDb3VudCIsImZvb3RlckxpbmVDb3VudCIsImJvZHlMaW5lSXRlbUNvdW50IiwiY29tYmluZWRCb2R5TGVuZ3RoIiwiYm9keUl0ZW0iLCJiZWZvcmUiLCJhZnRlciIsImJlZm9yZUJvZHkiLCJhZnRlckJvZHkiLCJ0aXRsZVNwYWNpbmciLCJ0aXRsZU1hcmdpbkJvdHRvbSIsImRpc3BsYXlDb2xvcnMiLCJib2R5U3BhY2luZyIsImZvb3Rlck1hcmdpblRvcCIsImZvb3RlclNwYWNpbmciLCJ3aWR0aFBhZGRpbmciLCJtYXhMaW5lV2lkdGgiLCJkZXRlcm1pbmVYQWxpZ24iLCJ5QWxpZ24iLCJjaGFydFdpZHRoIiwieEFsaWduIiwiY2FyZXQiLCJjYXJldFNpemUiLCJjYXJldFBhZGRpbmciLCJkb2VzTm90Rml0V2l0aEFsaWduIiwiZGV0ZXJtaW5lQWxpZ25tZW50IiwiZGV0ZXJtaW5lWUFsaWduIiwiZ2V0QmFja2dyb3VuZFBvaW50IiwiYWxpZ25tZW50IiwicGFkZGluZ0FuZFNpemUiLCJhbGlnblgiLCJhbGlnblkiLCJnZXRBbGlnbmVkWCIsImdldEJlZm9yZUFmdGVyQm9keUxpbmVzIiwib3ZlcnJpZGVDYWxsYmFja3MiLCJkZWZhdWx0Q2FsbGJhY2tzIiwiYmVmb3JlVGl0bGUiLCJ0b29sdGlwSXRlbXMiLCJsYWJlbENvdW50IiwiYWZ0ZXJUaXRsZSIsImJlZm9yZUxhYmVsIiwidG9vbHRpcEl0ZW0iLCJsYWJlbENvbG9yIiwibGFiZWxUZXh0Q29sb3IiLCJib2R5Q29sb3IiLCJsYWJlbFBvaW50U3R5bGUiLCJhZnRlckxhYmVsIiwiYmVmb3JlRm9vdGVyIiwiYWZ0ZXJGb290ZXIiLCJpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayIsIlRvb2x0aXAiLCJvcGFjaXR5IiwiX2V2ZW50UG9zaXRpb24iLCJfc2l6ZSIsIl9jYWNoZWRBbmltYXRpb25zIiwiX3Rvb2x0aXBJdGVtcyIsImRhdGFQb2ludHMiLCJjYXJldFgiLCJjYXJldFkiLCJsYWJlbENvbG9ycyIsImxhYmVsUG9pbnRTdHlsZXMiLCJsYWJlbFRleHRDb2xvcnMiLCJnZXRUaXRsZSIsImdldEJlZm9yZUJvZHkiLCJnZXRCb2R5IiwiYm9keUl0ZW1zIiwic2NvcGVkIiwiZ2V0QWZ0ZXJCb2R5IiwiZ2V0Rm9vdGVyIiwiX2NyZWF0ZUl0ZW1zIiwiaXRlbVNvcnQiLCJwb3NpdGlvbkFuZFNpemUiLCJiYWNrZ3JvdW5kUG9pbnQiLCJleHRlcm5hbCIsImRyYXdDYXJldCIsInRvb2x0aXBQb2ludCIsImNhcmV0UG9zaXRpb24iLCJnZXRDYXJldFBvc2l0aW9uIiwieDMiLCJ5MyIsInB0WCIsInB0WSIsInRpdGxlQ29sb3IiLCJfZHJhd0NvbG9yQm94IiwiY29sb3JYIiwicnRsQ29sb3JYIiwieU9mZlNldCIsImNvbG9yWSIsIm11bHRpS2V5QmFja2dyb3VuZCIsIm91dGVyWCIsImlubmVyWCIsInN0cm9rZVJlY3QiLCJkcmF3Qm9keSIsImJvZHlBbGlnbiIsImJvZHlMaW5lSGVpZ2h0IiwieExpbmVQYWRkaW5nIiwiZmlsbExpbmVPZlRleHQiLCJib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiIsInRleHRDb2xvciIsImRyYXdGb290ZXIiLCJmb290ZXJBbGlnbiIsImZvb3RlckNvbG9yIiwidG9vbHRpcFNpemUiLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiX3VwZGF0ZUFuaW1hdGlvblRhcmdldCIsImFuaW1YIiwiYW5pbVkiLCJfd2lsbFJlbmRlciIsImhhc1Rvb2x0aXBDb250ZW50IiwiZ2xvYmFsQWxwaGEiLCJwb3NpdGlvbkNoYW5nZWQiLCJfcG9zaXRpb25DaGFuZ2VkIiwiX2lnbm9yZVJlcGxheUV2ZW50cyIsInBsdWdpbl90b29sdGlwIiwiYWZ0ZXJJbml0IiwiYWZ0ZXJEcmF3IiwiQ29sb3JzIiwiRGVjaW1hdGlvbiIsIkZpbGxlciIsIlN1YlRpdGxlIiwiX2dldExhYmVsRm9yVmFsdWUiLCJyZWxhdGl2ZUxhYmVsU2l6ZSIsIm1pblNwYWNpbmciLCJMaW5lYXJTY2FsZUJhc2UiLCJfc3RhcnRWYWx1ZSIsIl9lbmRWYWx1ZSIsIl92YWx1ZVJhbmdlIiwiaGFuZGxlVGlja1JhbmdlT3B0aW9ucyIsInNldE1pbiIsInNldE1heCIsIm1pblNpZ24iLCJtYXhTaWduIiwiZ2V0VGlja0xpbWl0IiwibWF4VGlja3MiLCJzdGVwU2l6ZSIsImNvbXB1dGVUaWNrTGltaXQiLCJnZW5lcmF0aW9uT3B0aW9ucyIsImRhdGFSYW5nZSIsInByZWNpc2lvbiIsIm1heERpZ2l0cyIsImluY2x1ZGVCb3VuZHMiLCJ1bml0IiwibWF4U3BhY2VzIiwicm1pbiIsInJtYXgiLCJjb3VudERlZmluZWQiLCJuaWNlTWluIiwibmljZU1heCIsIm51bVNwYWNlcyIsInJvdW5kZWQiLCJhbG1vc3RXaG9sZSIsImRlY2ltYWxQbGFjZXMiLCJnZW5lcmF0ZVRpY2tzJDEiLCJMaW5lYXJTY2FsZSIsImxvZzEwRmxvb3IiLCJjaGFuZ2VFeHBvbmVudCIsImlzTWFqb3IiLCJ0aWNrVmFsIiwic3RlcHMiLCJyYW5nZUV4cCIsInJhbmdlU3RlcCIsIkxvZ2FyaXRobWljU2NhbGUiLCJfemVybyIsIm1pbkV4cCIsImV4cCIsInN0YXJ0RXhwIiwibGFzdFRpY2siLCJnZW5lcmF0ZVRpY2tzIiwiZ2V0VGlja0JhY2tkcm9wSGVpZ2h0IiwiZGV0ZXJtaW5lTGltaXRzIiwidXBkYXRlTGltaXRzIiwibGltaXRzIiwiaExpbWl0cyIsInZMaW1pdHMiLCJjcmVhdGVQb2ludExhYmVsSXRlbSIsIml0ZW1PcHRzIiwib3V0ZXJEaXN0YW5jZSIsImRyYXdpbmdBcmVhIiwiZXh0cmEiLCJhZGRpdGlvbmFsQW5nbGUiLCJwb2ludExhYmVsUG9zaXRpb24iLCJnZXRQb2ludFBvc2l0aW9uIiwieUZvckFuZ2xlIiwiZ2V0VGV4dEFsaWduRm9yQW5nbGUiLCJpc05vdE92ZXJsYXBwZWQiLCJkcmF3UG9pbnRMYWJlbEJveCIsImJhY2tkcm9wTGVmdCIsImJhY2tkcm9wVG9wIiwiYmFja2Ryb3BXaWR0aCIsImJhY2tkcm9wSGVpZ2h0IiwicGF0aFJhZGl1c0xpbmUiLCJSYWRpYWxMaW5lYXJTY2FsZSIsImFuaW1hdGUiLCJjZW50ZXJQb2ludExhYmVscyIsIl9wb2ludExhYmVscyIsIl9wb2ludExhYmVsSXRlbXMiLCJ2YWx1ZUNvdW50IiwicG9pbnRMYWJlbE9wdHMiLCJnZXRQb2ludExhYmVsQ29udGV4dCIsInBsRm9udCIsInNldENlbnRlclBvaW50IiwiYnVpbGRQb2ludExhYmVsSXRlbXMiLCJmaXRXaXRoUG9pbnRMYWJlbHMiLCJsZWZ0TW92ZW1lbnQiLCJyaWdodE1vdmVtZW50IiwidG9wTW92ZW1lbnQiLCJib3R0b21Nb3ZlbWVudCIsInNjYWxpbmdGYWN0b3IiLCJnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlciIsInNjYWxlZERpc3RhbmNlIiwicG9pbnRMYWJlbCIsImNyZWF0ZVBvaW50TGFiZWxDb250ZXh0IiwiZGlzdGFuY2VGcm9tQ2VudGVyIiwiZ2V0QmFzZVBvc2l0aW9uIiwiZ2V0UG9pbnRMYWJlbFBvc2l0aW9uIiwiZHJhd1BvaW50TGFiZWxzIiwiZ3JpZExpbmVPcHRzIiwiZHJhd1JhZGl1c0xpbmUiLCJJTlRFUlZBTFMiLCJtaWxsaXNlY29uZCIsImNvbW1vbiIsInNlY29uZCIsIm1pbnV0ZSIsImhvdXIiLCJkYXkiLCJ3ZWVrIiwibW9udGgiLCJxdWFydGVyIiwieWVhciIsIlVOSVRTIiwic29ydGVyIiwiYWRhcHRlciIsIl9hZGFwdGVyIiwicGFyc2VyIiwiaXNvV2Vla2RheSIsIl9wYXJzZU9wdHMiLCJkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzIiwibWluVW5pdCIsImNhcGFjaXR5IiwiaW50ZXJ2YWwiLCJNQVhfU0FGRV9JTlRFR0VSIiwiYWRkVGljayIsInRpbWUiLCJ0aW1lc3RhbXBzIiwidGlja3NGcm9tVGltZXN0YW1wcyIsIm1ham9yVW5pdCIsInNldE1ham9yVGlja3MiLCJUaW1lU2NhbGUiLCJkaXNwbGF5Rm9ybWF0cyIsIl91bml0IiwiX21ham9yVW5pdCIsIl9vZmZzZXRzIiwiX25vcm1hbGl6ZWQiLCJub3JtYWxpemVkIiwiX2FwcGx5Qm91bmRzIiwiX2dldExhYmVsQm91bmRzIiwiZ2V0TGFiZWxUaW1lc3RhbXBzIiwidGltZU9wdHMiLCJfZ2VuZXJhdGUiLCJfZmlsdGVyQmV0d2VlbiIsIl9nZXRMYWJlbENhcGFjaXR5IiwiZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmciLCJkZXRlcm1pbmVNYWpvclVuaXQiLCJpbml0T2Zmc2V0cyIsIm9mZnNldEFmdGVyQXV0b3NraXAiLCJnZXREZWNpbWFsRm9yVmFsdWUiLCJ3ZWVrZGF5IiwiaGFzV2Vla2RheSIsImdldERhdGFUaW1lc3RhbXBzIiwidG9vbHRpcEZvcm1hdCIsImRhdGV0aW1lIiwiZm10IiwiX3RpY2tGb3JtYXRGdW5jdGlvbiIsIm1pbm9yRm9ybWF0IiwibWFqb3JGb3JtYXQiLCJvZmZzZXRzIiwiX2dldExhYmVsU2l6ZSIsInRpY2tzT3B0cyIsInRpY2tMYWJlbFdpZHRoIiwiY29zUm90YXRpb24iLCJzaW5Sb3RhdGlvbiIsInRpY2tGb250U2l6ZSIsImV4YW1wbGVUaW1lIiwiZXhhbXBsZUxhYmVsIiwicHJldlNvdXJjZSIsIm5leHRTb3VyY2UiLCJwcmV2VGFyZ2V0IiwibmV4dFRhcmdldCIsInNwYW4iLCJDYXRlZ29yeVNjYWxlIiwiX2FkZGVkTGFiZWxzIiwiYWRkZWQiLCJhZGRlZExhYmVscyIsImFkZElmU3RyaW5nIiwibGFzdEluZGV4T2YiLCJmaW5kT3JBZGRMYWJlbCIsIlRpbWVTZXJpZXNTY2FsZSIsIl90YWJsZSIsIl9taW5Qb3MiLCJfdGFibGVSYW5nZSIsIl9nZXRUaW1lc3RhbXBzRm9yVGFibGUiLCJidWlsZExvb2t1cFRhYmxlIiwicmVnaXN0ZXJhYmxlcyIsImdldFRpbWVJblpvbmVMaXN0IiwiYnV0dG9uIiwiY2hhcnRJdGVtIiwiY3JlYXRlSG91cnNDaGFydCIsImlzTWludXRlcyIsImNyZWF0ZU1pbnV0ZXNDaGFydCIsInRvZ2dsZVRpbWVVbml0cyIsInRvZ2dsZUNoYXJ0VHlwZSIsImNyZWF0ZVBpZUNoYXJ0IiwiZ2V0Wm9uZSIsImhlYXJ0UmF0ZSIsInBvd2VyQXNOdW1iZXIiLCJzdHJlYW1zIiwidGltZUluWm9uZURpY3QiLCJoclN0cmVhbSIsImhlYXJ0UmF0ZURpY3QiLCJ0aW1lQXRIckluU2Vjb25kcyIsIkNoYXJ0R2VuZXJhdG9yIiwicG93ZXJTdHJlYW1zIiwicG93ZXJTdHJlYW0iLCJwb3dlckRpY3QiLCJ0aW1lQXRQb3dlckluU2Vjb25kcyIsInBvd2VyIiwibWFpbiIsInBvd2VyVG9nZ2xlQ2hhcnRCdXR0b24iLCJoclRvZ2dsZUNoYXJ0QnV0dG9uIiwiY2xpZW50IiwiU3RyYXZhQXBpQ2xpZW50IiwiaHJTdHJlYW1zIiwibG9nIiwicG93ZXJDaGFydEdlbmVyYXRvciIsIlBvd2VyQ2hhcnRHZW5lcmF0b3IiLCJockNoYXJ0R2VuZXJhdG9yIiwiSGVhcnRSYXRlQ2hhcnRHZW5lcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9