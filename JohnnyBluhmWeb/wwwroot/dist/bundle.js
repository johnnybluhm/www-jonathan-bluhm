(()=>{"use strict";var t=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))},e=function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(u){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}},n=function(){function n(){}return n.prototype.getPowerData=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllPowerStreams")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},n.prototype.getHeartRateData=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllHrStreams")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},n.prototype.getActivities=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllActivities")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},n.prototype.getDetailedActivities=function(){return t(this,void 0,void 0,(function(){return e(this,(function(t){switch(t.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllDetailedActivities")];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},n}();function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function o(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function i(t){o(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===r(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function a(t,e){o(2,arguments);var n=i(t),r=i(e);return n.getTime()>r.getTime()}function s(t,e){o(2,arguments);var n=i(t),r=i(e);return n.getTime()<r.getTime()}var u=function(){function t(){}return t.prototype.getTimeInZoneList=function(t){for(var e={1:0,2:0,3:0,4:0,5:0,6:0,7:0},n=0,r=t;n<r.length;n++){var o=r[n];for(var i in o.powerStream){var a=o.powerStream[i];e[this.getZone(i).toString()]+=Number.parseInt(a)}}return Object.values(e)},t.prototype.getZone=function(t){var e=Number.parseInt(t);return e<=132?1:e>132&&e<=180?2:e>180&&e<=216?3:e>216&&e<=252?4:e>252&&e<=288?5:e>288&&e<=360?6:e>=360?7:1},t.prototype.setPowerZones=function(t){this.powerZones[0]=.55*t,this.powerZones[1]=.75*t,this.powerZones[2]=.87*t,this.powerZones[3]=1.05*t,this.powerZones[4]=1.2*t,this.powerZones[5]=1.5*t,this.powerZones[6]=2*t},t}(),c=function(){function t(){}return t.prototype.getTimeInZoneList=function(t){for(var e={1:0,2:0,3:0,4:0,5:0},n=0,r=t;n<r.length;n++){var o=r[n];for(var i in o.hrStream){var a=o.hrStream[i];e[this.getZone(i).toString()]+=Number.parseInt(a)}}return Object.values(e)},t.prototype.getZone=function(t){var e=Number.parseInt(t);return e<=118?1:e>118&&e<=156?2:e>156&&e<=175?3:e>175&&e<=194?4:e>194?5:1},t.prototype.setHrZones=function(t){this.hrZones[0]=.5*t,this.hrZones[1]=.6*t,this.hrZones[2]=.7*t,this.hrZones[3]=.8*t,this.hrZones[4]=.9*t},t}(),l=function(){function t(t){this.allActivities=t,this.filteredActivities=t}return t.prototype.filterByDate=function(t,e){this.filteredActivities=[];for(var n=0,r=this.allActivities;n<r.length;n++){var o=r[n],i=Date.parse(o.start_date_local);Date.parse(t.toDateString()),a(i,Date.parse(t.toDateString()))&&s(i,Date.parse(e.toDateString()))&&this.filteredActivities.push(o)}this.setTimeInZoneLists()},t.prototype.setTimeInZoneLists=function(){this.powerTimeInZone=(new u).getTimeInZoneList(this.filteredActivities),this.hrTimeInZone=(new c).getTimeInZoneList(this.filteredActivities)},t}();function f(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function h(t,e){return o(2,arguments),function(t,e){o(2,arguments);var n=i(t),r=f(e);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}(t,-f(e))}function p(t,e){return o(2,arguments),function(t,e){return o(2,arguments),function(t,e){o(2,arguments);var n=i(t),r=f(e);if(isNaN(r))return new Date(NaN);if(!r)return n;var a=n.getDate(),s=new Date(n.getTime());return s.setMonth(n.getMonth()+r+1,0),a>=s.getDate()?s:(n.setFullYear(s.getFullYear(),s.getMonth(),a),n)}(t,12*f(e))}(t,-f(e))}var v=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))},g=function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(u){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}};function y(){return v(this,void 0,void 0,(function(){var t,e,r,o,i,a,s,u,c,f;return g(this,(function(v){switch(v.label){case 0:return document.getElementById("convertPower"),document.getElementById("convertHr"),[4,(t=new n).getPowerData()];case 1:return e=v.sent(),[4,t.getHeartRateData()];case 2:return r=v.sent(),[4,t.getActivities()];case 3:return o=v.sent(),[4,t.getDetailedActivities()];case 4:return i=v.sent(),console.log(o),console.log(i),console.log(r),console.log(e),function(t,e,n){for(var r=function(n){var r=e.find((function(t){return t.id==n.id})),o=t.find((function(t){return t.id==n.id}));n.powerStream=null==o?void 0:o.powerDict,n.hrStream=null==r?void 0:r.heartRateDict},o=0,i=n;o<i.length;o++)r(i[o])}(e,r,o),(a=new l(o)).setTimeInZoneLists(),a.filterByDate(h(new Date,30),new Date),s=a.hrTimeInZone,console.log("After 30 days filter"),console.log(s),a.filterByDate(h(new Date,90),new Date),u=a.hrTimeInZone,console.log("After 90 days filter"),console.log(u),a.filterByDate(p(new Date,1),new Date),c=a.hrTimeInZone,console.log("After 1 year filter"),console.log(c),a.filterByDate(p(new Date,5),new Date),f=a.hrTimeInZone,console.log("All time"),console.log(f),[2]}}))}))}v(void 0,void 0,void 0,(function(){var t;return g(this,(function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,y()];case 1:return e.sent(),[3,3];case 2:return t=e.sent(),console.error(t),[3,3];case 3:return[2]}}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Y2VzIjpbIndlYnBhY2s6Ly9zdHJhdmEvLi9zcmMvYXBpQ2xpZW50LnRzIiwid2VicGFjazovL3N0cmF2YS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vc3RyYXZhLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzQWZ0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3RyYXZhLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0JlZm9yZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9zcmMvcG93ZXJab25lQ2FsY3VsYXRvci50cyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9zcmMvaHJab25lQ2FsY3VsYXRvci50cyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9zcmMvZGF0YUNhbGN1bGF0b3IudHMiLCJ3ZWJwYWNrOi8vc3RyYXZhLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N1YkRheXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3RyYXZhLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGREYXlzL2luZGV4LmpzIiwid2VicGFjazovL3N0cmF2YS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViWWVhcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3RyYXZhLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRZZWFycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZE1vbnRocy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHJhdmEvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGV0YWlsZWRBY3Rpdml0eSB9IGZyb20gXCIuL21vZGVscy9kZXRhaWxlZEFjdGl2aXR5XCI7XHJcbmltcG9ydCB7IFN0cmF2YUFjdGl2aXR5IH0gZnJvbSBcIi4vbW9kZWxzL3N0cmF2YUFjdGl2aXR5XCI7XHJcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gXCIuL21vZGVscy9zdHJlYW1cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdHJhdmFBcGlDbGllbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0UG93ZXJEYXRhKCk6IFByb21pc2U8U3RyZWFtW10+IHtcclxuICAgICAgICB2YXIgdXJsID0gXCJodHRwczovL2xvY2FsaG9zdDo3MDM4L2FwaS9zdHJhdmFNb25nby9HZXRBbGxQb3dlclN0cmVhbXNcIjtcclxuXHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IGZldGNoKHVybCk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBhd2FpdCByZXN1bHQuanNvbigpIGFzIFN0cmVhbVtdO1xyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldEhlYXJ0UmF0ZURhdGEoKTogUHJvbWlzZTxTdHJlYW1bXT4ge1xyXG4gICAgICAgIHZhciB1cmwgPSBcImh0dHBzOi8vbG9jYWxob3N0OjcwMzgvYXBpL3N0cmF2YU1vbmdvL0dldEFsbEhyU3RyZWFtc1wiO1xyXG5cclxuICAgICAgICB2YXIgcmVzdWx0ID0gYXdhaXQgZmV0Y2godXJsKTtcclxuICAgICAgICB2YXIgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCkgYXMgU3RyZWFtW107XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0QWN0aXZpdGllcygpOiBQcm9taXNlPFN0cmF2YUFjdGl2aXR5W10+IHtcclxuICAgICAgICB2YXIgdXJsID0gXCJodHRwczovL2xvY2FsaG9zdDo3MDM4L2FwaS9zdHJhdmFNb25nby9HZXRBbGxBY3Rpdml0aWVzXCI7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IGZldGNoKHVybCk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBhd2FpdCByZXN1bHQuanNvbigpIGFzIFN0cmF2YUFjdGl2aXR5W107XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0RGV0YWlsZWRBY3Rpdml0aWVzKCk6IFByb21pc2U8RGV0YWlsZWRBY3Rpdml0eVtdPiB7XHJcbiAgICAgICAgdmFyIHVybCA9IFwiaHR0cHM6Ly9sb2NhbGhvc3Q6NzAzOC9hcGkvc3RyYXZhTW9uZ28vR2V0QWxsRGV0YWlsZWRBY3Rpdml0aWVzXCI7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IGZldGNoKHVybCk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBhd2FpdCByZXN1bHQuanNvbigpIGFzIERldGFpbGVkQWN0aXZpdHlbXTtcclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgfSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICB9LCBfdHlwZW9mKG9iaik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpO1xuXG4gIC8vIENsb25lIHRoZSBkYXRlXG4gIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHwgX3R5cGVvZihhcmd1bWVudCkgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNzdHJpbmctYXJndW1lbnRzXCIpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0FmdGVyXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBmaXJzdCBkYXRlIGFmdGVyIHRoZSBzZWNvbmQgb25lP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGZpcnN0IGRhdGUgYWZ0ZXIgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRoYXQgc2hvdWxkIGJlIGFmdGVyIHRoZSBvdGhlciBvbmUgdG8gcmV0dXJuIHRydWVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVUb0NvbXBhcmUgLSB0aGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZmlyc3QgZGF0ZSBpcyBhZnRlciB0aGUgc2Vjb25kIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSXMgMTAgSnVseSAxOTg5IGFmdGVyIDExIEZlYnJ1YXJ5IDE5ODc/XG4gKiBjb25zdCByZXN1bHQgPSBpc0FmdGVyKG5ldyBEYXRlKDE5ODksIDYsIDEwKSwgbmV3IERhdGUoMTk4NywgMSwgMTEpKVxuICogLy89PiB0cnVlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQWZ0ZXIoZGlydHlEYXRlLCBkaXJ0eURhdGVUb0NvbXBhcmUpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXRlVG9Db21wYXJlID0gdG9EYXRlKGRpcnR5RGF0ZVRvQ29tcGFyZSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSA+IGRhdGVUb0NvbXBhcmUuZ2V0VGltZSgpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNCZWZvcmVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGZpcnN0IGRhdGUgYmVmb3JlIHRoZSBzZWNvbmQgb25lP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGZpcnN0IGRhdGUgYmVmb3JlIHRoZSBzZWNvbmQgb25lP1xuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0aGF0IHNob3VsZCBiZSBiZWZvcmUgdGhlIG90aGVyIG9uZSB0byByZXR1cm4gdHJ1ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVRvQ29tcGFyZSAtIHRoZSBkYXRlIHRvIGNvbXBhcmUgd2l0aFxuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBmaXJzdCBkYXRlIGlzIGJlZm9yZSB0aGUgc2Vjb25kIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSXMgMTAgSnVseSAxOTg5IGJlZm9yZSAxMSBGZWJydWFyeSAxOTg3P1xuICogY29uc3QgcmVzdWx0ID0gaXNCZWZvcmUobmV3IERhdGUoMTk4OSwgNiwgMTApLCBuZXcgRGF0ZSgxOTg3LCAxLCAxMSkpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQmVmb3JlKGRpcnR5RGF0ZSwgZGlydHlEYXRlVG9Db21wYXJlKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF0ZVRvQ29tcGFyZSA9IHRvRGF0ZShkaXJ0eURhdGVUb0NvbXBhcmUpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgPCBkYXRlVG9Db21wYXJlLmdldFRpbWUoKTtcbn0iLCJpbXBvcnQgeyBDaGFydCwgQ2hhcnRDb25maWd1cmF0aW9uLCBDaGFydEl0ZW0sIENoYXJ0VHlwZSwgQ2hhcnRUeXBlUmVnaXN0cnkgfSBmcm9tIFwiY2hhcnQuanMvYXV0b1wiO1xyXG5pbXBvcnQgeyBDaGFydEdlbmVyYXRvciB9IGZyb20gXCIuL2NoYXJ0R2VuZXJhdG9yXCI7XHJcbmltcG9ydCB7IFN0cmF2YUFjdGl2aXR5IH0gZnJvbSBcIi4vbW9kZWxzL3N0cmF2YUFjdGl2aXR5XCI7XHJcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gXCIuL21vZGVscy9zdHJlYW1cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQb3dlclpvbmUge1xyXG4gICAgcG93ZXJab25lczogbnVtYmVyW107XHJcblxyXG4gICAgcHVibGljIGdldFRpbWVJblpvbmVMaXN0KGFjdGl2aXRpZXM6IFN0cmF2YUFjdGl2aXR5W10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgbGV0IHRpbWVJblpvbmVEaWN0OiB7IFtpbmRleDogc3RyaW5nXTogbnVtYmVyIH0gPSB7XHJcbiAgICAgICAgICAgIFwiMVwiOiAwLFxyXG4gICAgICAgICAgICBcIjJcIjogMCxcclxuICAgICAgICAgICAgXCIzXCI6IDAsXHJcbiAgICAgICAgICAgIFwiNFwiOiAwLFxyXG4gICAgICAgICAgICBcIjVcIjogMCxcclxuICAgICAgICAgICAgXCI2XCI6IDAsXHJcbiAgICAgICAgICAgIFwiN1wiOiAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yIChsZXQgYWN0aXZpdHkgb2YgYWN0aXZpdGllcykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gYWN0aXZpdHkucG93ZXJTdHJlYW0pIHtcclxuICAgICAgICAgICAgICAgIGxldCB0aW1lQXRQb3dlckluU2Vjb25kcyA9IGFjdGl2aXR5LnBvd2VyU3RyZWFtW2tleV07XHJcbiAgICAgICAgICAgICAgICBsZXQgem9uZSA9IHRoaXMuZ2V0Wm9uZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHpvbmVTdHJpbmcgPSB6b25lLnRvU3RyaW5nKCkgYXMgc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgdGltZUluWm9uZURpY3Rbem9uZVN0cmluZ10gKz0gTnVtYmVyLnBhcnNlSW50KHRpbWVBdFBvd2VySW5TZWNvbmRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGltZUluWm9uZURpY3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0Wm9uZShwb3dlcjogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICB2YXIgcG93ZXJBc051bWJlciA9IE51bWJlci5wYXJzZUludChwb3dlcik7XHJcbiAgICAgICAgaWYgKHBvd2VyQXNOdW1iZXIgPD0gMTMyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwb3dlckFzTnVtYmVyID4gMTMyICYmIHBvd2VyQXNOdW1iZXIgPD0gMTgwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwb3dlckFzTnVtYmVyID4gMTgwICYmIHBvd2VyQXNOdW1iZXIgPD0gMjE2KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwb3dlckFzTnVtYmVyID4gMjE2ICYmIHBvd2VyQXNOdW1iZXIgPD0gMjUyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiA0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwb3dlckFzTnVtYmVyID4gMjUyICYmIHBvd2VyQXNOdW1iZXIgPD0gMjg4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiA1O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwb3dlckFzTnVtYmVyID4gMjg4ICYmIHBvd2VyQXNOdW1iZXIgPD0gMzYwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiA2O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwb3dlckFzTnVtYmVyID49IDM2MCkge1xyXG4gICAgICAgICAgICByZXR1cm4gNztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRQb3dlclpvbmVzKGZ0cDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5wb3dlclpvbmVzWzBdID0gZnRwICogLjU1O1xyXG4gICAgICAgIHRoaXMucG93ZXJab25lc1sxXSA9IGZ0cCAqIC43NTtcclxuICAgICAgICB0aGlzLnBvd2VyWm9uZXNbMl0gPSBmdHAgKiAuODc7XHJcbiAgICAgICAgdGhpcy5wb3dlclpvbmVzWzNdID0gZnRwICogMS4wNTtcclxuICAgICAgICB0aGlzLnBvd2VyWm9uZXNbNF0gPSBmdHAgKiAxLjI7XHJcbiAgICAgICAgdGhpcy5wb3dlclpvbmVzWzVdID0gZnRwICogMS41O1xyXG4gICAgICAgIHRoaXMucG93ZXJab25lc1s2XSA9IGZ0cCAqIDI7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDaGFydCwgQ2hhcnRDb25maWd1cmF0aW9uLCBDaGFydEl0ZW0sIENoYXJ0VHlwZSwgQ2hhcnRUeXBlUmVnaXN0cnkgfSBmcm9tIFwiY2hhcnQuanMvYXV0b1wiO1xyXG5pbXBvcnQgeyBDaGFydEdlbmVyYXRvciB9IGZyb20gXCIuL2NoYXJ0R2VuZXJhdG9yXCI7XHJcbmltcG9ydCB7IFN0cmF2YUFjdGl2aXR5IH0gZnJvbSBcIi4vbW9kZWxzL3N0cmF2YUFjdGl2aXR5XCI7XHJcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gXCIuL21vZGVscy9zdHJlYW1cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBIclpvbmUge1xyXG4gICAgaHJab25lczogbnVtYmVyW107XHJcblxyXG4gICAgcHVibGljIGdldFRpbWVJblpvbmVMaXN0KGFjdGl2aXRpZXM6IFN0cmF2YUFjdGl2aXR5W10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgbGV0IHRpbWVJblpvbmVEaWN0OiB7IFtpbmRleDogc3RyaW5nXTogbnVtYmVyIH0gPSB7XHJcbiAgICAgICAgICAgIFwiMVwiOiAwLFxyXG4gICAgICAgICAgICBcIjJcIjogMCxcclxuICAgICAgICAgICAgXCIzXCI6IDAsXHJcbiAgICAgICAgICAgIFwiNFwiOiAwLFxyXG4gICAgICAgICAgICBcIjVcIjogMCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAobGV0IGFjdGl2aXR5IG9mIGFjdGl2aXRpZXMpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGFjdGl2aXR5LmhyU3RyZWFtKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGltZUF0UG93ZXJJblNlY29uZHMgPSBhY3Rpdml0eS5oclN0cmVhbVtrZXldO1xyXG4gICAgICAgICAgICAgICAgbGV0IHpvbmUgPSB0aGlzLmdldFpvbmUoa2V5KTtcclxuICAgICAgICAgICAgICAgIGxldCB6b25lU3RyaW5nID0gem9uZS50b1N0cmluZygpIGFzIHN0cmluZztcclxuICAgICAgICAgICAgICAgIHRpbWVJblpvbmVEaWN0W3pvbmVTdHJpbmddICs9IE51bWJlci5wYXJzZUludCh0aW1lQXRQb3dlckluU2Vjb25kcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRpbWVJblpvbmVEaWN0KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRab25lKGhlYXJ0UmF0ZTogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICB2YXIgcG93ZXJBc051bWJlciA9IE51bWJlci5wYXJzZUludChoZWFydFJhdGUpO1xyXG4gICAgICAgIGlmIChwb3dlckFzTnVtYmVyIDw9IDExOCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+IDExOCAmJiBwb3dlckFzTnVtYmVyIDw9IDE1Nikge1xyXG4gICAgICAgICAgICByZXR1cm4gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+IDE1NiAmJiBwb3dlckFzTnVtYmVyIDw9IDE3NSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+IDE3NSAmJiBwb3dlckFzTnVtYmVyIDw9IDE5NCkge1xyXG4gICAgICAgICAgICByZXR1cm4gNDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG93ZXJBc051bWJlciA+IDE5NCkge1xyXG4gICAgICAgICAgICByZXR1cm4gNTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRIclpvbmVzKG1heEhyOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmhyWm9uZXNbMF0gPSBtYXhIciAqIC41O1xyXG4gICAgICAgIHRoaXMuaHJab25lc1sxXSA9IG1heEhyICogLjY7XHJcbiAgICAgICAgdGhpcy5oclpvbmVzWzJdID0gbWF4SHIgKiAuNztcclxuICAgICAgICB0aGlzLmhyWm9uZXNbM10gPSBtYXhIciAqIC44O1xyXG4gICAgICAgIHRoaXMuaHJab25lc1s0XSA9IG1heEhyICogLjk7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgQ2hhcnQsIENoYXJ0Q29uZmlndXJhdGlvbiwgQ2hhcnRJdGVtLCBDaGFydFR5cGUgfSBmcm9tIFwiY2hhcnQuanMvYXV0b1wiO1xyXG5pbXBvcnQgeyBDaGFydEdlbmVyYXRvciB9IGZyb20gXCIuL2NoYXJ0R2VuZXJhdG9yXCI7XHJcbmltcG9ydCB7IFN0cmF2YUFjdGl2aXR5IH0gZnJvbSBcIi4vbW9kZWxzL3N0cmF2YUFjdGl2aXR5XCI7XHJcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gXCIuL21vZGVscy9zdHJlYW1cIjtcclxuaW1wb3J0IHsgVGltZUluWm9uZUZpbHRlciB9IGZyb20gXCIuL3RpbWVJblpvbmVGaWx0ZXJcIjtcclxuaW1wb3J0ICogYXMgRGF0ZUhlbHBlciBmcm9tICdkYXRlLWZucyc7XHJcbmltcG9ydCB7IFBvd2VyWm9uZSB9IGZyb20gXCIuL3Bvd2VyWm9uZUNhbGN1bGF0b3JcIjtcclxuaW1wb3J0IHsgSHJab25lIH0gZnJvbSBcIi4vaHJab25lQ2FsY3VsYXRvclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIERhdGFDYWxjdWxhdG9yIHtcclxuICAgIGFsbEFjdGl2aXRpZXM6IFN0cmF2YUFjdGl2aXR5W107XHJcbiAgICBmaWx0ZXJlZEFjdGl2aXRpZXM6IFN0cmF2YUFjdGl2aXR5W107XHJcblxyXG4gICAgaHJUaW1lSW5ab25lOiBudW1iZXJbXTtcclxuICAgIHBvd2VyVGltZUluWm9uZTogbnVtYmVyW11cclxuICAgIGNhbG9yaWVzQnVybmVkSW5UaW1lUGVyaW9kOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYWN0aXZpdGllczogU3RyYXZhQWN0aXZpdHlbXSkge1xyXG4gICAgICAgIHRoaXMuYWxsQWN0aXZpdGllcyA9IGFjdGl2aXRpZXM7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJlZEFjdGl2aXRpZXMgPSBhY3Rpdml0aWVzO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbHRlckJ5RGF0ZShmcm9tRGF0ZTogRGF0ZSwgdG9EYXRlOiBEYXRlKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJlZEFjdGl2aXRpZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBhY3Rpdml0eSBvZiB0aGlzLmFsbEFjdGl2aXRpZXMpIHtcclxuICAgICAgICAgICAgbGV0IGFjdGl2aXR5RGF0ZSA9IERhdGUucGFyc2UoYWN0aXZpdHkuc3RhcnRfZGF0ZV9sb2NhbCk7XHJcbiAgICAgICAgICAgIGxldCBkYXRlID0gRGF0ZS5wYXJzZShmcm9tRGF0ZS50b0RhdGVTdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIGlmIChEYXRlSGVscGVyLmlzQWZ0ZXIoYWN0aXZpdHlEYXRlLCBEYXRlLnBhcnNlKGZyb21EYXRlLnRvRGF0ZVN0cmluZygpKSkgJiYgRGF0ZUhlbHBlci5pc0JlZm9yZShhY3Rpdml0eURhdGUsIERhdGUucGFyc2UodG9EYXRlLnRvRGF0ZVN0cmluZygpKSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyZWRBY3Rpdml0aWVzLnB1c2goYWN0aXZpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0VGltZUluWm9uZUxpc3RzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGltZUluWm9uZUxpc3RzKCkge1xyXG4gICAgICAgIHRoaXMucG93ZXJUaW1lSW5ab25lID0gbmV3IFBvd2VyWm9uZSgpLmdldFRpbWVJblpvbmVMaXN0KHRoaXMuZmlsdGVyZWRBY3Rpdml0aWVzKTtcclxuICAgICAgICB0aGlzLmhyVGltZUluWm9uZSA9IG5ldyBIclpvbmUoKS5nZXRUaW1lSW5ab25lTGlzdCh0aGlzLmZpbHRlcmVkQWN0aXZpdGllcyk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcbiAgaWYgKGRpcnR5TnVtYmVyID09PSBudWxsIHx8IGRpcnR5TnVtYmVyID09PSB0cnVlIHx8IGRpcnR5TnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICByZXR1cm4gbnVtYmVyIDwgMCA/IE1hdGguY2VpbChudW1iZXIpIDogTWF0aC5mbG9vcihudW1iZXIpO1xufSIsImltcG9ydCBhZGREYXlzIGZyb20gXCIuLi9hZGREYXlzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIGRheXMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBkYXlzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgMTAgZGF5cyBmcm9tIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJEYXlzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCAxMClcbiAqIC8vPT4gRnJpIEF1ZyAyMiAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1YkRheXMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGREYXlzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBkYXlzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gLSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgZGF5cyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAtIDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCAxMCBkYXlzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBhZGREYXlzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCAxMClcbiAqIC8vPT4gVGh1IFNlcCAxMSAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZERheXMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIGlmIChpc05hTihhbW91bnQpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbiAgaWYgKCFhbW91bnQpIHtcbiAgICAvLyBJZiAwIGRheXMsIG5vLW9wIHRvIGF2b2lkIGNoYW5naW5nIHRpbWVzIGluIHRoZSBob3VyIGJlZm9yZSBlbmQgb2YgRFNUXG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgYW1vdW50KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRZZWFycyBmcm9tIFwiLi4vYWRkWWVhcnMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN1YlllYXJzXG4gKiBAY2F0ZWdvcnkgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiB5ZWFycyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgeWVhcnMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgeWVhcnMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSB5ZWFycyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDUgeWVhcnMgZnJvbSAxIFNlcHRlbWJlciAyMDE0OlxuICogY29uc3QgcmVzdWx0ID0gc3ViWWVhcnMobmV3IERhdGUoMjAxNCwgOCwgMSksIDUpXG4gKiAvLz0+IFR1ZSBTZXAgMDEgMjAwOSAwMDowMDowMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJZZWFycyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIGFkZFllYXJzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRNb250aHMgZnJvbSBcIi4uL2FkZE1vbnRocy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkWWVhcnNcbiAqIEBjYXRlZ29yeSBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiB5ZWFycyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiB5ZWFycyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgeWVhcnMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgeWVhcnMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDUgeWVhcnMgdG8gMSBTZXB0ZW1iZXIgMjAxNDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZFllYXJzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCA1KVxuICogLy89PiBTdW4gU2VwIDAxIDIwMTkgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkWWVhcnMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNb250aHMoZGlydHlEYXRlLCBhbW91bnQgKiAxMik7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTW9udGhzXG4gKiBAY2F0ZWdvcnkgTW9udGggSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1vbnRocyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtb250aHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1vbnRocyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtb250aHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDUgbW9udGhzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRNb250aHMobmV3IERhdGUoMjAxNCwgOCwgMSksIDUpXG4gKiAvLz0+IFN1biBGZWIgMDEgMjAxNSAwMDowMDowMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRNb250aHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIGlmIChpc05hTihhbW91bnQpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbiAgaWYgKCFhbW91bnQpIHtcbiAgICAvLyBJZiAwIG1vbnRocywgbm8tb3AgdG8gYXZvaWQgY2hhbmdpbmcgdGltZXMgaW4gdGhlIGhvdXIgYmVmb3JlIGVuZCBvZiBEU1RcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICB2YXIgZGF5T2ZNb250aCA9IGRhdGUuZ2V0RGF0ZSgpO1xuXG4gIC8vIFRoZSBKUyBEYXRlIG9iamVjdCBzdXBwb3J0cyBkYXRlIG1hdGggYnkgYWNjZXB0aW5nIG91dC1vZi1ib3VuZHMgdmFsdWVzIGZvclxuICAvLyBtb250aCwgZGF5LCBldGMuIEZvciBleGFtcGxlLCBuZXcgRGF0ZSgyMDIwLCAwLCAwKSByZXR1cm5zIDMxIERlYyAyMDE5IGFuZFxuICAvLyBuZXcgRGF0ZSgyMDIwLCAxMywgMSkgcmV0dXJucyAxIEZlYiAyMDIxLiAgVGhpcyBpcyAqYWxtb3N0KiB0aGUgYmVoYXZpb3Igd2VcbiAgLy8gd2FudCBleGNlcHQgdGhhdCBkYXRlcyB3aWxsIHdyYXAgYXJvdW5kIHRoZSBlbmQgb2YgYSBtb250aCwgbWVhbmluZyB0aGF0XG4gIC8vIG5ldyBEYXRlKDIwMjAsIDEzLCAzMSkgd2lsbCByZXR1cm4gMyBNYXIgMjAyMSBub3QgMjggRmViIDIwMjEgYXMgZGVzaXJlZC4gU29cbiAgLy8gd2UnbGwgZGVmYXVsdCB0byB0aGUgZW5kIG9mIHRoZSBkZXNpcmVkIG1vbnRoIGJ5IGFkZGluZyAxIHRvIHRoZSBkZXNpcmVkXG4gIC8vIG1vbnRoIGFuZCB1c2luZyBhIGRhdGUgb2YgMCB0byBiYWNrIHVwIG9uZSBkYXkgdG8gdGhlIGVuZCBvZiB0aGUgZGVzaXJlZFxuICAvLyBtb250aC5cbiAgdmFyIGVuZE9mRGVzaXJlZE1vbnRoID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICBlbmRPZkRlc2lyZWRNb250aC5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBhbW91bnQgKyAxLCAwKTtcbiAgdmFyIGRheXNJbk1vbnRoID0gZW5kT2ZEZXNpcmVkTW9udGguZ2V0RGF0ZSgpO1xuICBpZiAoZGF5T2ZNb250aCA+PSBkYXlzSW5Nb250aCkge1xuICAgIC8vIElmIHdlJ3JlIGFscmVhZHkgYXQgdGhlIGVuZCBvZiB0aGUgbW9udGgsIHRoZW4gdGhpcyBpcyB0aGUgY29ycmVjdCBkYXRlXG4gICAgLy8gYW5kIHdlJ3JlIGRvbmUuXG4gICAgcmV0dXJuIGVuZE9mRGVzaXJlZE1vbnRoO1xuICB9IGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZSwgd2Ugbm93IGtub3cgdGhhdCBzZXR0aW5nIHRoZSBvcmlnaW5hbCBkYXktb2YtbW9udGggdmFsdWUgd29uJ3RcbiAgICAvLyBjYXVzZSBhbiBvdmVyZmxvdywgc28gc2V0IHRoZSBkZXNpcmVkIGRheS1vZi1tb250aC4gTm90ZSB0aGF0IHdlIGNhbid0XG4gICAgLy8ganVzdCBzZXQgdGhlIGRhdGUgb2YgYGVuZE9mRGVzaXJlZE1vbnRoYCBiZWNhdXNlIHRoYXQgb2JqZWN0IG1heSBoYXZlIGhhZFxuICAgIC8vIGl0cyB0aW1lIGNoYW5nZWQgaW4gdGhlIHVudXN1YWwgY2FzZSB3aGVyZSB3aGVyZSBhIERTVCB0cmFuc2l0aW9uIHdhcyBvblxuICAgIC8vIHRoZSBsYXN0IGRheSBvZiB0aGUgbW9udGggYW5kIGl0cyBsb2NhbCB0aW1lIHdhcyBpbiB0aGUgaG91ciBza2lwcGVkIG9yXG4gICAgLy8gcmVwZWF0ZWQgbmV4dCB0byBhIERTVCB0cmFuc2l0aW9uLiAgU28gd2UgdXNlIGBkYXRlYCBpbnN0ZWFkIHdoaWNoIGlzXG4gICAgLy8gZ3VhcmFudGVlZCB0byBzdGlsbCBoYXZlIHRoZSBvcmlnaW5hbCB0aW1lLlxuICAgIGRhdGUuc2V0RnVsbFllYXIoZW5kT2ZEZXNpcmVkTW9udGguZ2V0RnVsbFllYXIoKSwgZW5kT2ZEZXNpcmVkTW9udGguZ2V0TW9udGgoKSwgZGF5T2ZNb250aCk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbn0iLCJpbXBvcnQgeyBDaGFydCB9IGZyb20gXCJjaGFydC5qcy9kaXN0XCI7XHJcbmltcG9ydCB7IFN0cmF2YUFwaUNsaWVudCB9IGZyb20gXCIuL2FwaUNsaWVudFwiO1xyXG5pbXBvcnQgeyBDaGFydEdlbmVyYXRvciB9IGZyb20gXCIuL2NoYXJ0R2VuZXJhdG9yXCI7XHJcbmltcG9ydCB7IEhlYXJ0UmF0ZUNoYXJ0R2VuZXJhdG9yIH0gZnJvbSBcIi4vaGVhcnRSYXRlQ2hhcnRHZW5lcmF0b3JcIjtcclxuaW1wb3J0IHsgRGF0YUNhbGN1bGF0b3IgfSBmcm9tIFwiLi9kYXRhQ2FsY3VsYXRvclwiO1xyXG5pbXBvcnQgeyBTdHJhdmFBY3Rpdml0eSB9IGZyb20gXCIuL21vZGVscy9zdHJhdmFBY3Rpdml0eVwiO1xyXG5pbXBvcnQgeyBTdHJlYW0gfSBmcm9tIFwiLi9tb2RlbHMvc3RyZWFtXCI7XHJcbmltcG9ydCAqIGFzIERhdGVIZWxwZXIgZnJvbSBcImRhdGUtZm5zXCI7XHJcblxyXG5cclxuYXN5bmMgZnVuY3Rpb24gbWFpbigpIHtcclxuICAgIC8vbGV0IGJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3dpdGNoUG93ZXJcIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICAvL2xldCBockJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3dpdGNoSHJcIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcblxyXG4gICAgbGV0IHBvd2VyVG9nZ2xlQ2hhcnRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnZlcnRQb3dlclwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIGxldCBoclRvZ2dsZUNoYXJ0QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb252ZXJ0SHJcIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcblxyXG4gICAgbGV0IGNsaWVudCA9IG5ldyBTdHJhdmFBcGlDbGllbnQoKTtcclxuXHJcbiAgICB2YXIgcG93ZXJTdHJlYW1zID0gYXdhaXQgY2xpZW50LmdldFBvd2VyRGF0YSgpO1xyXG4gICAgdmFyIGhyU3RyZWFtcyA9IGF3YWl0IGNsaWVudC5nZXRIZWFydFJhdGVEYXRhKCk7XHJcblxyXG4gICAgdmFyIGFjdGl2aXRpZXMgPSBhd2FpdCBjbGllbnQuZ2V0QWN0aXZpdGllcygpO1xyXG5cclxuICAgIHZhciBkZXRhaWxlZEFjdGl2aXRpZXMgPSBhd2FpdCBjbGllbnQuZ2V0RGV0YWlsZWRBY3Rpdml0aWVzKCk7XHJcbiAgICBjb25zb2xlLmxvZyhhY3Rpdml0aWVzKTtcclxuICAgIGNvbnNvbGUubG9nKGRldGFpbGVkQWN0aXZpdGllcyk7XHJcbiAgICBjb25zb2xlLmxvZyhoclN0cmVhbXMpO1xyXG4gICAgY29uc29sZS5sb2cocG93ZXJTdHJlYW1zKTtcclxuXHJcbiAgICAvKmxldCBwb3dlckNoYXJ0R2VuZXJhdG9yID0gbmV3IFBvd2VyQ2hhcnRHZW5lcmF0b3IocG93ZXJTdHJlYW1zKTtcclxuICAgIHBvd2VyQ2hhcnRHZW5lcmF0b3IuY3JlYXRlUGllQ2hhcnQoKTtcclxuICAgIC8vYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBwb3dlckNoYXJ0R2VuZXJhdG9yLnRvZ2dsZVRpbWVVbml0cygpKTtcclxuICAgIHBvd2VyVG9nZ2xlQ2hhcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHBvd2VyQ2hhcnRHZW5lcmF0b3IudG9nZ2xlQ2hhcnRUeXBlKCkpO1xyXG5cclxuICAgIGxldCBockNoYXJ0R2VuZXJhdG9yID0gbmV3IEhlYXJ0UmF0ZUNoYXJ0R2VuZXJhdG9yKGhyU3RyZWFtcywgYWN0aXZpdGllcyk7XHJcbiAgICBockNoYXJ0R2VuZXJhdG9yLmNyZWF0ZVBpZUNoYXJ0KCk7XHJcbiAgICAvL2hyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBockNoYXJ0R2VuZXJhdG9yLnRvZ2dsZVRpbWVVbml0cygpKTtcclxuICAgIGhyVG9nZ2xlQ2hhcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IGhyQ2hhcnRHZW5lcmF0b3IudG9nZ2xlQ2hhcnRUeXBlKCkpOyovXHJcblxyXG4gICAgYWRkU3RyZWFtc1RvQWN0aXZpdHkocG93ZXJTdHJlYW1zLCBoclN0cmVhbXMsIGFjdGl2aXRpZXMpO1xyXG5cclxuICAgIGxldCBkYXRhQ2FsY3VsYXRvciA9IG5ldyBEYXRhQ2FsY3VsYXRvcihhY3Rpdml0aWVzKTtcclxuICAgIGRhdGFDYWxjdWxhdG9yLnNldFRpbWVJblpvbmVMaXN0cygpO1xyXG5cclxuICAgIFxyXG4gICAgLy9kYXRhQ2FsY3VsYXRvci5maWx0ZXJCeURhdGUobmV3IERhdGUoMjAyMywgMCkudG9TdHJpbmcoKSwgbmV3IERhdGUoMjAyMywgNikudG9TdHJpbmcoKSk7XHJcbiAgICBkYXRhQ2FsY3VsYXRvci5maWx0ZXJCeURhdGUoRGF0ZUhlbHBlci5zdWJEYXlzKG5ldyBEYXRlKCksIDMwKSwgbmV3IERhdGUoKSk7XHJcbiAgICBsZXQgZmlsdGVyZWQzMGRheXMgPSBkYXRhQ2FsY3VsYXRvci5oclRpbWVJblpvbmU7XHJcbiAgICBjb25zb2xlLmxvZyhcIkFmdGVyIDMwIGRheXMgZmlsdGVyXCIpO1xyXG4gICAgY29uc29sZS5sb2coZmlsdGVyZWQzMGRheXMpO1xyXG4gICAgZGF0YUNhbGN1bGF0b3IuZmlsdGVyQnlEYXRlKERhdGVIZWxwZXIuc3ViRGF5cyhuZXcgRGF0ZSgpLCA5MCksIG5ldyBEYXRlKCkpO1xyXG4gICAgbGV0IGZpbHRlcmVkOTBkYXlzID0gZGF0YUNhbGN1bGF0b3IuaHJUaW1lSW5ab25lO1xyXG4gICAgY29uc29sZS5sb2coXCJBZnRlciA5MCBkYXlzIGZpbHRlclwiKTtcclxuICAgIGNvbnNvbGUubG9nKGZpbHRlcmVkOTBkYXlzKTtcclxuICAgIGRhdGFDYWxjdWxhdG9yLmZpbHRlckJ5RGF0ZShEYXRlSGVscGVyLnN1YlllYXJzKG5ldyBEYXRlKCksIDEpLCBuZXcgRGF0ZSgpKTtcclxuICAgIGxldCBmaWx0ZXJlZDF5ZWFyID0gZGF0YUNhbGN1bGF0b3IuaHJUaW1lSW5ab25lO1xyXG4gICAgY29uc29sZS5sb2coXCJBZnRlciAxIHllYXIgZmlsdGVyXCIpO1xyXG4gICAgY29uc29sZS5sb2coZmlsdGVyZWQxeWVhcik7XHJcbiAgICBkYXRhQ2FsY3VsYXRvci5maWx0ZXJCeURhdGUoRGF0ZUhlbHBlci5zdWJZZWFycyhuZXcgRGF0ZSgpLCA1KSwgbmV3IERhdGUoKSk7XHJcbiAgICBsZXQgZmlsdGVyZWRBbGxUaW1lID0gZGF0YUNhbGN1bGF0b3IuaHJUaW1lSW5ab25lO1xyXG4gICAgY29uc29sZS5sb2coXCJBbGwgdGltZVwiKTtcclxuICAgIGNvbnNvbGUubG9nKGZpbHRlcmVkQWxsVGltZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0cmVhbXNUb0FjdGl2aXR5KHBvd2VyU3RyZWFtczogU3RyZWFtW10sIGhyU3RyZWFtczogU3RyZWFtW10sIGFjdGl2aXRpZXM6IFN0cmF2YUFjdGl2aXR5W10pIHtcclxuICAgIGZvciAobGV0IGFjdGl2aXR5IG9mIGFjdGl2aXRpZXMpIHtcclxuICAgICAgICBsZXQgaHJTdHJlYW1XaXRoSWQgPSBoclN0cmVhbXMuZmluZChzdHJlYW0gPT4gc3RyZWFtLmlkID09IGFjdGl2aXR5LmlkKTtcclxuICAgICAgICBsZXQgcG93ZXJTdHJlYW1XaXRoSWQgPSBwb3dlclN0cmVhbXMuZmluZChzdHJlYW0gPT4gc3RyZWFtLmlkID09IGFjdGl2aXR5LmlkKTtcclxuICAgICAgICBhY3Rpdml0eS5wb3dlclN0cmVhbSA9IHBvd2VyU3RyZWFtV2l0aElkPy5wb3dlckRpY3Q7XHJcbiAgICAgICAgYWN0aXZpdHkuaHJTdHJlYW0gPSBoclN0cmVhbVdpdGhJZD8uaGVhcnRSYXRlRGljdDtcclxuICAgIH1cclxufVxyXG5cclxuKGFzeW5jICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgbWFpbigpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICB9XHJcbn0pKCk7XHJcbiJdLCJuYW1lcyI6WyJnZXRQb3dlckRhdGEiLCJmZXRjaCIsImpzb24iLCJnZXRIZWFydFJhdGVEYXRhIiwiZ2V0QWN0aXZpdGllcyIsImdldERldGFpbGVkQWN0aXZpdGllcyIsIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwicmVxdWlyZWRBcmdzIiwicmVxdWlyZWQiLCJhcmdzIiwibGVuZ3RoIiwiVHlwZUVycm9yIiwidG9EYXRlIiwiYXJndW1lbnQiLCJhcmd1bWVudHMiLCJhcmdTdHIiLCJPYmplY3QiLCJ0b1N0cmluZyIsImNhbGwiLCJEYXRlIiwiZ2V0VGltZSIsImNvbnNvbGUiLCJ3YXJuIiwiRXJyb3IiLCJzdGFjayIsIk5hTiIsImlzQWZ0ZXIiLCJkaXJ0eURhdGUiLCJkaXJ0eURhdGVUb0NvbXBhcmUiLCJkYXRlIiwiZGF0ZVRvQ29tcGFyZSIsImlzQmVmb3JlIiwiZ2V0VGltZUluWm9uZUxpc3QiLCJhY3Rpdml0aWVzIiwidGltZUluWm9uZURpY3QiLCJhY3Rpdml0eSIsImtleSIsInBvd2VyU3RyZWFtIiwidGltZUF0UG93ZXJJblNlY29uZHMiLCJ0aGlzIiwiZ2V0Wm9uZSIsIk51bWJlciIsInBhcnNlSW50IiwidmFsdWVzIiwicG93ZXIiLCJwb3dlckFzTnVtYmVyIiwic2V0UG93ZXJab25lcyIsImZ0cCIsInBvd2VyWm9uZXMiLCJoclN0cmVhbSIsImhlYXJ0UmF0ZSIsInNldEhyWm9uZXMiLCJtYXhIciIsImhyWm9uZXMiLCJhbGxBY3Rpdml0aWVzIiwiZmlsdGVyZWRBY3Rpdml0aWVzIiwiZmlsdGVyQnlEYXRlIiwiZnJvbURhdGUiLCJhY3Rpdml0eURhdGUiLCJwYXJzZSIsInN0YXJ0X2RhdGVfbG9jYWwiLCJ0b0RhdGVTdHJpbmciLCJwdXNoIiwic2V0VGltZUluWm9uZUxpc3RzIiwicG93ZXJUaW1lSW5ab25lIiwiUG93ZXJab25lIiwiaHJUaW1lSW5ab25lIiwiSHJab25lIiwidG9JbnRlZ2VyIiwiZGlydHlOdW1iZXIiLCJudW1iZXIiLCJpc05hTiIsIk1hdGgiLCJjZWlsIiwiZmxvb3IiLCJzdWJEYXlzIiwiZGlydHlBbW91bnQiLCJhbW91bnQiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImFkZERheXMiLCJzdWJZZWFycyIsImRheU9mTW9udGgiLCJlbmRPZkRlc2lyZWRNb250aCIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJzZXRGdWxsWWVhciIsImdldEZ1bGxZZWFyIiwiYWRkTW9udGhzIiwiYWRkWWVhcnMiLCJtYWluIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNsaWVudCIsIlN0cmF2YUFwaUNsaWVudCIsInBvd2VyU3RyZWFtcyIsImhyU3RyZWFtcyIsImRldGFpbGVkQWN0aXZpdGllcyIsImxvZyIsImhyU3RyZWFtV2l0aElkIiwiZmluZCIsInN0cmVhbSIsImlkIiwicG93ZXJTdHJlYW1XaXRoSWQiLCJwb3dlckRpY3QiLCJoZWFydFJhdGVEaWN0IiwiYWRkU3RyZWFtc1RvQWN0aXZpdHkiLCJkYXRhQ2FsY3VsYXRvciIsIkRhdGFDYWxjdWxhdG9yIiwiZmlsdGVyZWQzMGRheXMiLCJmaWx0ZXJlZDkwZGF5cyIsImZpbHRlcmVkMXllYXIiLCJmaWx0ZXJlZEFsbFRpbWUiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=