(()=>{"use strict";var e=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))},t=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(u){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}},n=function(){function n(){}return n.prototype.getPowerData=function(){return e(this,void 0,void 0,(function(){return t(this,(function(e){switch(e.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllPowerStreams")];case 1:return[4,e.sent().json()];case 2:return[2,e.sent()]}}))}))},n.prototype.getHeartRateData=function(){return e(this,void 0,void 0,(function(){return t(this,(function(e){switch(e.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllHrStreams")];case 1:return[4,e.sent().json()];case 2:return[2,e.sent()]}}))}))},n.prototype.getActivities=function(){return e(this,void 0,void 0,(function(){return t(this,(function(e){switch(e.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllActivities")];case 1:return[4,e.sent().json()];case 2:return[2,e.sent()]}}))}))},n.prototype.getDetailedActivities=function(){return e(this,void 0,void 0,(function(){return t(this,(function(e){switch(e.label){case 0:return[4,fetch("https://localhost:7038/api/stravaMongo/GetAllDetailedActivities")];case 1:return[4,e.sent().json()];case 2:return[2,e.sent()]}}))}))},n}();function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function o(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function i(e){o(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===r(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function a(e,t){o(2,arguments);var n=i(e),r=i(t);return n.getTime()>r.getTime()}function s(e,t){o(2,arguments);var n=i(e),r=i(t);return n.getTime()<r.getTime()}var u=function(){function e(){}return e.prototype.getTimeInZoneList=function(e){for(var t={1:0,2:0,3:0,4:0,5:0,6:0,7:0},n=0,r=e;n<r.length;n++){var o=r[n];for(var i in o.powerStream){var a=o.powerStream[i];t[this.getZone(i).toString()]+=Number.parseInt(a)}}return Object.values(t)},e.prototype.getZone=function(e){var t=Number.parseInt(e);return t<=132?1:t>132&&t<=180?2:t>180&&t<=216?3:t>216&&t<=252?4:t>252&&t<=288?5:t>288&&t<=360?6:t>=360?7:1},e.prototype.setPowerZones=function(e){this.powerZones[0]=.55*e,this.powerZones[1]=.75*e,this.powerZones[2]=.87*e,this.powerZones[3]=1.05*e,this.powerZones[4]=1.2*e,this.powerZones[5]=1.5*e,this.powerZones[6]=2*e},e}(),c=function(){function e(){}return e.prototype.getTimeInZoneList=function(e){for(var t={1:0,2:0,3:0,4:0,5:0},n=0,r=e;n<r.length;n++){var o=r[n];for(var i in o.hrStream){var a=o.hrStream[i];t[this.getZone(i).toString()]+=Number.parseInt(a)}}return Object.values(t)},e.prototype.getZone=function(e){var t=Number.parseInt(e);return t<=118?1:t>118&&t<=156?2:t>156&&t<=175?3:t>175&&t<=194?4:t>194?5:1},e.prototype.setHrZones=function(e){this.hrZones[0]=.5*e,this.hrZones[1]=.6*e,this.hrZones[2]=.7*e,this.hrZones[3]=.8*e,this.hrZones[4]=.9*e},e}(),l=function(){function e(e){this.allActivities=e,this.filteredActivities=e}return e.prototype.filterByDate=function(e,t){this.filteredActivities=[];for(var n=0,r=this.allActivities;n<r.length;n++){var o=r[n],i=Date.parse(o.start_date_local);a(i,e)&&s(i,t)&&this.filteredActivities.push(o)}},e.prototype.setTimeInZoneLists=function(){this.powerTimeInZone=(new u).getTimeInZoneList(this.filteredActivities),this.hrTimeInZone=(new c).getTimeInZoneList(this.filteredActivities)},e.prototype.setCaloriesBurned=function(){this.caloriesBurnedInTimePeriod=0;for(var e=0,t=this.filteredActivities;e<t.length;e++){var n=t[e];this.caloriesBurnedInTimePeriod+=n.details.calories}},e}();function f(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function h(e,t){return o(2,arguments),function(e,t){o(2,arguments);var n=i(e),r=f(t);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}(e,-f(t))}function p(e,t){return o(2,arguments),function(e,t){return o(2,arguments),function(e,t){o(2,arguments);var n=i(e),r=f(t);if(isNaN(r))return new Date(NaN);if(!r)return n;var a=n.getDate(),s=new Date(n.getTime());return s.setMonth(n.getMonth()+r+1,0),a>=s.getDate()?s:(n.setFullYear(s.getFullYear(),s.getMonth(),a),n)}(e,12*f(t))}(e,-f(t))}var d=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))},v=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(u){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}};function g(){return d(this,void 0,void 0,(function(){var e,t,r,o,i,a,s,u,c;return v(this,(function(f){switch(f.label){case 0:return document.getElementById("convertPower"),document.getElementById("convertHr"),[4,(e=new n).getPowerData()];case 1:return t=f.sent(),[4,e.getHeartRateData()];case 2:return r=f.sent(),[4,e.getActivities()];case 3:return o=f.sent(),[4,e.getDetailedActivities()];case 4:return i=f.sent(),console.log(o),console.log(i),console.log(r),console.log(t),function(e,t,n){for(var r=function(n){var r=t.find((function(e){return e.id==n.id})),o=e.find((function(e){return e.id==n.id}));n.powerStream=null==o?void 0:o.powerDict,n.hrStream=null==r?void 0:r.heartRateDict},o=0,i=n;o<i.length;o++)r(i[o])}(t,r,o),function(e,t){for(var n=function(e){var n=t.find((function(t){return t.id==e.id}));e.details=n},r=0,o=e;r<o.length;r++)n(o[r])}(o,i),console.log(o),(a=new l(o)).setTimeInZoneLists(),a.filterByDate(h(new Date,30),new Date),a.setCaloriesBurned(),console.log(a.caloriesBurnedInTimePeriod),a.filterByDate(h(new Date,90),new Date),s=a.hrTimeInZone,console.log("After 90 days filter"),a.setCaloriesBurned(),console.log(a.caloriesBurnedInTimePeriod),console.log(s),a.filterByDate(p(new Date,1),new Date),u=a.hrTimeInZone,console.log("After 1 year filter"),a.setCaloriesBurned(),console.log(a.caloriesBurnedInTimePeriod),console.log(u),a.filterByDate(p(new Date,5),new Date),c=a.hrTimeInZone,console.log("All time"),a.setCaloriesBurned(),console.log(a.caloriesBurnedInTimePeriod),console.log(c),[2]}}))}))}d(void 0,void 0,void 0,(function(){var e;return v(this,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,g()];case 1:return t.sent(),[3,3];case 2:return e=t.sent(),console.error(e),[3,3];case 3:return[2]}}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,